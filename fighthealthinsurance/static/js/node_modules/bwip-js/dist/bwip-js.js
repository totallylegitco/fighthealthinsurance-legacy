// This file is part of the bwip-js project available at:
//
// 	  http://metafloor.github.io/bwip-js
//
// Copyright (c) 2011-2023 Mark Warren
//
// This file contains code automatically generated from:
// Barcode Writer in Pure PostScript - Version 2023-02-16
// Copyright (c) 2004-2022 Terry Burton
//
// The MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
"use strict";

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        module.exports = factory();
    } else {
        root.bwipjs = factory();
	}
}(typeof self !== 'undefined' ? self : this, function () {
// exports.js

// bwipjs.toCanvas(canvas, options)
// bwipjs.toCanvas(options, canvas)
//
// Uses the built-in canvas drawing.  Identical rendering as toBuffer().
//
// `canvas` can be an HTMLCanvasElement or an ID string or unique selector string.
// `options` are a bwip-js/BWIPP options object.
//
// This function is synchronous and throws on error.
//
// Returns the HTMLCanvasElement.
function ToCanvas(opts, canvas) {
    // This code has to be duplicated with _ToCanvas() to keep the bwipp_lookup() out
    // of the latter.
	if (typeof canvas == 'string') {
		canvas = document.getElementById(canvas) || document.querySelector(canvas);
	} else if (typeof opts == 'string') {
		opts = document.getElementById(opts) || document.querySelector(opts);
	}
	if (opts instanceof HTMLCanvasElement) {
		var tmp = opts;
		opts = canvas;
		canvas = tmp;
	} else if (!(canvas instanceof HTMLCanvasElement)) {
		throw 'bwipjs: Not a canvas';
	}
    _Render(bwipp_lookup(opts.bcid), opts, DrawingCanvas(opts, canvas));
    return canvas;
}
// Entry point for the symbol-specific exports
function _ToCanvas(encoder, opts, canvas) {
	if (typeof canvas == 'string') {
		canvas = document.getElementById(canvas) || document.querySelector(canvas);
	} else if (typeof opts == 'string') {
		opts = document.getElementById(opts) || document.querySelector(opts);
	}
	if (opts instanceof HTMLCanvasElement) {
		var tmp = opts;
		opts = canvas;
		canvas = tmp;
	} else if (!(canvas instanceof HTMLCanvasElement)) {
		throw 'bwipjs: Not a canvas';
	}
    _Render(encoder, opts, DrawingCanvas(opts, canvas));
    return canvas;
}

function FixupOptions(opts) {
	var scale	= opts.scale || 2;
	var scaleX	= +opts.scaleX || scale;
	var scaleY	= +opts.scaleY || scaleX;

	// Fix up padding.
	opts.paddingleft = padding(opts.paddingleft, opts.paddingwidth, opts.padding, scaleX);
	opts.paddingright = padding(opts.paddingright, opts.paddingwidth, opts.padding, scaleX);
	opts.paddingtop = padding(opts.paddingtop, opts.paddingheight, opts.padding, scaleY);
	opts.paddingbottom = padding(opts.paddingbottom, opts.paddingheight, opts.padding, scaleY);

	// We override BWIPP's background color functionality.  If in CMYK, convert to RGB so
	// the drawing interface is consistent.
	if (/^[0-9a-fA-F]{8}$/.test(''+opts.backgroundcolor)) {
		var cmyk = opts.backgroundcolor;
		var c = parseInt(cmyk.substr(0,2), 16) / 255;
		var m = parseInt(cmyk.substr(2,2), 16) / 255;
		var y = parseInt(cmyk.substr(4,2), 16) / 255;
		var k = parseInt(cmyk.substr(6,2), 16) / 255;
		var r = Math.floor((1-c) * (1-k) * 255).toString(16);
		var g = Math.floor((1-m) * (1-k) * 255).toString(16);
		var b = Math.floor((1-y) * (1-k) * 255).toString(16);
		opts.backgroundcolor = (r.length == 1 ? '0' : '') + r +
							   (g.length == 1 ? '0' : '') + g +
							   (b.length == 1 ? '0' : '') + b;
	}

	return opts;

	function padding(a, b, c, s) {
		if (a != null) {
			return a*s;
		}
		if (b != null) {
			return b*s;
		}
		return c*s || 0;
	}
}

var BWIPJS_OPTIONS = {
	bcid:1,
	text:1,
	scale:1,
	scaleX:1,
	scaleY:1,
	rotate:1,
	padding:1,
	paddingwidth:1,
	paddingheight:1,
	paddingtop:1,
	paddingleft:1,
	paddingright:1,
	paddingbottom:1,
	backgroundcolor:1,
};

// bwipjs.render(options, drawing)
//
// Renders a barcode using the provided drawing object.
//
// This function is synchronous and throws on error.
//
// Browser and nodejs usage.
function Render(params, drawing) {
    return _Render(bwipp_lookup(params.bcid), params, drawing);
}

// Called by the public exports
function _Render(encoder, params, drawing) {
	var text = params.text;
	if (!text) {
		throw new ReferenceError('bwip-js: bar code text not specified.');
	}

	// Set the bwip-js defaults
    FixupOptions(params);
	var scale	= params.scale || 2;
	var scaleX	= +params.scaleX || scale;
	var scaleY	= +params.scaleY || scaleX;
	var rotate	= params.rotate || 'N';

	// Create a barcode writer object.  This is the interface between
	// the low-level BWIPP code, the bwip-js graphics context, and the
	// drawing interface.
	var bw = new BWIPJS(drawing);

	// Set the BWIPP options
	var opts = {};
	for (var id in params) {
		if (!BWIPJS_OPTIONS[id]) {
			opts[id] = params[id];
		}
	}

	// Fix a disconnect in the BWIPP rendering logic
	if (opts.alttext) {
		opts.includetext = true;
	}
	// We use mm rather than inches for height - except pharmacode2 height
	// which is already in mm.
	if (+opts.height && encoder != bwipp_pharmacode2) {
		opts.height = opts.height / 25.4 || 0.5;
	}
	// Likewise, width
	if (+opts.width) {
		opts.width = opts.width / 25.4 || 0;
	}

	// Scale the image
	bw.scale(scaleX, scaleY);

	// Call into the BWIPP cross-compiled code and render the image.
    bwipp_encode(bw, encoder, text, opts);
	return bw.render();		// Return whatever drawing.end() returns
}

// bwipjs.raw(options)
// bwipjs.raw(bcid, text, opts-string)
//
// Invokes the low level BWIPP code and returns the raw encoding data.
//
// This function is synchronous and throws on error.
//
// Browser and nodejs usage.
function ToRaw(bcid, text, options) {
	if (arguments.length == 1) {
		options = bcid;
		bcid = options.bcid;
		text = options.text;
	}

	// The drawing interface is just needed for the pre-init() calls.
	var bw = new BWIPJS(DrawingBuiltin({}));
	var stack = bwipp_encode(bw, bwipp_lookup(bcid), text, options, true);

	// bwip-js uses Maps to emulate PostScript dictionary objects; but Maps
	// are not a typical/expected return value.  Convert to plain-old-objects.
	var ids = { pixs:1, pixx:1, pixy:1, sbs:1, bbs:1, bhs:1, width:1, height:1 };
	for (var i = 0; i < stack.length; i++) {
		var elt = stack[i];
		if (elt instanceof Map) {
			var obj = {};
			// Could they make Maps any harder to iterate over???
			for (var keys = elt.keys(), size = elt.size, k = 0; k < size; k++) {
				var id = keys.next().value;
				if (ids[id]) {
					var val = elt.get(id);
					if (val instanceof Array) {
						// The postscript arrays have extra named properties
						// to emulate array views.  Return cleaned up arrays.
						obj[id] = val.b.slice(val.o, val.o + val.length);
					} else {
						obj[id] = val;
					}
				}
			}
			stack[i] = obj;
		} else {
			// This should never exec...
			stack.splice(i--, 1);
		}
	}
	return stack;
}
// bwip-js // Barcode Writer in Pure JavaScript
// https://github.com/metafloor/bwip-js
//
// This code was automatically generated from:
// Barcode Writer in Pure PostScript - Version 2023-02-16
//
// Copyright (c) 2011-2023 Mark Warren
// Copyright (c) 2004-2022 Terry Burton
//
// Licensed MIT. See the LICENSE file in the bwip-js root directory.
// bwip-js/barcode-hdr.js
//
// This code is injected above the cross-compiled barcode.js.

// The BWIPJS object (graphics interface)
var $$ = null;
var $j = 0; // stack pointer
var $k = []; // operand stack

// Global state defined at runtime
var $0 = {
    $error: new Map,
};

// Array ctor
//	$a()	: Build a new array up to the Infinity-marker on the stack.
//	$a(arr)	: Convert native array to a "view" of the array.
//	$a(len)	: Create a new array of length `len`
function $a(a) {
    if (!arguments.length) {
        for (var i = $j - 1; i >= 0 && $k[i] !== Infinity; i--);
        if (i < 0) {
            throw new Error('array-marker-not-found');
        }
        a = $k.splice(i + 1, $j - 1 - i);
        $j = i;
    } else if (!(a instanceof Array)) {
        a = new Array(+arguments[0]);
        for (var i = 0, l = a.length; i < l; i++) {
            a[i] = null;
        }
    }
    a.b = a; // base array
    a.o = 0; // offset into base
    return a;
}

// dict ctor
//	$d() : look for the Infinity marker on the stack
function $d() {
    // Build the dictionary in the order the keys/values were pushed so enumeration
    // occurs in the correct sequence.
    for (var mark = $j - 1; mark >= 0 && $k[mark] !== Infinity; mark -= 2) {
        if ($k[mark - 1] === Infinity) {
            throw new Error('dict-malformed-stack');
        }
    }
    if (mark < 0) {
        throw 'dict-marker-not-found';
    }
    var d = new Map;
    for (var i = mark + 1; i < $j; i += 2) {
        // Unlike javascript, postscript dict keys differentiate between
        // numbers and the string representation of a number.
        var k = $k[i]; // "key" into the dict entry
        var t = typeof k;
        if (t == 'number' || t == 'string') {
            d.set(k, $k[i + 1]);
        } else if (k instanceof Uint8Array) {
            d.set($z(k), $k[i + 1]);
        } else {
            throw 'dict-not-a-valid-key(' + k + ')';
        }
    }
    $j = mark;
    return d;
}

// string ctor
//	s(number)	: create zero-filled string of number-length
//	s(string)	: make a copy of the string
//	s(uint8[])	: make a copy of the string
//
// Returns a Uint8Array-string.
function $s(v) {
    var t = typeof v;
    if (t === 'number') {
        return new Uint8Array(v);
    }
    if (t !== 'string') {
        v = '' + v;
    }
    var s = new Uint8Array(v.length);
    for (var i = 0; i < v.length; i++) {
        s[i] = v.charCodeAt(i);
    }
    return s;
}

// ... n c roll
function $r(n, c) {
    if ($j < n) {
        throw 'roll: --stack-underflow--';
    }
    if (!c) {
        return;
    }
    if (c < 0) {
        var t = $k.splice($j - n, -c);
    } else {
        var t = $k.splice($j - n, n - c);
    }
    $k.splice.apply($k, [$j - t.length, 0].concat(t));
}

// Primarily designed to convert uint8-string to string, but will call the
// the toString() method on any value.
function $z(s) {
    if (s instanceof Uint8Array) {
        return String.fromCharCode.apply(null, s);
    }
    return '' + s;
}

// Copies source to dest and returns a view of just the copied characters
function $strcpy(dst, src) {
    if (typeof dst === 'string') {
        dst = $s(dst);
    }
    if (src instanceof Uint8Array) {
        for (var i = 0, l = src.length; i < l; i++) {
            dst[i] = src[i];
        }
    } else {
        for (var i = 0, l = src.length; i < l; i++) {
            dst[i] = src.charCodeAt(i);
        }
    }
    return src.length < dst.length ? dst.subarray(0, src.length) : dst;
}

// Copies source to dest and should (but doesn't) return a view of just the copied elements
function $arrcpy(dst, src) {
    for (var i = 0, l = src.length; i < l; i++) {
        dst[i] = src[i];
    }
    dst.length = src.length;
    return dst;
}

// cvs operator - convert a value to its string representation
//	s : string to store into
//	v : any value
function $cvs(s, v) {
    var t = typeof v;
    if (t == 'number' || t == 'boolean' || v === null) {
        v = '' + v;
    } else if (t !== 'string') {
        v = '--nostringval--';
    }
    for (var i = 0, l = v.length; i < l; i++) {
        s[i] = v.charCodeAt(i);
    }
    $k[$j++] = i < s.length ? s.subarray(0, i) : s;
}
// cvi operator - converts a numeric string value to integer.
function $cvi(s) {
    if (s instanceof Uint8Array) {
        // nul-chars on the end of a string are ignored by postscript but cause javascript
        // to return a zero result.
        return String.fromCharCode.apply(null, s).replace(/\0+$/, '') | 0;
    }
    return ('' + s) | 0;
}

// cvrs operator - convert a number to a radix string
//	s : string to store into
//	n : number
//	r : radix
function $cvrs(s, n, r) {
    return $strcpy(s, (~~n).toString(r).toUpperCase());
}

// cvx - convert to executable.
// This is only used by BWIPP to convert <XX> string literals.
function $cvx(s) {
    s = $z(s)
    var m = /^\s*<((?:[0-9a-fA-F]{2})+)>\s*$/.exec(s);
    if (!m) {
        throw 'cvx: not a <HH> hex string literal';
    }
    var h = m[1];
    var l = h.length >> 1;
    var u = new Uint8Array(l);
    for (var i = 0, j = 0; i < l; i++) {
        var c0 = h.charCodeAt(j++);
        var c1 = h.charCodeAt(j++);
        u[i] = ((c0 < 58 ? c0 - 48 : (c0 & 15) + 9) << 4) +
            (c1 < 58 ? c1 - 48 : (c1 & 15) + 9);
    }
    return u;
}

// get operator
//	s : source
//	k : key
function $get(s, k) {
    if (s instanceof Uint8Array) {
        return s[k];
    }
    if (typeof s === 'string') {
        return s.charCodeAt(k);
    }
    if (s instanceof Array) {
        return s.b[s.o + k];
    }
    if (k instanceof Uint8Array) {
        return s.get($z(k));
    }
    return s.get(k);
}

// put operator
//	d : dest
//	k : key
//	v : value
function $put(d, k, v) {
    if (d instanceof Uint8Array) {
        d[k] = v;
    } else if (d instanceof Array) {
        d.b[d.o + k] = v;
    } else if (typeof d == 'object') {
        if (k instanceof Uint8Array) {
            d.set($z(k), v);
        } else {
            d.set(k, v);
        }
    } else {
        throw 'put-not-writable-' + (typeof d);
    }
}

// getinterval operator
//	s : src
//	o : offset
//	l : length
function $geti(s, o, l) {
    if (s instanceof Uint8Array) {
        return s.subarray(o, o + l);
    }
    if (s instanceof Array) {
        var a = new Array(l);
        a.b = s.b; // base array
        a.o = s.o + o; // offset into base
        return a;
    }
    // Must be a string
    return s.substr(o, l);
}

// putinterval operator
//	d : dst
//	o : offset
//	s : src
function $puti(d, o, s) {
    if (d instanceof Uint8Array) {
        if (typeof s == 'string') {
            for (var i = 0, l = s.length; i < l; i++) {
                d[o + i] = s.charCodeAt(i);
            }
        } else {
            // When both d and s are the same, we want to copy
            // backwards, which works for the general case as well.
            for (var i = s.length - 1; i >= 0; i--) {
                d[o + i] = s[i];
            }
        }
    } else if (d instanceof Array) {
        // Operate on the base arrays
        var darr = d.b;
        var doff = o + d.o;
        var sarr = s.b;
        var soff = s.o;

        for (var i = 0, l = s.length; i < l; i++) {
            darr[doff + i] = sarr[soff + i];
        }
    } else {
        throw 'putinterval-not-writable-' + (typeof d);
    }
}

// type operator
function $type(v) {
    // null can be mis-typed - get it out of the way
    if (v == null) {
        return 'nulltype';
    }
    var t = typeof v;
    if (t == 'number') {
        return v % 1 ? 'realtype' : 'integertype';
    }
    if (t == 'boolean') {
        return 'booleantype';
    }
    if (t == 'string' || v instanceof Uint8Array) {
        return 'stringtype';
    }
    if (t == 'function') {
        return 'operatortype';
    }
    if (v instanceof Array) {
        return 'arraytype';
    }
    return 'dicttype';
    // filetype
    // fonttype
    // gstatetype
    // marktype	(v === Infinity)
    // nametype
    // savetype
}

// anchorsearch operator
//		string seek anchorsearch suffix seek true %if-found
//						         string false	  %if-not-found
function $anchorsearch(str, seek) {
    if (!(str instanceof Uint8Array)) {
        str = $s(str);
    }
    var i = 0,
        ls = str.length,
        lk = seek.length;

    // Optimize for single characters.
    if (lk == 1) {
        var cd = seek instanceof Uint8Array ? seek[0] : seek.charCodeAt(0);
        i = str[0] == cd ? 1 : ls;
    } else if (seek.length <= ls) {
        // Slow path, 
        if (!(seek instanceof Uint8Array)) {
            seek = $s(seek);
        }
        for (; i < lk && str[i] == seek[i]; i++);
    }
    if (i == lk) {
        $k[$j++] = str.subarray(lk);
        $k[$j++] = str.subarray(0, lk);
        $k[$j++] = true;
    } else {
        $k[$j++] = str;
        $k[$j++] = false;
    }
}

// search operator
//		string seek search suffix match prefix true %if-found
//						   string false				%if-not-found
function $search(str, seek) {
    if (!(str instanceof Uint8Array)) {
        str = $s(str);
    }
    var ls = str.length;

    // Virtually all uses of search in BWIPP are for single-characters.
    // Optimize for that case.
    if (seek.length == 1) {
        var lk = 1;
        var cd = seek instanceof Uint8Array ? seek[0] : seek.charCodeAt(0);
        for (var i = 0; i < ls && str[i] != cd; i++);
    } else {
        // Slow path, 
        if (!(seek instanceof Uint8Array)) {
            seek = $s(seek);
        }
        var lk = seek.length;
        var cd = seek[0];
        for (var i = 0; i < ls && str[i] != cd; i++);
        while (i < ls) {
            for (var j = 1; j < lk && str[i + j] === seek[j]; j++);
            if (j === lk) {
                break;
            }
            for (i++; i < ls && str[i] != cd; i++);
        }
    }
    if (i < ls) {
        $k[$j++] = str.subarray(i + lk);
        $k[$j++] = str.subarray(i, i + lk);
        $k[$j++] = str.subarray(0, i);
        $k[$j++] = true;
    } else {
        $k[$j++] = str;
        $k[$j++] = false;
    }
}

// The callback is omitted when forall is being used just to push onto the
// stack.  The callback normally returns undefined.  A return of true means break.
function $forall(o, cb) {
    if (o instanceof Uint8Array) {
        for (var i = 0, l = o.length; i < l; i++) {
            $k[$j++] = o[i];
            if (cb && cb()) break;
        }
    } else if (o instanceof Array) {
        // The array may be a view.
        for (var a = o.b, i = o.o, l = o.o + o.length; i < l; i++) {
            $k[$j++] = a[i];
            if (cb && cb()) break;
        }
    } else if (typeof o === 'string') {
        for (var i = 0, l = o.length; i < l; i++) {
            $k[$j++] = o.charCodeAt(i);
            if (cb && cb()) break;
        }
    } else if (o instanceof Map) {
        for (var keys = o.keys(), i = 0, l = o.size; i < l; i++) {
            var id = keys.next().value;
            $k[$j++] = id;
            $k[$j++] = o.get(id);
            if (cb && cb()) break;
        }
    } else {
        for (var id in o) {
            $k[$j++] = id;
            $k[$j++] = o[id];
            if (cb && cb()) break;
        }
    }
}

function $cleartomark() {
    while ($j > 0 && $k[--$j] !== Infinity);
}

function $counttomark() {
    for (var i = $j - 1; i >= 0 && $k[i] !== Infinity; i--);
    return $j - i - 1;
}

function $aload(a) {
    for (var i = 0, l = a.length, b = a.b, o = a.o; i < l; i++) {
        $k[$j++] = b[o + i];
    }
    // This push has been optimized out.  See $.aload() in psc.js.
    //$k[$j++] = a;
}

function $astore(a) {
    for (var i = 0, l = a.length, b = a.b, o = a.o + l - 1; i < l; i++) {
        b[o - i] = $k[--$j];
    }
    $k[$j++] = a;
}

function $eq(a, b) {
    if (typeof a === 'string' && typeof b === 'string') {
        return a == b;
    }
    if (a instanceof Uint8Array && b instanceof Uint8Array) {
        if (a.length != b.length) {
            return false;
        }
        for (var i = 0, l = a.length; i < l; i++) {
            if (a[i] != b[i]) {
                return false;
            }
        }
        return true;
    }
    if (a instanceof Uint8Array && typeof b === 'string' ||
        b instanceof Uint8Array && typeof a === 'string') {
        if (a instanceof Uint8Array) {
            a = $z(a);
        } else {
            b = $z(b);
        }
        return a == b;
    }
    return a == b;
}

function $ne(a, b) {
    return !$eq(a, b);
}

function $lt(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a < b;
}

function $le(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a <= b;
}

function $gt(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a > b;
}

function $ge(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a >= b;
}

function $an(a, b) { // and
    return (typeof a === 'boolean') ? a && b : a & b;
}

function $or(a, b) { // or
    return (typeof a === 'boolean') ? a || b : a | b;
}

function $xo(a, b) { // xor
    return (typeof a === 'boolean') ? !a && b || a && !b : a ^ b;
}

function $nt(a) {
    return typeof a == 'boolean' ? !a : ~a;
}
// emulate single-precision floating-point (pseudo-polyfill for Math.fround)
var $f = (function(fa) {
    return function(v) {
        return Number.isInteger(v) ? v : (fa[0] = v, fa[0]);
    };
})(new Float32Array(1));

// This is a replacement for the BWIPP processoptions function.
// We cannot use the BWIPP version due to two reasons:
// - legacy code allows strings to be numbers and numbers to be strings
// - in javascript, there is no way to tell the difference between a real
//   number that is an integer, and an actual integer.
//
// options currentdict processoptions exec -> options
function bwipp_processoptions() {
    var dict = $k[--$j];
    var opts = $k[$j - 1];
    var map = opts instanceof Map;
    for (var id in dict) {
        var val;
        if (map) {
            if (!opts.has(id)) {
                continue;
            }
            val = opts.get(id);
        } else {
            if (!opts.hasOwnProperty(id)) {
                continue;
            }
            val = opts[id];
        }
        var def = dict[id];
        var typ = typeof def;

        // null is a placeholder for realtype
        if (def == null || typ == 'number') {
            // This allows for numeric strings
            if (!isFinite(+val)) {
                throw new ReferenceError('/bwipp.invalidOptionType: ' + id +
                    ': not a realtype: ' + val);
            }
            if (typeof val == 'string') {
                val = +val;
                map ? opts.set(id, val) : (opts[id] = val);
            }
        } else if (typ == 'boolean') {
            if (val !== true && val !== false) {
                // In keeping with the ethos of javascript, allow a more relaxed
                // interpretation of boolean.
                if (val == null || (val | 0) === val) {
                    val = !!val;
                } else if (val == 'true') {
                    val = true;
                } else if (val == 'false') {
                    val = false;
                } else {
                    throw new ReferenceError('/bwipp.invalidOptionType: ' + id +
                        ': not a booleantype: ' + val);
                }
                map ? opts.set(id, val) : (opts[id] = val);
            }
        } else if (typ == 'string' || def instanceof Uint8Array) {
            // This allows numbers to be strings
            if (typeof val == 'number') {
                val = '' + val;
                map ? opts.set(id, val) : (opts[id] = val);
            } else if (typeof val != 'string' && !(val instanceof Uint8Array)) {
                throw new ReferenceError('/bwipp.invalidOptionType: ' + id +
                    ': not a stringtype: ' + val);
            }
        }
        // Set the option into the dictionary
        dict[id] = val;
    }
}

// DEBUG-BEGIN
function $stack() {
    console.log('[[[');
    for (var i = $j - 1; i >= 0; i--) {
        console.log(tostring($k[i]));
    }
    console.log(']]]');

    function tostring(v) {
        // null can be mis-typed - get it out of the way
        if (v === null) {
            return 'null';
        } else if (v === undefined) {
            return '<undefined>';
        } else if (v instanceof Array) {
            var s = '<array,' + v.o + ',' + v.length + '>[';
            for (var j = v.o, a = v.b, l = v.length + v.o; j < l; j++) {
                s += (j == v.o ? '' : ',') + tostring(a[j]);
            }
            return s + ']';
        } else if (v instanceof Uint8Array) {
            return '(' + $z[v] + ')';
        } else if (v instanceof Map) {
            var s = '<<';
            for (var elt of v) {
                s += (s.length == 2 ? '' : ',') + elt[0] + ':' + tostring(elt[1]);
            }
            return s + '>>';
        } else if (typeof v === 'object') {
            var s = '<<';
            for (var id in v) {
                s += (s.length == 2 ? '' : ',') + id + ':' + tostring(v[id]);
            }
            return s + '>>';
        } else if (typeof v === 'string') {
            return '"' + v + '"';
        } else {
            return '' + v;
        }
    }
}
// DEBUG-END
function bwipp_raiseerror() {
    $put($0.$error, 'errorinfo', $k[--$j]); //#115
    $put($0.$error, 'errorname', $k[--$j]); //#116
    $put($0.$error, 'command', null); //#117
    $put($0.$error, 'newerror', true); //#118
    throw new Error($z($0.$error.get("errorname")) + ": " + $z($0.$error.get("errorinfo"))); //#119
}

function bwipp_parseinput() {
    var $1 = Object.create(bwipp_parseinput.$ctx || (bwipp_parseinput.$ctx = {})); //#200
    $1.fncvals = $k[--$j]; //#204
    $1.barcode = $k[--$j]; //#205
    var _2 = 'parse'; //#207
    $1[_2] = $get($1.fncvals, _2); //#207
    delete $1.fncvals[_2]; //#207
    var _6 = 'parsefnc'; //#208
    $1[_6] = $get($1.fncvals, _6); //#208
    delete $1.fncvals[_6]; //#208
    var _A = 'parseonly'; //#209
    var _C = $get($1.fncvals, _A) !== undefined; //#209
    $1[_A] = _C; //#209
    delete $1.fncvals[_A]; //#209
    var _E = 'eci'; //#210
    var _G = $get($1.fncvals, _E) !== undefined; //#210
    $1[_E] = _G; //#210
    delete $1.fncvals[_E]; //#210
    if (!bwipp_parseinput.$ctx._225) { //#225
        (function() { //#225
            var $ctx = Object.create($1); //#225
            $k[$j++] = Infinity; //#223
            var _I = $a(['NUL', 'SOH', 'STX', 'ETX', 'EOT', 'ENQ', 'ACK', 'BEL', 'BS', 'TAB', 'LF', 'VT', 'FF', 'CR', "", "", 'DLE', 'DC1', 'DC2', 'DC3', 'DC4', 'NAK', 'SYN', 'ETB', 'CAN', 'EM', 'SUB', 'ESC', 'FS', 'GS', 'RS', 'US']); //#219
            $k[$j++] = 0; //#223
            for (var _J = 0, _K = _I.length; _J < _K; _J++) { //#223
                var _M = $k[--$j]; //#222
                $k[$j++] = $get(_I, _J); //#222
                $k[$j++] = _M; //#222
                $k[$j++] = $f(_M + 1); //#222
            } //#222
            $j--; //#223
            $ctx.ctrl = $d(); //#224
            for (var _O in $ctx) {
                $ctx.hasOwnProperty(_O) && (bwipp_parseinput.$ctx[_O] = $ctx[_O]);
            } //#224
            bwipp_parseinput.$ctx._225 = 1; //#224
        })(); //#224
    } //#224
    $1.msg = $a($1.barcode.length); //#227
    $1.j = 0; //#228
    $k[$j++] = $1.barcode; //#347
    for (;;) { //#347
        $search($k[--$j], "^"); //#230
        var _T = $k[--$j]; //#230
        var _U = $k[--$j]; //#230
        $k[$j++] = _T; //#233
        $k[$j++] = _U.length; //#233
        $k[$j++] = $1.msg; //#233
        $k[$j++] = $1.j; //#233
        $k[$j++] = _U; //#233
        $k[$j++] = Infinity; //#233
        var _X = $k[--$j]; //#233
        var _Y = $k[--$j]; //#233
        $k[$j++] = _X; //#233
        $forall(_Y); //#233
        var _Z = $a(); //#233
        var _a = $k[--$j]; //#233
        $puti($k[--$j], _a, _Z); //#233
        $1.j = $f($k[--$j] + $1.j); //#234
        if ($k[--$j]) { //#345
            $j--; //#236
            for (var _f = 0, _g = 1; _f < _g; _f++) { //#343
                if ($an($nt($1.parse), $nt($1.parsefnc))) { //#243
                    $put($1.msg, $1.j, 94); //#240
                    $1.j = $f($1.j + 1); //#241
                    break; //#242
                } //#242
                $put($1.msg, $1.j, 94); //#246
                $1.j = $f($1.j + 1); //#247
                if ($1.parse) { //#290
                    var _q = $k[--$j]; //#251
                    $k[$j++] = _q; //#262
                    if (_q.length >= 3) { //#262
                        var _r = $k[--$j]; //#252
                        var _s = $geti(_r, 0, 3); //#252
                        var _t = $1.ctrl; //#252
                        var _u = $get(_t, _s) !== undefined; //#253
                        $k[$j++] = _r; //#261
                        $k[$j++] = _t; //#261
                        $k[$j++] = _s; //#261
                        if (_u) { //#260
                            $1.j = $f($1.j - 1); //#254
                            var _w = $k[--$j]; //#255
                            $put($1.msg, $1.j, $get($k[--$j], _w)); //#255
                            $1.j = $f($1.j + 1); //#256
                            var _12 = $k[--$j]; //#257
                            $k[$j++] = $geti(_12, 3, _12.length - 3); //#258
                            break; //#258
                        } else { //#260
                            $j -= 2; //#260
                        } //#260
                    } //#260
                    var _14 = $k[--$j]; //#263
                    $k[$j++] = _14; //#274
                    if (_14.length >= 2) { //#274
                        var _15 = $k[--$j]; //#264
                        var _16 = $geti(_15, 0, 2); //#264
                        var _17 = $1.ctrl; //#264
                        var _18 = $get(_17, _16) !== undefined; //#265
                        $k[$j++] = _15; //#273
                        $k[$j++] = _17; //#273
                        $k[$j++] = _16; //#273
                        if (_18) { //#272
                            $1.j = $f($1.j - 1); //#266
                            var _1A = $k[--$j]; //#267
                            $put($1.msg, $1.j, $get($k[--$j], _1A)); //#267
                            $1.j = $f($1.j + 1); //#268
                            var _1G = $k[--$j]; //#269
                            $k[$j++] = $geti(_1G, 2, _1G.length - 2); //#270
                            break; //#270
                        } else { //#272
                            $j -= 2; //#272
                        } //#272
                    } //#272
                    var _1I = $k[--$j]; //#275
                    $k[$j++] = _1I; //#289
                    if (_1I.length >= 3) { //#289
                        var _1J = $k[--$j]; //#276
                        var _1K = $geti(_1J, 0, 3); //#276
                        $k[$j++] = _1J; //#278
                        $k[$j++] = true; //#278
                        for (var _1L = 0, _1M = _1K.length; _1L < _1M; _1L++) { //#278
                            var _1N = $get(_1K, _1L); //#278
                            if ((_1N < 48) || (_1N > 57)) { //#277
                                $j--; //#277
                                $k[$j++] = false; //#277
                            } //#277
                        } //#277
                        if ($k[--$j]) { //#288
                            var _1P = $k[--$j]; //#280
                            var _1R = $cvi($geti(_1P, 0, 3)); //#280
                            $k[$j++] = _1P; //#283
                            $k[$j++] = _1R; //#283
                            if (_1R > 255) { //#283
                                $j -= 2; //#281
                                $k[$j++] = 'bwipp.invalidOrdinal#282'; //#282
                                $k[$j++] = "Ordinal must be 000 to 255"; //#282
                                bwipp_raiseerror(); //#282
                            } //#282
                            $1.j = $f($1.j - 1); //#284
                            $put($1.msg, $1.j, $k[--$j]); //#285
                            $1.j = $f($1.j + 1); //#286
                            var _1X = $k[--$j]; //#287
                            $k[$j++] = $geti(_1X, 3, _1X.length - 3); //#287
                        } //#287
                    } //#287
                } //#287
                if (($or($1.parseonly, $nt($1.parsefnc))) || ($get($1.msg, $f($1.j - 1)) != 94)) { //#295
                    break; //#295
                } //#295
                $1.j = $f($1.j - 1); //#298
                var _1f = $k[--$j]; //#299
                $k[$j++] = _1f; //#302
                if (_1f.length < 3) { //#302
                    $j--; //#300
                    $k[$j++] = 'bwipp.truncatedFNC#301'; //#301
                    $k[$j++] = "Function character truncated"; //#301
                    bwipp_raiseerror(); //#301
                } //#301
                var _1g = $k[--$j]; //#303
                $k[$j++] = _1g; //#308
                if ($get(_1g, 0) == 94) { //#308
                    $put($1.msg, $1.j, 94); //#304
                    $1.j = $f($1.j + 1); //#305
                    var _1l = $k[--$j]; //#306
                    $k[$j++] = $geti(_1l, 1, _1l.length - 1); //#307
                    break; //#307
                } //#307
                var _1n = $k[--$j]; //#309
                $k[$j++] = _1n; //#326
                if ($eq($geti(_1n, 0, 3), "ECI") && $1.eci) { //#326
                    var _1q = $k[--$j]; //#310
                    $k[$j++] = _1q; //#313
                    if (_1q.length < 9) { //#313
                        $j--; //#311
                        $k[$j++] = 'bwipp.truncatedECI#312'; //#312
                        $k[$j++] = "ECI truncated"; //#312
                        bwipp_raiseerror(); //#312
                    } //#312
                    var _1r = $k[--$j]; //#314
                    var _1s = $geti(_1r, 3, 6); //#314
                    $k[$j++] = _1r; //#320
                    $k[$j++] = _1s; //#320
                    for (var _1t = 0, _1u = _1s.length; _1t < _1u; _1t++) { //#320
                        var _1v = $get(_1s, _1t); //#320
                        if ((_1v < 48) || (_1v > 57)) { //#319
                            $j -= 2; //#317
                            $k[$j++] = 'bwipp.invalidECI#318'; //#318
                            $k[$j++] = "ECI must be 000000 to 999999"; //#318
                            bwipp_raiseerror(); //#318
                        } //#318
                    } //#318
                    var _1w = $k[--$j]; //#321
                    $k[$j++] = 0; //#321
                    $forall(_1w, function() { //#321
                        var _1x = $k[--$j]; //#321
                        var _1y = $k[--$j]; //#321
                        $k[$j++] = ($f(_1y - $f(_1x - 48))) * 10; //#321
                    }); //#321
                    $put($1.msg, $1.j, (~~($k[--$j] / 10)) - 1000000); //#322
                    $1.j = $f($1.j + 1); //#323
                    var _23 = $k[--$j]; //#324
                    $k[$j++] = $geti(_23, 9, _23.length - 9); //#325
                    break; //#325
                } //#325
                var _25 = $k[--$j]; //#327
                $k[$j++] = _25; //#330
                if (_25.length < 4) { //#330
                    $j--; //#328
                    $k[$j++] = 'bwipp.truncatedFNC#329'; //#329
                    $k[$j++] = "Function character truncated"; //#329
                    bwipp_raiseerror(); //#329
                } //#329
                var _26 = $k[--$j]; //#331
                var _27 = $geti(_26, 0, 4); //#331
                var _29 = $get($1.fncvals, _27) !== undefined; //#331
                $k[$j++] = _26; //#336
                $k[$j++] = _27; //#336
                if (!_29) { //#336
                    var _2A = $k[--$j]; //#332
                    var _2B = $s(_2A.length + 28); //#332
                    $puti(_2B, 28, _2A); //#332
                    $puti(_2B, 0, "Unknown function character: "); //#333
                    var _2C = $k[--$j]; //#334
                    $k[$j++] = _2B; //#334
                    $k[$j++] = _2C; //#334
                    $j--; //#334
                    var _2D = $k[--$j]; //#335
                    $k[$j++] = 'bwipp.unknownFNC#335'; //#335
                    $k[$j++] = _2D; //#335
                    bwipp_raiseerror(); //#335
                } //#335
                $put($1.msg, $1.j, $get($1.fncvals, $k[--$j])); //#338
                $1.j = $f($1.j + 1); //#339
                var _2K = $k[--$j]; //#340
                $k[$j++] = $geti(_2K, 4, _2K.length - 4); //#341
                break; //#341
            } //#341
        } else { //#345
            break; //#345
        } //#345
    } //#345
    if ($nt($1.parseonly)) { //#353
        $k[$j++] = $geti($1.msg, 0, $1.j); //#350
    } else { //#353
        $k[$j++] = $s($1.j); //#353
        for (var _2U = 0, _2T = $f($1.j - 1); _2U <= _2T; _2U += 1) { //#353
            var _2V = $k[--$j]; //#353
            $put(_2V, _2U, $get($1.msg, _2U)); //#353
            $k[$j++] = _2V; //#353
        } //#353
    } //#353
}

function bwipp_gs1process() {
    var $1 = Object.create(bwipp_gs1process.$ctx || (bwipp_gs1process.$ctx = {})); //#383
    if (!bwipp_gs1process.$ctx._2270) { //#2270
        (function() { //#2270
            var $ctx = Object.create($1); //#2270
            var _1 = new Map([
                ["cset", 'N'],
                ["min", 18],
                ["max", 18],
                ["opt", false],
                ["linters", $a(['lintcsum', 'lintkey'])]
            ]); //#393
            var _2 = $a([_1]); //#393
            var _3 = $a([]); //#395
            var _4 = new Map([
                ["parts", _2],
                ["dlpkey", _3]
            ]); //#395
            var _5 = $a(['lintcsum', 'lintkey']); //#402
            var _6 = new Map([
                ["cset", 'N'],
                ["min", 14],
                ["max", 14],
                ["opt", false],
                ["linters", _5]
            ]); //#402
            var _7 = $a([_6]); //#402
            var _8 = $a(["02", "255", "37"]); //#404
            var _9 = $a(["22", "10", "21"]); //#405
            var _A = $a(["235"]); //#405
            var _B = $a([_9, _A]); //#405
            var _C = new Map([
                ["parts", _7],
                ["ex", _8],
                ["dlpkey", _B]
            ]); //#405
            var _D = $a(['lintcsum', 'lintkey']); //#412
            var _E = new Map([
                ["cset", 'N'],
                ["min", 14],
                ["max", 14],
                ["opt", false],
                ["linters", _D]
            ]); //#412
            var _F = $a([_E]); //#412
            var _G = $a(["37"]); //#414
            var _H = $a([_G]); //#414
            var _I = new Map([
                ["parts", _F],
                ["req", _H]
            ]); //#414
            var _K = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 20],
                ["opt", false],
                ["linters", $a([])]
            ]); //#421
            var _O = new Map([
                ["parts", $a([_K])],
                ["req", $a([$a(["01", "02", "8006", "8026"])])]
            ]); //#423
            var _Q = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a(['lintyymmd0'])]
            ]); //#430
            var _U = new Map([
                ["parts", $a([_Q])],
                ["req", $a([$a(["01", "02", "8006", "8026"])])]
            ]); //#432
            var _W = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a(['lintyymmd0'])]
            ]); //#439
            var _a = new Map([
                ["parts", $a([_W])],
                ["req", $a([$a(["8020"])])]
            ]); //#441
            var _c = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a(['lintyymmd0'])]
            ]); //#448
            var _g = new Map([
                ["parts", $a([_c])],
                ["req", $a([$a(["01", "02", "8006", "8026"])])]
            ]); //#450
            var _i = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a(['lintyymmd0'])]
            ]); //#459
            var _m = new Map([
                ["parts", $a([_i])],
                ["req", $a([$a(["01", "02", "255", "8006", "8026"])])]
            ]); //#461
            var _o = new Map([
                ["cset", 'N'],
                ["min", 2],
                ["max", 2],
                ["opt", false],
                ["linters", $a([])]
            ]); //#468
            var _s = new Map([
                ["parts", $a([_o])],
                ["req", $a([$a(["01", "02", "8006", "8026"])])]
            ]); //#470
            var _u = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 20],
                ["opt", false],
                ["linters", $a([])]
            ]); //#477
            var _z = new Map([
                ["parts", $a([_u])],
                ["ex", $a(["235"])],
                ["req", $a([$a(["01", "8006"])])]
            ]); //#480
            var _11 = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 20],
                ["opt", false],
                ["linters", $a([])]
            ]); //#487
            var _15 = new Map([
                ["parts", $a([_11])],
                ["req", $a([$a(["01"])])]
            ]); //#489
            var _17 = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 28],
                ["opt", false],
                ["linters", $a([])]
            ]); //#496
            var _1B = new Map([
                ["parts", $a([_17])],
                ["req", $a([$a(["01"])])]
            ]); //#498
            var _1D = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 30],
                ["opt", false],
                ["linters", $a([])]
            ]); //#505
            var _1H = new Map([
                ["parts", $a([_1D])],
                ["req", $a([$a(["01", "02", "8006", "8026"])])]
            ]); //#507
            var _1J = new Map([
                ["cset", 'N'],
                ["min", 1],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#515
            var _1N = new Map([
                ["parts", $a([_1J])],
                ["req", $a([$a(["01", "02", "8006", "8026"])])]
            ]); //#517
            var _1P = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 20],
                ["opt", false],
                ["linters", $a([])]
            ]); //#524
            var _1T = new Map([
                ["parts", $a([_1P])],
                ["req", $a([$a(["01"])])]
            ]); //#526
            var _1V = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 30],
                ["opt", false],
                ["linters", $a([])]
            ]); //#533
            var _1a = new Map([
                ["parts", $a([_1V])],
                ["req", $a([$a(["01", "8006"]), $a(["21"])])]
            ]); //#535
            var _1c = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 30],
                ["opt", false],
                ["linters", $a([])]
            ]); //#542
            var _1g = new Map([
                ["parts", $a([_1c])],
                ["req", $a([$a(["01", "8006"])])]
            ]); //#544
            var _1i = new Map([
                ["cset", 'N'],
                ["min", 13],
                ["max", 13],
                ["opt", false],
                ["linters", $a(['lintcsum', 'lintkey'])]
            ]); //#551
            var _1k = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 17],
                ["opt", true],
                ["linters", $a([])]
            ]); //#552
            var _1n = new Map([
                ["parts", $a([_1i, _1k])],
                ["dlpkey", $a([])]
            ]); //#554
            var _1p = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 20],
                ["opt", false],
                ["linters", $a([])]
            ]); //#561
            var _1t = new Map([
                ["parts", $a([_1p])],
                ["req", $a([$a(["414"])])]
            ]); //#563
            var _1v = new Map([
                ["cset", 'N'],
                ["min", 13],
                ["max", 13],
                ["opt", false],
                ["linters", $a(['lintcsum', 'lintkey'])]
            ]); //#570
            var _1x = new Map([
                ["cset", 'N'],
                ["min", 1],
                ["max", 12],
                ["opt", true],
                ["linters", $a([])]
            ]); //#571
            var _21 = new Map([
                ["parts", $a([_1v, _1x])],
                ["ex", $a(["01", "02", "415", "8006", "8020", "8026"])],
                ["dlpkey", $a([])]
            ]); //#574
            var _22 = $a([]); //#581
            var _23 = new Map([
                ["cset", 'N'],
                ["min", 1],
                ["max", 8],
                ["opt", false],
                ["linters", _22]
            ]); //#581
            var _27 = new Map([
                ["parts", $a([_23])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#583
            var _29 = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#590
            var _2E = new Map([
                ["parts", $a([_29])],
                ["ex", $a(["310n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#593
            var _2G = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#605
            var _2L = new Map([
                ["parts", $a([_2G])],
                ["ex", $a(["311n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#608
            var _2N = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#620
            var _2S = new Map([
                ["parts", $a([_2N])],
                ["ex", $a(["312n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#623
            var _2U = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#635
            var _2Z = new Map([
                ["parts", $a([_2U])],
                ["ex", $a(["313n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#638
            var _2b = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#650
            var _2g = new Map([
                ["parts", $a([_2b])],
                ["ex", $a(["314n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#653
            var _2i = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#665
            var _2n = new Map([
                ["parts", $a([_2i])],
                ["ex", $a(["315n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#668
            var _2p = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#680
            var _2u = new Map([
                ["parts", $a([_2p])],
                ["ex", $a(["316n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#683
            var _2w = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#695
            var _31 = new Map([
                ["parts", $a([_2w])],
                ["ex", $a(["320n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#698
            var _33 = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#710
            var _38 = new Map([
                ["parts", $a([_33])],
                ["ex", $a(["321n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#713
            var _3A = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#725
            var _3F = new Map([
                ["parts", $a([_3A])],
                ["ex", $a(["322n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#728
            var _3H = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#740
            var _3M = new Map([
                ["parts", $a([_3H])],
                ["ex", $a(["323n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#743
            var _3O = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#755
            var _3T = new Map([
                ["parts", $a([_3O])],
                ["ex", $a(["324n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#758
            var _3V = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#770
            var _3a = new Map([
                ["parts", $a([_3V])],
                ["ex", $a(["325n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#773
            var _3c = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#785
            var _3h = new Map([
                ["parts", $a([_3c])],
                ["ex", $a(["326n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#788
            var _3j = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#800
            var _3o = new Map([
                ["parts", $a([_3j])],
                ["ex", $a(["327n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#803
            var _3q = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#815
            var _3v = new Map([
                ["parts", $a([_3q])],
                ["ex", $a(["328n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#818
            var _3x = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#830
            var _42 = new Map([
                ["parts", $a([_3x])],
                ["ex", $a(["329n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#833
            var _44 = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#845
            var _49 = new Map([
                ["parts", $a([_44])],
                ["ex", $a(["330n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#848
            var _4B = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#860
            var _4G = new Map([
                ["parts", $a([_4B])],
                ["ex", $a(["331n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#863
            var _4I = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#875
            var _4N = new Map([
                ["parts", $a([_4I])],
                ["ex", $a(["332n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#878
            var _4P = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#890
            var _4U = new Map([
                ["parts", $a([_4P])],
                ["ex", $a(["333n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#893
            var _4W = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#905
            var _4b = new Map([
                ["parts", $a([_4W])],
                ["ex", $a(["334n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#908
            var _4d = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#920
            var _4i = new Map([
                ["parts", $a([_4d])],
                ["ex", $a(["335n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#923
            var _4k = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#935
            var _4p = new Map([
                ["parts", $a([_4k])],
                ["ex", $a(["336n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#938
            var _4r = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#950
            var _4w = new Map([
                ["parts", $a([_4r])],
                ["ex", $a(["337n"])],
                ["req", $a([$a(["01"])])]
            ]); //#953
            var _4y = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#965
            var _53 = new Map([
                ["parts", $a([_4y])],
                ["ex", $a(["340n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#968
            var _55 = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#980
            var _5A = new Map([
                ["parts", $a([_55])],
                ["ex", $a(["341n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#983
            var _5C = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#995
            var _5H = new Map([
                ["parts", $a([_5C])],
                ["ex", $a(["342n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#998
            var _5J = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1010
            var _5O = new Map([
                ["parts", $a([_5J])],
                ["ex", $a(["343n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#1013
            var _5Q = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1025
            var _5V = new Map([
                ["parts", $a([_5Q])],
                ["ex", $a(["344n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#1028
            var _5X = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1040
            var _5c = new Map([
                ["parts", $a([_5X])],
                ["ex", $a(["345n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#1043
            var _5e = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1055
            var _5j = new Map([
                ["parts", $a([_5e])],
                ["ex", $a(["346n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#1058
            var _5l = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1070
            var _5q = new Map([
                ["parts", $a([_5l])],
                ["ex", $a(["347n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#1073
            var _5s = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1085
            var _5x = new Map([
                ["parts", $a([_5s])],
                ["ex", $a(["348n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#1088
            var _5z = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1100
            var _64 = new Map([
                ["parts", $a([_5z])],
                ["ex", $a(["349n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#1103
            var _66 = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1115
            var _6B = new Map([
                ["parts", $a([_66])],
                ["ex", $a(["350n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1118
            var _6D = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1130
            var _6I = new Map([
                ["parts", $a([_6D])],
                ["ex", $a(["351n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1133
            var _6K = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1145
            var _6P = new Map([
                ["parts", $a([_6K])],
                ["ex", $a(["352n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1148
            var _6R = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1160
            var _6W = new Map([
                ["parts", $a([_6R])],
                ["ex", $a(["353n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#1163
            var _6Y = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1175
            var _6d = new Map([
                ["parts", $a([_6Y])],
                ["ex", $a(["354n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#1178
            var _6f = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1190
            var _6k = new Map([
                ["parts", $a([_6f])],
                ["ex", $a(["355n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#1193
            var _6m = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1205
            var _6r = new Map([
                ["parts", $a([_6m])],
                ["ex", $a(["356n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1208
            var _6t = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1220
            var _6y = new Map([
                ["parts", $a([_6t])],
                ["ex", $a(["357n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1223
            var _70 = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1235
            var _75 = new Map([
                ["parts", $a([_70])],
                ["ex", $a(["360n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1238
            var _77 = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1250
            var _7C = new Map([
                ["parts", $a([_77])],
                ["ex", $a(["361n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1253
            var _7E = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1265
            var _7J = new Map([
                ["parts", $a([_7E])],
                ["ex", $a(["362n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#1268
            var _7L = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1280
            var _7Q = new Map([
                ["parts", $a([_7L])],
                ["ex", $a(["363n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#1283
            var _7S = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1295
            var _7X = new Map([
                ["parts", $a([_7S])],
                ["ex", $a(["364n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1298
            var _7Z = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1310
            var _7e = new Map([
                ["parts", $a([_7Z])],
                ["ex", $a(["365n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1313
            var _7g = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1325
            var _7l = new Map([
                ["parts", $a([_7g])],
                ["ex", $a(["366n"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1328
            var _7n = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1340
            var _7s = new Map([
                ["parts", $a([_7n])],
                ["ex", $a(["367n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#1343
            var _7u = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1355
            var _7z = new Map([
                ["parts", $a([_7u])],
                ["ex", $a(["368n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#1358
            var _81 = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1370
            var _86 = new Map([
                ["parts", $a([_81])],
                ["ex", $a(["369n"])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#1373
            var _88 = new Map([
                ["cset", 'N'],
                ["min", 1],
                ["max", 8],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1385
            var _8D = new Map([
                ["parts", $a([_88])],
                ["req", $a([$a(["00"]), $a(["02", "8026"])])]
            ]); //#1387
            var _8F = new Map([
                ["cset", 'N'],
                ["min", 1],
                ["max", 15],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1394
            var _8K = new Map([
                ["parts", $a([_8F])],
                ["ex", $a(["390n", "391n", "394n", "8111"])],
                ["req", $a([$a(["255", "8020"])])]
            ]); //#1397
            var _8M = new Map([
                ["cset", 'N'],
                ["min", 3],
                ["max", 3],
                ["opt", false],
                ["linters", $a(['lintiso4217'])]
            ]); //#1413
            var _8O = new Map([
                ["cset", 'N'],
                ["min", 1],
                ["max", 15],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1414
            var _8T = new Map([
                ["parts", $a([_8M, _8O])],
                ["ex", $a(["391n"])],
                ["req", $a([$a(["8020"])])]
            ]); //#1417
            var _8V = new Map([
                ["cset", 'N'],
                ["min", 1],
                ["max", 15],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1433
            var _8b = new Map([
                ["parts", $a([_8V])],
                ["ex", $a(["392n", "393n"])],
                ["req", $a([$a(["01"]), $a(["30", "31nn", "32nn", "35nn", "36nn"])])]
            ]); //#1436
            var _8d = new Map([
                ["cset", 'N'],
                ["min", 3],
                ["max", 3],
                ["opt", false],
                ["linters", $a(['lintiso4217'])]
            ]); //#1452
            var _8f = new Map([
                ["cset", 'N'],
                ["min", 1],
                ["max", 15],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1453
            var _8k = new Map([
                ["parts", $a([_8d, _8f])],
                ["ex", $a(["393n"])],
                ["req", $a([$a(["30", "31nn", "32nn", "35nn", "36nn"])])]
            ]); //#1456
            var _8m = new Map([
                ["cset", 'N'],
                ["min", 4],
                ["max", 4],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1472
            var _8r = new Map([
                ["parts", $a([_8m])],
                ["ex", $a(["394n", "8111"])],
                ["req", $a([$a(["255"])])]
            ]); //#1475
            var _8t = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1485
            var _8y = new Map([
                ["parts", $a([_8t])],
                ["ex", $a(["392n", "393n", "395n", "8005"])],
                ["req", $a([$a(["30", "31nn", "32nn", "35nn", "36nn"])])]
            ]); //#1488
            var _90 = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 30],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1500
            var _92 = new Map([
                ["parts", $a([_90])]
            ]); //#1500
            var _94 = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 30],
                ["opt", false],
                ["linters", $a(['lintkey'])]
            ]); //#1508
            var _97 = new Map([
                ["parts", $a([_94])],
                ["dlpkey", $a([])]
            ]); //#1510
            var _99 = new Map([
                ["cset", 'N'],
                ["min", 17],
                ["max", 17],
                ["opt", false],
                ["linters", $a(['lintcsum', 'lintkey'])]
            ]); //#1517
            var _9C = new Map([
                ["parts", $a([_99])],
                ["dlpkey", $a([])]
            ]); //#1519
            var _9E = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 30],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1526
            var _9I = new Map([
                ["parts", $a([_9E])],
                ["req", $a([$a(["00"])])]
            ]); //#1528
            var _9K = new Map([
                ["cset", 'N'],
                ["min", 13],
                ["max", 13],
                ["opt", false],
                ["linters", $a(['lintcsum', 'lintkey'])]
            ]); //#1535
            var _9M = new Map([
                ["parts", $a([_9K])]
            ]); //#1535
            var _9O = new Map([
                ["cset", 'N'],
                ["min", 13],
                ["max", 13],
                ["opt", false],
                ["linters", $a(['lintcsum', 'lintkey'])]
            ]); //#1546
            var _9T = new Map([
                ["parts", $a([_9O])],
                ["dlpkey", $a([$a(["254"]), $a(["7040"])])]
            ]); //#1548
            var _9V = new Map([
                ["cset", 'N'],
                ["min", 13],
                ["max", 13],
                ["opt", false],
                ["linters", $a(['lintcsum', 'lintkey'])]
            ]); //#1555
            var _9b = new Map([
                ["parts", $a([_9V])],
                ["req", $a([$a(["8020"])])],
                ["dlpkey", $a([$a(["8020"])])]
            ]); //#1558
            var _9d = new Map([
                ["cset", 'N'],
                ["min", 13],
                ["max", 13],
                ["opt", false],
                ["linters", $a(['lintcsum', 'lintkey'])]
            ]); //#1565
            var _9f = new Map([
                ["parts", $a([_9d])]
            ]); //#1565
            var _9h = new Map([
                ["cset", 'N'],
                ["min", 13],
                ["max", 13],
                ["opt", false],
                ["linters", $a(['lintcsum', 'lintkey'])]
            ]); //#1573
            var _9l = new Map([
                ["parts", $a([_9h])],
                ["dlpkey", $a([$a(["7040"])])]
            ]); //#1575
            var _9n = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 20],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1582
            var _9q = new Map([
                ["parts", $a([_9n])],
                ["ex", $a(["421"])]
            ]); //#1584
            var _9s = new Map([
                ["cset", 'N'],
                ["min", 3],
                ["max", 3],
                ["opt", false],
                ["linters", $a(['lintiso3166'])]
            ]); //#1591
            var _9u = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 9],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1592
            var _9x = new Map([
                ["parts", $a([_9s, _9u])],
                ["ex", $a(["4307"])]
            ]); //#1594
            var _9z = new Map([
                ["cset", 'N'],
                ["min", 3],
                ["max", 3],
                ["opt", false],
                ["linters", $a(['lintiso3166'])]
            ]); //#1601
            var _A4 = new Map([
                ["parts", $a([_9z])],
                ["ex", $a(["426"])],
                ["req", $a([$a(["01", "02", "8006", "8026"])])]
            ]); //#1604
            var _A6 = new Map([
                ["cset", 'N'],
                ["min", 1],
                ["max", 15],
                ["opt", false],
                ["linters", $a(['lintiso3166list'])]
            ]); //#1611
            var _AB = new Map([
                ["parts", $a([_A6])],
                ["ex", $a(["426"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1614
            var _AD = new Map([
                ["cset", 'N'],
                ["min", 3],
                ["max", 3],
                ["opt", false],
                ["linters", $a(['lintiso3166'])]
            ]); //#1621
            var _AI = new Map([
                ["parts", $a([_AD])],
                ["ex", $a(["426"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1624
            var _AK = new Map([
                ["cset", 'N'],
                ["min", 1],
                ["max", 15],
                ["opt", false],
                ["linters", $a(['lintiso3166list'])]
            ]); //#1631
            var _AP = new Map([
                ["parts", $a([_AK])],
                ["ex", $a(["426"])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1634
            var _AR = new Map([
                ["cset", 'N'],
                ["min", 3],
                ["max", 3],
                ["opt", false],
                ["linters", $a(['lintiso3166'])]
            ]); //#1641
            var _AV = new Map([
                ["parts", $a([_AR])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1643
            var _AX = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 3],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1650
            var _Ac = new Map([
                ["parts", $a([_AX])],
                ["req", $a([$a(["01", "02"]), $a(["422"])])]
            ]); //#1652
            var _Ae = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 35],
                ["opt", false],
                ["linters", $a(['lintpcenc'])]
            ]); //#1659
            var _Ai = new Map([
                ["parts", $a([_Ae])],
                ["req", $a([$a(["00"])])]
            ]); //#1661
            var _Ak = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 70],
                ["opt", false],
                ["linters", $a(['lintpcenc'])]
            ]); //#1669
            var _Ao = new Map([
                ["parts", $a([_Ak])],
                ["req", $a([$a(["00"])])]
            ]); //#1671
            var _Aq = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 70],
                ["opt", false],
                ["linters", $a(['lintpcenc'])]
            ]); //#1678
            var _Au = new Map([
                ["parts", $a([_Aq])],
                ["req", $a([$a(["4302"])])]
            ]); //#1680
            var _Aw = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 70],
                ["opt", false],
                ["linters", $a(['lintpcenc'])]
            ]); //#1687
            var _B0 = new Map([
                ["parts", $a([_Aw])],
                ["req", $a([$a(["00"])])]
            ]); //#1689
            var _B2 = new Map([
                ["cset", 'X'],
                ["min", 2],
                ["max", 2],
                ["opt", false],
                ["linters", $a(['lintiso3166alpha2'])]
            ]); //#1698
            var _B6 = new Map([
                ["parts", $a([_B2])],
                ["req", $a([$a(["00"])])]
            ]); //#1700
            var _B8 = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 30],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1707
            var _BC = new Map([
                ["parts", $a([_B8])],
                ["req", $a([$a(["00"])])]
            ]); //#1709
            var _BE = new Map([
                ["cset", 'N'],
                ["min", 20],
                ["max", 20],
                ["opt", false],
                ["linters", $a(['lintlatlong'])]
            ]); //#1716
            var _BI = new Map([
                ["parts", $a([_BE])],
                ["req", $a([$a(["00"])])]
            ]); //#1718
            var _BK = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 35],
                ["opt", false],
                ["linters", $a(['lintpcenc'])]
            ]); //#1725
            var _BO = new Map([
                ["parts", $a([_BK])],
                ["req", $a([$a(["00"])])]
            ]); //#1727
            var _BQ = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 70],
                ["opt", false],
                ["linters", $a(['lintpcenc'])]
            ]); //#1735
            var _BU = new Map([
                ["parts", $a([_BQ])],
                ["req", $a([$a(["00"])])]
            ]); //#1737
            var _BW = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 70],
                ["opt", false],
                ["linters", $a(['lintpcenc'])]
            ]); //#1744
            var _Ba = new Map([
                ["parts", $a([_BW])],
                ["req", $a([$a(["4312"])])]
            ]); //#1746
            var _Bc = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 70],
                ["opt", false],
                ["linters", $a(['lintpcenc'])]
            ]); //#1753
            var _Bg = new Map([
                ["parts", $a([_Bc])],
                ["req", $a([$a(["00"])])]
            ]); //#1755
            var _Bi = new Map([
                ["cset", 'X'],
                ["min", 2],
                ["max", 2],
                ["opt", false],
                ["linters", $a(['lintiso3166alpha2'])]
            ]); //#1764
            var _Bm = new Map([
                ["parts", $a([_Bi])],
                ["req", $a([$a(["00"])])]
            ]); //#1766
            var _Bo = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 20],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1773
            var _Bs = new Map([
                ["parts", $a([_Bo])],
                ["req", $a([$a(["00"])])]
            ]); //#1775
            var _Bu = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 30],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1782
            var _By = new Map([
                ["parts", $a([_Bu])],
                ["req", $a([$a(["00"])])]
            ]); //#1784
            var _C0 = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 35],
                ["opt", false],
                ["linters", $a(['lintpcenc'])]
            ]); //#1791
            var _C4 = new Map([
                ["parts", $a([_C0])],
                ["req", $a([$a(["00"])])]
            ]); //#1793
            var _C6 = new Map([
                ["cset", 'N'],
                ["min", 1],
                ["max", 1],
                ["opt", false],
                ["linters", $a(['lintyesno'])]
            ]); //#1800
            var _CA = new Map([
                ["parts", $a([_C6])],
                ["req", $a([$a(["00"])])]
            ]); //#1802
            var _CC = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a(['lintyymmd0'])]
            ]); //#1811
            var _CE = new Map([
                ["cset", 'N'],
                ["min", 4],
                ["max", 4],
                ["opt", false],
                ["linters", $a(['linthhmm'])]
            ]); //#1812
            var _CI = new Map([
                ["parts", $a([_CC, _CE])],
                ["req", $a([$a(["00"])])]
            ]); //#1814
            var _CK = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a(['lintyymmdd'])]
            ]); //#1822
            var _CO = new Map([
                ["parts", $a([_CK])],
                ["req", $a([$a(["00"])])]
            ]); //#1824
            var _CQ = new Map([
                ["cset", 'N'],
                ["min", 13],
                ["max", 13],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1831
            var _CU = new Map([
                ["parts", $a([_CQ])],
                ["req", $a([$a(["01", "02", "8006", "8026"])])]
            ]); //#1833
            var _CW = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 30],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1840
            var _Ca = new Map([
                ["parts", $a([_CW])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1842
            var _Cc = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a(['lintyymmdd'])]
            ]); //#1849
            var _Ce = new Map([
                ["cset", 'N'],
                ["min", 4],
                ["max", 4],
                ["opt", false],
                ["linters", $a(['linthhmm'])]
            ]); //#1850
            var _Ci = new Map([
                ["parts", $a([_Cc, _Ce])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1852
            var _Ck = new Map([
                ["cset", 'N'],
                ["min", 1],
                ["max", 4],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1859
            var _Cp = new Map([
                ["parts", $a([_Ck])],
                ["req", $a([$a(["01"]), $a(["10"])])]
            ]); //#1861
            var _Cr = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 12],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1868
            var _Cv = new Map([
                ["parts", $a([_Cr])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1870
            var _Cx = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a(['lintyymmdd'])]
            ]); //#1877
            var _D1 = new Map([
                ["parts", $a([_Cx])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1879
            var _D3 = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a(['lintyymmdd'])]
            ]); //#1886
            var _D5 = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", true],
                ["linters", $a(['lintyymmdd'])]
            ]); //#1887
            var _D9 = new Map([
                ["parts", $a([_D3, _D5])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1889
            var _DB = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 3],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1896
            var _DF = new Map([
                ["parts", $a([_DB])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1898
            var _DH = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 10],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1905
            var _DL = new Map([
                ["parts", $a([_DH])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1907
            var _DN = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 2],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1914
            var _DR = new Map([
                ["parts", $a([_DN])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1916
            var _DT = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a(['lintyymmdd'])]
            ]); //#1923
            var _DV = new Map([
                ["cset", 'N'],
                ["min", 4],
                ["max", 4],
                ["opt", true],
                ["linters", $a(['linthhmm'])]
            ]); //#1924
            var _DZ = new Map([
                ["parts", $a([_DT, _DV])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1926
            var _Db = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 20],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1933
            var _Dg = new Map([
                ["parts", $a([_Db])],
                ["req", $a([$a(["01", "8006"]), $a(["416"])])]
            ]); //#1935
            var _Di = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 20],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1942
            var _Dm = new Map([
                ["parts", $a([_Di])],
                ["req", $a([$a(["01", "8006"])])]
            ]); //#1944
            var _Do = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 20],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1951
            var _Ds = new Map([
                ["parts", $a([_Do])],
                ["req", $a([$a(["7021"])])]
            ]); //#1953
            var _Du = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 30],
                ["opt", false],
                ["linters", $a(['lintkey'])]
            ]); //#1960
            var _Dw = new Map([
                ["parts", $a([_Du])]
            ]); //#1960
            var _Dy = new Map([
                ["cset", 'N'],
                ["min", 3],
                ["max", 3],
                ["opt", false],
                ["linters", $a(['lintiso3166999'])]
            ]); //#1968
            var _E0 = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 27],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1969
            var _E4 = new Map([
                ["parts", $a([_Dy, _E0])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#1971
            var _E6 = new Map([
                ["cset", 'N'],
                ["min", 1],
                ["max", 1],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1987
            var _E8 = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 1],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1988
            var _EA = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 1],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1989
            var _EC = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 1],
                ["opt", false],
                ["linters", $a(['lintimporteridx'])]
            ]); //#1990
            var _EE = new Map([
                ["parts", $a([_E6, _E8, _EA, _EC])]
            ]); //#1990
            var _EG = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 20],
                ["opt", false],
                ["linters", $a([])]
            ]); //#1998
            var _EK = new Map([
                ["parts", $a([_EG])],
                ["req", $a([$a(["01"])])]
            ]); //#2000
            var _EM = new Map([
                ["cset", 'X'],
                ["min", 2],
                ["max", 2],
                ["opt", false],
                ["linters", $a([])]
            ]); //#2012
            var _EO = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 28],
                ["opt", false],
                ["linters", $a([])]
            ]); //#2013
            var _ES = new Map([
                ["parts", $a([_EM, _EO])],
                ["req", $a([$a(["01", "8004"])])]
            ]); //#2015
            var _EU = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 20],
                ["opt", false],
                ["linters", $a([])]
            ]); //#2031
            var _EY = new Map([
                ["parts", $a([_EU])],
                ["req", $a([$a(["01", "8006"])])]
            ]); //#2033
            var _Ea = new Map([
                ["cset", 'N'],
                ["min", 4],
                ["max", 4],
                ["opt", false],
                ["linters", $a(['lintnonzero'])]
            ]); //#2040
            var _Ec = new Map([
                ["cset", 'N'],
                ["min", 5],
                ["max", 5],
                ["opt", false],
                ["linters", $a(['lintnonzero'])]
            ]); //#2041
            var _Ee = new Map([
                ["cset", 'N'],
                ["min", 3],
                ["max", 3],
                ["opt", false],
                ["linters", $a(['lintnonzero'])]
            ]); //#2042
            var _Eg = new Map([
                ["cset", 'N'],
                ["min", 1],
                ["max", 1],
                ["opt", false],
                ["linters", $a(['lintwinding'])]
            ]); //#2043
            var _Ei = new Map([
                ["cset", 'N'],
                ["min", 1],
                ["max", 1],
                ["opt", false],
                ["linters", $a([])]
            ]); //#2044
            var _Em = new Map([
                ["parts", $a([_Ea, _Ec, _Ee, _Eg, _Ei])],
                ["req", $a([$a(["01"])])]
            ]); //#2046
            var _Eo = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 20],
                ["opt", false],
                ["linters", $a([])]
            ]); //#2053
            var _Eq = new Map([
                ["parts", $a([_Eo])]
            ]); //#2053
            var _Es = new Map([
                ["cset", 'N'],
                ["min", 1],
                ["max", 1],
                ["opt", false],
                ["linters", $a(['lintzero'])]
            ]); //#2061
            var _Eu = new Map([
                ["cset", 'N'],
                ["min", 13],
                ["max", 13],
                ["opt", false],
                ["linters", $a(['lintcsum', 'lintkey'])]
            ]); //#2062
            var _Ew = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 16],
                ["opt", true],
                ["linters", $a([])]
            ]); //#2063
            var _Ez = new Map([
                ["parts", $a([_Es, _Eu, _Ew])],
                ["dlpkey", $a([])]
            ]); //#2065
            var _F1 = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 30],
                ["opt", false],
                ["linters", $a(['lintkey'])]
            ]); //#2072
            var _F5 = new Map([
                ["parts", $a([_F1])],
                ["dlpkey", $a([$a(["7040"])])]
            ]); //#2074
            var _F7 = new Map([
                ["cset", 'N'],
                ["min", 6],
                ["max", 6],
                ["opt", false],
                ["linters", $a([])]
            ]); //#2081
            var _FB = new Map([
                ["parts", $a([_F7])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#2083
            var _FD = new Map([
                ["cset", 'N'],
                ["min", 14],
                ["max", 14],
                ["opt", false],
                ["linters", $a(['lintcsum'])]
            ]); //#2090
            var _FF = new Map([
                ["cset", 'N'],
                ["min", 4],
                ["max", 4],
                ["opt", false],
                ["linters", $a(['lintpieceoftotal'])]
            ]); //#2091
            var _FK = new Map([
                ["parts", $a([_FD, _FF])],
                ["ex", $a(["01", "37"])],
                ["dlpkey", $a([$a(["22", "10", "21"])])]
            ]); //#2094
            var _FM = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 34],
                ["opt", false],
                ["linters", $a(['lintiban'])]
            ]); //#2101
            var _FQ = new Map([
                ["parts", $a([_FM])],
                ["req", $a([$a(["415"])])]
            ]); //#2103
            var _FS = new Map([
                ["cset", 'N'],
                ["min", 8],
                ["max", 8],
                ["opt", false],
                ["linters", $a(['lintyymmddhh'])]
            ]); //#2110
            var _FU = new Map([
                ["cset", 'N'],
                ["min", 1],
                ["max", 4],
                ["opt", true],
                ["linters", $a(['lintmmoptss'])]
            ]); //#2111
            var _FY = new Map([
                ["parts", $a([_FS, _FU])],
                ["req", $a([$a(["01", "02"])])]
            ]); //#2113
            var _Fa = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 50],
                ["opt", false],
                ["linters", $a([])]
            ]); //#2120
            var _Fe = new Map([
                ["parts", $a([_Fa])],
                ["req", $a([$a(["00", "01"])])]
            ]); //#2122
            var _Fg = new Map([
                ["cset", 'Y'],
                ["min", 1],
                ["max", 30],
                ["opt", false],
                ["linters", $a(['lintkey'])]
            ]); //#2129
            var _Fk = new Map([
                ["parts", $a([_Fg])],
                ["dlpkey", $a([$a(["8011"])])]
            ]); //#2131
            var _Fm = new Map([
                ["cset", 'N'],
                ["min", 1],
                ["max", 12],
                ["opt", false],
                ["linters", $a(['lintnozeroprefix'])]
            ]); //#2138
            var _Fq = new Map([
                ["parts", $a([_Fm])],
                ["req", $a([$a(["8010"])])]
            ]); //#2140
            var _Fs = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 20],
                ["opt", false],
                ["linters", $a([])]
            ]); //#2147
            var _Fw = new Map([
                ["parts", $a([_Fs])],
                ["req", $a([$a(["01", "8006"])])]
            ]); //#2149
            var _Fy = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 25],
                ["opt", false],
                ["linters", $a(['lintcsumalpha', 'lintkey'])]
            ]); //#2156
            var _G1 = new Map([
                ["parts", $a([_Fy])],
                ["dlpkey", $a([])]
            ]); //#2158
            var _G3 = new Map([
                ["cset", 'N'],
                ["min", 18],
                ["max", 18],
                ["opt", false],
                ["linters", $a(['lintcsum'])]
            ]); //#2165
            var _G7 = new Map([
                ["parts", $a([_G3])],
                ["dlpkey", $a([$a(["8019"])])]
            ]); //#2167
            var _G9 = new Map([
                ["cset", 'N'],
                ["min", 18],
                ["max", 18],
                ["opt", false],
                ["linters", $a(['lintcsum'])]
            ]); //#2174
            var _GE = new Map([
                ["parts", $a([_G9])],
                ["ex", $a(["8017"])],
                ["dlpkey", $a([$a(["8019"])])]
            ]); //#2177
            var _GG = new Map([
                ["cset", 'N'],
                ["min", 1],
                ["max", 10],
                ["opt", false],
                ["linters", $a([])]
            ]); //#2184
            var _GK = new Map([
                ["parts", $a([_GG])],
                ["req", $a([$a(["8017", "8018"])])]
            ]); //#2186
            var _GM = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 25],
                ["opt", false],
                ["linters", $a([])]
            ]); //#2193
            var _GQ = new Map([
                ["parts", $a([_GM])],
                ["req", $a([$a(["415"])])]
            ]); //#2195
            var _GS = new Map([
                ["cset", 'N'],
                ["min", 14],
                ["max", 14],
                ["opt", false],
                ["linters", $a(['lintcsum'])]
            ]); //#2202
            var _GU = new Map([
                ["cset", 'N'],
                ["min", 4],
                ["max", 4],
                ["opt", false],
                ["linters", $a(['lintpieceoftotal'])]
            ]); //#2203
            var _GZ = new Map([
                ["parts", $a([_GS, _GU])],
                ["ex", $a(["02", "8006"])],
                ["req", $a([$a(["37"])])]
            ]); //#2206
            var _Gb = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 70],
                ["opt", false],
                ["linters", $a(['lintcouponcode'])]
            ]); //#2213
            var _Gd = new Map([
                ["parts", $a([_Gb])]
            ]); //#2213
            var _Gf = new Map([
                ["cset", 'N'],
                ["min", 4],
                ["max", 4],
                ["opt", false],
                ["linters", $a([])]
            ]); //#2221
            var _Gj = new Map([
                ["parts", $a([_Gf])],
                ["req", $a([$a(["255"])])]
            ]); //#2223
            var _Gl = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 70],
                ["opt", false],
                ["linters", $a(['lintcouponposoffer'])]
            ]); //#2230
            var _Gn = new Map([
                ["parts", $a([_Gl])]
            ]); //#2230
            var _Gp = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 70],
                ["opt", false],
                ["linters", $a([])]
            ]); //#2238
            var _Gt = new Map([
                ["parts", $a([_Gp])],
                ["req", $a([$a(["01"])])]
            ]); //#2240
            var _Gv = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 30],
                ["opt", false],
                ["linters", $a([])]
            ]); //#2247
            var _Gx = new Map([
                ["parts", $a([_Gv])]
            ]); //#2247
            var _Gz = new Map([
                ["cset", 'X'],
                ["min", 1],
                ["max", 90],
                ["opt", false],
                ["linters", $a([])]
            ]); //#2255
            var _H1 = new Map([
                ["parts", $a([_Gz])]
            ]); //#2255
            var _H2 = new Map([
                ["00", _4],
                ["01", _C],
                ["02", _I],
                ["10", _O],
                ["11", _U],
                ["12", _a],
                ["13", _g],
                ["15", _g],
                ["16", _g],
                ["17", _m],
                ["20", _s],
                ["21", _z],
                ["22", _15],
                ["235", _1B],
                ["240", _1H],
                ["241", _1H],
                ["242", _1N],
                ["243", _1T],
                ["250", _1a],
                ["251", _1g],
                ["253", _1n],
                ["254", _1t],
                ["255", _21],
                ["30", _27],
                ["3100", _2E],
                ["3101", _2E],
                ["3102", _2E],
                ["3103", _2E],
                ["3104", _2E],
                ["3105", _2E],
                ["3110", _2L],
                ["3111", _2L],
                ["3112", _2L],
                ["3113", _2L],
                ["3114", _2L],
                ["3115", _2L],
                ["3120", _2S],
                ["3121", _2S],
                ["3122", _2S],
                ["3123", _2S],
                ["3124", _2S],
                ["3125", _2S],
                ["3130", _2Z],
                ["3131", _2Z],
                ["3132", _2Z],
                ["3133", _2Z],
                ["3134", _2Z],
                ["3135", _2Z],
                ["3140", _2g],
                ["3141", _2g],
                ["3142", _2g],
                ["3143", _2g],
                ["3144", _2g],
                ["3145", _2g],
                ["3150", _2n],
                ["3151", _2n],
                ["3152", _2n],
                ["3153", _2n],
                ["3154", _2n],
                ["3155", _2n],
                ["3160", _2u],
                ["3161", _2u],
                ["3162", _2u],
                ["3163", _2u],
                ["3164", _2u],
                ["3165", _2u],
                ["3200", _31],
                ["3201", _31],
                ["3202", _31],
                ["3203", _31],
                ["3204", _31],
                ["3205", _31],
                ["3210", _38],
                ["3211", _38],
                ["3212", _38],
                ["3213", _38],
                ["3214", _38],
                ["3215", _38],
                ["3220", _3F],
                ["3221", _3F],
                ["3222", _3F],
                ["3223", _3F],
                ["3224", _3F],
                ["3225", _3F],
                ["3230", _3M],
                ["3231", _3M],
                ["3232", _3M],
                ["3233", _3M],
                ["3234", _3M],
                ["3235", _3M],
                ["3240", _3T],
                ["3241", _3T],
                ["3242", _3T],
                ["3243", _3T],
                ["3244", _3T],
                ["3245", _3T],
                ["3250", _3a],
                ["3251", _3a],
                ["3252", _3a],
                ["3253", _3a],
                ["3254", _3a],
                ["3255", _3a],
                ["3260", _3h],
                ["3261", _3h],
                ["3262", _3h],
                ["3263", _3h],
                ["3264", _3h],
                ["3265", _3h],
                ["3270", _3o],
                ["3271", _3o],
                ["3272", _3o],
                ["3273", _3o],
                ["3274", _3o],
                ["3275", _3o],
                ["3280", _3v],
                ["3281", _3v],
                ["3282", _3v],
                ["3283", _3v],
                ["3284", _3v],
                ["3285", _3v],
                ["3290", _42],
                ["3291", _42],
                ["3292", _42],
                ["3293", _42],
                ["3294", _42],
                ["3295", _42],
                ["3300", _49],
                ["3301", _49],
                ["3302", _49],
                ["3303", _49],
                ["3304", _49],
                ["3305", _49],
                ["3310", _4G],
                ["3311", _4G],
                ["3312", _4G],
                ["3313", _4G],
                ["3314", _4G],
                ["3315", _4G],
                ["3320", _4N],
                ["3321", _4N],
                ["3322", _4N],
                ["3323", _4N],
                ["3324", _4N],
                ["3325", _4N],
                ["3330", _4U],
                ["3331", _4U],
                ["3332", _4U],
                ["3333", _4U],
                ["3334", _4U],
                ["3335", _4U],
                ["3340", _4b],
                ["3341", _4b],
                ["3342", _4b],
                ["3343", _4b],
                ["3344", _4b],
                ["3345", _4b],
                ["3350", _4i],
                ["3351", _4i],
                ["3352", _4i],
                ["3353", _4i],
                ["3354", _4i],
                ["3355", _4i],
                ["3360", _4p],
                ["3361", _4p],
                ["3362", _4p],
                ["3363", _4p],
                ["3364", _4p],
                ["3365", _4p],
                ["3370", _4w],
                ["3371", _4w],
                ["3372", _4w],
                ["3373", _4w],
                ["3374", _4w],
                ["3375", _4w],
                ["3400", _53],
                ["3401", _53],
                ["3402", _53],
                ["3403", _53],
                ["3404", _53],
                ["3405", _53],
                ["3410", _5A],
                ["3411", _5A],
                ["3412", _5A],
                ["3413", _5A],
                ["3414", _5A],
                ["3415", _5A],
                ["3420", _5H],
                ["3421", _5H],
                ["3422", _5H],
                ["3423", _5H],
                ["3424", _5H],
                ["3425", _5H],
                ["3430", _5O],
                ["3431", _5O],
                ["3432", _5O],
                ["3433", _5O],
                ["3434", _5O],
                ["3435", _5O],
                ["3440", _5V],
                ["3441", _5V],
                ["3442", _5V],
                ["3443", _5V],
                ["3444", _5V],
                ["3445", _5V],
                ["3450", _5c],
                ["3451", _5c],
                ["3452", _5c],
                ["3453", _5c],
                ["3454", _5c],
                ["3455", _5c],
                ["3460", _5j],
                ["3461", _5j],
                ["3462", _5j],
                ["3463", _5j],
                ["3464", _5j],
                ["3465", _5j],
                ["3470", _5q],
                ["3471", _5q],
                ["3472", _5q],
                ["3473", _5q],
                ["3474", _5q],
                ["3475", _5q],
                ["3480", _5x],
                ["3481", _5x],
                ["3482", _5x],
                ["3483", _5x],
                ["3484", _5x],
                ["3485", _5x],
                ["3490", _64],
                ["3491", _64],
                ["3492", _64],
                ["3493", _64],
                ["3494", _64],
                ["3495", _64],
                ["3500", _6B],
                ["3501", _6B],
                ["3502", _6B],
                ["3503", _6B],
                ["3504", _6B],
                ["3505", _6B],
                ["3510", _6I],
                ["3511", _6I],
                ["3512", _6I],
                ["3513", _6I],
                ["3514", _6I],
                ["3515", _6I],
                ["3520", _6P],
                ["3521", _6P],
                ["3522", _6P],
                ["3523", _6P],
                ["3524", _6P],
                ["3525", _6P],
                ["3530", _6W],
                ["3531", _6W],
                ["3532", _6W],
                ["3533", _6W],
                ["3534", _6W],
                ["3535", _6W],
                ["3540", _6d],
                ["3541", _6d],
                ["3542", _6d],
                ["3543", _6d],
                ["3544", _6d],
                ["3545", _6d],
                ["3550", _6k],
                ["3551", _6k],
                ["3552", _6k],
                ["3553", _6k],
                ["3554", _6k],
                ["3555", _6k],
                ["3560", _6r],
                ["3561", _6r],
                ["3562", _6r],
                ["3563", _6r],
                ["3564", _6r],
                ["3565", _6r],
                ["3570", _6y],
                ["3571", _6y],
                ["3572", _6y],
                ["3573", _6y],
                ["3574", _6y],
                ["3575", _6y],
                ["3600", _75],
                ["3601", _75],
                ["3602", _75],
                ["3603", _75],
                ["3604", _75],
                ["3605", _75],
                ["3610", _7C],
                ["3611", _7C],
                ["3612", _7C],
                ["3613", _7C],
                ["3614", _7C],
                ["3615", _7C],
                ["3620", _7J],
                ["3621", _7J],
                ["3622", _7J],
                ["3623", _7J],
                ["3624", _7J],
                ["3625", _7J],
                ["3630", _7Q],
                ["3631", _7Q],
                ["3632", _7Q],
                ["3633", _7Q],
                ["3634", _7Q],
                ["3635", _7Q],
                ["3640", _7X],
                ["3641", _7X],
                ["3642", _7X],
                ["3643", _7X],
                ["3644", _7X],
                ["3645", _7X],
                ["3650", _7e],
                ["3651", _7e],
                ["3652", _7e],
                ["3653", _7e],
                ["3654", _7e],
                ["3655", _7e],
                ["3660", _7l],
                ["3661", _7l],
                ["3662", _7l],
                ["3663", _7l],
                ["3664", _7l],
                ["3665", _7l],
                ["3670", _7s],
                ["3671", _7s],
                ["3672", _7s],
                ["3673", _7s],
                ["3674", _7s],
                ["3675", _7s],
                ["3680", _7z],
                ["3681", _7z],
                ["3682", _7z],
                ["3683", _7z],
                ["3684", _7z],
                ["3685", _7z],
                ["3690", _86],
                ["3691", _86],
                ["3692", _86],
                ["3693", _86],
                ["3694", _86],
                ["3695", _86],
                ["37", _8D],
                ["3900", _8K],
                ["3901", _8K],
                ["3902", _8K],
                ["3903", _8K],
                ["3904", _8K],
                ["3905", _8K],
                ["3906", _8K],
                ["3907", _8K],
                ["3908", _8K],
                ["3909", _8K],
                ["3910", _8T],
                ["3911", _8T],
                ["3912", _8T],
                ["3913", _8T],
                ["3914", _8T],
                ["3915", _8T],
                ["3916", _8T],
                ["3917", _8T],
                ["3918", _8T],
                ["3919", _8T],
                ["3920", _8b],
                ["3921", _8b],
                ["3922", _8b],
                ["3923", _8b],
                ["3924", _8b],
                ["3925", _8b],
                ["3926", _8b],
                ["3927", _8b],
                ["3928", _8b],
                ["3929", _8b],
                ["3930", _8k],
                ["3931", _8k],
                ["3932", _8k],
                ["3933", _8k],
                ["3934", _8k],
                ["3935", _8k],
                ["3936", _8k],
                ["3937", _8k],
                ["3938", _8k],
                ["3939", _8k],
                ["3940", _8r],
                ["3941", _8r],
                ["3942", _8r],
                ["3943", _8r],
                ["3950", _8y],
                ["3951", _8y],
                ["3952", _8y],
                ["3953", _8y],
                ["3954", _8y],
                ["3955", _8y],
                ["400", _92],
                ["401", _97],
                ["402", _9C],
                ["403", _9I],
                ["410", _9M],
                ["411", _9M],
                ["412", _9M],
                ["413", _9M],
                ["414", _9T],
                ["415", _9b],
                ["416", _9f],
                ["417", _9l],
                ["420", _9q],
                ["421", _9x],
                ["422", _A4],
                ["423", _AB],
                ["424", _AI],
                ["425", _AP],
                ["426", _AV],
                ["427", _Ac],
                ["4300", _Ai],
                ["4301", _Ai],
                ["4302", _Ao],
                ["4303", _Au],
                ["4304", _B0],
                ["4305", _B0],
                ["4306", _B0],
                ["4307", _B6],
                ["4308", _BC],
                ["4309", _BI],
                ["4310", _BO],
                ["4311", _BO],
                ["4312", _BU],
                ["4313", _Ba],
                ["4314", _Bg],
                ["4315", _Bg],
                ["4316", _Bg],
                ["4317", _Bm],
                ["4318", _Bs],
                ["4319", _By],
                ["4320", _C4],
                ["4321", _CA],
                ["4322", _CA],
                ["4323", _CA],
                ["4324", _CI],
                ["4325", _CI],
                ["4326", _CO],
                ["7001", _CU],
                ["7002", _Ca],
                ["7003", _Ci],
                ["7004", _Cp],
                ["7005", _Cv],
                ["7006", _D1],
                ["7007", _D9],
                ["7008", _DF],
                ["7009", _DL],
                ["7010", _DR],
                ["7011", _DZ],
                ["7020", _Dg],
                ["7021", _Dm],
                ["7022", _Ds],
                ["7023", _Dw],
                ["7030", _E4],
                ["7031", _E4],
                ["7032", _E4],
                ["7033", _E4],
                ["7034", _E4],
                ["7035", _E4],
                ["7036", _E4],
                ["7037", _E4],
                ["7038", _E4],
                ["7039", _E4],
                ["7040", _EE],
                ["710", _EK],
                ["711", _EK],
                ["712", _EK],
                ["713", _EK],
                ["714", _EK],
                ["715", _EK],
                ["7230", _ES],
                ["7231", _ES],
                ["7232", _ES],
                ["7233", _ES],
                ["7234", _ES],
                ["7235", _ES],
                ["7236", _ES],
                ["7237", _ES],
                ["7238", _ES],
                ["7239", _ES],
                ["7240", _EY],
                ["8001", _Em],
                ["8002", _Eq],
                ["8003", _Ez],
                ["8004", _F5],
                ["8005", _FB],
                ["8006", _FK],
                ["8007", _FQ],
                ["8008", _FY],
                ["8009", _Fe],
                ["8010", _Fk],
                ["8011", _Fq],
                ["8012", _Fw],
                ["8013", _G1],
                ["8017", _G7],
                ["8018", _GE],
                ["8019", _GK],
                ["8020", _GQ],
                ["8026", _GZ],
                ["8110", _Gd],
                ["8111", _Gj],
                ["8112", _Gn],
                ["8200", _Gt],
                ["90", _Gx],
                ["91", _H1],
                ["92", _H1],
                ["93", _H1],
                ["94", _H1],
                ["95", _H1],
                ["96", _H1],
                ["97", _H1],
                ["98", _H1],
                ["99", _H1]
            ]); //#2267
            $ctx.gs1syntax = _H2; //#2269
            for (var _H3 in $ctx) {
                $ctx.hasOwnProperty(_H3) && (bwipp_gs1process.$ctx[_H3] = $ctx[_H3]);
            } //#2269
            bwipp_gs1process.$ctx._2270 = 1; //#2269
        })(); //#2269
    } //#2269
    if ($eq($k[--$j], 'ai')) { //#2454
        $anchorsearch($k[--$j], "("); //#2277
        if ($nt($k[--$j])) { //#2279
            $j--; //#2278
            $k[$j++] = 'bwipp.GS1aiMissingOpenParen#2278'; //#2278
            $k[$j++] = "AIs must start with '('"; //#2278
            bwipp_raiseerror(); //#2278
        } //#2278
        $j--; //#2280
        $k[$j++] = Infinity; //#2281
        var _H7 = $k[--$j]; //#2281
        var _H8 = $k[--$j]; //#2281
        $k[$j++] = _H7; //#2288
        $k[$j++] = _H8; //#2288
        for (;;) { //#2288
            var _H9 = $k[--$j]; //#2282
            $k[$j++] = _H9; //#2282
            if ($eq(_H9, "")) { //#2282
                $j--; //#2282
                break; //#2282
            } //#2282
            $search($k[--$j], ")"); //#2283
            if ($nt($k[--$j])) { //#2285
                $cleartomark(); //#2284
                $k[$j++] = 'bwipp.GS1aiMissingCloseParen#2284'; //#2284
                $k[$j++] = "AIs must end with ')'"; //#2284
                bwipp_raiseerror(); //#2284
            } //#2284
            var _HC = $k[--$j]; //#2286
            var _HD = $k[--$j]; //#2286
            $k[$j++] = _HC; //#2286
            $k[$j++] = _HD; //#2286
            $j--; //#2286
            var _HE = $k[--$j]; //#2286
            var _HF = $k[--$j]; //#2286
            $k[$j++] = _HE; //#2287
            $search(_HF, "("); //#2287
            if ($k[--$j]) { //#2287
                var _HH = $k[--$j]; //#2287
                var _HI = $k[--$j]; //#2287
                $k[$j++] = _HH; //#2287
                $k[$j++] = _HI; //#2287
                $j--; //#2287
                var _HJ = $k[--$j]; //#2287
                var _HK = $k[--$j]; //#2287
                $k[$j++] = _HJ; //#2287
                $k[$j++] = _HK; //#2287
            } else { //#2287
                $k[$j++] = ""; //#2287
            } //#2287
        } //#2287
        var _HL = $counttomark(); //#2289
        $k[$j++] = _HL; //#2289
        if (_HL > 0) { //#2289
            var _HM = $k[--$j]; //#2289
            for (var _HO = _HM, _HN = (~~(_HM / 2)) + 1; _HO >= _HN; _HO -= 1) { //#2289
                $r(_HO, -1); //#2289
            } //#2289
        } else { //#2289
            $j--; //#2289
        } //#2289
        $astore($a(~~($counttomark() / 2))); //#2290
        $1.ais = $k[--$j]; //#2290
        $astore($a($counttomark())); //#2291
        $k[$j++] = Infinity; //#2292
        var _HU = $k[--$j]; //#2291
        var _HV = $k[--$j]; //#2291
        $k[$j++] = _HU; //#2293
        $forall(_HV, function() { //#2293
            var _HX = new Map([
                ["parse", $1.parse],
                ["parseonly", true],
                ["parsefnc", false]
            ]); //#2292
            $k[$j++] = _HX; //#2292
            bwipp_parseinput(); //#2292
        }); //#2292
        $1.vals = $a(); //#2293
        $j--; //#2294
    } else { //#2454
        $anchorsearch($k[--$j], "http://"); //#2299
        if ($nt($k[--$j])) { //#2302
            $anchorsearch($k[--$j], "https://"); //#2300
            if ($nt($k[--$j])) { //#2302
                $j--; //#2301
                $k[$j++] = 'bwipp.GS1dlURIbadScheme#2301'; //#2301
                $k[$j++] = "Scheme must be http:// or https://"; //#2301
                bwipp_raiseerror(); //#2301
            } //#2301
        } //#2301
        $j--; //#2303
        $search($k[--$j], "/"); //#2306
        if ($nt($k[--$j])) { //#2308
            $j--; //#2307
            $k[$j++] = 'bwipp.GS1dlMissingDomainOrPathInfo#2307'; //#2307
            $k[$j++] = "URI must contain a domain and path info"; //#2307
            bwipp_raiseerror(); //#2307
        } //#2307
        $j -= 2; //#2309
        $search($k[--$j], "#"); //#2312
        if ($k[--$j]) { //#2314
            var _Hh = $k[--$j]; //#2313
            var _Hi = $k[--$j]; //#2313
            $k[$j++] = _Hh; //#2313
            $k[$j++] = _Hi; //#2313
            $j--; //#2313
            var _Hj = $k[--$j]; //#2313
            var _Hk = $k[--$j]; //#2313
            $k[$j++] = _Hj; //#2313
            $k[$j++] = _Hk; //#2313
            $j--; //#2313
        } //#2313
        $search($k[--$j], "?"); //#2317
        if ($nt($k[--$j])) { //#2319
            var _Hn = $k[--$j]; //#2318
            $k[$j++] = ""; //#2318
            $k[$j++] = null; //#2318
            $k[$j++] = _Hn; //#2318
        } //#2318
        $1.pp = $k[--$j]; //#2320
        $j--; //#2321
        $1.qp = $k[--$j]; //#2322
        $k[$j++] = Infinity; //#2325
        $k[$j++] = 0; //#2329
        $k[$j++] = 0; //#2329
        $k[$j++] = $1.pp; //#2329
        for (;;) { //#2329
            $search($k[--$j], "/"); //#2327
            if ($nt($k[--$j])) { //#2327
                $j--; //#2327
                break; //#2327
            } //#2327
            var _Ht = $k[--$j]; //#2328
            var _Hu = $k[--$j]; //#2328
            $k[$j++] = _Ht.length + 1; //#2328
            $k[$j++] = _Hu; //#2328
            $j--; //#2328
            var _Hv = $k[--$j]; //#2328
            var _Hw = $k[--$j]; //#2328
            var _Hx = $k[--$j]; //#2328
            $k[$j++] = _Hx; //#2328
            $k[$j++] = $f(_Hv + _Hx); //#2328
            $k[$j++] = _Hw; //#2328
        } //#2328
        $astore($a($counttomark() - 1)); //#2330
        $1.pipos = $k[--$j]; //#2330
        $j -= 2; //#2330
        if ($1.pipos.length <= 1) { //#2333
            $k[$j++] = 'bwipp.GS1dlNoAIinfo#2332'; //#2332
            $k[$j++] = "The path was too short to contain AI info"; //#2332
            bwipp_raiseerror(); //#2332
        } //#2332
        $k[$j++] = false; //#2349
        for (var _I3 = $1.pipos.length - 2; _I3 >= 0; _I3 -= 2) { //#2349
            var _I5 = $get($1.pipos, _I3); //#2339
            var _I9 = $geti($1.pp, _I5, $f($f($get($1.pipos, _I3 + 1) - _I5) - 1)); //#2340
            var _IB = $get($1.gs1syntax, _I9) !== undefined; //#2341
            $k[$j++] = _I3; //#2347
            $k[$j++] = _I9; //#2347
            if (_IB) { //#2346
                var _IF = $get($get($1.gs1syntax, $k[--$j]), 'dlpkey') !== undefined; //#2342
                if (_IF) { //#2344
                    var _IG = $k[--$j]; //#2343
                    var _IH = $k[--$j]; //#2343
                    $k[$j++] = _IG; //#2343
                    $k[$j++] = _IH; //#2343
                    $j--; //#2343
                    $k[$j++] = true; //#2343
                    break; //#2343
                } //#2343
            } else { //#2346
                $j--; //#2346
            } //#2346
            $j--; //#2348
        } //#2348
        if ($nt($k[--$j])) { //#2352
            $k[$j++] = 'bwipp.GS1dlNoAIinfo#2351'; //#2351
            $k[$j++] = "The path does not contain a valid primary key"; //#2351
            bwipp_raiseerror(); //#2351
        } //#2351
        var _IL = $get($1.pipos, $k[--$j]); //#2353
        $1.pp = $geti($1.pp, _IL, $f($1.pp.length - _IL)); //#2353
        $1.uriunescape = function() {
            $1.in = $k[--$j]; //#2356
            $1.out = $s($1.in.length); //#2357
            $k[$j++] = 0; //#2377
            $k[$j++] = 0; //#2377
            for (;;) { //#2377
                var _IS = $k[--$j]; //#2359
                var _IT = $k[--$j]; //#2359
                $k[$j++] = _IT; //#2359
                $k[$j++] = _IS; //#2359
                if (_IT >= $1.in.length) { //#2359
                    break; //#2359
                } //#2359
                var _IW = $k[--$j]; //#2360
                var _IX = $k[--$j]; //#2360
                var _IY = $get($1.in, _IX); //#2360
                $k[$j++] = _IX; //#2376
                $k[$j++] = _IW; //#2376
                $k[$j++] = _IY; //#2376
                if (_IY == 43) { //#2375
                    $j--; //#2362
                    var _Ia = $k[--$j]; //#2362
                    $put($1.out, _Ia, 32); //#2362
                    var _Ib = $k[--$j]; //#2363
                    $k[$j++] = $f(_Ib + 1); //#2363
                    $k[$j++] = $f(_Ia + 1); //#2363
                } else { //#2375
                    var _Ic = $k[--$j]; //#2365
                    var _Id = $k[--$j]; //#2365
                    var _Ie = $k[--$j]; //#2365
                    $k[$j++] = _Ie; //#2376
                    $k[$j++] = _Id; //#2376
                    $k[$j++] = _Ic; //#2376
                    if ((_Ic == 37) && (_Ie < ($1.in.length - 2))) { //#2375
                        $j--; //#2366
                        var _Ih = $strcpy($s(4), "<  >"); //#2367
                        var _Ij = $k[--$j]; //#2367
                        var _Ik = $k[--$j]; //#2367
                        $puti(_Ih, 1, $geti($1.in, $f(_Ik + 1), 2)); //#2367
                        try { //#2368
                            $k[$j++] = _Ik; //#2368
                            $k[$j++] = _Ij; //#2368
                            $k[$j++] = $cvx(_Ih); //#2368
                            $k[$j++] = false
                        } catch (e) {
                            $k[$j++] = true
                        } //#2368
                        if ($k[--$j]) { //#2370
                            $j -= 2; //#2369
                            $k[$j++] = 'bwipp.GS1dlBadHexCharacter#2369'; //#2369
                            $k[$j++] = "Invalid hex character"; //#2369
                            bwipp_raiseerror(); //#2369
                        } //#2369
                        var _Io = $get($k[--$j], 0); //#2371
                        var _Iq = $k[--$j]; //#2371
                        $put($1.out, _Iq, _Io); //#2371
                        var _Ir = $k[--$j]; //#2372
                        $k[$j++] = $f(_Ir + 3); //#2372
                        $k[$j++] = $f(_Iq + 1); //#2372
                    } else { //#2375
                        var _It = $k[--$j]; //#2374
                        var _Iu = $k[--$j]; //#2374
                        $put($1.out, _Iu, _It); //#2374
                        var _Iv = $k[--$j]; //#2375
                        $k[$j++] = $f(_Iv + 1); //#2375
                        $k[$j++] = $f(_Iu + 1); //#2375
                    } //#2375
                } //#2375
            } //#2375
            $1.out = $geti($1.out, 0, $k[--$j]); //#2378
            $j--; //#2379
            $k[$j++] = $1.out; //#2380
        }; //#2380
        $1.ais = $a(99); //#2383
        $1.vals = $a(99); //#2384
        $k[$j++] = 0; //#2398
        $k[$j++] = $1.pp; //#2398
        for (;;) { //#2398
            $search($k[--$j], "/"); //#2389
            if ($k[--$j]) { //#2395
                var _J6 = $k[--$j]; //#2390
                var _J7 = $k[--$j]; //#2390
                var _J8 = $k[--$j]; //#2390
                var _J9 = $k[--$j]; //#2390
                $put($1.ais, _J9, _J6); //#2390
                $k[$j++] = _J9; //#2392
                $search(_J8, "/"); //#2392
                if ($k[--$j]) { //#2392
                    var _JB = $k[--$j]; //#2392
                    var _JC = $k[--$j]; //#2392
                    $k[$j++] = _JB; //#2392
                    $k[$j++] = _JC; //#2392
                    $j--; //#2392
                } else { //#2392
                    var _JD = $k[--$j]; //#2392
                    $k[$j++] = ""; //#2392
                    $k[$j++] = _JD; //#2392
                } //#2392
                var _JF = $k[--$j]; //#2393
                var _JG = $k[--$j]; //#2393
                var _JH = $k[--$j]; //#2393
                $k[$j++] = _JH; //#2393
                $k[$j++] = _JG; //#2393
                $k[$j++] = $1.vals; //#2393
                $k[$j++] = _JH; //#2393
                $k[$j++] = _JF; //#2393
                $1.uriunescape(); //#2393
                var _JI = $k[--$j]; //#2393
                var _JJ = $k[--$j]; //#2393
                $put($k[--$j], _JJ, _JI); //#2393
            } else { //#2395
                $j--; //#2395
                break; //#2395
            } //#2395
            var _JL = $k[--$j]; //#2397
            var _JM = $k[--$j]; //#2397
            $k[$j++] = $f(_JM + 1); //#2397
            $k[$j++] = _JL; //#2397
        } //#2397
        var _JN = $k[--$j]; //#2401
        $k[$j++] = _JN; //#2419
        if (_JN > 1) { //#2419
            $k[$j++] = false; //#2415
            $forall($get($get($1.gs1syntax, $get($1.ais, 0)), 'dlpkey'), function() { //#2415
                $1.seq = $k[--$j]; //#2404
                $1.i = 1; //#2405
                $1.j = 0; //#2405
                for (;;) { //#2413
                    if ($1.i >= $1.ais.length) { //#2407
                        break; //#2407
                    } //#2407
                    if ($1.j >= $1.seq.length) { //#2408
                        break; //#2408
                    } //#2408
                    if ($eq($get($1.ais, $1.i), $get($1.seq, $1.j))) { //#2411
                        $1.i = $1.i + 1; //#2410
                    } //#2410
                    $1.j = $1.j + 1; //#2412
                } //#2412
                var _Jh = $k[--$j]; //#2414
                var _Ji = $k[--$j]; //#2414
                $k[$j++] = _Ji; //#2414
                $k[$j++] = _Jh; //#2414
                if ($1.i == _Ji) { //#2414
                    $j--; //#2414
                    $k[$j++] = true; //#2414
                    return true; //#2414
                } //#2414
            }); //#2414
            if ($nt($k[--$j])) { //#2418
                $j--; //#2417
                $k[$j++] = 'bwipp.GS1dlBadPathInfo#2417'; //#2417
                $k[$j++] = "The AIs in the path are not a valid key-qualifier sequence for the key"; //#2417
                bwipp_raiseerror(); //#2417
            } //#2417
        } //#2417
        $k[$j++] = $1.qp; //#2437
        for (;;) { //#2437
            var _Jl = $k[--$j]; //#2423
            $k[$j++] = _Jl; //#2423
            if ($eq(_Jl, "")) { //#2423
                $j--; //#2423
                break; //#2423
            } //#2423
            $search($k[--$j], "&"); //#2424
            if ($k[--$j]) { //#2424
                var _Jo = $k[--$j]; //#2424
                var _Jp = $k[--$j]; //#2424
                $k[$j++] = _Jo; //#2424
                $k[$j++] = _Jp; //#2424
                $j--; //#2424
            } else { //#2424
                var _Jq = $k[--$j]; //#2424
                $k[$j++] = ""; //#2424
                $k[$j++] = _Jq; //#2424
            } //#2424
            $search($k[--$j], "="); //#2425
            if ($k[--$j]) { //#2435
                var _Jt = $k[--$j]; //#2426
                $k[$j++] = _Jt; //#2426
                $k[$j++] = true; //#2426
                $forall(_Jt, function() { //#2426
                    var _Ju = $k[--$j]; //#2426
                    var _Jv = $k[--$j]; //#2426
                    $k[$j++] = _Jv && ((_Ju >= 48) && (_Ju <= 57)); //#2426
                }); //#2426
                if ($k[--$j]) { //#2432
                    var _Jy = $k[--$j]; //#2427
                    var _Jz = $k[--$j]; //#2427
                    var _K0 = $k[--$j]; //#2427
                    var _K1 = $k[--$j]; //#2427
                    var _K2 = $k[--$j]; //#2427
                    $put($1.ais, _K2, _Jy); //#2427
                    $k[$j++] = _K2; //#2429
                    $k[$j++] = _K1; //#2429
                    $k[$j++] = $1.vals; //#2429
                    $k[$j++] = _K2; //#2429
                    $k[$j++] = _K0; //#2429
                    $1.uriunescape(); //#2429
                    var _K4 = $k[--$j]; //#2429
                    var _K5 = $k[--$j]; //#2429
                    $put($k[--$j], _K5, _K4); //#2429
                    var _K7 = $k[--$j]; //#2430
                    var _K8 = $k[--$j]; //#2430
                    $k[$j++] = $f(_K8 + 1); //#2430
                    $k[$j++] = _K7; //#2430
                } else { //#2432
                    $j -= 3; //#2432
                } //#2432
            } else { //#2435
                $j--; //#2435
            } //#2435
        } //#2435
        var _KA = $k[--$j]; //#2439
        $1.ais = $geti($1.ais, 0, _KA); //#2439
        $1.vals = $geti($1.vals, 0, _KA); //#2440
        for (var _KG = 0, _KF = $1.ais.length - 1; _KG <= _KF; _KG += 1) { //#2455
            $k[$j++] = _KG; //#2453
            if ($eq($get($1.ais, _KG), "01")) { //#2453
                var _KJ = $k[--$j]; //#2446
                var _KL = $get($1.vals, _KJ); //#2446
                var _KM = _KL.length; //#2447
                $k[$j++] = _KJ; //#2452
                $k[$j++] = _KL; //#2452
                if ((_KM == 8) || ((_KM == 12) || (_KM == 13))) { //#2451
                    var _KO = $strcpy($s(14), "00000000000000"); //#2448
                    var _KP = $k[--$j]; //#2448
                    $puti(_KO, 14 - _KP.length, _KP); //#2448
                    var _KR = $k[--$j]; //#2449
                    $put($1.vals, _KR, _KO); //#2449
                    $k[$j++] = _KR; //#2449
                } else { //#2451
                    $j--; //#2451
                } //#2451
            } //#2451
            $j--; //#2454
        } //#2454
    } //#2454
    if (!bwipp_gs1process.$ctx._2468) { //#2468
        (function() { //#2468
            var $ctx = Object.create($1); //#2468
            $k[$j++] = Infinity; //#2467
            var _KS = $a(["00", "01", "02", "03", "04", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "31", "32", "33", "34", "35", "36", "41"]); //#2466
            for (var _KT = 0, _KU = _KS.length; _KT < _KU; _KT++) { //#2467
                var _KV = $get(_KS, _KT); //#2467
                $k[$j++] = _KV; //#2467
                $k[$j++] = _KV; //#2467
            } //#2467
            $ctx.aifixed = $d(); //#2467
            for (var _KX in $ctx) {
                $ctx.hasOwnProperty(_KX) && (bwipp_gs1process.$ctx[_KX] = $ctx[_KX]);
            } //#2467
            bwipp_gs1process.$ctx._2468 = 1; //#2467
        })(); //#2467
    } //#2467
    $k[$j++] = Infinity; //#2476
    var _KY = $1.ais; //#2471
    for (var _KZ = 0, _Ka = _KY.length; _KZ < _Ka; _KZ++) { //#2478
        var _Kb = $get(_KY, _KZ); //#2478
        $k[$j++] = true; //#2477
        $k[$j++] = _Kb; //#2477
        if (_Kb.length >= 2) { //#2476
            var _Kf = $get($1.aifixed, $geti($k[--$j], 0, 2)) !== undefined; //#2474
            if (_Kf) { //#2474
                $j--; //#2474
                $k[$j++] = false; //#2474
            } //#2474
        } else { //#2476
            $j--; //#2476
        } //#2476
    } //#2476
    $1.fncs = $a(); //#2476
    $1.lintnumeric = function() {
        var _Kh = $k[--$j]; //#2485
        $k[$j++] = true; //#2487
        $forall(_Kh, function() { //#2487
            var _Ki = $k[--$j]; //#2486
            if ((_Ki < 48) || (_Ki > 57)) { //#2486
                $j--; //#2486
                $k[$j++] = false; //#2486
                return true; //#2486
            } //#2486
        }); //#2486
        if ($nt($k[--$j])) { //#2488
            $j--; //#2488
            $k[$j++] = 'bwipp.GS1notNumeric#2488'; //#2488
            $k[$j++] = "Not numeric"; //#2488
            $k[$j++] = false; //#2488
            return true; //#2488
        } //#2488
    }; //#2488
    $1.lintcset82 = function() {
        var _Kk = $k[--$j]; //#2492
        $k[$j++] = true; //#2497
        $forall(_Kk, function() { //#2497
            var _Kl = $s(1); //#2493
            $put(_Kl, 0, $k[--$j]); //#2493
            $search("!\"%&'()*+,-./0123456789:;<=>?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz", _Kl); //#2495
            if ($nt($k[--$j])) { //#2495
                $j -= 2; //#2495
                $k[$j++] = false; //#2495
                return true; //#2495
            } //#2495
            $j -= 3; //#2496
        }); //#2496
        if ($nt($k[--$j])) { //#2498
            $j--; //#2498
            $k[$j++] = 'bwipp.GS1badCSET82character#2498'; //#2498
            $k[$j++] = "Invalid CSET 82 character"; //#2498
            $k[$j++] = false; //#2498
            return true; //#2498
        } //#2498
    }; //#2498
    $1.lintcset39 = function() {
        var _Kp = $k[--$j]; //#2502
        $k[$j++] = true; //#2507
        $forall(_Kp, function() { //#2507
            var _Kq = $s(1); //#2503
            $put(_Kq, 0, $k[--$j]); //#2503
            $search("#-/0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", _Kq); //#2505
            if ($nt($k[--$j])) { //#2505
                $j -= 2; //#2505
                $k[$j++] = false; //#2505
                return true; //#2505
            } //#2505
            $j -= 3; //#2506
        }); //#2506
        if ($nt($k[--$j])) { //#2508
            $j--; //#2508
            $k[$j++] = 'bwipp.GS1badCSET39character#2508'; //#2508
            $k[$j++] = "Invalid CSET 39 character"; //#2508
            $k[$j++] = false; //#2508
            return true; //#2508
        } //#2508
    }; //#2508
    $1.lintkey = function() {
        var _Ku = $k[--$j]; //#2512
        $k[$j++] = _Ku; //#2512
        if (_Ku.length < 2) { //#2512
            $j -= 2; //#2512
            $k[$j++] = 'bwipp.GS1keyTooShort#2512'; //#2512
            $k[$j++] = "Key is too short"; //#2512
            $k[$j++] = false; //#2512
            return true; //#2512
        } //#2512
        var _Kv = $k[--$j]; //#2513
        var _Kw = $get(_Kv, 0); //#2513
        var _Kx = $get(_Kv, 1); //#2514
        if (((_Kw < 48) || (_Kw > 57)) || ((_Kx < 48) || (_Kx > 57))) { //#2516
            $j--; //#2515
            $k[$j++] = 'bwipp.GS1badGCP#2515'; //#2515
            $k[$j++] = "Non-numeric company prefix"; //#2515
            $k[$j++] = false; //#2515
            return true; //#2515
        } //#2515
    }; //#2515
    $1.lintimporteridx = function() {
        $search("-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz", $k[--$j]); //#2521
        if ($nt($k[--$j])) { //#2521
            $j -= 2; //#2521
            $k[$j++] = 'bwipp.GS1badImporterIndex#2521'; //#2521
            $k[$j++] = "Invalid importer index"; //#2521
            $k[$j++] = false; //#2521
            return true; //#2521
        } //#2521
        $j -= 3; //#2522
    }; //#2522
    $1.lintcsum = function() {
        $k[$j++] = Infinity; //#2526
        var _L0 = $k[--$j]; //#2526
        var _L1 = $k[--$j]; //#2526
        var _L2 = ((_L1.length % 2) == 0) ? 3 : 1; //#2527
        $k[$j++] = _L0; //#2528
        $k[$j++] = _L2; //#2528
        $forall(_L1, function() { //#2528
            var _L3 = $k[--$j]; //#2528
            var _L4 = $k[--$j]; //#2528
            $k[$j++] = $f(_L3 - 48) * _L4; //#2528
            $k[$j++] = $f(4 - _L4); //#2528
        }); //#2528
        $j--; //#2528
        var _L5 = $counttomark() + 1; //#2529
        $k[$j++] = 0; //#2529
        for (var _L6 = 0, _L7 = _L5 - 1; _L6 < _L7; _L6++) { //#2529
            var _L8 = $k[--$j]; //#2529
            var _L9 = $k[--$j]; //#2529
            $k[$j++] = $f(_L9 + _L8); //#2529
        } //#2529
        var _LA = $k[--$j]; //#2529
        var _LB = $k[--$j]; //#2529
        $k[$j++] = _LA; //#2529
        $k[$j++] = _LB; //#2529
        $j--; //#2529
        if (($k[--$j] % 10) != 0) { //#2530
            $j--; //#2530
            $k[$j++] = 'bwipp.GS1badChecksum#2530'; //#2530
            $k[$j++] = "Bad checksum"; //#2530
            $k[$j++] = false; //#2530
            return true; //#2530
        } //#2530
    }; //#2530
    if (!bwipp_gs1process.$ctx._2543) { //#2543
        (function() { //#2543
            var $ctx = Object.create($1); //#2543
            $k[$j++] = Infinity; //#2536
            $k[$j++] = 0; //#2536
            for (var _LD = 0, _LE = "!\"%&'()*+,-./0123456789:;<=>?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".length; _LD < _LE; _LD++) { //#2536
                var _LG = $k[--$j]; //#2536
                $k[$j++] = $get("!\"%&'()*+,-./0123456789:;<=>?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz", _LD); //#2536
                $k[$j++] = _LG; //#2536
                $k[$j++] = $f(_LG + 1); //#2536
            } //#2536
            $j--; //#2536
            $ctx.cset82 = $d(); //#2537
            $k[$j++] = Infinity; //#2541
            $k[$j++] = 0; //#2541
            for (var _LI = 0, _LJ = "23456789ABCDEFGHJKLMNPQRSTUVWXYZ".length; _LI < _LJ; _LI++) { //#2541
                var _LL = $k[--$j]; //#2541
                $k[$j++] = $get("23456789ABCDEFGHJKLMNPQRSTUVWXYZ", _LI); //#2541
                $k[$j++] = _LL; //#2541
                $k[$j++] = $f(_LL + 1); //#2541
            } //#2541
            $j--; //#2541
            $ctx.cset32 = $d(); //#2542
            for (var _LN in $ctx) {
                $ctx.hasOwnProperty(_LN) && (bwipp_gs1process.$ctx[_LN] = $ctx[_LN]);
            } //#2542
            bwipp_gs1process.$ctx._2543 = 1; //#2542
        })(); //#2542
    } //#2542
    $1.lintcsumalpha = function() {
        var _LO = $k[--$j]; //#2546
        $k[$j++] = _LO; //#2546
        if (_LO.length < 2) { //#2546
            $j -= 2; //#2546
            $k[$j++] = 'bwipp.GS1alphaTooShort#2546'; //#2546
            $k[$j++] = "Alphanumeric string is too short to check"; //#2546
            $k[$j++] = false; //#2546
            return true; //#2546
        } //#2546
        var _LP = $k[--$j]; //#2547
        $k[$j++] = _LP; //#2549
        $k[$j++] = _LP.length - 2; //#2549
        $k[$j++] = $geti(_LP, 0, _LP.length - 2); //#2549
        $k[$j++] = Infinity; //#2549
        var _LR = $k[--$j]; //#2549
        var _LS = $k[--$j]; //#2549
        $k[$j++] = _LR; //#2551
        $forall(_LS, function() { //#2551
            var _LT = $k[--$j]; //#2550
            var _LV = $get($1.cset82, _LT) !== undefined; //#2550
            $k[$j++] = _LT; //#2550
            if (_LV) { //#2550
                var _LY = $get($1.cset82, $k[--$j]); //#2550
                $k[$j++] = _LY; //#2550
            } else { //#2550
                $k[$j++] = -1; //#2550
                return true; //#2550
            } //#2550
        }); //#2550
        var _LZ = $k[--$j]; //#2552
        $k[$j++] = _LZ; //#2552
        if (_LZ == -1) { //#2552
            $cleartomark(); //#2552
            $j -= 3; //#2552
            $k[$j++] = 'bwipp.GS1UnknownCSET82Character#2552'; //#2552
            $k[$j++] = "Unknown CSET 82 character"; //#2552
            $k[$j++] = false; //#2552
            return true; //#2552
        } //#2552
        $astore($a($counttomark())); //#2553
        var _Lc = $k[--$j]; //#2553
        var _Ld = $k[--$j]; //#2553
        $k[$j++] = _Lc; //#2553
        $k[$j++] = _Ld; //#2553
        $j--; //#2553
        var _Le = $k[--$j]; //#2554
        var _Lf = $k[--$j]; //#2554
        var _Lh = $geti($k[--$j], _Lf, 2); //#2555
        $k[$j++] = _Le; //#2555
        $k[$j++] = _Lh; //#2555
        $k[$j++] = Infinity; //#2555
        var _Li = $k[--$j]; //#2555
        var _Lj = $k[--$j]; //#2555
        $k[$j++] = _Li; //#2557
        $forall(_Lj, function() { //#2557
            var _Lk = $k[--$j]; //#2556
            var _Lm = $get($1.cset32, _Lk) !== undefined; //#2556
            $k[$j++] = _Lk; //#2556
            if (_Lm) { //#2556
                var _Lp = $get($1.cset32, $k[--$j]); //#2556
                $k[$j++] = _Lp; //#2556
            } else { //#2556
                $k[$j++] = -1; //#2556
                return true; //#2556
            } //#2556
        }); //#2556
        var _Lq = $k[--$j]; //#2558
        $k[$j++] = _Lq; //#2558
        if (_Lq == -1) { //#2558
            $cleartomark(); //#2558
            $j -= 2; //#2558
            $k[$j++] = 'bwipp.GS1UnknownCSET32Character#2558'; //#2558
            $k[$j++] = "Unknown CSET 32 character"; //#2558
            $k[$j++] = false; //#2558
            return true; //#2558
        } //#2558
        $astore($a($counttomark())); //#2559
        var _Lt = $k[--$j]; //#2559
        var _Lu = $k[--$j]; //#2559
        $k[$j++] = _Lt; //#2559
        $k[$j++] = _Lu; //#2559
        $j--; //#2559
        var _Lv = $k[--$j]; //#2560
        var _Ly = $k[--$j]; //#2560
        var _Lz = $a([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83]); //#2561
        var _M0 = _Ly.length; //#2563
        $k[$j++] = $f(($get(_Lv, 0) << 5) + $get(_Lv, 1)); //#2563
        $k[$j++] = _Ly; //#2563
        $k[$j++] = _Lz; //#2563
        $k[$j++] = _M0; //#2563
        if (_M0 > _Lz.length) { //#2563
            $j -= 5; //#2563
            $k[$j++] = 'bwipp.GS1alphaTooLong#2563'; //#2563
            $k[$j++] = "Alphanumeric string is too long to check"; //#2563
            $k[$j++] = false; //#2563
            return true; //#2563
        } //#2563
        var _M1 = $k[--$j]; //#2564
        var _M3 = $geti($k[--$j], 0, _M1); //#2564
        for (var _M4 = 0, _M5 = _M3.length; _M4 < _M5; _M4++) { //#2564
            var _M7 = $k[--$j]; //#2564
            $k[$j++] = $get(_M3, _M4); //#2564
            $k[$j++] = _M7; //#2564
        } //#2564
        var _M8 = $k[--$j]; //#2565
        $k[$j++] = 0; //#2565
        $forall(_M8, function() { //#2565
            var _M9 = $k[--$j]; //#2565
            var _MA = $k[--$j]; //#2565
            var _MB = $k[--$j]; //#2565
            $k[$j++] = $f(_MA + (_MB * _M9)); //#2565
        }); //#2565
        var _MC = $k[--$j]; //#2565
        if ($k[--$j] != (_MC % 1021)) { //#2566
            $j--; //#2566
            $k[$j++] = 'bwipp.GS1badAlphaCheckCharacters#2566'; //#2566
            $k[$j++] = "Bad alphanumeric check characters"; //#2566
            $k[$j++] = false; //#2566
            return true; //#2566
        } //#2566
    }; //#2566
    if (!bwipp_gs1process.$ctx._2590) { //#2590
        (function() { //#2590
            var $ctx = Object.create($1); //#2590
            $k[$j++] = Infinity; //#2589
            var _ME = $a(['004', '008', '010', '012', '016', '020', '024', '028', '031', '032', '036', '040', '044', '048', '050', '051', '052', '056', '060', '064', '068', '070', '072', '074', '076', '084', '086', '090', '092', '096', '100', '104', '108', '112', '116', '120', '124', '132', '136', '140', '144', '148', '152', '156', '158', '162', '166', '170', '174', '175', '178', '180', '184', '188', '191', '192', '196', '203', '204', '208', '212', '214', '218', '222', '226', '231', '232', '233', '234', '238', '239', '242', '246', '248', '250', '254', '258', '260', '262', '266', '268', '270', '275', '276', '288', '292', '296', '300', '304', '308', '312', '316', '320', '324', '328', '332', '334', '336', '340', '344', '348', '352', '356', '360', '364', '368', '372', '376', '380', '384', '388', '392', '398', '400', '404', '408', '410', '414', '417', '418', '422', '426', '428', '430', '434', '438', '440', '442', '446', '450', '454', '458', '462', '466', '470', '474', '478', '480', '484', '492', '496', '498', '499', '500', '504', '508', '512', '516', '520', '524', '528', '531', '533', '534', '535', '540', '548', '554', '558', '562', '566', '570', '574', '578', '580', '581', '583', '584', '585', '586', '591', '598', '600', '604', '608', '612', '616', '620', '624', '626', '630', '634', '638', '642', '643', '646', '652', '654', '659', '660', '662', '663', '666', '670', '674', '678', '682', '686', '688', '690', '694', '702', '703', '704', '705', '706', '710', '716', '724', '728', '729', '732', '740', '744', '748', '752', '756', '760', '762', '764', '768', '772', '776', '780', '784', '788', '792', '795', '796', '798', '800', '804', '807', '818', '826', '831', '832', '833', '834', '840', '850', '854', '858', '860', '862', '876', '882', '887', '894']); //#2588
            for (var _MF = 0, _MG = _ME.length; _MF < _MG; _MF++) { //#2589
                var _MH = $get(_ME, _MF); //#2589
                $k[$j++] = _MH; //#2589
                $k[$j++] = _MH; //#2589
            } //#2589
            $ctx.iso3166 = $d(); //#2589
            for (var _MJ in $ctx) {
                $ctx.hasOwnProperty(_MJ) && (bwipp_gs1process.$ctx[_MJ] = $ctx[_MJ]);
            } //#2589
            bwipp_gs1process.$ctx._2590 = 1; //#2589
        })(); //#2589
    } //#2589
    $1.lintiso3166 = function() {
        var _MM = $get($1.iso3166, $k[--$j]) !== undefined; //#2593
        if (!_MM) { //#2593
            $j--; //#2593
            $k[$j++] = 'bwipp.GS1UnknownCountry#2593'; //#2593
            $k[$j++] = "Unknown country code"; //#2593
            $k[$j++] = false; //#2593
            return true; //#2593
        } //#2593
    }; //#2593
    $1.lintiso3166999 = function() {
        var _MN = $k[--$j]; //#2597
        $k[$j++] = _MN; //#2601
        if ($ne(_MN, '999')) { //#2600
            var _MQ = $get($1.iso3166, $k[--$j]) !== undefined; //#2598
            if (!_MQ) { //#2598
                $j--; //#2598
                $k[$j++] = 'bwipp.GS1UnknownCountryOr999#2598'; //#2598
                $k[$j++] = "Unknown country code or not 999"; //#2598
                $k[$j++] = false; //#2598
                return true; //#2598
            } //#2598
        } else { //#2600
            $j--; //#2600
        } //#2600
    }; //#2600
    $1.lintiso3166list = function() {
        var _MR = $k[--$j]; //#2605
        $k[$j++] = _MR; //#2607
        if ((_MR.length % 3) != 0) { //#2607
            $j -= 2; //#2606
            $k[$j++] = 'bwipp.GS1BadCountryListLength#2606'; //#2606
            $k[$j++] = "Not a group of three-digit country codes"; //#2606
            $k[$j++] = false; //#2606
            return true; //#2606
        } //#2606
        var _MS = $k[--$j]; //#2609
        $k[$j++] = _MS; //#2612
        $k[$j++] = true; //#2612
        for (var _MU = 0, _MT = _MS.length - 1; _MU <= _MT; _MU += 3) { //#2612
            var _MV = $k[--$j]; //#2610
            var _MW = $k[--$j]; //#2610
            var _MZ = $get($1.iso3166, $geti(_MW, _MU, 3)) !== undefined; //#2611
            $k[$j++] = _MW; //#2611
            $k[$j++] = _MV; //#2611
            if (!_MZ) { //#2611
                $j -= 2; //#2611
                $k[$j++] = false; //#2611
                break; //#2611
            } //#2611
        } //#2611
        if ($nt($k[--$j])) { //#2613
            $j--; //#2613
            $k[$j++] = 'bwipp.GS1UnknownCountry#2613'; //#2613
            $k[$j++] = "Unknown country code"; //#2613
            $k[$j++] = false; //#2613
            return true; //#2613
        } //#2613
        $j--; //#2614
    }; //#2614
    if (!bwipp_gs1process.$ctx._2644) { //#2644
        (function() { //#2644
            var $ctx = Object.create($1); //#2644
            $k[$j++] = Infinity; //#2643
            var _Mb = $a(['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'BQ', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ', 'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'SS', 'ST', 'SV', 'SX', 'SY', 'SZ', 'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'UM', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', 'WF', 'WS', 'YE', 'YT', 'ZA', 'ZM', 'ZW']); //#2642
            for (var _Mc = 0, _Md = _Mb.length; _Mc < _Md; _Mc++) { //#2643
                var _Me = $get(_Mb, _Mc); //#2643
                $k[$j++] = _Me; //#2643
                $k[$j++] = _Me; //#2643
            } //#2643
            $ctx.iso3166alpha2 = $d(); //#2643
            for (var _Mg in $ctx) {
                $ctx.hasOwnProperty(_Mg) && (bwipp_gs1process.$ctx[_Mg] = $ctx[_Mg]);
            } //#2643
            bwipp_gs1process.$ctx._2644 = 1; //#2643
        })(); //#2643
    } //#2643
    $1.lintiso3166alpha2 = function() {
        var _Mj = $get($1.iso3166alpha2, $k[--$j]) !== undefined; //#2647
        if (!_Mj) { //#2647
            $j--; //#2647
            $k[$j++] = 'bwipp.GS1UnknownCountryAlpha#2647'; //#2647
            $k[$j++] = "Unknown country alpha code"; //#2647
            $k[$j++] = false; //#2647
            return true; //#2647
        } //#2647
    }; //#2647
    if (!bwipp_gs1process.$ctx._2675) { //#2675
        (function() { //#2675
            var $ctx = Object.create($1); //#2675
            $k[$j++] = Infinity; //#2674
            var _Mk = $a(['008', '012', '032', '036', '044', '048', '050', '051', '052', '060', '064', '068', '072', '084', '090', '096', '104', '108', '116', '124', '132', '136', '144', '152', '156', '170', '174', '188', '191', '192', '203', '208', '214', '222', '230', '232', '238', '242', '262', '270', '292', '320', '324', '328', '332', '340', '344', '348', '352', '356', '360', '364', '368', '376', '388', '392', '398', '400', '404', '408', '410', '414', '417', '418', '422', '426', '430', '434', '446', '454', '458', '462', '480', '484', '496', '498', '504', '512', '516', '524', '532', '533', '548', '554', '558', '566', '578', '586', '590', '598', '600', '604', '608', '634', '643', '646', '654', '682', '690', '694', '702', '704', '706', '710', '728', '748', '752', '756', '760', '764', '776', '780', '784', '788', '800', '807', '818', '826', '834', '840', '858', '860', '882', '886', '901', '925', '927', '928', '929', '930', '931', '932', '933', '934', '936', '938', '940', '941', '943', '944', '946', '947', '948', '949', '950', '951', '952', '953', '955', '956', '957', '958', '959', '960', '961', '962', '963', '964', '965', '967', '968', '969', '970', '971', '972', '973', '975', '976', '977', '978', '979', '980', '981', '984', '985', '986', '990', '994', '997', '999']); //#2673
            for (var _Ml = 0, _Mm = _Mk.length; _Ml < _Mm; _Ml++) { //#2674
                var _Mn = $get(_Mk, _Ml); //#2674
                $k[$j++] = _Mn; //#2674
                $k[$j++] = _Mn; //#2674
            } //#2674
            $ctx.iso4217 = $d(); //#2674
            for (var _Mp in $ctx) {
                $ctx.hasOwnProperty(_Mp) && (bwipp_gs1process.$ctx[_Mp] = $ctx[_Mp]);
            } //#2674
            bwipp_gs1process.$ctx._2675 = 1; //#2674
        })(); //#2674
    } //#2674
    $1.lintiso4217 = function() {
        var _Ms = $get($1.iso4217, $k[--$j]) !== undefined; //#2678
        if (!_Ms) { //#2678
            $j--; //#2678
            $k[$j++] = 'bwipp.GS1UnknownCurrency#2678'; //#2678
            $k[$j++] = "Unknown currency code"; //#2678
            $k[$j++] = false; //#2678
            return true; //#2678
        } //#2678
    }; //#2678
    $1.lintiban = function() {
        var _Mt = $k[--$j]; //#2682
        $k[$j++] = _Mt; //#2682
        if (_Mt.length <= 4) { //#2682
            $j -= 2; //#2682
            $k[$j++] = 'bwipp.GS1tooShort#2682'; //#2682
            $k[$j++] = "IBAN too short"; //#2682
            $k[$j++] = false; //#2682
            return true; //#2682
        } //#2682
        var _Mu = $k[--$j]; //#2683
        $k[$j++] = _Mu; //#2688
        $k[$j++] = true; //#2688
        $forall(_Mu, function() { //#2688
            var _Mv = $s(1); //#2684
            $put(_Mv, 0, $k[--$j]); //#2684
            $search("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", _Mv); //#2686
            if ($nt($k[--$j])) { //#2686
                $j -= 2; //#2686
                $k[$j++] = false; //#2686
                return true; //#2686
            } //#2686
            $j -= 3; //#2687
        }); //#2687
        if ($nt($k[--$j])) { //#2689
            $j--; //#2689
            $k[$j++] = 'bwipp.GS1badIBANcharacter#2689'; //#2689
            $k[$j++] = "Invalid IBAN character"; //#2689
            $k[$j++] = false; //#2689
            return true; //#2689
        } //#2689
        var _Mz = $k[--$j]; //#2690
        $k[$j++] = _Mz; //#2690
        $k[$j++] = _Mz; //#2690
        $k[$j++] = Infinity; //#2690
        var _N0 = $k[--$j]; //#2690
        var _N1 = $k[--$j]; //#2690
        $k[$j++] = _N0; //#2690
        $k[$j++] = _N1; //#2690
        $k[$j++] = Infinity; //#2690
        var _N2 = $k[--$j]; //#2690
        var _N3 = $k[--$j]; //#2690
        $k[$j++] = _N2; //#2690
        $forall(_N3); //#2690
        $r($counttomark(), -4); //#2690
        $astore($a($counttomark())); //#2690
        var _N7 = $k[--$j]; //#2690
        var _N8 = $k[--$j]; //#2690
        $k[$j++] = _N7; //#2690
        $k[$j++] = _N8; //#2690
        $j--; //#2690
        $forall($k[--$j], function() { //#2692
            var _NB = $f($k[--$j] - 48); //#2691
            $k[$j++] = _NB; //#2691
            if (_NB > 9) { //#2691
                var _ND = $f($k[--$j] - 7); //#2691
                $k[$j++] = ~~(_ND / 10); //#2691
                $k[$j++] = _ND % 10; //#2691
            } //#2691
        }); //#2691
        $astore($a($counttomark())); //#2692
        var _NG = $k[--$j]; //#2692
        var _NH = $k[--$j]; //#2692
        $k[$j++] = _NG; //#2692
        $k[$j++] = _NH; //#2692
        $j--; //#2692
        var _NI = $k[--$j]; //#2693
        $k[$j++] = 0; //#2693
        $forall(_NI, function() { //#2693
            var _NJ = $k[--$j]; //#2693
            var _NK = $k[--$j]; //#2693
            $k[$j++] = ($f(_NJ + (_NK * 10))) % 97; //#2693
        }); //#2693
        if ($k[--$j] != 1) { //#2694
            $j -= 2; //#2694
            $k[$j++] = 'bwipp.GS1badIBANchecksum#2694'; //#2694
            $k[$j++] = "IBAN checksum incorrect"; //#2694
            $k[$j++] = false; //#2694
            return true; //#2694
        } //#2694
        var _NN = $geti($k[--$j], 0, 2); //#2695
        $k[$j++] = _NN; //#2695
        $1.lintiso3166alpha2(); //#2695
    }; //#2695
    $1.lintzero = function() {
        if ($ne($k[--$j], "0")) { //#2699
            $j--; //#2699
            $k[$j++] = 'bwipp.GS1zeroRequired#2699'; //#2699
            $k[$j++] = "Zero is required"; //#2699
            $k[$j++] = false; //#2699
            return true; //#2699
        } //#2699
    }; //#2699
    $1.lintnonzero = function() {
        var _NP = $k[--$j]; //#2703
        $k[$j++] = false; //#2703
        $forall(_NP, function() { //#2703
            if ($k[--$j] != 48) { //#2703
                $j--; //#2703
                $k[$j++] = true; //#2703
            } //#2703
        }); //#2703
        if ($nt($k[--$j])) { //#2704
            $j--; //#2704
            $k[$j++] = 'bwipp.GS1zeroNotPermitted#2704'; //#2704
            $k[$j++] = "Zero not permitted"; //#2704
            $k[$j++] = false; //#2704
            return true; //#2704
        } //#2704
    }; //#2704
    $1.lintnozeroprefix = function() {
        var _NS = $k[--$j]; //#2708
        if ((_NS.length > 1) && ($get(_NS, 0) == 48)) { //#2710
            $j--; //#2709
            $k[$j++] = 'bwipp.GS1badZeroPrefix#2709'; //#2709
            $k[$j++] = "Zero prefix is not permitted"; //#2709
            $k[$j++] = false; //#2709
            return true; //#2709
        } //#2709
    }; //#2709
    $1.lintyymmd0 = function() {
        var _NU = $k[--$j]; //#2714
        var _NW = $cvi($geti(_NU, 2, 2)); //#2714
        $k[$j++] = _NU; //#2714
        if ((_NW < 1) || (_NW > 12)) { //#2714
            $j--; //#2714
            $k[$j++] = 'bwipp.GS1badMonth#2714'; //#2714
            $k[$j++] = "Invalid month"; //#2714
            $k[$j++] = false; //#2714
            return true; //#2714
        } //#2714
        var _NX = $k[--$j]; //#2715
        var _NZ = $cvi($geti(_NX, 0, 2)); //#2715
        var _Na = _NZ - 21; //#2716
        $k[$j++] = _NX; //#2716
        $k[$j++] = _NZ; //#2716
        $k[$j++] = _Na; //#2716
        if (_Na >= 51) { //#2716
            $j--; //#2716
            var _Nb = $k[--$j]; //#2716
            $k[$j++] = $f(_Nb + 1900); //#2716
        } else { //#2716
            if ($k[--$j] <= -50) { //#2716
                var _Nd = $k[--$j]; //#2716
                $k[$j++] = $f(_Nd + 2100); //#2716
            } else { //#2716
                var _Ne = $k[--$j]; //#2716
                $k[$j++] = $f(_Ne + 2000); //#2716
            } //#2716
        } //#2716
        var _Nf = $k[--$j]; //#2717
        $k[$j++] = ((_Nf % 400) == 0) || (((_Nf % 4) == 0) && ((_Nf % 100) != 0)); //#2718
        $k[$j++] = Infinity; //#2718
        var _Ng = $k[--$j]; //#2718
        var _Ni = $k[--$j] ? 29 : 28; //#2718
        $k[$j++] = _Ng; //#2718
        $k[$j++] = 31; //#2718
        $k[$j++] = _Ni; //#2718
        $k[$j++] = 31; //#2718
        $k[$j++] = 30; //#2718
        $k[$j++] = 31; //#2718
        $k[$j++] = 30; //#2718
        $k[$j++] = 31; //#2718
        $k[$j++] = 31; //#2718
        $k[$j++] = 30; //#2718
        $k[$j++] = 31; //#2718
        $k[$j++] = 30; //#2718
        $k[$j++] = 31; //#2718
        var _Nj = $a(); //#2718
        var _Nk = $k[--$j]; //#2719
        if ($get(_Nj, $cvi($geti(_Nk, 2, 2)) - 1) < $cvi($geti(_Nk, 4, 2))) { //#2720
            $j--; //#2720
            $k[$j++] = 'bwipp.GS1badDay#2720'; //#2720
            $k[$j++] = "Invalid day of month"; //#2720
            $k[$j++] = false; //#2720
            return true; //#2720
        } //#2720
    }; //#2720
    $1.lintyymmdd = function() {
        var _No = $k[--$j]; //#2724
        $k[$j++] = _No; //#2724
        if (_No.length != 6) { //#2724
            $j--; //#2724
            $k[$j++] = 'bwipp.GS1badDateLength#2724'; //#2724
            $k[$j++] = "Invalid length for date"; //#2724
            $k[$j++] = false; //#2724
            return true; //#2724
        } //#2724
        var _Np = $k[--$j]; //#2725
        $k[$j++] = _Np; //#2725
        if ($cvi($geti(_Np, 4, 2)) < 1) { //#2725
            $j--; //#2725
            $k[$j++] = 'bwipp.GS1badDay#2725'; //#2725
            $k[$j++] = "Invalid day of month"; //#2725
            $k[$j++] = false; //#2725
            return true; //#2725
        } //#2725
        $1.lintyymmd0(); //#2726
    }; //#2726
    $1.lintyymmddhh = function() {
        var _Nr = $k[--$j]; //#2730
        $k[$j++] = _Nr; //#2730
        if (_Nr.length != 8) { //#2730
            $j--; //#2730
            $k[$j++] = 'bwipp.GS1badYYMMDDHHLength#2730'; //#2730
            $k[$j++] = "Invalid length for date with hour"; //#2730
            $k[$j++] = false; //#2730
            return true; //#2730
        } //#2730
        var _Ns = $k[--$j]; //#2731
        $k[$j++] = _Ns; //#2731
        if ($cvi($geti(_Ns, 6, 2)) > 23) { //#2731
            $j -= 2; //#2731
            $k[$j++] = 'bwipp.GS1badHour#2731'; //#2731
            $k[$j++] = "Invalid hour of day"; //#2731
            $k[$j++] = false; //#2731
            return true; //#2731
        } //#2731
        var _Nv = $geti($k[--$j], 0, 6); //#2732
        $k[$j++] = _Nv; //#2732
        $1.lintyymmdd(); //#2732
    }; //#2732
    $1.linthhmm = function() {
        var _Nw = $k[--$j]; //#2736
        $k[$j++] = _Nw; //#2736
        if ($cvi($geti(_Nw, 0, 2)) > 23) { //#2736
            $j -= 2; //#2736
            $k[$j++] = 'bwipp.GS1badHour#2736'; //#2736
            $k[$j++] = "Invalid hour of day"; //#2736
            $k[$j++] = false; //#2736
            return true; //#2736
        } //#2736
        if ($cvi($geti($k[--$j], 2, 2)) > 59) { //#2737
            $j--; //#2737
            $k[$j++] = 'bwipp.GS1badMinute#2737'; //#2737
            $k[$j++] = "Invalid minute in the hour"; //#2737
            $k[$j++] = false; //#2737
            return true; //#2737
        } //#2737
    }; //#2737
    $1.lintmmoptss = function() {
        var _O0 = $k[--$j]; //#2741
        var _O1 = _O0.length; //#2741
        $k[$j++] = _O0; //#2743
        if ((_O1 != 2) && (_O1 != 4)) { //#2743
            $j--; //#2742
            $k[$j++] = 'bwipp.GS1badTimeLength#2742'; //#2742
            $k[$j++] = "Invalid length for optional minutes and seconds"; //#2742
            $k[$j++] = false; //#2742
            return true; //#2742
        } //#2742
        var _O2 = $k[--$j]; //#2744
        $k[$j++] = _O2; //#2744
        if ($cvi($geti(_O2, 0, 2)) > 59) { //#2744
            $j -= 2; //#2744
            $k[$j++] = 'bwipp.GS1badMinute#2744'; //#2744
            $k[$j++] = "Invalid minute in the hour"; //#2744
            $k[$j++] = false; //#2744
            return true; //#2744
        } //#2744
        var _O4 = $k[--$j]; //#2745
        $k[$j++] = _O4; //#2747
        if (_O4.length >= 4) { //#2747
            var _O5 = $k[--$j]; //#2746
            $k[$j++] = _O5; //#2746
            if ($cvi($geti(_O5, 2, 2)) > 59) { //#2746
                $j -= 2; //#2746
                $k[$j++] = 'bwipp.GS1badSecond#2746'; //#2746
                $k[$j++] = "Invalid second in the minute"; //#2746
                $k[$j++] = false; //#2746
                return true; //#2746
            } //#2746
        } //#2746
        $j--; //#2748
    }; //#2748
    $1.lintyesno = function() {
        var _O7 = $k[--$j]; //#2752
        if ($ne(_O7, "0") && $ne(_O7, "1")) { //#2754
            $j--; //#2753
            $k[$j++] = 'bwipp.GS1badBoolean#2753'; //#2753
            $k[$j++] = "Neither 0 nor 1 for yes or no"; //#2753
            $k[$j++] = false; //#2753
            return true; //#2753
        } //#2753
    }; //#2753
    $1.lintwinding = function() {
        var _O8 = $k[--$j]; //#2758
        if ($ne(_O8, "0") && ($ne(_O8, "1") && $ne(_O8, "9"))) { //#2760
            $j--; //#2759
            $k[$j++] = 'bwipp.GS1badWinding#2759'; //#2759
            $k[$j++] = "Invalid winding direction"; //#2759
            $k[$j++] = false; //#2759
            return true; //#2759
        } //#2759
    }; //#2759
    $1.lintpieceoftotal = function() {
        var _O9 = $k[--$j]; //#2764
        $k[$j++] = _O9; //#2764
        if ((_O9.length % 2) != 0) { //#2764
            $j -= 2; //#2764
            $k[$j++] = 'bwipp.GS1badPieceTotalLength#2764'; //#2764
            $k[$j++] = "Invalid piece/total length"; //#2764
            $k[$j++] = false; //#2764
            return true; //#2764
        } //#2764
        var _OA = $k[--$j]; //#2765
        var _OC = $cvi($geti(_OA, 0, ~~(_OA.length / 2))); //#2766
        $k[$j++] = _OA; //#2766
        $k[$j++] = _OC; //#2766
        if (_OC == 0) { //#2766
            $j -= 3; //#2766
            $k[$j++] = 'bwipp.GS1badPieceNumber#2766'; //#2766
            $k[$j++] = "Invalid piece number"; //#2766
            $k[$j++] = false; //#2766
            return true; //#2766
        } //#2766
        var _OD = $k[--$j]; //#2767
        var _OE = $k[--$j]; //#2767
        var _OF = ~~(_OE.length / 2); //#2767
        var _OH = $cvi($geti(_OE, _OF, _OF)); //#2768
        $k[$j++] = _OD; //#2768
        $k[$j++] = _OH; //#2768
        if (_OH == 0) { //#2768
            $j -= 3; //#2768
            $k[$j++] = 'bwipp.GS1badPieceTotal#2768'; //#2768
            $k[$j++] = "Invalid total number"; //#2768
            $k[$j++] = false; //#2768
            return true; //#2768
        } //#2768
        var _OI = $k[--$j]; //#2769
        if ($gt($k[--$j], _OI)) { //#2769
            $j--; //#2769
            $k[$j++] = 'bwipp.GS1pieceExceedsTotal#2769'; //#2769
            $k[$j++] = "Piece number exceeds total"; //#2769
            $k[$j++] = false; //#2769
            return true; //#2769
        } //#2769
    }; //#2769
    $1.lintpcenc = function() {
        for (;;) { //#2783
            $search($k[--$j], "%"); //#2774
            if ($nt($k[--$j])) { //#2774
                $j--; //#2774
                break; //#2774
            } //#2774
            $j -= 2; //#2775
            var _OM = $k[--$j]; //#2775
            $k[$j++] = _OM; //#2775
            if (_OM.length < 2) { //#2775
                $j -= 2; //#2775
                $k[$j++] = 'bwipp.GS1badPercentEscape#2775'; //#2775
                $k[$j++] = "Invalid % escape"; //#2775
                $k[$j++] = false; //#2775
                break; //#2775
            } //#2775
            var _ON = $k[--$j]; //#2776
            var _OO = $geti(_ON, 0, 2); //#2776
            $k[$j++] = _ON; //#2781
            $k[$j++] = true; //#2781
            for (var _OP = 0, _OQ = _OO.length; _OP < _OQ; _OP++) { //#2781
                var _OS = $s(1); //#2777
                $put(_OS, 0, $get(_OO, _OP)); //#2777
                $search("0123456789ABCDEFabcdef", _OS); //#2779
                if ($nt($k[--$j])) { //#2779
                    $j -= 2; //#2779
                    $k[$j++] = false; //#2779
                    return true; //#2779
                } //#2779
                $j -= 3; //#2780
            } //#2780
            if ($nt($k[--$j])) { //#2782
                $j -= 2; //#2782
                $k[$j++] = 'bwipp.GS1badPercentChars#2782'; //#2782
                $k[$j++] = "Invalid characters for percent encoding"; //#2782
                $k[$j++] = false; //#2782
                break; //#2782
            } //#2782
        } //#2782
    }; //#2782
    $1.lintcouponcode = function() {
        var _OV = $k[--$j]; //#2787
        $k[$j++] = _OV; //#2789
        $k[$j++] = true; //#2789
        $forall(_OV, function() { //#2789
            var _OW = $k[--$j]; //#2788
            if ((_OW < 48) || (_OW > 57)) { //#2788
                $j--; //#2788
                $k[$j++] = false; //#2788
                return true; //#2788
            } //#2788
        }); //#2788
        if ($nt($k[--$j])) { //#2790
            $j -= 2; //#2790
            $k[$j++] = 'bwipp.GS1couponNotNumeric#2790'; //#2790
            $k[$j++] = "Coupon not numeric"; //#2790
            $k[$j++] = false; //#2790
            return true; //#2790
        } //#2790
        var _OY = $k[--$j]; //#2793
        $k[$j++] = _OY; //#2795
        if (_OY.length < 1) { //#2795
            $j -= 2; //#2794
            $k[$j++] = 'bwipp.GS1couponTooShortGCPVLI#2794'; //#2794
            $k[$j++] = "Coupon too short: Missing GCP VLI"; //#2794
            $k[$j++] = false; //#2794
            return true; //#2794
        } //#2794
        var _OZ = $k[--$j]; //#2796
        var _Ob = $cvi($geti(_OZ, 0, 1)); //#2796
        $k[$j++] = _OZ; //#2798
        $k[$j++] = _Ob; //#2798
        if (_Ob > 6) { //#2798
            $j -= 2; //#2797
            $k[$j++] = 'bwipp.GS1couponBadGCPVLI#2797'; //#2797
            $k[$j++] = "Coupon GCP length indicator must be 0-6"; //#2797
            $k[$j++] = false; //#2797
            return true; //#2797
        } //#2797
        var _Oc = $k[--$j]; //#2799
        var _Od = $k[--$j]; //#2800
        $k[$j++] = _Od; //#2802
        $k[$j++] = $f($f(_Oc + 6) + 1); //#2802
        if (($f($f(_Oc + 6) + 1)) > _Od.length) { //#2802
            $j -= 3; //#2801
            $k[$j++] = 'bwipp.GS1couponTooShortGCP#2801'; //#2801
            $k[$j++] = "Coupon too short: GCP truncated"; //#2801
            $k[$j++] = false; //#2801
            return true; //#2801
        } //#2801
        var _Oe = $k[--$j]; //#2803
        var _Of = $k[--$j]; //#2803
        var _Og = $geti(_Of, _Oe, $f(_Of.length - _Oe)); //#2803
        $k[$j++] = _Og; //#2808
        if (_Og.length < 6) { //#2808
            $j -= 2; //#2807
            $k[$j++] = 'bwipp.GS1couponTooShortOfferCode#2807'; //#2807
            $k[$j++] = "Coupon too short: Offer Code truncated"; //#2807
            $k[$j++] = false; //#2807
            return true; //#2807
        } //#2807
        var _Oh = $k[--$j]; //#2809
        var _Oi = $geti(_Oh, 6, _Oh.length - 6); //#2809
        $k[$j++] = _Oi; //#2814
        if (_Oi.length < 1) { //#2814
            $j -= 2; //#2813
            $k[$j++] = 'bwipp.GS1couponTooShortSaveValueVLI#2813'; //#2813
            $k[$j++] = "Coupon too short: Missing Save Value VLI"; //#2813
            $k[$j++] = false; //#2813
            return true; //#2813
        } //#2813
        var _Oj = $k[--$j]; //#2815
        var _Ol = $cvi($geti(_Oj, 0, 1)); //#2815
        $k[$j++] = _Oj; //#2817
        $k[$j++] = _Ol; //#2817
        if ((_Ol < 1) || (_Ol > 5)) { //#2817
            $j -= 2; //#2816
            $k[$j++] = 'bwipp.GS1couponBadSaveValueVLI#2816'; //#2816
            $k[$j++] = "Coupon Save Value length indicator must be 1-5"; //#2816
            $k[$j++] = false; //#2816
            return true; //#2816
        } //#2816
        var _Om = $k[--$j]; //#2818
        var _On = $k[--$j]; //#2819
        $k[$j++] = _On; //#2821
        $k[$j++] = $f(_Om + 1); //#2821
        if ($f(_Om + 1) > _On.length) { //#2821
            $j -= 3; //#2820
            $k[$j++] = 'bwipp.GS1couponTooShortSaveValue#2820'; //#2820
            $k[$j++] = "Coupon too short: Save Value truncated"; //#2820
            $k[$j++] = false; //#2820
            return true; //#2820
        } //#2820
        var _Oo = $k[--$j]; //#2822
        var _Op = $k[--$j]; //#2822
        var _Oq = $geti(_Op, _Oo, $f(_Op.length - _Oo)); //#2822
        $k[$j++] = _Oq; //#2827
        if (_Oq.length < 1) { //#2827
            $j -= 2; //#2826
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseRequirementVLI#2826'; //#2826
            $k[$j++] = "Coupon too short: Missing 1st Purchase Requirement VLI"; //#2826
            $k[$j++] = false; //#2826
            return true; //#2826
        } //#2826
        var _Or = $k[--$j]; //#2828
        var _Ot = $cvi($geti(_Or, 0, 1)); //#2828
        $k[$j++] = _Or; //#2830
        $k[$j++] = _Ot; //#2830
        if ((_Ot < 1) || (_Ot > 5)) { //#2830
            $j -= 2; //#2829
            $k[$j++] = 'bwipp.GS1couponBad1stPurchaseRequirementVLI#2829'; //#2829
            $k[$j++] = "Coupon 1st Purchase Requirement length indicator must be 1-5"; //#2829
            $k[$j++] = false; //#2829
            return true; //#2829
        } //#2829
        var _Ou = $k[--$j]; //#2831
        var _Ov = $k[--$j]; //#2832
        $k[$j++] = _Ov; //#2834
        $k[$j++] = $f(_Ou + 1); //#2834
        if ($f(_Ou + 1) > _Ov.length) { //#2834
            $j -= 3; //#2833
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseRequirement#2833'; //#2833
            $k[$j++] = "Coupon too short: 1st Purchase Requirement truncated"; //#2833
            $k[$j++] = false; //#2833
            return true; //#2833
        } //#2833
        var _Ow = $k[--$j]; //#2835
        var _Ox = $k[--$j]; //#2835
        var _Oy = $geti(_Ox, _Ow, $f(_Ox.length - _Ow)); //#2835
        $k[$j++] = _Oy; //#2840
        if (_Oy.length < 1) { //#2840
            $j -= 2; //#2839
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseRequirementCode#2839'; //#2839
            $k[$j++] = "Coupon too short: Missing 1st Purchase Requirement Code"; //#2839
            $k[$j++] = false; //#2839
            return true; //#2839
        } //#2839
        var _Oz = $k[--$j]; //#2841
        var _P1 = $cvi($geti(_Oz, 0, 1)); //#2841
        $k[$j++] = _Oz; //#2843
        if ((_P1 > 4) && (_P1 != 9)) { //#2843
            $j -= 2; //#2842
            $k[$j++] = 'bwipp.GS1couponBad1stPurchaseRequirementCode#2842'; //#2842
            $k[$j++] = "Coupon 1st Purchase Requirement Code must be 0-4 or 9"; //#2842
            $k[$j++] = false; //#2842
            return true; //#2842
        } //#2842
        var _P2 = $k[--$j]; //#2844
        var _P3 = $geti(_P2, 1, _P2.length - 1); //#2844
        $k[$j++] = _P3; //#2849
        if (_P3.length < 3) { //#2849
            $j -= 2; //#2848
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseFamilyCode#2848'; //#2848
            $k[$j++] = "Coupon too short: 1st Purchase Family Code truncated"; //#2848
            $k[$j++] = false; //#2848
            return true; //#2848
        } //#2848
        var _P4 = $k[--$j]; //#2850
        var _P5 = $geti(_P4, 3, _P4.length - 3); //#2850
        $k[$j++] = _P5; //#2906
        if (_P5.length >= 1) { //#2906
            var _P6 = $k[--$j]; //#2853
            $k[$j++] = _P6; //#2906
            if ($cvi($geti(_P6, 0, 1)) == 1) { //#2906
                var _P8 = $k[--$j]; //#2854
                var _P9 = $geti(_P8, 1, _P8.length - 1); //#2854
                $k[$j++] = _P9; //#2859
                if (_P9.length < 1) { //#2859
                    $j -= 2; //#2858
                    $k[$j++] = 'bwipp.GS1couponTooShortAdditionalPurchaseRulesCode#2858'; //#2858
                    $k[$j++] = "Coupon too short: Missing Additional Purchase Rules Code"; //#2858
                    $k[$j++] = false; //#2858
                    return true; //#2858
                } //#2858
                var _PA = $k[--$j]; //#2860
                $k[$j++] = _PA; //#2862
                if ($cvi($geti(_PA, 0, 1)) > 3) { //#2862
                    $j -= 2; //#2861
                    $k[$j++] = 'bwipp.GS1couponBadAdditionalPurchaseRulesCode#2861'; //#2861
                    $k[$j++] = "Coupon Additional Purchase Rules Code must be 0-3"; //#2861
                    $k[$j++] = false; //#2861
                    return true; //#2861
                } //#2861
                var _PC = $k[--$j]; //#2863
                var _PD = $geti(_PC, 1, _PC.length - 1); //#2863
                $k[$j++] = _PD; //#2868
                if (_PD.length < 1) { //#2868
                    $j -= 2; //#2867
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseRequirementVLI#2867'; //#2867
                    $k[$j++] = "Coupon too short: Missing 2nd Purchase Requirement VLI"; //#2867
                    $k[$j++] = false; //#2867
                    return true; //#2867
                } //#2867
                var _PE = $k[--$j]; //#2869
                var _PG = $cvi($geti(_PE, 0, 1)); //#2869
                $k[$j++] = _PE; //#2871
                $k[$j++] = _PG; //#2871
                if ((_PG < 1) || (_PG > 5)) { //#2871
                    $j -= 2; //#2870
                    $k[$j++] = 'bwipp.GS1couponBad2ndPurchaseRequirementVLI#2870'; //#2870
                    $k[$j++] = "Coupon 2nd Purchase Requirement length indicator must be 1-5"; //#2870
                    $k[$j++] = false; //#2870
                    return true; //#2870
                } //#2870
                var _PH = $k[--$j]; //#2872
                var _PI = $k[--$j]; //#2873
                $k[$j++] = _PI; //#2875
                $k[$j++] = $f(_PH + 1); //#2875
                if ($f(_PH + 1) > _PI.length) { //#2875
                    $j -= 3; //#2874
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseRequirement#2874'; //#2874
                    $k[$j++] = "Coupon too short: 2nd Purchase Requirement truncated"; //#2874
                    $k[$j++] = false; //#2874
                    return true; //#2874
                } //#2874
                var _PJ = $k[--$j]; //#2876
                var _PK = $k[--$j]; //#2876
                var _PL = $geti(_PK, _PJ, $f(_PK.length - _PJ)); //#2876
                $k[$j++] = _PL; //#2881
                if (_PL.length < 1) { //#2881
                    $j -= 2; //#2880
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseRequirementCode#2880'; //#2880
                    $k[$j++] = "Coupon too short: Missing 2nd Purchase Requirement Code"; //#2880
                    $k[$j++] = false; //#2880
                    return true; //#2880
                } //#2880
                var _PM = $k[--$j]; //#2882
                var _PO = $cvi($geti(_PM, 0, 1)); //#2882
                $k[$j++] = _PM; //#2884
                if ((_PO > 4) && (_PO != 9)) { //#2884
                    $j -= 2; //#2883
                    $k[$j++] = 'bwipp.GS1couponBad2ndPurchaseRequirementCode#2883'; //#2883
                    $k[$j++] = "Coupon 2nd Purchase Requirement Code must be 0-4 or 9"; //#2883
                    $k[$j++] = false; //#2883
                    return true; //#2883
                } //#2883
                var _PP = $k[--$j]; //#2885
                var _PQ = $geti(_PP, 1, _PP.length - 1); //#2885
                $k[$j++] = _PQ; //#2890
                if (_PQ.length < 3) { //#2890
                    $j -= 2; //#2889
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseFamilyCode#2889'; //#2889
                    $k[$j++] = "Coupon too short: 2nd Purchase Family Code truncated"; //#2889
                    $k[$j++] = false; //#2889
                    return true; //#2889
                } //#2889
                var _PR = $k[--$j]; //#2891
                var _PS = $geti(_PR, 3, _PR.length - 3); //#2891
                $k[$j++] = _PS; //#2896
                if (_PS.length < 1) { //#2896
                    $j -= 2; //#2895
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseGCPVLI#2895'; //#2895
                    $k[$j++] = "Coupon too short: Missing 2nd Purchase GCP VLI"; //#2895
                    $k[$j++] = false; //#2895
                    return true; //#2895
                } //#2895
                var _PT = $k[--$j]; //#2897
                var _PV = $cvi($geti(_PT, 0, 1)); //#2897
                $k[$j++] = _PT; //#2899
                $k[$j++] = _PV; //#2899
                if ((_PV > 6) && (_PV != 9)) { //#2899
                    $j -= 2; //#2898
                    $k[$j++] = 'bwipp.GS1couponBad2ndPurchaseGCPVLI#2898'; //#2898
                    $k[$j++] = "Coupon 2nd Purchase GCP length indicator must be 0-6 or 9"; //#2898
                    $k[$j++] = false; //#2898
                    return true; //#2898
                } //#2898
                var _PW = $k[--$j]; //#2900
                $k[$j++] = _PW; //#2900
                if (_PW != 9) { //#2900
                    var _PX = $k[--$j]; //#2900
                    $k[$j++] = $f(_PX + 6); //#2900
                } else { //#2900
                    $j--; //#2900
                    $k[$j++] = 0; //#2900
                } //#2900
                var _PY = $k[--$j]; //#2900
                var _PZ = $k[--$j]; //#2901
                $k[$j++] = _PZ; //#2903
                $k[$j++] = $f(_PY + 1); //#2903
                if ($f(_PY + 1) > _PZ.length) { //#2903
                    $j -= 3; //#2902
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseGCP#2902'; //#2902
                    $k[$j++] = "Coupon too short: 2nd Purchase GCP truncated"; //#2902
                    $k[$j++] = false; //#2902
                    return true; //#2902
                } //#2902
                var _Pa = $k[--$j]; //#2904
                var _Pb = $k[--$j]; //#2904
                $k[$j++] = $geti(_Pb, _Pa, $f(_Pb.length - _Pa)); //#2904
            } //#2904
        } //#2904
        var _Pd = $k[--$j]; //#2909
        $k[$j++] = _Pd; //#2953
        if (_Pd.length >= 1) { //#2953
            var _Pe = $k[--$j]; //#2909
            $k[$j++] = _Pe; //#2953
            if ($cvi($geti(_Pe, 0, 1)) == 2) { //#2953
                var _Pg = $k[--$j]; //#2910
                var _Ph = $geti(_Pg, 1, _Pg.length - 1); //#2910
                $k[$j++] = _Ph; //#2915
                if (_Ph.length < 1) { //#2915
                    $j -= 2; //#2914
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseRequirementVLI#2914'; //#2914
                    $k[$j++] = "Coupon too short: Missing 3rd Purchase Requirement VLI"; //#2914
                    $k[$j++] = false; //#2914
                    return true; //#2914
                } //#2914
                var _Pi = $k[--$j]; //#2916
                var _Pk = $cvi($geti(_Pi, 0, 1)); //#2916
                $k[$j++] = _Pi; //#2918
                $k[$j++] = _Pk; //#2918
                if ((_Pk < 1) || (_Pk > 5)) { //#2918
                    $j -= 2; //#2917
                    $k[$j++] = 'bwipp.GS1couponBad3rdPurchaseRequirementVLI#2917'; //#2917
                    $k[$j++] = "Coupon 3rd Purchase Requirement length indicator must be 1-5"; //#2917
                    $k[$j++] = false; //#2917
                    return true; //#2917
                } //#2917
                var _Pl = $k[--$j]; //#2919
                var _Pm = $k[--$j]; //#2920
                $k[$j++] = _Pm; //#2922
                $k[$j++] = $f(_Pl + 1); //#2922
                if ($f(_Pl + 1) > _Pm.length) { //#2922
                    $j -= 3; //#2921
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseRequirement#2921'; //#2921
                    $k[$j++] = "Coupon too short: 3rd Purchase Requirement truncated"; //#2921
                    $k[$j++] = false; //#2921
                    return true; //#2921
                } //#2921
                var _Pn = $k[--$j]; //#2923
                var _Po = $k[--$j]; //#2923
                var _Pp = $geti(_Po, _Pn, $f(_Po.length - _Pn)); //#2923
                $k[$j++] = _Pp; //#2928
                if (_Pp.length < 1) { //#2928
                    $j -= 2; //#2927
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseRequirementCode#2927'; //#2927
                    $k[$j++] = "Coupon too short: Missing 3rd Purchase Requirement Code"; //#2927
                    $k[$j++] = false; //#2927
                    return true; //#2927
                } //#2927
                var _Pq = $k[--$j]; //#2929
                var _Ps = $cvi($geti(_Pq, 0, 1)); //#2929
                $k[$j++] = _Pq; //#2931
                if ((_Ps > 4) && (_Ps != 9)) { //#2931
                    $j -= 2; //#2930
                    $k[$j++] = 'bwipp.GS1couponBad3rdPurchaseRequirementCode#2930'; //#2930
                    $k[$j++] = "Coupon 3rd Purchase Requirement Code must be 0-4 or 9"; //#2930
                    $k[$j++] = false; //#2930
                    return true; //#2930
                } //#2930
                var _Pt = $k[--$j]; //#2932
                var _Pu = $geti(_Pt, 1, _Pt.length - 1); //#2932
                $k[$j++] = _Pu; //#2937
                if (_Pu.length < 3) { //#2937
                    $j -= 2; //#2936
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseFamilyCode#2936'; //#2936
                    $k[$j++] = "Coupon too short: 3rd Purchase Family Code truncated"; //#2936
                    $k[$j++] = false; //#2936
                    return true; //#2936
                } //#2936
                var _Pv = $k[--$j]; //#2938
                var _Pw = $geti(_Pv, 3, _Pv.length - 3); //#2938
                $k[$j++] = _Pw; //#2943
                if (_Pw.length < 1) { //#2943
                    $j -= 2; //#2942
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseGCPVLI#2942'; //#2942
                    $k[$j++] = "Coupon too short: Missing 3rd Purchase GCP VLI"; //#2942
                    $k[$j++] = false; //#2942
                    return true; //#2942
                } //#2942
                var _Px = $k[--$j]; //#2944
                var _Pz = $cvi($geti(_Px, 0, 1)); //#2944
                $k[$j++] = _Px; //#2946
                $k[$j++] = _Pz; //#2946
                if ((_Pz > 6) && (_Pz != 9)) { //#2946
                    $j -= 2; //#2945
                    $k[$j++] = 'bwipp.GS1couponBad3rdPurchaseGCPVLI#2945'; //#2945
                    $k[$j++] = "Coupon 3rd Purchase GCP length indicator must be 0-6 or 9"; //#2945
                    $k[$j++] = false; //#2945
                    return true; //#2945
                } //#2945
                var _Q0 = $k[--$j]; //#2947
                $k[$j++] = _Q0; //#2947
                if (_Q0 != 9) { //#2947
                    var _Q1 = $k[--$j]; //#2947
                    $k[$j++] = $f(_Q1 + 6); //#2947
                } else { //#2947
                    $j--; //#2947
                    $k[$j++] = 0; //#2947
                } //#2947
                var _Q2 = $k[--$j]; //#2947
                var _Q3 = $k[--$j]; //#2948
                $k[$j++] = _Q3; //#2950
                $k[$j++] = $f(_Q2 + 1); //#2950
                if ($f(_Q2 + 1) > _Q3.length) { //#2950
                    $j -= 3; //#2949
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseGCP#2949'; //#2949
                    $k[$j++] = "Coupon too short: 3rd Purchase GCP truncated"; //#2949
                    $k[$j++] = false; //#2949
                    return true; //#2949
                } //#2949
                var _Q4 = $k[--$j]; //#2951
                var _Q5 = $k[--$j]; //#2951
                $k[$j++] = $geti(_Q5, _Q4, $f(_Q5.length - _Q4)); //#2951
            } //#2951
        } //#2951
        $1.couponexpire = -1; //#2956
        var _Q7 = $k[--$j]; //#2957
        $k[$j++] = _Q7; //#2975
        if (_Q7.length >= 1) { //#2975
            var _Q8 = $k[--$j]; //#2957
            $k[$j++] = _Q8; //#2975
            if ($cvi($geti(_Q8, 0, 1)) == 3) { //#2975
                var _QA = $k[--$j]; //#2958
                var _QB = $geti(_QA, 1, _QA.length - 1); //#2958
                $k[$j++] = _QB; //#2963
                if (_QB.length < 6) { //#2963
                    $j -= 2; //#2962
                    $k[$j++] = 'bwipp.GS1couponTooShortExpirationDate#2962'; //#2962
                    $k[$j++] = "Coupon too short: Expiration date"; //#2962
                    $k[$j++] = false; //#2962
                    return true; //#2962
                } //#2962
                var _QC = $k[--$j]; //#2964
                var _QE = $cvi($geti(_QC, 2, 2)); //#2964
                $k[$j++] = _QC; //#2964
                if ((_QE < 1) || (_QE > 12)) { //#2964
                    $j -= 2; //#2964
                    $k[$j++] = 'bwipp.GS1couponExpirationDateBadMonth#2964'; //#2964
                    $k[$j++] = "Invalid month in expiration date"; //#2964
                    $k[$j++] = false; //#2964
                    return true; //#2964
                } //#2964
                var _QF = $k[--$j]; //#2965
                var _QH = $cvi($geti(_QF, 0, 2)); //#2965
                var _QI = _QH - 21; //#2966
                $k[$j++] = _QF; //#2966
                $k[$j++] = _QH; //#2966
                $k[$j++] = _QI; //#2966
                if (_QI >= 51) { //#2966
                    $j--; //#2966
                    var _QJ = $k[--$j]; //#2966
                    $k[$j++] = $f(_QJ + 1900); //#2966
                } else { //#2966
                    if ($k[--$j] <= -50) { //#2966
                        var _QL = $k[--$j]; //#2966
                        $k[$j++] = $f(_QL + 2100); //#2966
                    } else { //#2966
                        var _QM = $k[--$j]; //#2966
                        $k[$j++] = $f(_QM + 2000); //#2966
                    } //#2966
                } //#2966
                var _QN = $k[--$j]; //#2967
                $k[$j++] = ((_QN % 400) == 0) || (((_QN % 4) == 0) && ((_QN % 100) != 0)); //#2968
                $k[$j++] = Infinity; //#2968
                var _QO = $k[--$j]; //#2968
                var _QQ = $k[--$j] ? 29 : 28; //#2968
                $k[$j++] = _QO; //#2968
                $k[$j++] = 31; //#2968
                $k[$j++] = _QQ; //#2968
                $k[$j++] = 31; //#2968
                $k[$j++] = 30; //#2968
                $k[$j++] = 31; //#2968
                $k[$j++] = 30; //#2968
                $k[$j++] = 31; //#2968
                $k[$j++] = 31; //#2968
                $k[$j++] = 30; //#2968
                $k[$j++] = 31; //#2968
                $k[$j++] = 30; //#2968
                $k[$j++] = 31; //#2968
                var _QR = $a(); //#2968
                var _QS = $k[--$j]; //#2969
                var _QW = $cvi($geti(_QS, 4, 2)); //#2970
                $k[$j++] = _QS; //#2971
                if (($get(_QR, $cvi($geti(_QS, 2, 2)) - 1) < _QW) || (_QW < 1)) { //#2971
                    $j -= 2; //#2971
                    $k[$j++] = 'bwipp.GS1couponExpirationDateBadDay#2971'; //#2971
                    $k[$j++] = "Invalid day of month in expiration date"; //#2971
                    $k[$j++] = false; //#2971
                    return true; //#2971
                } //#2971
                var _QX = $k[--$j]; //#2972
                $1.couponexpire = $cvi($geti(_QX, 0, 6)); //#2972
                $k[$j++] = $geti(_QX, 6, _QX.length - 6); //#2973
            } //#2973
        } //#2973
        var _Qa = $k[--$j]; //#2978
        $k[$j++] = _Qa; //#2999
        if (_Qa.length >= 1) { //#2999
            var _Qb = $k[--$j]; //#2978
            $k[$j++] = _Qb; //#2999
            if ($cvi($geti(_Qb, 0, 1)) == 4) { //#2999
                var _Qd = $k[--$j]; //#2979
                var _Qe = $geti(_Qd, 1, _Qd.length - 1); //#2979
                $k[$j++] = _Qe; //#2984
                if (_Qe.length < 6) { //#2984
                    $j -= 2; //#2983
                    $k[$j++] = 'bwipp.GS1couponTooShortStartDate#2983'; //#2983
                    $k[$j++] = "Coupon too short: Start date"; //#2983
                    $k[$j++] = false; //#2983
                    return true; //#2983
                } //#2983
                var _Qf = $k[--$j]; //#2985
                var _Qh = $cvi($geti(_Qf, 2, 2)); //#2985
                $k[$j++] = _Qf; //#2985
                if ((_Qh < 1) || (_Qh > 12)) { //#2985
                    $j -= 2; //#2985
                    $k[$j++] = 'bwipp.GS1couponStartDateBadMonth#2985'; //#2985
                    $k[$j++] = "Invalid month in start date"; //#2985
                    $k[$j++] = false; //#2985
                    return true; //#2985
                } //#2985
                var _Qi = $k[--$j]; //#2986
                var _Qk = $cvi($geti(_Qi, 0, 2)); //#2986
                var _Ql = _Qk - 21; //#2987
                $k[$j++] = _Qi; //#2987
                $k[$j++] = _Qk; //#2987
                $k[$j++] = _Ql; //#2987
                if (_Ql >= 51) { //#2987
                    $j--; //#2987
                    var _Qm = $k[--$j]; //#2987
                    $k[$j++] = $f(_Qm + 1900); //#2987
                } else { //#2987
                    if ($k[--$j] <= -50) { //#2987
                        var _Qo = $k[--$j]; //#2987
                        $k[$j++] = $f(_Qo + 2100); //#2987
                    } else { //#2987
                        var _Qp = $k[--$j]; //#2987
                        $k[$j++] = $f(_Qp + 2000); //#2987
                    } //#2987
                } //#2987
                var _Qq = $k[--$j]; //#2988
                $k[$j++] = ((_Qq % 400) == 0) || (((_Qq % 4) == 0) && ((_Qq % 100) != 0)); //#2989
                $k[$j++] = Infinity; //#2989
                var _Qr = $k[--$j]; //#2989
                var _Qt = $k[--$j] ? 29 : 28; //#2989
                $k[$j++] = _Qr; //#2989
                $k[$j++] = 31; //#2989
                $k[$j++] = _Qt; //#2989
                $k[$j++] = 31; //#2989
                $k[$j++] = 30; //#2989
                $k[$j++] = 31; //#2989
                $k[$j++] = 30; //#2989
                $k[$j++] = 31; //#2989
                $k[$j++] = 31; //#2989
                $k[$j++] = 30; //#2989
                $k[$j++] = 31; //#2989
                $k[$j++] = 30; //#2989
                $k[$j++] = 31; //#2989
                var _Qu = $a(); //#2989
                var _Qv = $k[--$j]; //#2990
                var _Qz = $cvi($geti(_Qv, 4, 2)); //#2991
                $k[$j++] = _Qv; //#2992
                if (($get(_Qu, $cvi($geti(_Qv, 2, 2)) - 1) < _Qz) || (_Qz < 1)) { //#2992
                    $j -= 2; //#2992
                    $k[$j++] = 'bwipp.GS1couponStartDateBadDay#2992'; //#2992
                    $k[$j++] = "Invalid day of month in start date"; //#2992
                    $k[$j++] = false; //#2992
                    return true; //#2992
                } //#2992
                var _R0 = $k[--$j]; //#2993
                $1.couponstart = $cvi($geti(_R0, 0, 6)); //#2993
                $k[$j++] = _R0; //#2996
                if (($1.couponexpire != -1) && ($1.couponexpire < $1.couponstart)) { //#2996
                    $j -= 2; //#2995
                    $k[$j++] = 'bwipp.GS1couponExpireDateBeforeStartDate#2995'; //#2995
                    $k[$j++] = "Coupon expires before it starts"; //#2995
                    $k[$j++] = false; //#2995
                    return true; //#2995
                } //#2995
                var _R5 = $k[--$j]; //#2997
                $k[$j++] = $geti(_R5, 6, _R5.length - 6); //#2997
            } //#2997
        } //#2997
        var _R7 = $k[--$j]; //#3002
        $k[$j++] = _R7; //#3015
        if (_R7.length >= 1) { //#3015
            var _R8 = $k[--$j]; //#3002
            $k[$j++] = _R8; //#3015
            if ($cvi($geti(_R8, 0, 1)) == 5) { //#3015
                var _RA = $k[--$j]; //#3003
                var _RB = $geti(_RA, 1, _RA.length - 1); //#3003
                $k[$j++] = _RB; //#3008
                if (_RB.length < 1) { //#3008
                    $j -= 2; //#3007
                    $k[$j++] = 'bwipp.GS1couponTooShortSerialNumberVLI#3007'; //#3007
                    $k[$j++] = "Coupon too short: Missing Serial Number VLI"; //#3007
                    $k[$j++] = false; //#3007
                    return true; //#3007
                } //#3007
                var _RC = $k[--$j]; //#3009
                var _RD = $geti(_RC, 0, 1); //#3009
                $k[$j++] = _RC; //#3012
                $k[$j++] = ($cvi(_RD) + 6) + 1; //#3012
                if ((($cvi(_RD) + 6) + 1) > _RC.length) { //#3012
                    $j -= 3; //#3011
                    $k[$j++] = 'bwipp.GS1couponTooShortSerialNumber#3011'; //#3011
                    $k[$j++] = "Coupon too short: Serial Number truncated"; //#3011
                    $k[$j++] = false; //#3011
                    return true; //#3011
                } //#3011
                var _RE = $k[--$j]; //#3013
                var _RF = $k[--$j]; //#3013
                $k[$j++] = $geti(_RF, _RE, $f(_RF.length - _RE)); //#3013
            } //#3013
        } //#3013
        var _RH = $k[--$j]; //#3018
        $k[$j++] = _RH; //#3034
        if (_RH.length >= 1) { //#3034
            var _RI = $k[--$j]; //#3018
            $k[$j++] = _RI; //#3034
            if ($cvi($geti(_RI, 0, 1)) == 6) { //#3034
                var _RK = $k[--$j]; //#3019
                var _RL = $geti(_RK, 1, _RK.length - 1); //#3019
                $k[$j++] = _RL; //#3024
                if (_RL.length < 1) { //#3024
                    $j -= 2; //#3023
                    $k[$j++] = 'bwipp.GS1couponTooShortRetailerGCPGLNVLI#3023'; //#3023
                    $k[$j++] = "Coupon too short: Missing Retailer GCP/GLN VLI"; //#3023
                    $k[$j++] = false; //#3023
                    return true; //#3023
                } //#3023
                var _RM = $k[--$j]; //#3025
                var _RO = $cvi($geti(_RM, 0, 1)); //#3025
                $k[$j++] = _RM; //#3027
                $k[$j++] = _RO; //#3027
                if ((_RO < 1) || (_RO > 7)) { //#3027
                    $j -= 2; //#3026
                    $k[$j++] = 'bwipp.GS1couponBadRetailerGCPGLNVLI#3026'; //#3026
                    $k[$j++] = "Coupon Retailer GCP/GLN length indicator must be 1-7"; //#3026
                    $k[$j++] = false; //#3026
                    return true; //#3026
                } //#3026
                var _RP = $k[--$j]; //#3028
                var _RQ = $k[--$j]; //#3029
                $k[$j++] = _RQ; //#3031
                $k[$j++] = $f($f(_RP + 6) + 1); //#3031
                if (($f($f(_RP + 6) + 1)) > _RQ.length) { //#3031
                    $j -= 3; //#3030
                    $k[$j++] = 'bwipp.GS1couponTooShortRetailerGCPGLN#3030'; //#3030
                    $k[$j++] = "Coupon too short: Retailer GCP/GLN truncated"; //#3030
                    $k[$j++] = false; //#3030
                    return true; //#3030
                } //#3030
                var _RR = $k[--$j]; //#3032
                var _RS = $k[--$j]; //#3032
                $k[$j++] = $geti(_RS, _RR, $f(_RS.length - _RR)); //#3032
            } //#3032
        } //#3032
        var _RU = $k[--$j]; //#3037
        $k[$j++] = _RU; //#3073
        if (_RU.length >= 1) { //#3073
            var _RV = $k[--$j]; //#3037
            $k[$j++] = _RV; //#3073
            if ($cvi($geti(_RV, 0, 1)) == 9) { //#3073
                var _RX = $k[--$j]; //#3038
                var _RY = $geti(_RX, 1, _RX.length - 1); //#3038
                $k[$j++] = _RY; //#3043
                if (_RY.length < 1) { //#3043
                    $j -= 2; //#3042
                    $k[$j++] = 'bwipp.GS1couponTooShortSaveValueCode#3042'; //#3042
                    $k[$j++] = "Coupon too short: Missing Save Value Code"; //#3042
                    $k[$j++] = false; //#3042
                    return true; //#3042
                } //#3042
                var _RZ = $k[--$j]; //#3044
                var _Rb = $cvi($geti(_RZ, 0, 1)); //#3044
                $k[$j++] = _RZ; //#3046
                if ((_Rb > 6) || ((_Rb == 3) || (_Rb == 4))) { //#3046
                    $j -= 2; //#3045
                    $k[$j++] = 'bwipp.GS1couponBadSaveValueCode#3045'; //#3045
                    $k[$j++] = "Coupon Save Value Code must be 0,1,2,5 or 6"; //#3045
                    $k[$j++] = false; //#3045
                    return true; //#3045
                } //#3045
                var _Rc = $k[--$j]; //#3047
                var _Rd = $geti(_Rc, 1, _Rc.length - 1); //#3047
                $k[$j++] = _Rd; //#3052
                if (_Rd.length < 1) { //#3052
                    $j -= 2; //#3051
                    $k[$j++] = 'bwipp.GS1couponTooShortSaveValueAppliesToItem#3051'; //#3051
                    $k[$j++] = "Coupon too short: Missing Save Value Applies to Item"; //#3051
                    $k[$j++] = false; //#3051
                    return true; //#3051
                } //#3051
                var _Re = $k[--$j]; //#3053
                $k[$j++] = _Re; //#3055
                if ($cvi($geti(_Re, 0, 1)) > 2) { //#3055
                    $j -= 2; //#3054
                    $k[$j++] = 'bwipp.GS1couponBadSaveValueAppliesToItem#3054'; //#3054
                    $k[$j++] = "Coupon Save Value Applies to Item must be 0-2"; //#3054
                    $k[$j++] = false; //#3054
                    return true; //#3054
                } //#3054
                var _Rg = $k[--$j]; //#3056
                var _Rh = $geti(_Rg, 1, _Rg.length - 1); //#3056
                $k[$j++] = _Rh; //#3061
                if (_Rh.length < 1) { //#3061
                    $j -= 2; //#3060
                    $k[$j++] = 'bwipp.GS1couponTooShortStoreCouponFlag#3060'; //#3060
                    $k[$j++] = "Coupon too short: Missing Store Coupon Flag"; //#3060
                    $k[$j++] = false; //#3060
                    return true; //#3060
                } //#3060
                var _Ri = $k[--$j]; //#3062
                var _Rj = $geti(_Ri, 1, _Ri.length - 1); //#3062
                $k[$j++] = _Rj; //#3067
                if (_Rj.length < 1) { //#3067
                    $j -= 2; //#3066
                    $k[$j++] = 'bwipp.GS1couponTooShortDontMultiplyFlag#3066'; //#3066
                    $k[$j++] = "Coupon too short: Missing Don't Multiply Flag"; //#3066
                    $k[$j++] = false; //#3066
                    return true; //#3066
                } //#3066
                var _Rk = $k[--$j]; //#3068
                $k[$j++] = _Rk; //#3070
                if ($cvi($geti(_Rk, 0, 1)) > 1) { //#3070
                    $j -= 2; //#3069
                    $k[$j++] = 'bwipp.GS1couponBadDontMultiplyFlag#3069'; //#3069
                    $k[$j++] = "Don't Multiply Flag must be 0 or 1"; //#3069
                    $k[$j++] = false; //#3069
                    return true; //#3069
                } //#3069
                var _Rm = $k[--$j]; //#3071
                $k[$j++] = $geti(_Rm, 1, _Rm.length - 1); //#3071
            } //#3071
        } //#3071
        var _Ro = $k[--$j]; //#3075
        $k[$j++] = _Ro; //#3077
        if (_Ro.length != 0) { //#3077
            $j -= 2; //#3076
            $k[$j++] = 'bwipp.GS1couponUnrecognisedOptionalField#3076'; //#3076
            $k[$j++] = "Coupon fields must be 1,2,3,4,5,6 or 9, increasing order"; //#3076
            $k[$j++] = false; //#3076
            return true; //#3076
        } //#3076
        $j--; //#3078
    }; //#3078
    $1.lintcouponposoffer = function() {
        var _Rp = $k[--$j]; //#3082
        $k[$j++] = _Rp; //#3084
        $k[$j++] = true; //#3084
        $forall(_Rp, function() { //#3084
            var _Rq = $k[--$j]; //#3083
            if ((_Rq < 48) || (_Rq > 57)) { //#3083
                $j--; //#3083
                $k[$j++] = false; //#3083
                return true; //#3083
            } //#3083
        }); //#3083
        if ($nt($k[--$j])) { //#3085
            $j -= 2; //#3085
            $k[$j++] = 'bwipp.GS1couponNotNumeric#3085'; //#3085
            $k[$j++] = "Coupon not numeric"; //#3085
            $k[$j++] = false; //#3085
            return true; //#3085
        } //#3085
        var _Rs = $k[--$j]; //#3087
        $k[$j++] = _Rs; //#3089
        if (_Rs.length < 1) { //#3089
            $j -= 2; //#3088
            $k[$j++] = 'bwipp.GS1couponTooShortFormatCode#3088'; //#3088
            $k[$j++] = "Coupon too short: Missing Format Code"; //#3088
            $k[$j++] = false; //#3088
            return true; //#3088
        } //#3088
        var _Rt = $k[--$j]; //#3090
        var _Ru = $geti(_Rt, 0, 1); //#3090
        $k[$j++] = _Rt; //#3092
        if ($ne(_Ru, "0") && $ne(_Ru, "1")) { //#3092
            $j -= 2; //#3091
            $k[$j++] = 'bwipp.GS1couponBadFormatCode#3091'; //#3091
            $k[$j++] = "Coupon format must be 0 or 1"; //#3091
            $k[$j++] = false; //#3091
            return true; //#3091
        } //#3091
        var _Rv = $k[--$j]; //#3093
        var _Rw = $geti(_Rv, 1, _Rv.length - 1); //#3093
        $k[$j++] = _Rw; //#3097
        if (_Rw.length < 1) { //#3097
            $j -= 2; //#3096
            $k[$j++] = 'bwipp.GS1couponTooShortFunderVLI#3096'; //#3096
            $k[$j++] = "Coupon too short: Missing Funder VLI"; //#3096
            $k[$j++] = false; //#3096
            return true; //#3096
        } //#3096
        var _Rx = $k[--$j]; //#3098
        var _Rz = $cvi($geti(_Rx, 0, 1)); //#3098
        $k[$j++] = _Rx; //#3100
        $k[$j++] = _Rz; //#3100
        if (_Rz > 6) { //#3100
            $j -= 3; //#3099
            $k[$j++] = 'bwipp.GS1couponBadFunderVLI#3099'; //#3099
            $k[$j++] = "Coupon Funder length indicator must be 0-6"; //#3099
            $k[$j++] = false; //#3099
            return true; //#3099
        } //#3099
        var _S0 = $k[--$j]; //#3101
        var _S1 = $k[--$j]; //#3102
        $k[$j++] = _S1; //#3104
        $k[$j++] = $f($f(_S0 + 6) + 1); //#3104
        if (($f($f(_S0 + 6) + 1)) > _S1.length) { //#3104
            $j -= 3; //#3103
            $k[$j++] = 'bwipp.GS1couponTooShortFunder#3103'; //#3103
            $k[$j++] = "Coupon too short: Truncated Funder ID"; //#3103
            $k[$j++] = false; //#3103
            return true; //#3103
        } //#3103
        var _S2 = $k[--$j]; //#3105
        var _S3 = $k[--$j]; //#3105
        var _S4 = $geti(_S3, _S2, $f(_S3.length - _S2)); //#3105
        $k[$j++] = _S4; //#3109
        if (_S4.length < 6) { //#3109
            $j -= 2; //#3108
            $k[$j++] = 'bwipp.GS1couponTooShortOfferCode#3108'; //#3108
            $k[$j++] = "Coupon too short: Truncated Offer Code"; //#3108
            $k[$j++] = false; //#3108
            return true; //#3108
        } //#3108
        var _S5 = $k[--$j]; //#3110
        var _S6 = $geti(_S5, 6, _S5.length - 6); //#3110
        $k[$j++] = _S6; //#3114
        if (_S6.length < 1) { //#3114
            $j -= 2; //#3113
            $k[$j++] = 'bwipp.GS1couponTooShortSnVLI#3113'; //#3113
            $k[$j++] = "Coupon too short: Missing SN VLI"; //#3113
            $k[$j++] = false; //#3113
            return true; //#3113
        } //#3113
        var _S7 = $k[--$j]; //#3115
        var _S8 = $geti(_S7, 0, 1); //#3115
        $k[$j++] = _S7; //#3119
        $k[$j++] = ($cvi(_S8) + 6) + 1; //#3119
        if ((($cvi(_S8) + 6) + 1) > _S7.length) { //#3119
            $j -= 3; //#3118
            $k[$j++] = 'bwipp.GS1couponTooShortSn#3118'; //#3118
            $k[$j++] = "Coupon too short: Truncated SN"; //#3118
            $k[$j++] = false; //#3118
            return true; //#3118
        } //#3118
        var _S9 = $k[--$j]; //#3120
        var _SA = $k[--$j]; //#3120
        var _SB = $geti(_SA, _S9, $f(_SA.length - _S9)); //#3120
        $k[$j++] = _SB; //#3123
        if (_SB.length != 0) { //#3123
            $j -= 2; //#3122
            $k[$j++] = 'bwipp.GS1couponTooLong#3122'; //#3122
            $k[$j++] = "Coupon too long"; //#3122
            $k[$j++] = false; //#3122
            return true; //#3122
        } //#3122
        $j--; //#3124
    }; //#3124
    $1.lintlatlong = function() {
        var _SC = $k[--$j]; //#3128
        $k[$j++] = _SC; //#3130
        if (_SC.length != 20) { //#3130
            $j--; //#3129
            $k[$j++] = 'bwipp.GS1badGeoLength#3129'; //#3129
            $k[$j++] = "Invalid length for a geo-location"; //#3129
            $k[$j++] = false; //#3129
            return true; //#3129
        } //#3129
        var _SD = $k[--$j]; //#3131
        $k[$j++] = _SD; //#3131
        if ($cvi($geti(_SD, 0, 10)) > 1800000000) { //#3131
            $j--; //#3131
            $k[$j++] = 'bwipp.GS1badLatitude#3131'; //#3131
            $k[$j++] = "Invalid value for latitude"; //#3131
            $k[$j++] = false; //#3131
            return true; //#3131
        } //#3131
        var _SF = $k[--$j]; //#3132
        $k[$j++] = _SF; //#3132
        if ($cvi($geti(_SF, 10, 10)) > 3600000000) { //#3132
            $j--; //#3132
            $k[$j++] = 'bwipp.GS1badLongitude#3132'; //#3132
            $k[$j++] = "Invalid value for longitude"; //#3132
            $k[$j++] = false; //#3132
            return true; //#3132
        } //#3132
        $j--; //#3133
    }; //#3133
    if (!$1.dontlint) { //#3270
        $k[$j++] = true; //#3176
        for (var _SK = 0, _SJ = $1.vals.length - 1; _SK <= _SJ; _SK += 1) { //#3176
            $1.ai = $get($1.ais, _SK); //#3141
            $1.val = $get($1.vals, _SK); //#3142
            var _SR = $get($1.gs1syntax, $1.ai) !== undefined; //#3143
            if (_SR) { //#3174
                var _SV = $get($get($1.gs1syntax, $1.ai), 'parts'); //#3144
                $k[$j++] = _SV; //#3146
                $k[$j++] = 0; //#3146
                $forall(_SV, function() { //#3146
                    var _SW = $k[--$j]; //#3146
                    $k[$j++] = _SW; //#3146
                    if ($get(_SW, 'opt')) { //#3146
                        $j--; //#3146
                        $k[$j++] = 0; //#3146
                    } else { //#3146
                        var _SZ = $get($k[--$j], 'min'); //#3146
                        $k[$j++] = _SZ; //#3146
                    } //#3146
                    var _Sa = $k[--$j]; //#3146
                    var _Sb = $k[--$j]; //#3146
                    $k[$j++] = $f(_Sb + _Sa); //#3146
                }); //#3146
                if ($k[--$j] > $1.val.length) { //#3148
                    $j--; //#3147
                    $k[$j++] = 'bwipp.GS1valueTooShort#3147'; //#3147
                    $k[$j++] = "Too short"; //#3147
                    $k[$j++] = false; //#3147
                    break; //#3147
                } //#3147
                var _Se = $k[--$j]; //#3149
                $k[$j++] = _Se; //#3149
                $k[$j++] = 0; //#3149
                $forall(_Se, function() { //#3149
                    var _Sg = $get($k[--$j], 'max'); //#3149
                    var _Sh = $k[--$j]; //#3149
                    $k[$j++] = $f(_Sh + _Sg); //#3149
                }); //#3149
                if ($k[--$j] < $1.val.length) { //#3151
                    $j--; //#3150
                    $k[$j++] = 'bwipp.GS1valueTooLong#3150'; //#3150
                    $k[$j++] = "Too long"; //#3150
                    $k[$j++] = false; //#3150
                    break; //#3150
                } //#3150
                $forall($k[--$j], function() { //#3168
                    $1.props = $k[--$j]; //#3153
                    var _Sn = $get($1.props, 'max'); //#3154
                    var _So = $1.val; //#3154
                    var _Sp = _So.length; //#3154
                    if (_Sn > _So.length) { //#3154
                        var _ = _Sp; //#3154
                        _Sp = _Sn; //#3154
                        _Sn = _; //#3154
                    } //#3154
                    $1.eval = $geti($1.val, 0, _Sn); //#3155
                    var _Su = $1.eval.length; //#3156
                    $1.val = $geti($1.val, _Su, $1.val.length - _Su); //#3156
                    if ($1.eval.length == 0) { //#3166
                        if ($nt($get($1.props, 'opt'))) { //#3160
                            $j--; //#3159
                            $k[$j++] = 'bwipp.GS1valueTooShort#3159'; //#3159
                            $k[$j++] = "Too short"; //#3159
                            $k[$j++] = false; //#3159
                            return true; //#3159
                        } //#3159
                    } else { //#3166
                        if ($1.eval.length < $get($1.props, 'min')) { //#3164
                            $j--; //#3163
                            $k[$j++] = 'bwipp.GS1valueTooShort#3163'; //#3163
                            $k[$j++] = "Too short"; //#3163
                            $k[$j++] = false; //#3163
                            return true; //#3163
                        } //#3163
                        var _T3 = new Map([
                            ["N", 'lintnumeric'],
                            ["X", 'lintcset82'],
                            ["Y", 'lintcset39']
                        ]); //#3165
                        $k[$j++] = $1.eval; //#3165
                        if ($1[$get(_T3, $get($1.props, 'cset'))]() === true) {
                            return true;
                        } //#3165
                        $forall($get($1.props, 'linters'), function() { //#3166
                            var _TD = $1[$k[--$j]]; //#3166
                            $k[$j++] = $1.eval; //#3166
                            if (_TD() === true) {
                                return true;
                            } //#3166
                        }); //#3166
                    } //#3166
                }); //#3166
                var _TE = $k[--$j]; //#3169
                $k[$j++] = _TE; //#3169
                if ($nt(_TE)) { //#3169
                    break; //#3169
                } //#3169
                if ($1.val.length != 0) { //#3172
                    $j--; //#3171
                    $k[$j++] = 'bwipp.GS1valueTooLong#3171'; //#3171
                    $k[$j++] = "Too long"; //#3171
                    $k[$j++] = false; //#3171
                    break; //#3171
                } //#3171
            } else { //#3174
                $j--; //#3174
                $k[$j++] = 'bwipp.GS1unknownAI#3174'; //#3174
                $k[$j++] = "Unrecognised AI"; //#3174
                $k[$j++] = false; //#3174
                break; //#3174
            } //#3174
        } //#3174
        if ($nt($k[--$j])) { //#3184
            var _TH = $k[--$j]; //#3178
            var _TJ = $s((_TH.length + $1.ai.length) + 5); //#3178
            $puti(_TJ, 0, "AI "); //#3179
            $puti(_TJ, 3, $1.ai); //#3180
            $puti(_TJ, 3 + $1.ai.length, ": "); //#3181
            $puti(_TJ, 5 + $1.ai.length, _TH); //#3182
            $k[$j++] = _TJ; //#3183
            bwipp_raiseerror(); //#3183
        } //#3183
        $1.aiexists = function() {
            $1.this = $k[--$j]; //#3188
            $1.patt = $k[--$j]; //#3189
            for (var _TP = 0, _TQ = 1; _TP < _TQ; _TP++) { //#3210
                var _TT = $get($1.aivals, $1.patt) !== undefined; //#3191
                if (_TT) { //#3191
                    $k[$j++] = true; //#3191
                    break; //#3191
                } //#3191
                if ($1.patt.length == 4) { //#3208
                    if ($eq($geti($1.patt, 3, 1), "n")) { //#3206
                        var _TZ = $eq($geti($1.patt, 2, 1), "n") ? 2 : 3; //#3194
                        $1.pfxlen = _TZ; //#3194
                        var _Ta = $1.ais; //#3196
                        $k[$j++] = false; //#3204
                        for (var _Tb = 0, _Tc = _Ta.length; _Tb < _Tc; _Tb++) { //#3204
                            var _Td = $get(_Ta, _Tb); //#3204
                            $k[$j++] = _Td; //#3203
                            if ($ne(_Td, $1.this) && (_Td.length == 4)) { //#3202
                                if ($eq($geti($k[--$j], 0, $1.pfxlen), $geti($1.patt, 0, $1.pfxlen))) { //#3200
                                    $j--; //#3199
                                    $k[$j++] = true; //#3199
                                } //#3199
                            } else { //#3202
                                $j--; //#3202
                            } //#3202
                        } //#3202
                        break; //#3205
                    } //#3205
                    $k[$j++] = false; //#3207
                    break; //#3207
                } //#3207
                $k[$j++] = false; //#3209
                break; //#3209
            } //#3209
        }; //#3209
        var _Tl = $1.vals; //#3214
        $1.aivals = new Map; //#3214
        for (var _To = 0, _Tn = $1.vals.length - 1; _To <= _Tn; _To += 1) { //#3229
            $1.ai = $get($1.ais, _To); //#3216
            $1.val = $get($1.vals, _To); //#3217
            var _Tv = $get($1.aivals, $1.ai) !== undefined; //#3218
            if (_Tv) { //#3227
                if ($ne($get($1.aivals, $1.ai), $1.val)) { //#3225
                    var _U1 = $s($1.ai.length + 40); //#3220
                    $puti(_U1, 0, "Repeated AIs ("); //#3221
                    $puti(_U1, 14, $1.ai); //#3222
                    $puti(_U1, 14 + $1.ai.length, ") must have the same value"); //#3223
                    $k[$j++] = 'bwipp.GS1repeatedDifferingAIs#3224'; //#3224
                    $k[$j++] = _U1; //#3224
                    bwipp_raiseerror(); //#3224
                } //#3224
            } else { //#3227
                $put($1.aivals, $1.ai, $1.val); //#3227
            } //#3227
        } //#3227
        for (var _U9 = 0, _U8 = $1.vals.length - 1; _U9 <= _U8; _U9 += 1) { //#3268
            $1.ai = $get($1.ais, _U9); //#3233
            var _UE = $get($1.gs1syntax, $1.ai); //#3234
            var _UF = $get(_UE, 'ex') !== undefined; //#3234
            $k[$j++] = _UE; //#3249
            $k[$j++] = 'ex'; //#3249
            if (_UF) { //#3248
                var _UG = $k[--$j]; //#3235
                $forall($get($k[--$j], _UG), function() { //#3246
                    $1.patt = $k[--$j]; //#3236
                    $k[$j++] = $1.patt; //#3237
                    $k[$j++] = $1.ai; //#3237
                    $1.aiexists(); //#3237
                    if ($k[--$j]) { //#3245
                        var _UP = $s(($1.ai.length + $1.patt.length) + 36); //#3238
                        $puti(_UP, 0, "AIs ("); //#3239
                        $puti(_UP, 5, $1.ai); //#3240
                        $puti(_UP, 5 + $1.ai.length, ") and ("); //#3241
                        $puti(_UP, 12 + $1.ai.length, $1.patt); //#3242
                        $puti(_UP, (12 + $1.ai.length) + $1.patt.length, ") are mutually exclusive"); //#3243
                        $k[$j++] = 'bwipp.GS1exclusiveAIs#3244'; //#3244
                        $k[$j++] = _UP; //#3244
                        bwipp_raiseerror(); //#3244
                    } //#3244
                }); //#3244
            } else { //#3248
                $j -= 2; //#3248
            } //#3248
            if ($1.lintreqs) { //#3267
                var _UZ = $get($1.gs1syntax, $1.ai); //#3251
                var _Ua = $get(_UZ, 'req') !== undefined; //#3251
                $k[$j++] = _UZ; //#3266
                $k[$j++] = 'req'; //#3266
                if (_Ua) { //#3265
                    var _Ub = $k[--$j]; //#3252
                    $forall($get($k[--$j], _Ub), function() { //#3263
                        var _Ue = $k[--$j]; //#3253
                        $k[$j++] = false; //#3255
                        $forall(_Ue, function() { //#3255
                            $k[$j++] = $1.ai; //#3254
                            $1.aiexists(); //#3254
                            if ($k[--$j]) { //#3254
                                $j--; //#3254
                                $k[$j++] = true; //#3254
                            } //#3254
                        }); //#3254
                        if ($nt($k[--$j])) { //#3262
                            var _Uj = $s($1.ai.length + 47); //#3257
                            $puti(_Uj, 0, "One of more requisite AIs for AI ("); //#3258
                            $puti(_Uj, 34, $1.ai); //#3259
                            $puti(_Uj, 34 + $1.ai.length, ") are missing"); //#3260
                            $k[$j++] = 'bwipp.GS1missingAIs#3261'; //#3261
                            $k[$j++] = _Uj; //#3261
                            bwipp_raiseerror(); //#3261
                        } //#3261
                    }); //#3261
                } else { //#3265
                    $j -= 2; //#3265
                } //#3265
            } //#3265
        } //#3265
    } //#3265
    $k[$j++] = $1.ais; //#3276
    $k[$j++] = $1.vals; //#3276
    $k[$j++] = $1.fncs; //#3276
}

function bwipp_renmatrix() {
    if ($0.bwipjs_dontdraw) { //#3522
        return; //#3522
    } //#3522
    var $1 = Object.create(bwipp_renmatrix.$ctx || (bwipp_renmatrix.$ctx = {})); //#3524
    $1.width = 1; //#3527
    $1.height = 1; //#3528
    $1.barcolor = "unset"; //#3529
    $1.backgroundcolor = "unset"; //#3530
    $1.colormap = "unset"; //#3531
    $1.dotty = false; //#3532
    $1.inkspread = 0; //#3533
    $1.inkspreadh = 0; //#3534
    $1.inkspreadv = 0; //#3535
    $1.includetext = false; //#3536
    $1.txt = $a([]); //#3537
    $1.textcolor = "unset"; //#3538
    $1.textxalign = "unset"; //#3539
    $1.textyalign = "unset"; //#3540
    $1.textfont = "OCR-B"; //#3541
    $1.textsize = 10; //#3542
    $1.textxoffset = 0; //#3543
    $1.textyoffset = 0; //#3544
    $1.textgaps = 0; //#3545
    $1.alttext = ""; //#3546
    $forall($k[--$j], function() { //#3548
        var _3 = $k[--$j]; //#3548
        $1[$k[--$j]] = _3; //#3548
    }); //#3548
    $k[$j++] = $1.opt; //#3549
    delete $1['opt']; //#3549
    $k[$j++] = $1; //#3549
    bwipp_processoptions(); //#3549
    $j--; //#3549
    if ($1.inkspread != 0) { //#3551
        $1.inkspreadh = $1.inkspread; //#3551
    } //#3551
    if ($1.inkspread != 0) { //#3552
        $1.inkspreadv = $1.inkspread; //#3552
    } //#3552
    $1.xyget = function() {
        var _B = $k[--$j]; //#3554
        var _E = $get($1.pixs, $f($k[--$j] + (_B * $1.pixx))); //#3554
        $k[$j++] = _E; //#3554
    }; //#3554
    $1.cget = function() {
        var _G = $k[--$j]; //#3555
        var _J = $get($1.cache, $f($k[--$j] + (_G * $1.pixx))); //#3555
        var _K = $k[--$j]; //#3555
        $k[$j++] = $an(_K, _J); //#3555
    }; //#3555
    $1.cput = function() {
        var _L = $k[--$j]; //#3557
        $k[$j++] = _L; //#3561
        if ((_L % 4) == 0) { //#3560
            var _M = $k[--$j]; //#3558
            var _N = $k[--$j]; //#3558
            var _O = $k[--$j]; //#3558
            var _P = $1.pixx; //#3558
            var _Q = $1.cache; //#3558
            $put(_Q, $f(_O + (_N * _P)), $or($get(_Q, $f(_O + (_N * _P))), _M)); //#3558
        } else { //#3560
            $j -= 3; //#3560
        } //#3560
    }; //#3560
    $1.abcd = function() {
        $k[$j++] = $s(4); //#3569
        $k[$j++] = 0; //#3569
        $k[$j++] = Infinity; //#3569
        var _T = $k[--$j]; //#3566
        var _U = $k[--$j]; //#3566
        var _V = $k[--$j]; //#3566
        var _W = $k[--$j]; //#3566
        var _Z = $f($k[--$j] + (_W * $1.pixx)); //#3567
        $k[$j++] = _V; //#3568
        $k[$j++] = _U; //#3568
        $k[$j++] = _T; //#3568
        $k[$j++] = _Z; //#3568
        $aload($geti($1.pixs, _Z, 2)); //#3568
        var _c = $k[--$j]; //#3568
        var _d = $k[--$j]; //#3568
        var _h = $geti($1.pixs, $f($k[--$j] + $1.pixx), 2); //#3569
        $k[$j++] = _d; //#3569
        $k[$j++] = _c; //#3569
        $aload(_h); //#3569
        var _i = $a(); //#3569
        for (var _j = 0, _k = _i.length; _j < _k; _j++) { //#3570
            var _m = $k[--$j]; //#3570
            var _n = $k[--$j]; //#3570
            $put(_n, _m, $f($get(_i, _j) + 48)); //#3570
            $k[$j++] = _n; //#3570
            $k[$j++] = $f(_m + 1); //#3570
        } //#3570
        $j--; //#3570
    }; //#3570
    $1.right = function() {
        if ($1.dir != 1) { //#3573
            $k[$j++] = $1.x; //#3573
            $k[$j++] = $1.y; //#3573
            $k[$j++] = $1.dir; //#3573
            $1.cput(); //#3573
            $k[$j++] = $a([$1.x, $1.y]); //#3573
        } //#3573
        $1.x = $1.x + 1; //#3573
        $1.dir = 1; //#3573
    }; //#3573
    $1.down = function() {
        if ($1.dir != 2) { //#3574
            $k[$j++] = $1.x; //#3574
            $k[$j++] = $1.y; //#3574
            $k[$j++] = $1.dir; //#3574
            $1.cput(); //#3574
            $k[$j++] = $a([$1.x, $1.y]); //#3574
        } //#3574
        $1.y = $1.y + 1; //#3574
        $1.dir = 2; //#3574
    }; //#3574
    $1.left = function() {
        if ($1.dir != 4) { //#3575
            $k[$j++] = $1.x; //#3575
            $k[$j++] = $1.y; //#3575
            $k[$j++] = $1.dir; //#3575
            $1.cput(); //#3575
            $k[$j++] = $a([$1.x, $1.y]); //#3575
        } //#3575
        $1.x = $1.x - 1; //#3575
        $1.dir = 4; //#3575
    }; //#3575
    $1.up = function() {
        if ($1.dir != 8) { //#3576
            $k[$j++] = $1.x; //#3576
            $k[$j++] = $1.y; //#3576
            $k[$j++] = $1.dir; //#3576
            $1.cput(); //#3576
            $k[$j++] = $a([$1.x, $1.y]); //#3576
        } //#3576
        $1.y = $1.y - 1; //#3576
        $1.dir = 8; //#3576
    }; //#3576
    $1.trace = function() {
        $1.y = $k[--$j]; //#3580
        $1.x = $k[--$j]; //#3580
        $k[$j++] = 'dir'; //#3582
        $k[$j++] = $f($1.x + 1); //#3582
        $k[$j++] = $f($1.y + 1); //#3582
        $1.xyget(); //#3582
        var _1P = ($k[--$j] == 1) ? 8 : 4; //#3582
        $1[$k[--$j]] = _1P; //#3582
        $1.sx = $1.x; //#3583
        $1.sy = $1.y; //#3583
        $1.sdir = $1.dir; //#3583
        $k[$j++] = Infinity; //#3587
        for (;;) { //#3601
            $k[$j++] = $1.x; //#3588
            $k[$j++] = $1.y; //#3588
            $1.abcd(); //#3588
            for (var _1W = 0, _1X = 1; _1W < _1X; _1W++) { //#3599
                var _1Y = $k[--$j]; //#3590
                $k[$j++] = _1Y; //#3590
                if ($eq(_1Y, "0001") || ($eq(_1Y, "0011") || $eq(_1Y, "1011"))) { //#3590
                    $j--; //#3590
                    $1.right(); //#3590
                    break; //#3590
                } //#3590
                var _1Z = $k[--$j]; //#3591
                $k[$j++] = _1Z; //#3591
                if ($eq(_1Z, "0010") || ($eq(_1Z, "1010") || $eq(_1Z, "1110"))) { //#3591
                    $j--; //#3591
                    $1.down(); //#3591
                    break; //#3591
                } //#3591
                var _1a = $k[--$j]; //#3592
                $k[$j++] = _1a; //#3592
                if ($eq(_1a, "1000") || ($eq(_1a, "1100") || $eq(_1a, "1101"))) { //#3592
                    $j--; //#3592
                    $1.left(); //#3592
                    break; //#3592
                } //#3592
                var _1b = $k[--$j]; //#3593
                $k[$j++] = _1b; //#3593
                if ($eq(_1b, "0100") || ($eq(_1b, "0101") || $eq(_1b, "0111"))) { //#3593
                    $j--; //#3593
                    $1.up(); //#3593
                    break; //#3593
                } //#3593
                var _1c = $k[--$j]; //#3594
                $k[$j++] = _1c; //#3598
                if ($eq(_1c, "1001")) { //#3597
                    if ($1.dir == 2) { //#3595
                        $j--; //#3595
                        $1.left(); //#3595
                        break; //#3595
                    } else { //#3595
                        $j--; //#3595
                        $1.right(); //#3595
                        break; //#3595
                    } //#3595
                } else { //#3597
                    if ($1.dir == 1) { //#3597
                        $j--; //#3597
                        $1.down(); //#3597
                        break; //#3597
                    } else { //#3597
                        $j--; //#3597
                        $1.up(); //#3597
                        break; //#3597
                    } //#3597
                } //#3597
            } //#3597
            if (($eq($1.x, $1.sx) && $eq($1.y, $1.sy)) && ($1.dir == $1.sdir)) { //#3600
                break; //#3600
            } //#3600
        } //#3600
        $astore($a($counttomark())); //#3602
        var _1n = $k[--$j]; //#3602
        var _1o = $k[--$j]; //#3602
        $k[$j++] = _1n; //#3602
        $k[$j++] = _1o; //#3602
        $j--; //#3602
    }; //#3602
    $1.drawlayer = function() {
        $1.pixsorig = $1.pixs; //#3620
        $1.pixs = $k[--$j]; //#3621
        $k[$j++] = Infinity; //#3631
        for (var _1s = 0, _1t = $1.pixx + 2; _1s < _1t; _1s++) { //#3625
            $k[$j++] = 0; //#3625
        } //#3625
        for (var _1x = 0, _1y = $1.pixx, _1w = $1.pixs.length - 1; _1y < 0 ? _1x >= _1w : _1x <= _1w; _1x += _1y) { //#3630
            $k[$j++] = 0; //#3628
            $aload($geti($1.pixs, _1x, $1.pixx)); //#3628
            $k[$j++] = 0; //#3629
        } //#3629
        for (var _23 = 0, _24 = $1.pixx + 2; _23 < _24; _23++) { //#3631
            $k[$j++] = 0; //#3631
        } //#3631
        $1.pixs = $a(); //#3631
        $1.pixx = $1.pixx + 2; //#3633
        $1.pixy = $1.pixy + 2; //#3634
        $k[$j++] = Infinity; //#3637
        for (var _29 = 0, _2A = $1.pixs.length; _29 < _2A; _29++) { //#3637
            $k[$j++] = 0; //#3637
        } //#3637
        $1.cache = $a(); //#3637
        $k[$j++] = Infinity; //#3653
        for (var _2E = 0, _2D = $1.pixy - 2; _2E <= _2D; _2E += 1) { //#3657
            $1.j = _2E; //#3642
            for (var _2H = 0, _2G = $1.pixx - 2; _2H <= _2G; _2H += 1) { //#3656
                $1.i = _2H; //#3644
                $k[$j++] = 'k'; //#3645
                $k[$j++] = $1.i; //#3645
                $k[$j++] = $1.j; //#3645
                $1.abcd(); //#3645
                var _2K = $k[--$j]; //#3645
                $1[$k[--$j]] = _2K; //#3645
                if ($eq($1.k, "0001") || $eq($1.k, "1001")) { //#3650
                    $k[$j++] = 8; //#3647
                    $k[$j++] = $1.i; //#3647
                    $k[$j++] = $1.j; //#3647
                    $1.cget(); //#3647
                    if ($k[--$j] == 0) { //#3649
                        $k[$j++] = $1.i; //#3648
                        $k[$j++] = $1.j; //#3648
                        $1.trace(); //#3648
                    } //#3648
                } //#3648
                if ($eq($1.k, "1110")) { //#3655
                    $k[$j++] = 4; //#3652
                    $k[$j++] = $1.i; //#3652
                    $k[$j++] = $1.j; //#3652
                    $1.cget(); //#3652
                    if ($k[--$j] == 0) { //#3654
                        $k[$j++] = $1.i; //#3653
                        $k[$j++] = $1.j; //#3653
                        $1.trace(); //#3653
                    } //#3653
                } //#3653
            } //#3653
        } //#3653
        $1.paths = $a(); //#3653
        $1.pixx = $1.pixx - 2; //#3661
        $1.pixy = $1.pixy - 2; //#3662
        $$.newpath(); //#3665
        var _2c = $1.paths; //#3666
        for (var _2d = 0, _2e = _2c.length; _2d < _2e; _2d++) { //#3684
            $1.p = $get(_2c, _2d); //#3667
            $1.len = $1.p.length; //#3668
            $aload($get($1.p, $1.len - 1)); //#3669
            $aload($get($1.p, 0)); //#3670
            for (var _2o = 0, _2n = $1.len - 1; _2o <= _2n; _2o += 1) { //#3681
                $1.i = _2o; //#3672
                $aload($get($1.p, ($1.i + 1) % $1.len)); //#3673
                var _2t = $k[--$j]; //#3673
                var _2u = $k[--$j]; //#3673
                var _2v = $k[--$j]; //#3673
                var _2w = $k[--$j]; //#3673
                var _2x = $k[--$j]; //#3673
                var _2y = $k[--$j]; //#3673
                $k[$j++] = _2w; //#3675
                $k[$j++] = _2v; //#3675
                $k[$j++] = _2u; //#3675
                $k[$j++] = _2t; //#3675
                $k[$j++] = _2y; //#3675
                $k[$j++] = _2w; //#3675
                $k[$j++] = $1.inkspreadh; //#3675
                if ($lt(_2t, _2x)) { //#3675
                    var _30 = $k[--$j]; //#3675
                    var _31 = $k[--$j]; //#3675
                    $k[$j++] = $f(_31 + _30); //#3675
                } else { //#3675
                    var _32 = $k[--$j]; //#3675
                    var _33 = $k[--$j]; //#3675
                    $k[$j++] = $f(_33 - _32); //#3675
                } //#3675
                var _34 = $k[--$j]; //#3676
                var _35 = $k[--$j]; //#3676
                var _36 = $k[--$j]; //#3676
                var _37 = $k[--$j]; //#3676
                var _38 = $k[--$j]; //#3677
                $k[$j++] = _38; //#3678
                $k[$j++] = _34; //#3678
                $k[$j++] = _37; //#3678
                $k[$j++] = _36; //#3678
                $k[$j++] = _38; //#3678
                $k[$j++] = $1.inkspreadv; //#3678
                if ($gt(_37, _35)) { //#3678
                    var _3A = $k[--$j]; //#3678
                    var _3B = $k[--$j]; //#3678
                    $k[$j++] = $f(_3B + _3A); //#3678
                } else { //#3678
                    var _3C = $k[--$j]; //#3678
                    var _3D = $k[--$j]; //#3678
                    $k[$j++] = $f(_3D - _3C); //#3678
                } //#3678
                var _3E = $k[--$j]; //#3679
                var _3F = $k[--$j]; //#3679
                var _3G = $k[--$j]; //#3679
                var _3H = $k[--$j]; //#3679
                $k[$j++] = _3G; //#3680
                $k[$j++] = _3F; //#3680
                $k[$j++] = _3H; //#3680
                $k[$j++] = $f($1.pixy - _3E); //#3680
                if ($1.i == 0) { //#3680
                    var _3K = $k[--$j]; //#3680
                    $$.moveto($k[--$j], _3K); //#3680
                } else { //#3680
                    var _3M = $k[--$j]; //#3680
                    $$.lineto($k[--$j], _3M); //#3680
                } //#3680
            } //#3680
            $$.closepath(); //#3682
            $j -= 4; //#3683
        } //#3683
        $$.fill(); //#3685
        $1.pixs = $1.pixsorig; //#3687
    }; //#3687
    $1.drawlayerdots = function() {
        $1.pixsorig = $1.pixs; //#3693
        $1.pixs = $k[--$j]; //#3694
        $$.newpath(); //#3696
        for (var _3T = 0, _3S = $1.pixs.length - 1; _3T <= _3S; _3T += 1) { //#3704
            $1.x = _3T % $1.pixx; //#3698
            $1.y = ~~(_3T / $1.pixx); //#3699
            $k[$j++] = $1.x; //#3700
            $k[$j++] = $1.y; //#3700
            $1.xyget(); //#3700
            if ($k[--$j] == 1) { //#3703
                $$.moveto($f($1.x + 0.5), $f(($1.pixy - $1.y) - 0.5)); //#3701
                $$.arc($f($1.x + 0.5), $f(($1.pixy - $1.y) - 0.5), $f(0.5 - $1.inkspread), 0, 360, 1); //#3702
            } //#3702
        } //#3702
        $$.fill(); //#3705
        $1.pixs = $1.pixsorig; //#3707
    }; //#3707
    $$.save(); //#3711
    $1.inkspread = $1.inkspread / 2; //#3714
    $1.inkspreadh = $1.inkspreadh / 2; //#3715
    $1.inkspreadv = $1.inkspreadv / 2; //#3716
    var _3k = $$.currpos(); //#3717
    $$.translate(_3k.x, _3k.y); //#3717
    $$.scale(($1.width / $1.pixx) * 72, ($1.height / $1.pixy) * 72); //#3718
    $$.moveto(0, 0); //#3719
    $$.lineto($1.pixx, 0); //#3719
    $$.lineto($1.pixx, $1.pixy); //#3719
    $$.lineto(0, $1.pixy); //#3719
    $$.closepath(); //#3719
    if ($eq($1.colormap, "unset")) { //#3724
        var _3v = new Map([
            [1, $1.barcolor]
        ]); //#3723
        $1.colormap = _3v; //#3723
    } //#3723
    var _3w = $1.colormap; //#3726
    for (var _41 = _3w.size, _40 = _3w.keys(), _3z = 0; _3z < _41; _3z++) { //#3732
        var _3x = _40.next().value; //#3732
        $$.setcolor(_3w.get(_3x)); //#3727
        $1.key = _3x; //#3728
        $k[$j++] = Infinity; //#3730
        var _42 = $1.pixs; //#3730
        for (var _43 = 0, _44 = _42.length; _43 < _44; _43++) { //#3730
            var _47 = $eq($get(_42, _43), $1.key) ? 1 : 0; //#3730
            $k[$j++] = _47; //#3730
        } //#3730
        var _48 = $a(); //#3730
        $k[$j++] = _48; //#3731
        if ($1.dotty) { //#3731
            $1.drawlayerdots(); //#3731
        } else { //#3731
            $1.drawlayer(); //#3731
        } //#3731
    } //#3731
    if ($ne($1.textcolor, "unset")) { //#3735
        $$.setcolor($1.textcolor); //#3735
    } //#3735
    if ($1.includetext) { //#3792
        if (($eq($1.textxalign, "unset") && $eq($1.textyalign, "unset")) && $eq($1.alttext, "")) { //#3790
            $1.s = 0; //#3738
            $1.fn = ""; //#3738
            var _4G = $1.txt; //#3739
            for (var _4H = 0, _4I = _4G.length; _4H < _4I; _4H++) { //#3748
                $forall($get(_4G, _4H)); //#3740
                var _4K = $k[--$j]; //#3741
                var _4L = $k[--$j]; //#3741
                $k[$j++] = _4L; //#3746
                $k[$j++] = _4K; //#3746
                if ((_4K != $1.s) || $ne(_4L, $1.fn)) { //#3745
                    var _4O = $k[--$j]; //#3742
                    var _4P = $k[--$j]; //#3742
                    $1.s = _4O; //#3742
                    $1.fn = _4P; //#3742
                    $$.selectfont(_4P, _4O); //#3743
                } else { //#3745
                    $j -= 2; //#3745
                } //#3745
                var _4Q = $k[--$j]; //#3747
                $$.moveto($k[--$j], _4Q); //#3747
                $$.show($k[--$j], 0, 0); //#3747
            } //#3747
        } else { //#3790
            $$.selectfont($1.textfont, $1.textsize); //#3750
            if ($eq($1.alttext, "")) { //#3756
                $k[$j++] = Infinity; //#3752
                var _4W = $1.txt; //#3752
                for (var _4X = 0, _4Y = _4W.length; _4X < _4Y; _4X++) { //#3752
                    $forall($get($get(_4W, _4X), 0)); //#3752
                } //#3752
                $1.txt = $a(); //#3752
                $1.tstr = $s($1.txt.length); //#3753
                for (var _4g = 0, _4f = $1.txt.length - 1; _4g <= _4f; _4g += 1) { //#3754
                    $put($1.tstr, _4g, $get($1.txt, _4g)); //#3754
                } //#3754
            } else { //#3756
                $1.tstr = $1.alttext; //#3756
            } //#3756
            if ($1.tstr.length == 0) { //#3766
                $k[$j++] = 0; //#3761
            } else { //#3766
                $$.save(); //#3763
                $$.newpath(); //#3764
                $$.moveto(0, 0); //#3764
                $$.charpath("0", false); //#3764
                var _4m = $$.pathbbox(); //#3764
                $$.restore(); //#3766
                $k[$j++] = _4m.ury; //#3766
            } //#3766
            $1.textascent = $k[--$j]; //#3775
            var _4p = $$.stringwidth($1.tstr); //#3776
            $1.textwidth = $f(_4p.w + (($1.tstr.length - 1) * $1.textgaps)); //#3776
            $1.textxpos = $f($1.textxoffset + ($f($1.pixx - $1.textwidth) / 2)); //#3778
            if ($eq($1.textxalign, "left")) { //#3779
                $1.textxpos = $1.textxoffset; //#3779
            } //#3779
            if ($eq($1.textxalign, "right")) { //#3780
                $1.textxpos = $f(($1.pixx - $1.textxoffset) - $1.textwidth); //#3780
            } //#3780
            if ($eq($1.textxalign, "offleft")) { //#3781
                $1.textxpos = -$f($1.textwidth + $1.textxoffset); //#3781
            } //#3781
            if ($eq($1.textxalign, "offright")) { //#3782
                $1.textxpos = $1.pixx + $1.textxoffset; //#3782
            } //#3782
            if ($eq($1.textxalign, "justify") && ($1.textwidth < $1.pixx)) { //#3786
                $1.textxpos = 0; //#3784
                $1.textgaps = $f($1.pixx - $1.textwidth) / ($1.tstr.length - 1); //#3785
            } //#3785
            $1.textypos = -($f($f($1.textyoffset + $1.textascent) + 1)); //#3787
            if ($eq($1.textyalign, "above")) { //#3788
                $1.textypos = ($1.textyoffset + $1.pixy) + 1; //#3788
            } //#3788
            if ($eq($1.textyalign, "center")) { //#3789
                $1.textypos = $f($1.textyoffset + ($f($1.pixy - $1.textascent) / 2)); //#3789
            } //#3789
            $$.moveto($1.textxpos, $1.textypos); //#3790
            $$.show($1.tstr, $1.textgaps, 0); //#3790
        } //#3790
    } //#3790
    $$.restore(); //#3794
}

function bwipp_ean5() {
    var $1 = Object.create(bwipp_ean5.$ctx || (bwipp_ean5.$ctx = {})); //#3910
    $1.dontdraw = false; //#3913
    $1.includetext = false; //#3914
    $1.textfont = "OCR-B"; //#3915
    $1.textsize = 12; //#3916
    $1.textxoffset = 0; //#3917
    $1.textyoffset = null; //#3918
    $1.height = 0.7; //#3919
    $k[$j++] = $1; //#3921
    bwipp_processoptions(); //#3921
    $1.options = $k[--$j]; //#3921
    $1.barcode = $k[--$j]; //#3922
    if ($eq($1.textyoffset, null)) { //#3926
        $1.textyoffset = $f(($1.height * 72) + 1); //#3925
    } //#3925
    if ($1.barcode.length != 5) { //#3933
        $k[$j++] = 'bwipp.ean5badLength#3932'; //#3932
        $k[$j++] = "EAN-5 add-on must be 5 digits"; //#3932
        bwipp_raiseerror(); //#3932
    } //#3932
    $forall($1.barcode, function() { //#3938
        var _6 = $k[--$j]; //#3935
        if ((_6 < 48) || (_6 > 57)) { //#3937
            $k[$j++] = 'bwipp.ean5badCharacter#3936'; //#3936
            $k[$j++] = "EAN-5 add-on must contain only digits"; //#3936
            bwipp_raiseerror(); //#3936
        } //#3936
    }); //#3936
    if (!bwipp_ean5.$ctx._3956) { //#3956
        (function() { //#3956
            var $ctx = Object.create($1); //#3956
            $ctx.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "112", "11"]); //#3946
            $ctx.barchars = "0123456789"; //#3949
            $ctx.mirrormaps = $a(["11000", "10100", "10010", "10001", "01100", "00110", "00011", "01010", "01001", "00101"]); //#3955
            for (var _9 in $ctx) {
                $ctx.hasOwnProperty(_9) && (bwipp_ean5.$ctx[_9] = $ctx[_9]);
            } //#3955
            bwipp_ean5.$ctx._3956 = 1; //#3955
        })(); //#3955
    } //#3955
    $1.checksum = 0; //#3958
    for (var _A = 0; _A <= 4; _A += 1) { //#3967
        $1.i = _A; //#3960
        $1.barchar = $f($get($1.barcode, $1.i) - 48); //#3961
        if (($1.i % 2) == 0) { //#3965
            $1.checksum = $f(($1.barchar * 3) + $1.checksum); //#3963
        } else { //#3965
            $1.checksum = $f(($1.barchar * 9) + $1.checksum); //#3965
        } //#3965
    } //#3965
    $1.checksum = $1.checksum % 10; //#3968
    $1.mirrormap = $get($1.mirrormaps, $1.checksum); //#3969
    $1.sbs = $s(31); //#3971
    $1.txt = $a(5); //#3972
    for (var _P = 0; _P <= 4; _P += 1) { //#4002
        $1.i = _P; //#3975
        if ($1.i == 0) { //#3981
            $puti($1.sbs, 0, $get($1.encs, 10)); //#3979
        } else { //#3981
            $puti($1.sbs, (($1.i - 1) * 6) + 7, $get($1.encs, 11)); //#3981
        } //#3981
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#3985
        $j--; //#3986
        $1.indx = $k[--$j].length; //#3987
        $j -= 2; //#3988
        $1.enc = $get($1.encs, $1.indx); //#3989
        if ($get($1.mirrormap, $1.i) == 49) { //#3999
            $1.enclen = $1.enc.length; //#3991
            $1.revenc = $s($1.enclen); //#3992
            for (var _o = 0, _n = $1.enclen - 1; _o <= _n; _o += 1) { //#3997
                $1.j = _o; //#3994
                $1.char = $get($1.enc, $1.j); //#3995
                $put($1.revenc, ($1.enclen - $1.j) - 1, $1.char); //#3996
            } //#3996
            $1.enc = $1.revenc; //#3998
        } //#3998
        $puti($1.sbs, ($1.i * 6) + 3, $1.enc); //#4000
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ((($1.i - 1) * 9) + 13) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); //#4001
    } //#4001
    $k[$j++] = Infinity; //#4016
    $k[$j++] = Infinity; //#4007
    var _1B = $1.sbs; //#4007
    for (var _1C = 0, _1D = _1B.length; _1C < _1D; _1C++) { //#4007
        $k[$j++] = $get(_1B, _1C) - 48; //#4007
    } //#4007
    var _1F = $a(); //#4007
    $k[$j++] = Infinity; //#4008
    for (var _1G = 0, _1H = 16; _1G < _1H; _1G++) { //#4008
        $k[$j++] = $1.height; //#4008
    } //#4008
    var _1J = $a(); //#4008
    $k[$j++] = Infinity; //#4009
    for (var _1K = 0, _1L = 16; _1K < _1L; _1K++) { //#4009
        $k[$j++] = 0; //#4009
    } //#4009
    var _1M = $a(); //#4009
    $k[$j++] = 'ren'; //#4012
    $k[$j++] = bwipp_renlinear; //#4012
    $k[$j++] = 'sbs'; //#4012
    $k[$j++] = _1F; //#4012
    $k[$j++] = 'bhs'; //#4012
    $k[$j++] = _1J; //#4012
    $k[$j++] = 'bbs'; //#4012
    $k[$j++] = _1M; //#4012
    if ($1.includetext) { //#4012
        $k[$j++] = 'txt'; //#4011
        $k[$j++] = $1.txt; //#4011
    } //#4011
    $k[$j++] = 'opt'; //#4016
    $k[$j++] = $1.options; //#4016
    $k[$j++] = 'guardrightpos'; //#4016
    $k[$j++] = 10; //#4016
    $k[$j++] = 'guardrightypos'; //#4016
    $k[$j++] = $f($1.textyoffset + 4); //#4016
    $k[$j++] = 'bordertop'; //#4016
    $k[$j++] = 10; //#4016
    var _1R = $d(); //#4016
    $k[$j++] = _1R; //#4019
    if (!$1.dontdraw) { //#4019
        bwipp_renlinear(); //#4019
    } //#4019
}

function bwipp_ean2() {
    var $1 = Object.create(bwipp_ean2.$ctx || (bwipp_ean2.$ctx = {})); //#4053
    $1.dontdraw = false; //#4056
    $1.includetext = false; //#4057
    $1.textfont = "OCR-B"; //#4058
    $1.textsize = 12; //#4059
    $1.textxoffset = 0; //#4060
    $1.textyoffset = null; //#4061
    $1.height = 0.7; //#4062
    $k[$j++] = $1; //#4064
    bwipp_processoptions(); //#4064
    $1.options = $k[--$j]; //#4064
    $1.barcode = $k[--$j]; //#4065
    if ($eq($1.textyoffset, null)) { //#4069
        $1.textyoffset = $f(($1.height * 72) + 1); //#4068
    } //#4068
    if ($1.barcode.length != 2) { //#4076
        $k[$j++] = 'bwipp.ean2badLength#4075'; //#4075
        $k[$j++] = "EAN-2 add-on must be 2 digits"; //#4075
        bwipp_raiseerror(); //#4075
    } //#4075
    $forall($1.barcode, function() { //#4081
        var _6 = $k[--$j]; //#4078
        if ((_6 < 48) || (_6 > 57)) { //#4080
            $k[$j++] = 'bwipp.ean2badCharacter#4079'; //#4079
            $k[$j++] = "EAN-2 add-on must contain only digits"; //#4079
            bwipp_raiseerror(); //#4079
        } //#4079
    }); //#4079
    if (!bwipp_ean2.$ctx._4096) { //#4096
        (function() { //#4096
            var $ctx = Object.create($1); //#4096
            $ctx.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "112", "11"]); //#4089
            $ctx.barchars = "0123456789"; //#4092
            $ctx.mirrormaps = $a(["00", "01", "10", "11"]); //#4095
            for (var _9 in $ctx) {
                $ctx.hasOwnProperty(_9) && (bwipp_ean2.$ctx[_9] = $ctx[_9]);
            } //#4095
            bwipp_ean2.$ctx._4096 = 1; //#4095
        })(); //#4095
    } //#4095
    $1.mirrormap = $get($1.mirrormaps, $cvi($geti($1.barcode, 0, 2)) % 4); //#4098
    $1.sbs = $s(13); //#4100
    $1.txt = $a(2); //#4101
    for (var _G = 0; _G <= 1; _G += 1) { //#4131
        $1.i = _G; //#4104
        if ($1.i == 0) { //#4110
            $puti($1.sbs, 0, $get($1.encs, 10)); //#4108
        } else { //#4110
            $puti($1.sbs, (($1.i - 1) * 6) + 7, $get($1.encs, 11)); //#4110
        } //#4110
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#4114
        $j--; //#4115
        $1.indx = $k[--$j].length; //#4116
        $j -= 2; //#4117
        $1.enc = $get($1.encs, $1.indx); //#4118
        if ($get($1.mirrormap, $1.i) == 49) { //#4128
            $1.enclen = $1.enc.length; //#4120
            $1.revenc = $s($1.enclen); //#4121
            for (var _f = 0, _e = $1.enclen - 1; _f <= _e; _f += 1) { //#4126
                $1.j = _f; //#4123
                $1.char = $get($1.enc, $1.j); //#4124
                $put($1.revenc, ($1.enclen - $1.j) - 1, $1.char); //#4125
            } //#4125
            $1.enc = $1.revenc; //#4127
        } //#4127
        $puti($1.sbs, ($1.i * 6) + 3, $1.enc); //#4129
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ((($1.i - 1) * 9) + 13) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); //#4130
    } //#4130
    $k[$j++] = Infinity; //#4145
    $k[$j++] = Infinity; //#4136
    var _12 = $1.sbs; //#4136
    for (var _13 = 0, _14 = _12.length; _13 < _14; _13++) { //#4136
        $k[$j++] = $get(_12, _13) - 48; //#4136
    } //#4136
    var _16 = $a(); //#4136
    $k[$j++] = Infinity; //#4137
    for (var _17 = 0, _18 = 12; _17 < _18; _17++) { //#4137
        $k[$j++] = $1.height; //#4137
    } //#4137
    var _1A = $a(); //#4137
    $k[$j++] = Infinity; //#4138
    for (var _1B = 0, _1C = 12; _1B < _1C; _1B++) { //#4138
        $k[$j++] = 0; //#4138
    } //#4138
    var _1D = $a(); //#4138
    $k[$j++] = 'ren'; //#4141
    $k[$j++] = bwipp_renlinear; //#4141
    $k[$j++] = 'sbs'; //#4141
    $k[$j++] = _16; //#4141
    $k[$j++] = 'bhs'; //#4141
    $k[$j++] = _1A; //#4141
    $k[$j++] = 'bbs'; //#4141
    $k[$j++] = _1D; //#4141
    if ($1.includetext) { //#4141
        $k[$j++] = 'txt'; //#4140
        $k[$j++] = $1.txt; //#4140
    } //#4140
    $k[$j++] = 'opt'; //#4145
    $k[$j++] = $1.options; //#4145
    $k[$j++] = 'guardrightpos'; //#4145
    $k[$j++] = 10; //#4145
    $k[$j++] = 'guardrightypos'; //#4145
    $k[$j++] = $f($1.textyoffset + 4); //#4145
    $k[$j++] = 'bordertop'; //#4145
    $k[$j++] = 10; //#4145
    var _1I = $d(); //#4145
    $k[$j++] = _1I; //#4148
    if (!$1.dontdraw) { //#4148
        bwipp_renlinear(); //#4148
    } //#4148
}

function bwipp_ean13() {
    var $1 = Object.create(bwipp_ean13.$ctx || (bwipp_ean13.$ctx = {})); //#4184
    $1.dontdraw = false; //#4187
    $1.includetext = false; //#4188
    $1.textfont = "OCR-B"; //#4189
    $1.textsize = 12; //#4190
    $1.textxoffset = -10; //#4191
    $1.textyoffset = -4; //#4192
    $1.height = 1; //#4193
    $1.addongap = 12; //#4194
    $1.addontextfont = "unset"; //#4195
    $1.addontextsize = null; //#4196
    $1.addontextxoffset = null; //#4197
    $1.addontextyoffset = null; //#4198
    $k[$j++] = $1; //#4200
    bwipp_processoptions(); //#4200
    $1.options = $k[--$j]; //#4200
    $1.barcode = $k[--$j]; //#4201
    $search($1.barcode, " "); //#4206
    if ($k[--$j]) { //#4212
        $1.barcode = $k[--$j]; //#4207
        $j--; //#4208
        $1.addon = $k[--$j]; //#4209
    } else { //#4212
        $j--; //#4211
        $1.addon = ""; //#4212
    } //#4212
    if (($1.barcode.length != 12) && ($1.barcode.length != 13)) { //#4218
        $k[$j++] = 'bwipp.ean13badLength#4217'; //#4217
        $k[$j++] = "EAN-13 must be 12 or 13 digits"; //#4217
        bwipp_raiseerror(); //#4217
    } //#4217
    $forall($1.barcode, function() { //#4223
        var _9 = $k[--$j]; //#4220
        if ((_9 < 48) || (_9 > 57)) { //#4222
            $k[$j++] = 'bwipp.ean13badCharacter#4221'; //#4221
            $k[$j++] = "EAN-13 must contain only digits"; //#4221
            bwipp_raiseerror(); //#4221
        } //#4221
    }); //#4221
    if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //#4226
        $k[$j++] = 'bwipp.ean13badAddOnLength#4225'; //#4225
        $k[$j++] = "Add-on for EAN-13 must be 2 or 5 digits"; //#4225
        bwipp_raiseerror(); //#4225
    } //#4225
    $1.pad = $s(13); //#4229
    $1.checksum = 0; //#4230
    for (var _E = 0; _E <= 11; _E += 1) { //#4239
        $1.i = _E; //#4232
        $1.barchar = $f($get($1.barcode, $1.i) - 48); //#4233
        if (($1.i % 2) == 0) { //#4237
            $1.checksum = $f($1.barchar + $1.checksum); //#4235
        } else { //#4237
            $1.checksum = $f(($1.barchar * 3) + $1.checksum); //#4237
        } //#4237
    } //#4237
    $1.checksum = ($f(10 - ($1.checksum % 10))) % 10; //#4240
    if ($1.barcode.length == 13) { //#4245
        if ($get($1.barcode, 12) != $f($1.checksum + 48)) { //#4244
            $k[$j++] = 'bwipp.ean13badCheckDigit#4243'; //#4243
            $k[$j++] = "Incorrect EAN-13 check digit provided"; //#4243
            bwipp_raiseerror(); //#4243
        } //#4243
    } //#4243
    $puti($1.pad, 0, $1.barcode); //#4246
    $put($1.pad, 12, $f($1.checksum + 48)); //#4247
    $1.barcode = $1.pad; //#4248
    if (!bwipp_ean13.$ctx._4266) { //#4266
        (function() { //#4266
            var $ctx = Object.create($1); //#4266
            $ctx.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); //#4256
            $ctx.barchars = "0123456789"; //#4259
            $ctx.mirrormaps = $a(["000000", "001011", "001101", "001110", "010011", "011001", "011100", "010101", "010110", "011010"]); //#4265
            for (var _Z in $ctx) {
                $ctx.hasOwnProperty(_Z) && (bwipp_ean13.$ctx[_Z] = $ctx[_Z]);
            } //#4265
            bwipp_ean13.$ctx._4266 = 1; //#4265
        })(); //#4265
    } //#4265
    $1.sbs = $s(59); //#4268
    $1.txt = $a(13); //#4269
    $puti($1.sbs, 0, $get($1.encs, 10)); //#4272
    $1.mirrormap = $get($1.mirrormaps, $get($1.barcode, 0) - 48); //#4275
    $put($1.txt, 0, $a([$geti($1.barcode, 0, 1), $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); //#4276
    for (var _r = 1; _r <= 6; _r += 1) { //#4299
        $1.i = _r; //#4281
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#4282
        $j--; //#4283
        $1.indx = $k[--$j].length; //#4284
        $j -= 2; //#4285
        $1.enc = $get($1.encs, $1.indx); //#4286
        if ($get($1.mirrormap, $1.i - 1) == 49) { //#4296
            $1.enclen = $1.enc.length; //#4288
            $1.revenc = $s($1.enclen); //#4289
            for (var _18 = 0, _17 = $1.enclen - 1; _18 <= _17; _18 += 1) { //#4294
                $1.j = _18; //#4291
                $1.char = $get($1.enc, $1.j); //#4292
                $put($1.revenc, ($1.enclen - $1.j) - 1, $1.char); //#4293
            } //#4293
            $1.enc = $1.revenc; //#4295
        } //#4295
        $puti($1.sbs, (($1.i - 1) * 4) + 3, $1.enc); //#4297
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ((($1.i - 1) * 7) + 14) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); //#4298
    } //#4298
    $puti($1.sbs, ((7 - 1) * 4) + 3, $get($1.encs, 11)); //#4302
    for (var _1Y = 7; _1Y <= 12; _1Y += 1) { //#4315
        $1.i = _1Y; //#4307
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#4308
        $j--; //#4309
        $1.indx = $k[--$j].length; //#4310
        $j -= 2; //#4311
        $1.enc = $get($1.encs, $1.indx); //#4312
        $puti($1.sbs, (($1.i - 1) * 4) + 8, $1.enc); //#4313
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ((($1.i - 1) * 7) + 18) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); //#4314
    } //#4314
    $puti($1.sbs, 56, $get($1.encs, 12)); //#4318
    $k[$j++] = Infinity; //#4320
    var _1y = $1.sbs; //#4320
    for (var _1z = 0, _20 = _1y.length; _1z < _20; _1z++) { //#4320
        $k[$j++] = $get(_1y, _1z) - 48; //#4320
    } //#4320
    $1.sbs = $a(); //#4320
    if ($1.includetext) { //#4327
        $k[$j++] = Infinity; //#4322
        $k[$j++] = $1.height; //#4322
        $k[$j++] = $1.height; //#4322
        for (var _26 = 0, _27 = 12; _26 < _27; _26++) { //#4322
            $k[$j++] = $f($1.height - 0.075); //#4322
        } //#4322
        $k[$j++] = $1.height; //#4322
        $k[$j++] = $1.height; //#4322
        for (var _2B = 0, _2C = 12; _2B < _2C; _2B++) { //#4322
            $k[$j++] = $f($1.height - 0.075); //#4322
        } //#4322
        $k[$j++] = $1.height; //#4322
        $k[$j++] = $1.height; //#4322
        $1.bhs = $a(); //#4322
        $k[$j++] = Infinity; //#4323
        $k[$j++] = 0; //#4323
        $k[$j++] = 0; //#4323
        for (var _2H = 0, _2I = 12; _2H < _2I; _2H++) { //#4323
            $k[$j++] = 0.075; //#4323
        } //#4323
        $k[$j++] = 0; //#4323
        $k[$j++] = 0; //#4323
        for (var _2J = 0, _2K = 12; _2J < _2K; _2J++) { //#4323
            $k[$j++] = 0.075; //#4323
        } //#4323
        $k[$j++] = 0; //#4323
        $k[$j++] = 0; //#4323
        $1.bbs = $a(); //#4323
    } else { //#4327
        $k[$j++] = Infinity; //#4325
        for (var _2M = 0, _2N = 30; _2M < _2N; _2M++) { //#4325
            $k[$j++] = $1.height; //#4325
        } //#4325
        $1.bhs = $a(); //#4325
        $k[$j++] = Infinity; //#4326
        for (var _2Q = 0, _2R = 30; _2Q < _2R; _2Q++) { //#4326
            $k[$j++] = 0; //#4326
        } //#4326
        $1.bbs = $a(); //#4326
        $1.txt = $a([]); //#4327
    } //#4327
    $1.guardrightypos = 0; //#4329
    if ($ne($1.addon, "")) { //#4350
        $k[$j++] = Infinity; //#4340
        $k[$j++] = 'dontdraw'; //#4337
        $k[$j++] = true; //#4337
        $k[$j++] = 'includetext'; //#4337
        $k[$j++] = true; //#4337
        $k[$j++] = 'height'; //#4337
        $k[$j++] = $f($1.height - 0.15); //#4337
        $k[$j++] = 'textxoffset'; //#4337
        if ($ne($1.addontextxoffset, null)) { //#4337
            $k[$j++] = $1.addontextxoffset; //#4337
        } else { //#4337
            $k[$j++] = 95 + $1.addongap; //#4337
        } //#4337
        if ($ne($1.addontextyoffset, null)) { //#4338
            $k[$j++] = 'textyoffset'; //#4338
            $k[$j++] = $1.addontextyoffset; //#4338
        } //#4338
        $k[$j++] = 'textsize'; //#4339
        if ($ne($1.addontextsize, null)) { //#4339
            $k[$j++] = $1.addontextsize; //#4339
        } else { //#4339
            $k[$j++] = $1.textsize; //#4339
        } //#4339
        var _2f = $ne($1.addontextfont, "unset") ? $1.addontextfont : $1.textfont; //#4340
        $k[$j++] = 'textfont'; //#4340
        $k[$j++] = _2f; //#4340
        $1.addopts = $d(); //#4341
        if ($1.addon.length == 2) { //#4342
            $k[$j++] = $1.addon; //#4342
            $k[$j++] = $1.addopts; //#4342
            bwipp_ean2(); //#4342
        } //#4342
        if ($1.addon.length == 5) { //#4343
            $k[$j++] = $1.addon; //#4343
            $k[$j++] = $1.addopts; //#4343
            bwipp_ean5(); //#4343
        } //#4343
        $1.addcode = $k[--$j]; //#4344
        $k[$j++] = Infinity; //#4345
        $aload($1.sbs); //#4345
        $k[$j++] = $1.addongap; //#4345
        $aload($get($1.addcode, "sbs")); //#4345
        $1.sbs = $a(); //#4345
        $k[$j++] = Infinity; //#4346
        $aload($1.bhs); //#4346
        $forall($get($1.addcode, "bhs"), function() { //#4346
            var _2w = $k[--$j]; //#4346
            $k[$j++] = $f(_2w - 0.075); //#4346
        }); //#4346
        $1.bhs = $a(); //#4346
        $k[$j++] = Infinity; //#4347
        $aload($1.bbs); //#4347
        $forall($get($1.addcode, "bbs"), function() { //#4347
            var _31 = $k[--$j]; //#4347
            $k[$j++] = $f(_31 + 0.075); //#4347
        }); //#4347
        $1.bbs = $a(); //#4347
        $k[$j++] = Infinity; //#4348
        $aload($1.txt); //#4348
        $aload($get($1.addcode, "txt")); //#4348
        $1.txt = $a(); //#4348
        $1.guardrightypos = ($1.height * 72) - 6; //#4349
    } //#4349
    var _3E = new Map([
        ["ren", bwipp_renlinear],
        ["sbs", $1.sbs],
        ["bhs", $1.bhs],
        ["bbs", $1.bbs],
        ["txt", $1.txt],
        ["opt", $1.options],
        ["guardrightpos", 10],
        ["guardrightypos", $1.guardrightypos],
        ["borderbottom", 5]
    ]); //#4362
    $k[$j++] = _3E; //#4365
    if (!$1.dontdraw) { //#4365
        bwipp_renlinear(); //#4365
    } //#4365
}

function bwipp_ean8() {
    var $1 = Object.create(bwipp_ean8.$ctx || (bwipp_ean8.$ctx = {})); //#4401
    $1.dontdraw = false; //#4404
    $1.includetext = false; //#4405
    $1.textfont = "OCR-B"; //#4406
    $1.textsize = 12; //#4407
    $1.textxoffset = 4; //#4408
    $1.textyoffset = -4; //#4409
    $1.height = 1; //#4410
    $1.addongap = 12; //#4411
    $1.addontextfont = "unset"; //#4412
    $1.addontextsize = null; //#4413
    $1.addontextxoffset = null; //#4414
    $1.addontextyoffset = null; //#4415
    $k[$j++] = $1; //#4417
    bwipp_processoptions(); //#4417
    $1.options = $k[--$j]; //#4417
    $1.barcode = $k[--$j]; //#4418
    $search($1.barcode, " "); //#4423
    if ($k[--$j]) { //#4429
        $1.barcode = $k[--$j]; //#4424
        $j--; //#4425
        $1.addon = $k[--$j]; //#4426
    } else { //#4429
        $j--; //#4428
        $1.addon = ""; //#4429
    } //#4429
    if (($1.barcode.length != 7) && ($1.barcode.length != 8)) { //#4435
        $k[$j++] = 'bwipp.ean8badLength#4434'; //#4434
        $k[$j++] = "EAN-8 must be 7 or 8 digits"; //#4434
        bwipp_raiseerror(); //#4434
    } //#4434
    $forall($1.barcode, function() { //#4440
        var _9 = $k[--$j]; //#4437
        if ((_9 < 48) || (_9 > 57)) { //#4439
            $k[$j++] = 'bwipp.ean8badCharacter#4438'; //#4438
            $k[$j++] = "EAN-8 must contain only digits"; //#4438
            bwipp_raiseerror(); //#4438
        } //#4438
    }); //#4438
    if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //#4443
        $k[$j++] = 'bwipp.ean8badAddOnLength#4442'; //#4442
        $k[$j++] = "Add-on for EAN-8 must be 2 or 5 digits"; //#4442
        bwipp_raiseerror(); //#4442
    } //#4442
    $1.pad = $s(8); //#4446
    $1.checksum = 0; //#4447
    for (var _E = 0; _E <= 6; _E += 1) { //#4456
        $1.i = _E; //#4449
        $1.barchar = $f($get($1.barcode, $1.i) - 48); //#4450
        if (($1.i % 2) != 0) { //#4454
            $1.checksum = $f($1.barchar + $1.checksum); //#4452
        } else { //#4454
            $1.checksum = $f(($1.barchar * 3) + $1.checksum); //#4454
        } //#4454
    } //#4454
    $1.checksum = ($f(10 - ($1.checksum % 10))) % 10; //#4457
    if ($1.barcode.length == 8) { //#4462
        if ($get($1.barcode, 7) != $f($1.checksum + 48)) { //#4461
            $k[$j++] = 'bwipp.ean8badCheckDigit#4460'; //#4460
            $k[$j++] = "Incorrect EAN-8 check digit provided"; //#4460
            bwipp_raiseerror(); //#4460
        } //#4460
    } //#4460
    $puti($1.pad, 0, $1.barcode); //#4463
    $put($1.pad, 7, $f($1.checksum + 48)); //#4464
    $1.barcode = $1.pad; //#4465
    if (!bwipp_ean8.$ctx._4477) { //#4477
        (function() { //#4477
            var $ctx = Object.create($1); //#4477
            $ctx.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); //#4473
            $ctx.barchars = "0123456789"; //#4476
            for (var _Y in $ctx) {
                $ctx.hasOwnProperty(_Y) && (bwipp_ean8.$ctx[_Y] = $ctx[_Y]);
            } //#4476
            bwipp_ean8.$ctx._4477 = 1; //#4476
        })(); //#4476
    } //#4476
    $1.sbs = $s(43); //#4479
    $1.txt = $a(8); //#4480
    $puti($1.sbs, 0, $get($1.encs, 10)); //#4483
    for (var _e = 0; _e <= 3; _e += 1) { //#4496
        $1.i = _e; //#4488
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#4489
        $j--; //#4490
        $1.indx = $k[--$j].length; //#4491
        $j -= 2; //#4492
        $1.enc = $get($1.encs, $1.indx); //#4493
        $puti($1.sbs, ($1.i * 4) + 3, $1.enc); //#4494
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 7) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); //#4495
    } //#4495
    $puti($1.sbs, (4 * 4) + 3, $get($1.encs, 11)); //#4499
    for (var _14 = 4; _14 <= 7; _14 += 1) { //#4512
        $1.i = _14; //#4504
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#4505
        $j--; //#4506
        $1.indx = $k[--$j].length; //#4507
        $j -= 2; //#4508
        $1.enc = $get($1.encs, $1.indx); //#4509
        $puti($1.sbs, ($1.i * 4) + 8, $1.enc); //#4510
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.i * 7) + $1.textxoffset) + 4, $1.textyoffset, $1.textfont, $1.textsize])); //#4511
    } //#4511
    $puti($1.sbs, 40, $get($1.encs, 12)); //#4515
    $k[$j++] = Infinity; //#4517
    var _1U = $1.sbs; //#4517
    for (var _1V = 0, _1W = _1U.length; _1V < _1W; _1V++) { //#4517
        $k[$j++] = $get(_1U, _1V) - 48; //#4517
    } //#4517
    $1.sbs = $a(); //#4517
    if ($1.includetext) { //#4524
        $k[$j++] = Infinity; //#4519
        $k[$j++] = $1.height; //#4519
        $k[$j++] = $1.height; //#4519
        for (var _1c = 0, _1d = 8; _1c < _1d; _1c++) { //#4519
            $k[$j++] = $f($1.height - 0.075); //#4519
        } //#4519
        $k[$j++] = $1.height; //#4519
        $k[$j++] = $1.height; //#4519
        for (var _1h = 0, _1i = 8; _1h < _1i; _1h++) { //#4519
            $k[$j++] = $f($1.height - 0.075); //#4519
        } //#4519
        $k[$j++] = $1.height; //#4519
        $k[$j++] = $1.height; //#4519
        $1.bhs = $a(); //#4519
        $k[$j++] = Infinity; //#4520
        $k[$j++] = 0; //#4520
        $k[$j++] = 0; //#4520
        for (var _1n = 0, _1o = 8; _1n < _1o; _1n++) { //#4520
            $k[$j++] = 0.075; //#4520
        } //#4520
        $k[$j++] = 0; //#4520
        $k[$j++] = 0; //#4520
        for (var _1p = 0, _1q = 8; _1p < _1q; _1p++) { //#4520
            $k[$j++] = 0.075; //#4520
        } //#4520
        $k[$j++] = 0; //#4520
        $k[$j++] = 0; //#4520
        $1.bbs = $a(); //#4520
    } else { //#4524
        $k[$j++] = Infinity; //#4522
        for (var _1s = 0, _1t = 22; _1s < _1t; _1s++) { //#4522
            $k[$j++] = $1.height; //#4522
        } //#4522
        $1.bhs = $a(); //#4522
        $k[$j++] = Infinity; //#4523
        for (var _1w = 0, _1x = 22; _1w < _1x; _1w++) { //#4523
            $k[$j++] = 0; //#4523
        } //#4523
        $1.bbs = $a(); //#4523
        $1.txt = $a([]); //#4524
    } //#4524
    $1.guardrightypos = 0; //#4526
    if ($ne($1.addon, "")) { //#4547
        $k[$j++] = Infinity; //#4537
        $k[$j++] = 'dontdraw'; //#4534
        $k[$j++] = true; //#4534
        $k[$j++] = 'includetext'; //#4534
        $k[$j++] = true; //#4534
        $k[$j++] = 'height'; //#4534
        $k[$j++] = $f($1.height - 0.15); //#4534
        $k[$j++] = 'textxoffset'; //#4534
        if ($ne($1.addontextxoffset, null)) { //#4534
            $k[$j++] = $1.addontextxoffset; //#4534
        } else { //#4534
            $k[$j++] = 67 + $1.addongap; //#4534
        } //#4534
        if ($ne($1.addontextyoffset, null)) { //#4535
            $k[$j++] = 'textyoffset'; //#4535
            $k[$j++] = $1.addontextyoffset; //#4535
        } //#4535
        $k[$j++] = 'textsize'; //#4536
        if ($ne($1.addontextsize, null)) { //#4536
            $k[$j++] = $1.addontextsize; //#4536
        } else { //#4536
            $k[$j++] = $1.textsize; //#4536
        } //#4536
        var _2B = $ne($1.addontextfont, "unset") ? $1.addontextfont : $1.textfont; //#4537
        $k[$j++] = 'textfont'; //#4537
        $k[$j++] = _2B; //#4537
        $1.addopts = $d(); //#4538
        if ($1.addon.length == 2) { //#4539
            $k[$j++] = $1.addon; //#4539
            $k[$j++] = $1.addopts; //#4539
            bwipp_ean2(); //#4539
        } //#4539
        if ($1.addon.length == 5) { //#4540
            $k[$j++] = $1.addon; //#4540
            $k[$j++] = $1.addopts; //#4540
            bwipp_ean5(); //#4540
        } //#4540
        $1.addcode = $k[--$j]; //#4541
        $k[$j++] = Infinity; //#4542
        $aload($1.sbs); //#4542
        $k[$j++] = $1.addongap; //#4542
        $aload($get($1.addcode, "sbs")); //#4542
        $1.sbs = $a(); //#4542
        $k[$j++] = Infinity; //#4543
        $aload($1.bhs); //#4543
        $forall($get($1.addcode, "bhs"), function() { //#4543
            var _2S = $k[--$j]; //#4543
            $k[$j++] = $f(_2S - 0.075); //#4543
        }); //#4543
        $1.bhs = $a(); //#4543
        $k[$j++] = Infinity; //#4544
        $aload($1.bbs); //#4544
        $forall($get($1.addcode, "bbs"), function() { //#4544
            var _2X = $k[--$j]; //#4544
            $k[$j++] = $f(_2X + 0.075); //#4544
        }); //#4544
        $1.bbs = $a(); //#4544
        $k[$j++] = Infinity; //#4545
        $aload($1.txt); //#4545
        $aload($get($1.addcode, "txt")); //#4545
        $1.txt = $a(); //#4545
        $1.guardrightypos = ($1.height * 72) - 6; //#4546
    } //#4546
    var _2k = new Map([
        ["ren", bwipp_renlinear],
        ["sbs", $1.sbs],
        ["bhs", $1.bhs],
        ["bbs", $1.bbs],
        ["txt", $1.txt],
        ["opt", $1.options],
        ["guardleftpos", 10],
        ["guardrightpos", 10],
        ["guardrightypos", $1.guardrightypos],
        ["borderbottom", 5]
    ]); //#4560
    $k[$j++] = _2k; //#4563
    if (!$1.dontdraw) { //#4563
        bwipp_renlinear(); //#4563
    } //#4563
}

function bwipp_upca() {
    var $1 = Object.create(bwipp_upca.$ctx || (bwipp_upca.$ctx = {})); //#4599
    $1.dontdraw = false; //#4602
    $1.includetext = false; //#4603
    $1.textfont = "OCR-B"; //#4604
    $1.textsize = 12; //#4605
    $1.textxoffset = -7; //#4606
    $1.textyoffset = -4; //#4607
    $1.height = 1; //#4608
    $1.addongap = 12; //#4609
    $1.addontextfont = "unset"; //#4610
    $1.addontextsize = null; //#4611
    $1.addontextxoffset = null; //#4612
    $1.addontextyoffset = null; //#4613
    $k[$j++] = $1; //#4615
    bwipp_processoptions(); //#4615
    $1.options = $k[--$j]; //#4615
    $1.barcode = $k[--$j]; //#4616
    $search($1.barcode, " "); //#4621
    if ($k[--$j]) { //#4627
        $1.barcode = $k[--$j]; //#4622
        $j--; //#4623
        $1.addon = $k[--$j]; //#4624
    } else { //#4627
        $j--; //#4626
        $1.addon = ""; //#4627
    } //#4627
    if (($1.barcode.length == 7) || ($1.barcode.length == 8)) { //#4673
        $forall($1.barcode, function() { //#4637
            var _9 = $k[--$j]; //#4634
            if ((_9 < 48) || (_9 > 57)) { //#4636
                $k[$j++] = 'bwipp.upcAupcEbadCharacter#4635'; //#4635
                $k[$j++] = "UPC-E must contain only digits"; //#4635
                bwipp_raiseerror(); //#4635
            } //#4635
        }); //#4635
        var _B = $get($1.barcode, 0); //#4638
        if ((_B != 48) && (_B != 49)) { //#4640
            $k[$j++] = 'bwipp.upcAupcEbadNumberSystem#4639'; //#4639
            $k[$j++] = "UPC-E must have number system 0 or 1"; //#4639
            bwipp_raiseerror(); //#4639
        } //#4639
        for (var _C = 0, _D = 1; _C < _D; _C++) { //#4668
            var _F = ($1.barcode.length == 8) ? 12 : 11; //#4642
            $1.upcacode = $s(_F); //#4642
            if ($f($get($1.barcode, 6) - 48) <= 2) { //#4649
                $puti($1.upcacode, 0, $geti($1.barcode, 0, 3)); //#4644
                $puti($1.upcacode, 3, $geti($1.barcode, 6, 1)); //#4645
                $puti($1.upcacode, 4, "0000"); //#4646
                $puti($1.upcacode, 8, $geti($1.barcode, 3, 3)); //#4647
                break; //#4648
            } //#4648
            if ($f($get($1.barcode, 6) - 48) == 3) { //#4655
                $puti($1.upcacode, 0, $geti($1.barcode, 0, 4)); //#4651
                $puti($1.upcacode, 4, "00000"); //#4652
                $puti($1.upcacode, 9, $geti($1.barcode, 4, 2)); //#4653
                break; //#4654
            } //#4654
            if ($f($get($1.barcode, 6) - 48) == 4) { //#4661
                $puti($1.upcacode, 0, $geti($1.barcode, 0, 5)); //#4657
                $puti($1.upcacode, 5, "00000"); //#4658
                $puti($1.upcacode, 10, $geti($1.barcode, 5, 1)); //#4659
                break; //#4660
            } //#4660
            if ($f($get($1.barcode, 6) - 48) >= 5) { //#4667
                $puti($1.upcacode, 0, $geti($1.barcode, 0, 6)); //#4663
                $puti($1.upcacode, 6, "0000"); //#4664
                $puti($1.upcacode, 10, $geti($1.barcode, 6, 1)); //#4665
                break; //#4666
            } //#4666
        } //#4666
        if ($1.barcode.length == 8) { //#4671
            $puti($1.upcacode, 11, $geti($1.barcode, 7, 1)); //#4670
        } //#4670
        $1.barcode = $1.upcacode; //#4672
    } //#4672
    if (($1.barcode.length != 11) && ($1.barcode.length != 12)) { //#4678
        $k[$j++] = 'bwipp.upcAbadLength#4677'; //#4677
        $k[$j++] = "UPC-A must be 11 or 12 digits"; //#4677
        bwipp_raiseerror(); //#4677
    } //#4677
    var _11 = $1.barcode; //#4679
    for (var _12 = 0, _13 = _11.length; _12 < _13; _12++) { //#4683
        var _14 = $get(_11, _12); //#4683
        if ((_14 < 48) || (_14 > 57)) { //#4682
            $k[$j++] = 'bwipp.upcAbadCharacter#4681'; //#4681
            $k[$j++] = "UPC-A must contain only digits"; //#4681
            bwipp_raiseerror(); //#4681
        } //#4681
    } //#4681
    if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //#4686
        $k[$j++] = 'bwipp.upcAbadAddOnLength#4685'; //#4685
        $k[$j++] = "Add-on for UPC-A must be 2 or 5 digits"; //#4685
        bwipp_raiseerror(); //#4685
    } //#4685
    $1.pad = $s(12); //#4689
    $1.checksum = 0; //#4690
    for (var _19 = 0; _19 <= 10; _19 += 1) { //#4699
        $1.i = _19; //#4692
        $1.barchar = $get($1.barcode, $1.i) - 48; //#4693
        if (($1.i % 2) != 0) { //#4697
            $1.checksum = $1.checksum + $1.barchar; //#4695
        } else { //#4697
            $1.checksum = $1.checksum + ($1.barchar * 3); //#4697
        } //#4697
    } //#4697
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#4700
    if ($1.barcode.length == 12) { //#4705
        if ($get($1.barcode, 11) != ($1.checksum + 48)) { //#4704
            $k[$j++] = 'bwipp.upcAbadCheckDigit#4703'; //#4703
            $k[$j++] = "Incorrect UPC check digit provided"; //#4703
            bwipp_raiseerror(); //#4703
        } //#4703
    } //#4703
    $puti($1.pad, 0, $1.barcode); //#4706
    $put($1.pad, 11, $1.checksum + 48); //#4707
    $1.barcode = $1.pad; //#4708
    if (!bwipp_upca.$ctx._4720) { //#4720
        (function() { //#4720
            var $ctx = Object.create($1); //#4720
            $ctx.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); //#4716
            $ctx.barchars = "0123456789"; //#4719
            for (var _1T in $ctx) {
                $ctx.hasOwnProperty(_1T) && (bwipp_upca.$ctx[_1T] = $ctx[_1T]);
            } //#4719
            bwipp_upca.$ctx._4720 = 1; //#4719
        })(); //#4719
    } //#4719
    $1.sbs = $s(59); //#4722
    $1.txt = $a(12); //#4723
    $puti($1.sbs, 0, $get($1.encs, 10)); //#4726
    for (var _1Z = 0; _1Z <= 5; _1Z += 1) { //#4743
        $1.i = _1Z; //#4731
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#4732
        $j--; //#4733
        $1.indx = $k[--$j].length; //#4734
        $j -= 2; //#4735
        $1.enc = $get($1.encs, $1.indx); //#4736
        $puti($1.sbs, ($1.i * 4) + 3, $1.enc); //#4737
        if ($1.i == 0) { //#4741
            $put($1.txt, 0, $a([$geti($1.barcode, 0, 1), $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize - 2])); //#4739
        } else { //#4741
            $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.i * 7) + 11) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); //#4741
        } //#4741
    } //#4741
    $puti($1.sbs, (6 * 4) + 3, $get($1.encs, 11)); //#4746
    for (var _28 = 6; _28 <= 11; _28 += 1) { //#4763
        $1.i = _28; //#4751
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#4752
        $j--; //#4753
        $1.indx = $k[--$j].length; //#4754
        $j -= 2; //#4755
        $1.enc = $get($1.encs, $1.indx); //#4756
        $puti($1.sbs, ($1.i * 4) + 8, $1.enc); //#4757
        if ($1.i == 11) { //#4761
            $put($1.txt, 11, $a([$geti($1.barcode, 11, 1), $1.textxoffset + 104, $1.textyoffset, $1.textfont, $1.textsize - 2])); //#4759
        } else { //#4761
            $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.i * 7) + $1.textxoffset) + 15, $1.textyoffset, $1.textfont, $1.textsize])); //#4761
        } //#4761
    } //#4761
    $puti($1.sbs, 56, $get($1.encs, 12)); //#4766
    $k[$j++] = Infinity; //#4768
    var _2h = $1.sbs; //#4768
    for (var _2i = 0, _2j = _2h.length; _2i < _2j; _2i++) { //#4768
        $k[$j++] = $get(_2h, _2i) - 48; //#4768
    } //#4768
    $1.sbs = $a(); //#4768
    if ($1.includetext) { //#4775
        $k[$j++] = Infinity; //#4770
        for (var _2n = 0, _2o = 4; _2n < _2o; _2n++) { //#4770
            $k[$j++] = $1.height; //#4770
        } //#4770
        for (var _2q = 0, _2r = 10; _2q < _2r; _2q++) { //#4770
            $k[$j++] = $f($1.height - 0.075); //#4770
        } //#4770
        $k[$j++] = $1.height; //#4770
        $k[$j++] = $1.height; //#4770
        for (var _2v = 0, _2w = 10; _2v < _2w; _2v++) { //#4770
            $k[$j++] = $f($1.height - 0.075); //#4770
        } //#4770
        for (var _2y = 0, _2z = 4; _2y < _2z; _2y++) { //#4770
            $k[$j++] = $1.height; //#4770
        } //#4770
        $1.bhs = $a(); //#4770
        $k[$j++] = Infinity; //#4771
        $k[$j++] = 0; //#4771
        $k[$j++] = 0; //#4771
        $k[$j++] = 0; //#4771
        $k[$j++] = 0; //#4771
        for (var _32 = 0, _33 = 10; _32 < _33; _32++) { //#4771
            $k[$j++] = 0.075; //#4771
        } //#4771
        $k[$j++] = 0; //#4771
        $k[$j++] = 0; //#4771
        for (var _34 = 0, _35 = 10; _34 < _35; _34++) { //#4771
            $k[$j++] = 0.075; //#4771
        } //#4771
        $k[$j++] = 0; //#4771
        $k[$j++] = 0; //#4771
        $k[$j++] = 0; //#4771
        $k[$j++] = 0; //#4771
        $1.bbs = $a(); //#4771
    } else { //#4775
        $k[$j++] = Infinity; //#4773
        for (var _37 = 0, _38 = 30; _37 < _38; _37++) { //#4773
            $k[$j++] = $1.height; //#4773
        } //#4773
        $1.bhs = $a(); //#4773
        $k[$j++] = Infinity; //#4774
        for (var _3B = 0, _3C = 30; _3B < _3C; _3B++) { //#4774
            $k[$j++] = 0; //#4774
        } //#4774
        $1.bbs = $a(); //#4774
        $1.txt = $a([]); //#4775
    } //#4775
    $1.guardrightypos = 0; //#4777
    if ($ne($1.addon, "")) { //#4798
        $k[$j++] = Infinity; //#4788
        $k[$j++] = 'dontdraw'; //#4785
        $k[$j++] = true; //#4785
        $k[$j++] = 'includetext'; //#4785
        $k[$j++] = true; //#4785
        $k[$j++] = 'height'; //#4785
        $k[$j++] = $f($1.height - 0.15); //#4785
        $k[$j++] = 'textxoffset'; //#4785
        if ($ne($1.addontextxoffset, null)) { //#4785
            $k[$j++] = $1.addontextxoffset; //#4785
        } else { //#4785
            $k[$j++] = 95 + $1.addongap; //#4785
        } //#4785
        if ($ne($1.addontextyoffset, null)) { //#4786
            $k[$j++] = 'textyoffset'; //#4786
            $k[$j++] = $1.addontextyoffset; //#4786
        } //#4786
        $k[$j++] = 'textsize'; //#4787
        if ($ne($1.addontextsize, null)) { //#4787
            $k[$j++] = $1.addontextsize; //#4787
        } else { //#4787
            $k[$j++] = $1.textsize; //#4787
        } //#4787
        var _3Q = $ne($1.addontextfont, "unset") ? $1.addontextfont : $1.textfont; //#4788
        $k[$j++] = 'textfont'; //#4788
        $k[$j++] = _3Q; //#4788
        $1.addopts = $d(); //#4789
        if ($1.addon.length == 2) { //#4790
            $k[$j++] = $1.addon; //#4790
            $k[$j++] = $1.addopts; //#4790
            bwipp_ean2(); //#4790
        } //#4790
        if ($1.addon.length == 5) { //#4791
            $k[$j++] = $1.addon; //#4791
            $k[$j++] = $1.addopts; //#4791
            bwipp_ean5(); //#4791
        } //#4791
        $1.addcode = $k[--$j]; //#4792
        $k[$j++] = Infinity; //#4793
        $aload($1.sbs); //#4793
        $k[$j++] = $1.addongap; //#4793
        $aload($get($1.addcode, "sbs")); //#4793
        $1.sbs = $a(); //#4793
        $k[$j++] = Infinity; //#4794
        $aload($1.bhs); //#4794
        $forall($get($1.addcode, "bhs"), function() { //#4794
            var _3h = $k[--$j]; //#4794
            $k[$j++] = $f(_3h - 0.075); //#4794
        }); //#4794
        $1.bhs = $a(); //#4794
        $k[$j++] = Infinity; //#4795
        $aload($1.bbs); //#4795
        $forall($get($1.addcode, "bbs"), function() { //#4795
            var _3m = $k[--$j]; //#4795
            $k[$j++] = $f(_3m + 0.075); //#4795
        }); //#4795
        $1.bbs = $a(); //#4795
        $k[$j++] = Infinity; //#4796
        $aload($1.txt); //#4796
        $aload($get($1.addcode, "txt")); //#4796
        $1.txt = $a(); //#4796
        $1.guardrightypos = ($1.height * 72) - 6; //#4797
    } //#4797
    var _3z = new Map([
        ["ren", bwipp_renlinear],
        ["sbs", $1.sbs],
        ["bhs", $1.bhs],
        ["bbs", $1.bbs],
        ["txt", $1.txt],
        ["opt", $1.options],
        ["guardrightpos", 10],
        ["guardrightypos", $1.guardrightypos],
        ["borderbottom", 5]
    ]); //#4810
    $k[$j++] = _3z; //#4813
    if (!$1.dontdraw) { //#4813
        bwipp_renlinear(); //#4813
    } //#4813
}

function bwipp_upce() {
    var $1 = Object.create(bwipp_upce.$ctx || (bwipp_upce.$ctx = {})); //#4849
    $1.dontdraw = false; //#4852
    $1.includetext = false; //#4853
    $1.textfont = "OCR-B"; //#4854
    $1.textsize = 12; //#4855
    $1.textxoffset = -7; //#4856
    $1.textyoffset = -4; //#4857
    $1.height = 1; //#4858
    $1.addongap = 12; //#4859
    $1.addontextfont = "unset"; //#4860
    $1.addontextsize = null; //#4861
    $1.addontextxoffset = null; //#4862
    $1.addontextyoffset = null; //#4863
    $k[$j++] = $1; //#4865
    bwipp_processoptions(); //#4865
    $1.options = $k[--$j]; //#4865
    $1.barcode = $k[--$j]; //#4866
    $search($1.barcode, " "); //#4871
    if ($k[--$j]) { //#4877
        $1.barcode = $k[--$j]; //#4872
        $j--; //#4873
        $1.addon = $k[--$j]; //#4874
    } else { //#4877
        $j--; //#4876
        $1.addon = ""; //#4877
    } //#4877
    if (($1.barcode.length == 11) || ($1.barcode.length == 12)) { //#4919
        $forall($1.barcode, function() { //#4887
            var _9 = $k[--$j]; //#4884
            if ((_9 < 48) || (_9 > 57)) { //#4886
                $k[$j++] = 'bwipp.upcEupcAbadCharacter#4885'; //#4885
                $k[$j++] = "UPC-A must contain only digits"; //#4885
                bwipp_raiseerror(); //#4885
            } //#4885
        }); //#4885
        for (var _A = 0, _B = 1; _A < _B; _A++) { //#4914
            var _D = ($1.barcode.length == 12) ? 8 : 7; //#4889
            $1.upcecode = $s(_D); //#4889
            if (($f($get($1.barcode, 3) - 48) <= 2) && $eq($geti($1.barcode, 4, 4), "0000")) { //#4895
                $puti($1.upcecode, 0, $geti($1.barcode, 0, 3)); //#4891
                $puti($1.upcecode, 3, $geti($1.barcode, 8, 3)); //#4892
                $puti($1.upcecode, 6, $geti($1.barcode, 3, 1)); //#4893
                break; //#4894
            } //#4894
            if ($eq($geti($1.barcode, 4, 5), "00000")) { //#4901
                $puti($1.upcecode, 0, $geti($1.barcode, 0, 4)); //#4897
                $puti($1.upcecode, 4, $geti($1.barcode, 9, 2)); //#4898
                $puti($1.upcecode, 6, "3"); //#4899
                break; //#4900
            } //#4900
            if ($eq($geti($1.barcode, 5, 5), "00000")) { //#4907
                $puti($1.upcecode, 0, $geti($1.barcode, 0, 5)); //#4903
                $puti($1.upcecode, 5, $geti($1.barcode, 10, 1)); //#4904
                $puti($1.upcecode, 6, "4"); //#4905
                break; //#4906
            } //#4906
            if (($f($get($1.barcode, 10) - 48) >= 5) && $eq($geti($1.barcode, 6, 4), "0000")) { //#4912
                $puti($1.upcecode, 0, $geti($1.barcode, 0, 6)); //#4909
                $puti($1.upcecode, 6, $geti($1.barcode, 10, 1)); //#4910
                break; //#4911
            } //#4911
            $k[$j++] = 'bwipp.upcEupcAnotCompressible#4913'; //#4913
            $k[$j++] = "UPC-A cannot be converted to a UPC-E"; //#4913
            bwipp_raiseerror(); //#4913
        } //#4913
        if ($1.barcode.length == 12) { //#4917
            $puti($1.upcecode, 7, $geti($1.barcode, 11, 1)); //#4916
        } //#4916
        $1.barcode = $1.upcecode; //#4918
    } //#4918
    if (($1.barcode.length != 7) && ($1.barcode.length != 8)) { //#4924
        $k[$j++] = 'bwipp.upcEbadLength#4923'; //#4923
        $k[$j++] = "UPC-E must be 7 or 8 digits"; //#4923
        bwipp_raiseerror(); //#4923
    } //#4923
    var _11 = $1.barcode; //#4925
    for (var _12 = 0, _13 = _11.length; _12 < _13; _12++) { //#4929
        var _14 = $get(_11, _12); //#4929
        if ((_14 < 48) || (_14 > 57)) { //#4928
            $k[$j++] = 'bwipp.upcEbadCharacter#4927'; //#4927
            $k[$j++] = "UPC-E must contain only digits"; //#4927
            bwipp_raiseerror(); //#4927
        } //#4927
    } //#4927
    if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //#4932
        $k[$j++] = 'bwipp.upcEbadAddOnLength#4931'; //#4931
        $k[$j++] = "Add-on for UPC-E must be 2 or 5 digits"; //#4931
        bwipp_raiseerror(); //#4931
    } //#4931
    var _19 = $get($1.barcode, 0); //#4935
    if ((_19 != 48) && (_19 != 49)) { //#4937
        $k[$j++] = 'bwipp.upcEbadNumberSystem#4936'; //#4936
        $k[$j++] = "UPC-E must have number system 0 or 1"; //#4936
        bwipp_raiseerror(); //#4936
    } //#4936
    if (!bwipp_upce.$ctx._4954) { //#4954
        (function() { //#4954
            var $ctx = Object.create($1); //#4954
            $ctx.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "111111"]); //#4945
            $ctx.barchars = "0123456789"; //#4948
            $ctx.mirrormaps = $a(["000111", "001011", "001101", "001110", "010011", "011001", "011100", "010101", "010110", "011010"]); //#4953
            for (var _1C in $ctx) {
                $ctx.hasOwnProperty(_1C) && (bwipp_upce.$ctx[_1C] = $ctx[_1C]);
            } //#4953
            bwipp_upce.$ctx._4954 = 1; //#4953
        })(); //#4953
    } //#4953
    for (var _1D = 0, _1E = 1; _1D < _1E; _1D++) { //#4984
        $1.upcacode = $s(11); //#4958
        if (($get($1.barcode, 6) - 48) <= 2) { //#4965
            $puti($1.upcacode, 0, $geti($1.barcode, 0, 3)); //#4960
            $puti($1.upcacode, 3, $geti($1.barcode, 6, 1)); //#4961
            $puti($1.upcacode, 4, "0000"); //#4962
            $puti($1.upcacode, 8, $geti($1.barcode, 3, 3)); //#4963
            break; //#4964
        } //#4964
        if (($get($1.barcode, 6) - 48) == 3) { //#4971
            $puti($1.upcacode, 0, $geti($1.barcode, 0, 4)); //#4967
            $puti($1.upcacode, 4, "00000"); //#4968
            $puti($1.upcacode, 9, $geti($1.barcode, 4, 2)); //#4969
            break; //#4970
        } //#4970
        if (($get($1.barcode, 6) - 48) == 4) { //#4977
            $puti($1.upcacode, 0, $geti($1.barcode, 0, 5)); //#4973
            $puti($1.upcacode, 5, "00000"); //#4974
            $puti($1.upcacode, 10, $geti($1.barcode, 5, 1)); //#4975
            break; //#4976
        } //#4976
        if (($get($1.barcode, 6) - 48) >= 5) { //#4983
            $puti($1.upcacode, 0, $geti($1.barcode, 0, 6)); //#4979
            $puti($1.upcacode, 6, "0000"); //#4980
            $puti($1.upcacode, 10, $geti($1.barcode, 6, 1)); //#4981
            break; //#4982
        } //#4982
    } //#4982
    $1.checksum = 0; //#4985
    for (var _1t = 0; _1t <= 10; _1t += 1) { //#4994
        $1.i = _1t; //#4987
        $1.barchar = $get($1.upcacode, $1.i) - 48; //#4988
        if (($1.i % 2) != 0) { //#4992
            $1.checksum = $1.checksum + $1.barchar; //#4990
        } else { //#4992
            $1.checksum = $1.checksum + ($1.barchar * 3); //#4992
        } //#4992
    } //#4992
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#4995
    if ($1.barcode.length == 8) { //#5000
        if ($get($1.barcode, 7) != ($1.checksum + 48)) { //#4999
            $k[$j++] = 'bwipp.upcEbadCheckDigit#4998'; //#4998
            $k[$j++] = "Incorrect UPC check digit provided"; //#4998
            bwipp_raiseerror(); //#4998
        } //#4998
    } //#4998
    $1.pad = $s(8); //#5001
    $puti($1.pad, 0, $1.barcode); //#5002
    $put($1.pad, 7, $1.checksum + 48); //#5003
    $1.barcode = $1.pad; //#5004
    $1.txt = $a(8); //#5005
    $put($1.txt, 0, $a([$geti($1.barcode, 0, 1), $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize - 2])); //#5006
    $1.mirrormap = $get($1.mirrormaps, $1.checksum); //#5009
    if ($get($1.barcode, 0) == 48) { //#5023
        $1.invt = $s($1.mirrormap.length); //#5013
        for (var _2V = 0, _2U = $1.mirrormap.length - 1; _2V <= _2U; _2V += 1) { //#5021
            $1.i = _2V; //#5015
            if ($get($1.mirrormap, $1.i) == 48) { //#5019
                $put($1.invt, $1.i, 49); //#5017
            } else { //#5019
                $put($1.invt, $1.i, 48); //#5019
            } //#5019
        } //#5019
        $1.mirrormap = $1.invt; //#5022
    } //#5022
    $1.sbs = $s(33); //#5025
    $puti($1.sbs, 0, $get($1.encs, 10)); //#5028
    for (var _2i = 1; _2i <= 6; _2i += 1) { //#5050
        $1.i = _2i; //#5031
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#5033
        $j--; //#5034
        $1.indx = $k[--$j].length; //#5035
        $j -= 2; //#5036
        $1.enc = $get($1.encs, $1.indx); //#5037
        if ($get($1.mirrormap, $1.i - 1) == 49) { //#5047
            $1.enclen = $1.enc.length; //#5039
            $1.revenc = $s($1.enclen); //#5040
            for (var _2z = 0, _2y = $1.enclen - 1; _2z <= _2y; _2z += 1) { //#5045
                $1.j = _2z; //#5042
                $1.char = $get($1.enc, $1.j); //#5043
                $put($1.revenc, ($1.enclen - $1.j) - 1, $1.char); //#5044
            } //#5044
            $1.enc = $1.revenc; //#5046
        } //#5046
        $puti($1.sbs, (($1.i - 1) * 4) + 3, $1.enc); //#5048
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ((($1.i - 1) * 7) + 11) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); //#5049
    } //#5049
    $put($1.txt, 7, $a([$geti($1.barcode, 7, 1), ((6 * 7) + 18) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize - 2])); //#5052
    $puti($1.sbs, 27, $get($1.encs, 11)); //#5055
    $k[$j++] = Infinity; //#5057
    var _3X = $1.sbs; //#5057
    for (var _3Y = 0, _3Z = _3X.length; _3Y < _3Z; _3Y++) { //#5057
        $k[$j++] = $get(_3X, _3Y) - 48; //#5057
    } //#5057
    $1.sbs = $a(); //#5057
    if ($1.includetext) { //#5064
        $k[$j++] = Infinity; //#5059
        $k[$j++] = $1.height; //#5059
        $k[$j++] = $1.height; //#5059
        for (var _3f = 0, _3g = 12; _3f < _3g; _3f++) { //#5059
            $k[$j++] = $f($1.height - 0.075); //#5059
        } //#5059
        $k[$j++] = $1.height; //#5059
        $k[$j++] = $1.height; //#5059
        $k[$j++] = $1.height; //#5059
        $1.bhs = $a(); //#5059
        $k[$j++] = Infinity; //#5060
        $k[$j++] = 0; //#5060
        $k[$j++] = 0; //#5060
        for (var _3m = 0, _3n = 12; _3m < _3n; _3m++) { //#5060
            $k[$j++] = 0.075; //#5060
        } //#5060
        $k[$j++] = 0; //#5060
        $k[$j++] = 0; //#5060
        $k[$j++] = 0; //#5060
        $1.bbs = $a(); //#5060
    } else { //#5064
        $k[$j++] = Infinity; //#5062
        for (var _3p = 0, _3q = 17; _3p < _3q; _3p++) { //#5062
            $k[$j++] = $1.height; //#5062
        } //#5062
        $1.bhs = $a(); //#5062
        $k[$j++] = Infinity; //#5063
        for (var _3t = 0, _3u = 17; _3t < _3u; _3t++) { //#5063
            $k[$j++] = 0; //#5063
        } //#5063
        $1.bbs = $a(); //#5063
        $1.txt = $a([]); //#5064
    } //#5064
    $1.guardrightypos = 0; //#5066
    if ($ne($1.addon, "")) { //#5087
        $k[$j++] = Infinity; //#5077
        $k[$j++] = 'dontdraw'; //#5074
        $k[$j++] = true; //#5074
        $k[$j++] = 'includetext'; //#5074
        $k[$j++] = true; //#5074
        $k[$j++] = 'height'; //#5074
        $k[$j++] = $f($1.height - 0.15); //#5074
        $k[$j++] = 'textxoffset'; //#5074
        if ($ne($1.addontextxoffset, null)) { //#5074
            $k[$j++] = $1.addontextxoffset; //#5074
        } else { //#5074
            $k[$j++] = 51 + $1.addongap; //#5074
        } //#5074
        if ($ne($1.addontextyoffset, null)) { //#5075
            $k[$j++] = 'textyoffset'; //#5075
            $k[$j++] = $1.addontextyoffset; //#5075
        } //#5075
        $k[$j++] = 'textsize'; //#5076
        if ($ne($1.addontextsize, null)) { //#5076
            $k[$j++] = $1.addontextsize; //#5076
        } else { //#5076
            $k[$j++] = $1.textsize; //#5076
        } //#5076
        var _48 = $ne($1.addontextfont, "unset") ? $1.addontextfont : $1.textfont; //#5077
        $k[$j++] = 'textfont'; //#5077
        $k[$j++] = _48; //#5077
        $1.addopts = $d(); //#5078
        if ($1.addon.length == 2) { //#5079
            $k[$j++] = $1.addon; //#5079
            $k[$j++] = $1.addopts; //#5079
            bwipp_ean2(); //#5079
        } //#5079
        if ($1.addon.length == 5) { //#5080
            $k[$j++] = $1.addon; //#5080
            $k[$j++] = $1.addopts; //#5080
            bwipp_ean5(); //#5080
        } //#5080
        $1.addcode = $k[--$j]; //#5081
        $k[$j++] = Infinity; //#5082
        $aload($1.sbs); //#5082
        $k[$j++] = $1.addongap; //#5082
        $aload($get($1.addcode, "sbs")); //#5082
        $1.sbs = $a(); //#5082
        $k[$j++] = Infinity; //#5083
        $aload($1.bhs); //#5083
        $forall($get($1.addcode, "bhs"), function() { //#5083
            var _4P = $k[--$j]; //#5083
            $k[$j++] = $f(_4P - 0.075); //#5083
        }); //#5083
        $1.bhs = $a(); //#5083
        $k[$j++] = Infinity; //#5084
        $aload($1.bbs); //#5084
        $forall($get($1.addcode, "bbs"), function() { //#5084
            var _4U = $k[--$j]; //#5084
            $k[$j++] = $f(_4U + 0.075); //#5084
        }); //#5084
        $1.bbs = $a(); //#5084
        $k[$j++] = Infinity; //#5085
        $aload($1.txt); //#5085
        $aload($get($1.addcode, "txt")); //#5085
        $1.txt = $a(); //#5085
        $1.guardrightypos = ($1.height * 72) - 6; //#5086
    } //#5086
    var _4h = new Map([
        ["ren", bwipp_renlinear],
        ["sbs", $1.sbs],
        ["bhs", $1.bhs],
        ["bbs", $1.bbs],
        ["txt", $1.txt],
        ["opt", $1.options],
        ["guardrightpos", 10],
        ["guardrightypos", $1.guardrightypos],
        ["borderbottom", 5]
    ]); //#5099
    $k[$j++] = _4h; //#5102
    if (!$1.dontdraw) { //#5102
        bwipp_renlinear(); //#5102
    } //#5102
}

function bwipp_isbn() {
    var $1 = Object.create(bwipp_isbn.$ctx || (bwipp_isbn.$ctx = {})); //#5135
    $1.dontdraw = false; //#5138
    $1.includetext = false; //#5139
    $1.isbntextfont = 'OCR-A'; //#5140
    $1.isbntextsize = 8; //#5141
    $1.isbntextxoffset = null; //#5142
    $1.isbntextyoffset = null; //#5143
    $1.height = 1; //#5144
    $1.addongap = 12; //#5145
    $1.legacy = false; //#5146
    $k[$j++] = $1; //#5148
    bwipp_processoptions(); //#5148
    $1.options = $k[--$j]; //#5148
    $1.barcode = $k[--$j]; //#5149
    $search($1.barcode, " "); //#5152
    if ($k[--$j]) { //#5158
        $1.barcode = $k[--$j]; //#5153
        $j--; //#5154
        $1.addon = $k[--$j]; //#5155
    } else { //#5158
        $j--; //#5157
        $1.addon = ""; //#5158
    } //#5158
    if ((($1.barcode.length != 15) && ($1.barcode.length != 17)) && (($1.barcode.length != 11) && ($1.barcode.length != 13))) { //#5165
        $k[$j++] = 'bwipp.isbnBadLength#5164'; //#5164
        $k[$j++] = "ISBN-13 must be 15 or 17 characters including dashes. ISBN-10 must be 11 or 13 characters including dashes"; //#5164
        bwipp_raiseerror(); //#5164
    } //#5164
    if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //#5168
        $k[$j++] = 'bwipp.isbnBadAddOnLength#5167'; //#5167
        $k[$j++] = "Add-on for ISBN must be 2 or 5 digits"; //#5167
        bwipp_raiseerror(); //#5167
    } //#5167
    if ($1.barcode.length >= 15) { //#5232
        var _F = $geti($1.barcode, 0, 4); //#5170
        if ($ne(_F, "978-") && $ne(_F, "979-")) { //#5172
            $k[$j++] = 'bwipp.isbn13badPrefix#5171'; //#5171
            $k[$j++] = "ISBN-13 prefix must be 978- or 979-"; //#5171
            bwipp_raiseerror(); //#5171
        } //#5171
        $1.wasdash = false; //#5173
        $1.numdash = 0; //#5173
        $1.numdigit = 0; //#5173
        var _H = $geti($1.barcode, 5, 9); //#5174
        for (var _I = 0, _J = _H.length; _I < _J; _I++) { //#5187
            var _K = $get(_H, _I); //#5187
            $k[$j++] = _K; //#5182
            if (_K == 45) { //#5182
                if ($1.wasdash) { //#5179
                    $k[$j++] = 'bwipp.isbn13adjacentDashes#5178'; //#5178
                    $k[$j++] = "ISBN-13 does not permit adjacent dashes"; //#5178
                    bwipp_raiseerror(); //#5178
                } //#5178
                $1.wasdash = true; //#5180
                $1.numdash = $1.numdash + 1; //#5181
            } //#5181
            var _N = $k[--$j]; //#5183
            if ((_N >= 48) && (_N <= 57)) { //#5186
                $1.wasdash = false; //#5184
                $1.numdigit = $1.numdigit + 1; //#5185
            } //#5185
        } //#5185
        if (($1.numdash != 2) || ($1.numdigit != 7)) { //#5190
            $k[$j++] = 'bwipp.isbn13numDashesDigits#5189'; //#5189
            $k[$j++] = "Incorrect number of dashes and digits for ISBN-13"; //#5189
            bwipp_raiseerror(); //#5189
        } //#5189
        var _S = $get($1.barcode, 14); //#5191
        if ((_S < 48) || (_S > 57)) { //#5193
            $k[$j++] = 'bwipp.isbn13character15#5192'; //#5192
            $k[$j++] = "ISBN-13 character 15 must be a digit"; //#5192
            bwipp_raiseerror(); //#5192
        } //#5192
        if ($1.barcode.length == 17) { //#5201
            if ($ne($geti($1.barcode, 15, 1), "-")) { //#5197
                $k[$j++] = 'bwipp.isbn13character16#5196'; //#5196
                $k[$j++] = "ISBN-13 penultimate character must be a dash"; //#5196
                bwipp_raiseerror(); //#5196
            } //#5196
            var _X = $get($1.barcode, 16); //#5198
            if ((_X < 48) || (_X > 57)) { //#5200
                $k[$j++] = 'bwipp.isbn13character17#5199'; //#5199
                $k[$j++] = "ISBN-13 final character must be a digit"; //#5199
                bwipp_raiseerror(); //#5199
            } //#5199
        } //#5199
    } else { //#5232
        var _Z = $get($1.barcode, 0); //#5203
        if ((_Z < 48) || (_Z > 57)) { //#5205
            $k[$j++] = 'bwipp.isbn10FirstDigit#5204'; //#5204
            $k[$j++] = "ISBN-10 first character must be a digit"; //#5204
            bwipp_raiseerror(); //#5204
        } //#5204
        $1.wasdash = false; //#5206
        $1.numdash = 0; //#5206
        $1.numdigit = 0; //#5206
        var _b = $geti($1.barcode, 1, 9); //#5207
        for (var _c = 0, _d = _b.length; _c < _d; _c++) { //#5220
            var _e = $get(_b, _c); //#5220
            $k[$j++] = _e; //#5215
            if (_e == 45) { //#5215
                if ($1.wasdash) { //#5212
                    $k[$j++] = 'bwipp.isbn10adjacentDashes#5211'; //#5211
                    $k[$j++] = "ISBN-10 does not permit adjacent dashes"; //#5211
                    bwipp_raiseerror(); //#5211
                } //#5211
                $1.wasdash = true; //#5213
                $1.numdash = $1.numdash + 1; //#5214
            } //#5214
            var _h = $k[--$j]; //#5216
            if ((_h >= 48) && (_h <= 57)) { //#5219
                $1.wasdash = false; //#5217
                $1.numdigit = $1.numdigit + 1; //#5218
            } //#5218
        } //#5218
        if (($1.numdash != 2) || ($1.numdigit != 7)) { //#5223
            $k[$j++] = 'bwipp.isbn10numDashesDigits#5222'; //#5222
            $k[$j++] = "Incorrect number of dashes and digits for ISBN-10"; //#5222
            bwipp_raiseerror(); //#5222
        } //#5222
        var _m = $get($1.barcode, 10); //#5224
        if ((_m < 48) || (_m > 57)) { //#5226
            $k[$j++] = 'bwipp.isbn10character11#5225'; //#5225
            $k[$j++] = "ISBN-10 character 11 must be a digit"; //#5225
            bwipp_raiseerror(); //#5225
        } //#5225
        if ($1.barcode.length == 13) { //#5234
            if ($ne($geti($1.barcode, 11, 1), "-")) { //#5230
                $k[$j++] = 'bwipp.isbn10character12#5229'; //#5229
                $k[$j++] = "ISBN-10 penultimate character must be a dash"; //#5229
                bwipp_raiseerror(); //#5229
            } //#5229
            var _r = $get($1.barcode, 12); //#5231
            if (((_r < 48) || (_r > 57)) && (_r != 88)) { //#5233
                $k[$j++] = 'bwipp.isbn10character13#5232'; //#5232
                $k[$j++] = "ISBN-10 final character must be a digit or X"; //#5232
                bwipp_raiseerror(); //#5232
            } //#5232
        } //#5232
    } //#5232
    $1.isbntxt = $1.barcode; //#5237
    if ($1.isbntxt.length <= 13) { //#5263
        $1.isbn = $s(10); //#5241
        $1.checksum = 0; //#5242
        $1.i = 0; //#5243
        $1.n = 0; //#5243
        for (;;) { //#5255
            $1.isbnchar = $f($get($1.isbntxt, $1.i) - 48); //#5245
            if ($1.isbnchar != -3) { //#5252
                $put($1.isbn, $1.n, $f($1.isbnchar + 48)); //#5247
                if ($1.n < 9) { //#5250
                    $1.checksum = $f($1.checksum + ((10 - $1.n) * $1.isbnchar)); //#5249
                } //#5249
                $1.n = $1.n + 1; //#5251
            } //#5251
            $1.i = $1.i + 1; //#5253
            if ($1.i == $1.isbntxt.length) { //#5254
                break; //#5254
            } //#5254
        } //#5254
        var _1B = ($f(11 - ($1.checksum % 11))) % 11; //#5256
        $k[$j++] = 'checksum'; //#5256
        $k[$j++] = _1B; //#5256
        if (_1B == 10) { //#5256
            $j--; //#5256
            $k[$j++] = 40; //#5256
        } //#5256
        var _1C = $k[--$j]; //#5256
        $1[$k[--$j]] = $f(_1C + 48); //#5256
        $1.isbn = $geti($1.isbn, 0, 9); //#5257
        if ($1.isbntxt.length == 13) { //#5262
            if ($get($1.isbntxt, 12) != $1.checksum) { //#5261
                $k[$j++] = 'bwipp.isbn10badCheckDigit#5260'; //#5260
                $k[$j++] = "Incorrect ISBN-10 check digit provided"; //#5260
                bwipp_raiseerror(); //#5260
            } //#5260
        } //#5260
    } //#5260
    if ((!$1.legacy) || ($1.isbntxt.length >= 15)) { //#5299
        if ($1.isbntxt.length <= 13) { //#5273
            $1.pad = $s(15); //#5269
            $puti($1.pad, 0, "978-"); //#5270
            $puti($1.pad, 4, $geti($1.isbntxt, 0, 11)); //#5271
            $1.isbntxt = $1.pad; //#5272
        } //#5272
        $1.isbn = $s(13); //#5276
        $1.checksum = 0; //#5277
        $1.i = 0; //#5278
        $1.n = 0; //#5278
        for (;;) { //#5290
            $1.isbnchar = $get($1.isbntxt, $1.i) - 48; //#5280
            if ($1.isbnchar != -3) { //#5287
                $put($1.isbn, $1.n, $1.isbnchar + 48); //#5282
                if ($1.n < 12) { //#5285
                    $k[$j++] = 'checksum'; //#5284
                    $k[$j++] = $1.isbnchar; //#5284
                    if (($1.n % 2) != 0) { //#5284
                        var _1e = $k[--$j]; //#5284
                        $k[$j++] = _1e * 3; //#5284
                    } //#5284
                    var _1g = $k[--$j]; //#5284
                    $1[$k[--$j]] = $f(_1g + $1.checksum); //#5284
                } //#5284
                $1.n = $1.n + 1; //#5286
            } //#5286
            $1.i = $1.i + 1; //#5288
            if ($1.i == $1.isbntxt.length) { //#5289
                break; //#5289
            } //#5289
        } //#5289
        $1.checksum = ((10 - ($1.checksum % 10)) % 10) + 48; //#5291
        $1.isbn = $geti($1.isbn, 0, 12); //#5292
        if ($1.isbntxt.length == 17) { //#5297
            if ($get($1.isbntxt, 16) != $1.checksum) { //#5296
                $k[$j++] = 'bwipp.isbn13badCheckDigit#5295'; //#5295
                $k[$j++] = "Incorrect ISBN-13 check digit provided"; //#5295
                bwipp_raiseerror(); //#5295
            } //#5295
        } //#5295
    } //#5295
    var _1u = ($1.isbn.length == 12) ? 22 : 18; //#5302
    $1.pad = $s(_1u); //#5302
    $puti($1.pad, 0, "ISBN "); //#5303
    $puti($1.pad, 5, $1.isbntxt); //#5304
    $put($1.pad, $1.pad.length - 2, 45); //#5305
    $put($1.pad, $1.pad.length - 1, $1.checksum); //#5306
    $1.isbntxt = $1.pad; //#5307
    $1.barcode = $s(12); //#5310
    if ($1.isbn.length == 9) { //#5315
        $puti($1.barcode, 0, "978"); //#5312
        $puti($1.barcode, 3, $1.isbn); //#5313
    } else { //#5315
        $puti($1.barcode, 0, $1.isbn); //#5315
    } //#5315
    if ($ne($1.addon, "")) { //#5325
        var _2E = $s((12 + $1.addon.length) + 1); //#5320
        $puti(_2E, 0, $1.barcode); //#5321
        $puti(_2E, 12, " "); //#5322
        $puti(_2E, 13, $1.addon); //#5323
        $1.barcode = _2E; //#5324
    } //#5324
    $put($1.options, "dontdraw", true); //#5328
    $put($1.options, "addongap", $1.addongap); //#5329
    $k[$j++] = 'args'; //#5330
    $k[$j++] = $1.barcode; //#5330
    $k[$j++] = $1.options; //#5330
    bwipp_ean13(); //#5330
    var _2M = $k[--$j]; //#5330
    $1[$k[--$j]] = _2M; //#5330
    if ($1.includetext) { //#5349
        if ($eq($1.isbntextxoffset, null)) { //#5336
            $k[$j++] = 'isbntextxoffset'; //#5335
            if ($1.isbn.length == 9) { //#5335
                $k[$j++] = -1; //#5335
            } else { //#5335
                $k[$j++] = -12; //#5335
            } //#5335
            var _2R = $k[--$j]; //#5335
            $1[$k[--$j]] = _2R; //#5335
        } //#5335
        if ($eq($1.isbntextyoffset, null)) { //#5339
            $1.isbntextyoffset = ($1.height * 72) + 3; //#5338
        } //#5338
        var _2W = $get($1.args, "txt") !== undefined; //#5340
        if (_2W) { //#5347
            $1.txt = $get($1.args, "txt"); //#5341
            $1.newtxt = $a($1.txt.length + 1); //#5342
            $puti($1.newtxt, 0, $1.txt); //#5343
            $put($1.newtxt, $1.newtxt.length - 1, $a([$1.isbntxt, $1.isbntextxoffset, $1.isbntextyoffset, $1.isbntextfont, $1.isbntextsize])); //#5344
            $put($1.args, "txt", $1.newtxt); //#5345
        } else { //#5347
            $put($1.args, "txt", $a([$a([$1.isbntxt, $1.isbntextxoffset, $1.isbntextyoffset, $1.isbntextfont, $1.isbntextsize])])); //#5347
        } //#5347
    } //#5347
    $put($1.args, "opt", $1.options); //#5351
    $k[$j++] = $1.args; //#5354
    if (!$1.dontdraw) { //#5354
        bwipp_renlinear(); //#5354
    } //#5354
}

function bwipp_ismn() {
    var $1 = Object.create(bwipp_ismn.$ctx || (bwipp_ismn.$ctx = {})); //#5385
    $1.dontdraw = false; //#5388
    $1.includetext = false; //#5389
    $1.ismntextfont = 'OCR-A'; //#5390
    $1.ismntextsize = 8; //#5391
    $1.ismntextxoffset = null; //#5392
    $1.ismntextyoffset = null; //#5393
    $1.height = 1; //#5394
    $1.addongap = 12; //#5395
    $1.legacy = false; //#5396
    $k[$j++] = $1; //#5398
    bwipp_processoptions(); //#5398
    $1.options = $k[--$j]; //#5398
    $1.barcode = $k[--$j]; //#5399
    $search($1.barcode, " "); //#5402
    if ($k[--$j]) { //#5408
        $1.barcode = $k[--$j]; //#5403
        $j--; //#5404
        $1.addon = $k[--$j]; //#5405
    } else { //#5408
        $j--; //#5407
        $1.addon = ""; //#5408
    } //#5408
    if ((($1.barcode.length != 15) && ($1.barcode.length != 17)) && (($1.barcode.length != 11) && ($1.barcode.length != 13))) { //#5415
        $k[$j++] = 'bwipp.ismnBadLength#5414'; //#5414
        $k[$j++] = "ISMN-13 must be 15 or 17 characters including dashes. ISMN-10 must be 11 or 13 characters including dashes"; //#5414
        bwipp_raiseerror(); //#5414
    } //#5414
    if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //#5418
        $k[$j++] = 'bwipp.ismnBadAddOnLength#5417'; //#5417
        $k[$j++] = "Add-on for ISMN must be 2 or 5 digits"; //#5417
        bwipp_raiseerror(); //#5417
    } //#5417
    if ($1.barcode.length >= 15) { //#5485
        if ($ne($geti($1.barcode, 0, 4), "979-")) { //#5422
            $k[$j++] = 'bwipp.ismn13badPrefix#5421'; //#5421
            $k[$j++] = "ISMN-13 prefix must be 979-"; //#5421
            bwipp_raiseerror(); //#5421
        } //#5421
        $1.wasdash = false; //#5423
        $1.numdash = 0; //#5423
        $1.numdigit = 0; //#5423
        var _H = $geti($1.barcode, 5, 9); //#5424
        for (var _I = 0, _J = _H.length; _I < _J; _I++) { //#5437
            var _K = $get(_H, _I); //#5437
            $k[$j++] = _K; //#5432
            if (_K == 45) { //#5432
                if ($1.wasdash) { //#5429
                    $k[$j++] = 'bwipp.ismn13adjacentDashes#5428'; //#5428
                    $k[$j++] = "ISMN-13 does not permit adjacent dashes"; //#5428
                    bwipp_raiseerror(); //#5428
                } //#5428
                $1.wasdash = true; //#5430
                $1.numdash = $1.numdash + 1; //#5431
            } //#5431
            var _N = $k[--$j]; //#5433
            if ((_N >= 48) && (_N <= 57)) { //#5436
                $1.wasdash = false; //#5434
                $1.numdigit = $1.numdigit + 1; //#5435
            } //#5435
        } //#5435
        if (($1.numdash != 2) || ($1.numdigit != 7)) { //#5440
            $k[$j++] = 'bwipp.ismn13numDashesDigits#5439'; //#5439
            $k[$j++] = "Incorrect number of dashes and digits for ISMN-13"; //#5439
            bwipp_raiseerror(); //#5439
        } //#5439
        var _S = $get($1.barcode, 14); //#5441
        if ((_S < 48) || (_S > 57)) { //#5443
            $k[$j++] = 'bwipp.ismn13character15#5442'; //#5442
            $k[$j++] = "ISMN-13 character 15 must be a digit"; //#5442
            bwipp_raiseerror(); //#5442
        } //#5442
        if ($1.barcode.length == 17) { //#5451
            if ($ne($geti($1.barcode, 15, 1), "-")) { //#5447
                $k[$j++] = 'bwipp.ismn13character16#5446'; //#5446
                $k[$j++] = "ISMN-13 penultimate character must be a dash"; //#5446
                bwipp_raiseerror(); //#5446
            } //#5446
            var _X = $get($1.barcode, 16); //#5448
            if ((_X < 48) || (_X > 57)) { //#5450
                $k[$j++] = 'bwipp.ismn13character17#5449'; //#5449
                $k[$j++] = "ISMN-13 final character must be a digit"; //#5449
                bwipp_raiseerror(); //#5449
            } //#5449
        } //#5449
    } else { //#5485
        if ($ne($geti($1.barcode, 0, 2), "M-")) { //#5455
            $k[$j++] = 'bwipp.ismn10badPrefix#5454'; //#5454
            $k[$j++] = "ISMN-10 prefix must be M-"; //#5454
            bwipp_raiseerror(); //#5454
        } //#5454
        var _b = $get($1.barcode, 2); //#5456
        if ((_b < 48) || (_b > 57)) { //#5458
            $k[$j++] = 'bwipp.ismn10character3#5457'; //#5457
            $k[$j++] = "ISMN-10 character 3 must be a digit"; //#5457
            bwipp_raiseerror(); //#5457
        } //#5457
        $1.wasdash = false; //#5459
        $1.numdash = 0; //#5459
        $1.numdigit = 0; //#5459
        var _d = $geti($1.barcode, 3, 7); //#5460
        for (var _e = 0, _f = _d.length; _e < _f; _e++) { //#5473
            var _g = $get(_d, _e); //#5473
            $k[$j++] = _g; //#5468
            if (_g == 45) { //#5468
                if ($1.wasdash) { //#5465
                    $k[$j++] = 'bwipp.ismn10adjacentDashes#5464'; //#5464
                    $k[$j++] = "ISMN-10 does not permit adjacent dashes"; //#5464
                    bwipp_raiseerror(); //#5464
                } //#5464
                $1.wasdash = true; //#5466
                $1.numdash = $1.numdash + 1; //#5467
            } //#5467
            var _j = $k[--$j]; //#5469
            if ((_j >= 48) && (_j <= 57)) { //#5472
                $1.wasdash = false; //#5470
                $1.numdigit = $1.numdigit + 1; //#5471
            } //#5471
        } //#5471
        if (($1.numdash != 1) || ($1.numdigit != 6)) { //#5476
            $k[$j++] = 'bwipp.ismn10numDashesDigits#5475'; //#5475
            $k[$j++] = "Incorrect number of dashes and digits for ISMN-10"; //#5475
            bwipp_raiseerror(); //#5475
        } //#5475
        var _o = $get($1.barcode, 10); //#5477
        if ((_o < 48) || (_o > 57)) { //#5479
            $k[$j++] = 'bwipp.ismn10character11#5478'; //#5478
            $k[$j++] = "ISMN-10 character 11 must be a digit"; //#5478
            bwipp_raiseerror(); //#5478
        } //#5478
        if ($1.barcode.length == 13) { //#5487
            var _r = $geti($1.barcode, 11, 1); //#5481
            if ($ne(_r, "-")) { //#5483
                $k[$j++] = 'bwipp.ismn10character12#5482'; //#5482
                $k[$j++] = "ISMN-10 penultimate character must be a dash"; //#5482
                bwipp_raiseerror(); //#5482
            } //#5482
            var _t = $get($1.barcode, 12); //#5484
            if (((_t < 48) || (_t > 57)) && (_t != 88)) { //#5486
                $k[$j++] = 'bwipp.ismn10character13#5485'; //#5485
                $k[$j++] = "ISMN-10 final character must be a digit or X"; //#5485
                bwipp_raiseerror(); //#5485
            } //#5485
        } //#5485
    } //#5485
    $1.ismntxt = $1.barcode; //#5490
    $1.legacytxt = ""; //#5493
    if ($1.ismntxt.length <= 13) { //#5500
        $1.legacytxt = $1.ismntxt; //#5495
        $1.pad = $s($1.ismntxt.length + 4); //#5496
        $puti($1.pad, 0, "979-0-"); //#5497
        $puti($1.pad, 6, $geti($1.ismntxt, 2, $1.ismntxt.length - 2)); //#5498
        $1.ismntxt = $1.pad; //#5499
    } //#5499
    $1.ismn = $s(13); //#5503
    $1.checksum = 0; //#5504
    $1.i = 0; //#5505
    $1.n = 0; //#5505
    for (;;) { //#5521
        $1.ismnchar = $get($1.ismntxt, $1.i) - 48; //#5507
        if ($1.ismnchar != -3) { //#5518
            $put($1.ismn, $1.n, $1.ismnchar + 48); //#5509
            if ($1.n < 12) { //#5516
                if (($1.n % 2) == 0) { //#5514
                    $1.checksum = $1.ismnchar + $1.checksum; //#5512
                } else { //#5514
                    $1.checksum = ($1.ismnchar * 3) + $1.checksum; //#5514
                } //#5514
            } //#5514
            $1.n = $1.n + 1; //#5517
        } //#5517
        $1.i = $1.i + 1; //#5519
        if ($1.i == $1.ismntxt.length) { //#5520
            break; //#5520
        } //#5520
    } //#5520
    $1.checksum = ((10 - ($1.checksum % 10)) % 10) + 48; //#5522
    if (($1.barcode.length == 13) || ($1.barcode.length == 17)) { //#5529
        var _1Q = $1.barcode; //#5526
        if ($get(_1Q, _1Q.length - 1) != $1.checksum) { //#5528
            $k[$j++] = 'bwipp.ismnBadCheckDigit#5527'; //#5527
            $k[$j++] = "Incorrect ISMN check digit provided"; //#5527
            bwipp_raiseerror(); //#5527
        } //#5527
    } //#5527
    if ($1.legacy && $ne($1.legacytxt, "")) { //#5536
        $1.ismntxt = $1.legacytxt; //#5533
        $1.pad = $s(18); //#5534
    } else { //#5536
        $1.pad = $s(22); //#5536
    } //#5536
    $puti($1.pad, 0, "ISMN "); //#5538
    $puti($1.pad, 5, $1.ismntxt); //#5539
    $put($1.pad, $1.pad.length - 2, 45); //#5540
    $put($1.pad, $1.pad.length - 1, $1.checksum); //#5541
    $1.ismntxt = $1.pad; //#5542
    $1.barcode = $geti($1.ismn, 0, 12); //#5545
    if ($ne($1.addon, "")) { //#5554
        var _1l = $s((12 + $1.addon.length) + 1); //#5549
        $puti(_1l, 0, $1.barcode); //#5550
        $puti(_1l, 12, " "); //#5551
        $puti(_1l, 13, $1.addon); //#5552
        $1.barcode = _1l; //#5553
    } //#5553
    $put($1.options, "dontdraw", true); //#5557
    $put($1.options, "addongap", $1.addongap); //#5558
    $k[$j++] = 'args'; //#5559
    $k[$j++] = $1.barcode; //#5559
    $k[$j++] = $1.options; //#5559
    bwipp_ean13(); //#5559
    var _1t = $k[--$j]; //#5559
    $1[$k[--$j]] = _1t; //#5559
    if ($1.includetext) { //#5578
        if ($eq($1.ismntextxoffset, null)) { //#5565
            $k[$j++] = 'ismntextxoffset'; //#5564
            if ($1.ismntxt.length == 18) { //#5564
                $k[$j++] = -1; //#5564
            } else { //#5564
                $k[$j++] = -12; //#5564
            } //#5564
            var _1y = $k[--$j]; //#5564
            $1[$k[--$j]] = _1y; //#5564
        } //#5564
        if ($eq($1.ismntextyoffset, null)) { //#5568
            $1.ismntextyoffset = ($1.height * 72) + 3; //#5567
        } //#5567
        var _23 = $get($1.args, "txt") !== undefined; //#5569
        if (_23) { //#5576
            $1.txt = $get($1.args, "txt"); //#5570
            $1.newtxt = $a($1.txt.length + 1); //#5571
            $puti($1.newtxt, 0, $1.txt); //#5572
            $put($1.newtxt, $1.newtxt.length - 1, $a([$1.ismntxt, $1.ismntextxoffset, $1.ismntextyoffset, $1.ismntextfont, $1.ismntextsize])); //#5573
            $put($1.args, "txt", $1.newtxt); //#5574
        } else { //#5576
            $put($1.args, "txt", $a([$a([$1.ismntxt, $1.ismntextxoffset, $1.ismntextyoffset, $1.ismntextfont, $1.ismntextsize])])); //#5576
        } //#5576
    } //#5576
    $put($1.args, "opt", $1.options); //#5580
    $k[$j++] = $1.args; //#5583
    if (!$1.dontdraw) { //#5583
        bwipp_renlinear(); //#5583
    } //#5583
}

function bwipp_issn() {
    var $1 = Object.create(bwipp_issn.$ctx || (bwipp_issn.$ctx = {})); //#5614
    $1.dontdraw = false; //#5617
    $1.includetext = false; //#5618
    $1.issntextfont = 'OCR-A'; //#5619
    $1.issntextsize = 8; //#5620
    $1.issntextxoffset = null; //#5621
    $1.issntextyoffset = null; //#5622
    $1.height = 1; //#5623
    $1.addongap = 12; //#5624
    $k[$j++] = $1; //#5626
    bwipp_processoptions(); //#5626
    $1.options = $k[--$j]; //#5626
    $1.issntxt = $k[--$j]; //#5627
    $search($1.issntxt, " "); //#5630
    if ($k[--$j]) { //#5636
        $1.issntxt = $k[--$j]; //#5631
        $j--; //#5632
        $1.seqvar = $k[--$j]; //#5633
    } else { //#5636
        $j--; //#5635
        $1.seqvar = "00"; //#5636
    } //#5636
    $search($1.seqvar, " "); //#5640
    if ($k[--$j]) { //#5646
        $1.seqvar = $k[--$j]; //#5641
        $j--; //#5642
        $1.addon = $k[--$j]; //#5643
    } else { //#5646
        $j--; //#5645
        $1.addon = ""; //#5646
    } //#5646
    if (($1.issntxt.length != 8) && ($1.issntxt.length != 9)) { //#5652
        $k[$j++] = 'bwipp.issnBadLength#5651'; //#5651
        $k[$j++] = "ISSN must be 8 or 9 characters including dash, in the format XXXX-XXXX"; //#5651
        bwipp_raiseerror(); //#5651
    } //#5651
    var _D = $geti($1.issntxt, 0, 4); //#5653
    for (var _E = 0, _F = _D.length; _E < _F; _E++) { //#5657
        var _G = $get(_D, _E); //#5657
        if ((_G < 48) || (_G > 57)) { //#5656
            $k[$j++] = 'bwipp.issnFirstThroughFourthNotNumeric#5655'; //#5655
            $k[$j++] = "ISSN first four characters must be numeral characters"; //#5655
            bwipp_raiseerror(); //#5655
        } //#5655
    } //#5655
    if ($ne($geti($1.issntxt, 4, 1), "-")) { //#5660
        $k[$j++] = 'bwipp.issnNeedsDash#5659'; //#5659
        $k[$j++] = "ISSN fifth character must be a dash"; //#5659
        bwipp_raiseerror(); //#5659
    } //#5659
    var _K = $geti($1.issntxt, 5, 3); //#5661
    for (var _L = 0, _M = _K.length; _L < _M; _L++) { //#5665
        var _N = $get(_K, _L); //#5665
        if ((_N < 48) || (_N > 57)) { //#5664
            $k[$j++] = 'bwipp.issnSixthThroughEighthNotNumeric#5663'; //#5663
            $k[$j++] = "ISSN sixth through eighth characters must be numerals"; //#5663
            bwipp_raiseerror(); //#5663
        } //#5663
    } //#5663
    if ($1.issntxt.length == 9) { //#5670
        var _Q = $get($1.issntxt, 8); //#5667
        if (((_Q < 48) || (_Q > 57)) && (_Q != 88)) { //#5669
            $k[$j++] = 'bwipp.issnNinthCharacterBadFormat#5668'; //#5668
            $k[$j++] = "ISSN ninth character must be a number or the character X"; //#5668
            bwipp_raiseerror(); //#5668
        } //#5668
    } //#5668
    if ($1.seqvar.length != 2) { //#5673
        $k[$j++] = 'bwipp.issnBadSequenceVariantLength#5672'; //#5672
        $k[$j++] = "Sequence variant for ISSN must be 2 digits"; //#5672
        bwipp_raiseerror(); //#5672
    } //#5672
    $forall($1.seqvar, function() { //#5678
        var _T = $k[--$j]; //#5675
        if ((_T < 48) || (_T > 57)) { //#5677
            $k[$j++] = 'bwipp.issnSequenceVariantBadCharacter#5676'; //#5676
            $k[$j++] = "Sequence variant for ISSN must contain only digits"; //#5676
            bwipp_raiseerror(); //#5676
        } //#5676
    }); //#5676
    if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //#5681
        $k[$j++] = 'bwipp.issnBadAddOnLength#5680'; //#5680
        $k[$j++] = "Add-on for ISSN must be 2 or 5 digits"; //#5680
        bwipp_raiseerror(); //#5680
    } //#5680
    $1.issn = $s(8); //#5684
    $1.checksum = 0; //#5685
    $1.i = 0; //#5686
    $1.n = 0; //#5686
    for (;;) { //#5698
        $1.issnchar = $f($get($1.issntxt, $1.i) - 48); //#5688
        if ($1.issnchar != -3) { //#5695
            $put($1.issn, $1.n, $f($1.issnchar + 48)); //#5690
            if ($1.n < 7) { //#5693
                $1.checksum = $f($1.checksum + ($1.issnchar * (8 - $1.n))); //#5692
            } //#5692
            $1.n = $1.n + 1; //#5694
        } //#5694
        $1.i = $1.i + 1; //#5696
        if ($1.i == $1.issntxt.length) { //#5697
            break; //#5697
        } //#5697
    } //#5697
    $1.checksum = ($f(11 - ($1.checksum % 11))) % 11; //#5699
    var _p = $f($1.checksum + 48); //#5700
    $k[$j++] = 'checksum'; //#5700
    $k[$j++] = _p; //#5700
    if (_p == 58) { //#5700
        $j--; //#5700
        $k[$j++] = 88; //#5700
    } //#5700
    var _q = $k[--$j]; //#5700
    var _r = $k[--$j]; //#5700
    $1[_r] = _q; //#5700
    if ($1.issntxt.length == 9) { //#5705
        if ($get($1.issntxt, 8) != $1.checksum) { //#5704
            $k[$j++] = 'bwipp.issnBadCheckDigit#5703'; //#5703
            $k[$j++] = "Incorrect ISSN check digit provided"; //#5703
            bwipp_raiseerror(); //#5703
        } //#5703
    } //#5703
    $1.pad = $s(14); //#5708
    $puti($1.pad, 0, "ISSN "); //#5709
    $puti($1.pad, 5, $1.issntxt); //#5710
    $put($1.pad, 13, $1.checksum); //#5711
    $1.issntxt = $1.pad; //#5712
    $1.barcode = $geti($1.issn, 0, 7); //#5715
    $1.barcode = $s(12); //#5718
    $puti($1.barcode, 0, "977"); //#5719
    $puti($1.barcode, 3, $1.issn); //#5720
    $puti($1.barcode, 10, $1.seqvar); //#5721
    if ($ne($1.addon, "")) { //#5730
        var _1D = $s((12 + $1.addon.length) + 1); //#5725
        $puti(_1D, 0, $1.barcode); //#5726
        $puti(_1D, 12, " "); //#5727
        $puti(_1D, 13, $1.addon); //#5728
        $1.barcode = _1D; //#5729
    } //#5729
    $put($1.options, "dontdraw", true); //#5733
    $put($1.options, "addongap", $1.addongap); //#5734
    $k[$j++] = 'args'; //#5735
    $k[$j++] = $1.barcode; //#5735
    $k[$j++] = $1.options; //#5735
    bwipp_ean13(); //#5735
    var _1L = $k[--$j]; //#5735
    $1[$k[--$j]] = _1L; //#5735
    if ($1.includetext) { //#5750
        if ($eq($1.issntextxoffset, null)) { //#5739
            $1.issntextxoffset = 10; //#5739
        } //#5739
        if ($eq($1.issntextyoffset, null)) { //#5740
            $1.issntextyoffset = ($1.height * 72) + 3; //#5740
        } //#5740
        var _1S = $get($1.args, "txt") !== undefined; //#5741
        if (_1S) { //#5748
            $1.txt = $get($1.args, "txt"); //#5742
            $1.newtxt = $a($1.txt.length + 1); //#5743
            $puti($1.newtxt, 0, $1.txt); //#5744
            $put($1.newtxt, $1.newtxt.length - 1, $a([$1.issntxt, $1.issntextxoffset, $1.issntextyoffset, $1.issntextfont, $1.issntextsize])); //#5745
            $put($1.args, "txt", $1.newtxt); //#5746
        } else { //#5748
            $put($1.args, "txt", $a([$a([$1.issntxt, $1.issntextxoffset, $1.issntextyoffset, $1.issntextfont, $1.issntextsize])])); //#5748
        } //#5748
    } //#5748
    $put($1.args, "opt", $1.options); //#5752
    $k[$j++] = $1.args; //#5755
    if (!$1.dontdraw) { //#5755
        bwipp_renlinear(); //#5755
    } //#5755
}

function bwipp_mands() {
    var $1 = Object.create(bwipp_mands.$ctx || (bwipp_mands.$ctx = {})); //#5786
    $1.dontdraw = false; //#5789
    $1.includetext = false; //#5790
    $k[$j++] = $1; //#5792
    bwipp_processoptions(); //#5792
    $1.options = $k[--$j]; //#5792
    $1.barcode = $k[--$j]; //#5793
    $1.barlen = $1.barcode.length; //#5795
    if (($1.barlen != 7) && ($1.barlen != 8)) { //#5800
        $k[$j++] = 'bwipp.MandSbadLength#5799'; //#5799
        $k[$j++] = "M&S barcode must be 7 or 8 characters"; //#5799
        bwipp_raiseerror(); //#5799
    } //#5799
    if ($1.barlen == 7) { //#5804
        var _7 = $strcpy($s(8), "00000000"); //#5803
        $puti(_7, 1, $1.barcode); //#5803
        $1.barcode = _7; //#5803
    } //#5803
    $put($1.options, "dontdraw", true); //#5807
    $k[$j++] = 'args'; //#5808
    $k[$j++] = $1.barcode; //#5808
    $k[$j++] = $1.options; //#5808
    bwipp_ean8(); //#5808
    var _C = $k[--$j]; //#5808
    $1[$k[--$j]] = _C; //#5808
    var _F = $get($1.args, "bbs"); //#5811
    $put(_F, 10, $get(_F, 2)); //#5812
    $put(_F, 11, $get(_F, 2)); //#5813
    var _J = $get($1.args, "bhs"); //#5814
    $put(_J, 10, $get(_J, 2)); //#5815
    $put(_J, 11, $get(_J, 2)); //#5816
    $1.txt = $get($1.args, "txt"); //#5819
    if ($1.barlen == 7) { //#5827
        for (var _P = 0; _P <= 6; _P += 1) { //#5825
            var _Q = $1.txt; //#5822
            $puti($get($get(_Q, _P), 0), 0, $get($get(_Q, _P + 1), 0)); //#5824
        } //#5824
        $puti($get($get($1.txt, 7), 0), 0, " "); //#5826
    } //#5826
    var _Y = $a(10); //#5830
    $puti(_Y, 0, $1.txt); //#5830
    $1.txt = _Y; //#5830
    var _b = $get($1.txt, 0); //#5831
    $put($1.txt, 8, $arrcpy($a(_b.length), _b)); //#5831
    var _g = $get($1.txt, 0); //#5832
    $put($1.txt, 9, $arrcpy($a(_g.length), _g)); //#5832
    $put($get($1.txt, 8), 0, "M"); //#5833
    $put($get($1.txt, 8), 1, -12); //#5833
    $put($get($1.txt, 9), 0, "S"); //#5834
    var _r = $get($1.txt, 9); //#5834
    $put(_r, 1, 69); //#5834
    $put($1.args, "txt", $1.txt); //#5836
    $put($1.args, "opt", $1.options); //#5837
    $k[$j++] = $1.args; //#5840
    if (!$1.dontdraw) { //#5840
        bwipp_renlinear(); //#5840
    } //#5840
}

function bwipp_code128() {
    var $1 = Object.create(bwipp_code128.$ctx || (bwipp_code128.$ctx = {})); //#5873
    $1.dontdraw = false; //#5876
    $1.includetext = false; //#5877
    $1.textfont = "OCR-B"; //#5878
    $1.textsize = 10; //#5879
    $1.textxoffset = 0; //#5880
    $1.textyoffset = -8; //#5881
    $1.height = 1; //#5882
    $1.encoding = "auto"; //#5883
    $1.raw = false; //#5884
    $1.parse = false; //#5885
    $1.parsefnc = false; //#5886
    $k[$j++] = $1; //#5888
    bwipp_processoptions(); //#5888
    $1.options = $k[--$j]; //#5888
    $1.barcode = $k[--$j]; //#5889
    if (!bwipp_code128.$ctx._5900) { //#5900
        (function() { //#5900
            var $ctx = Object.create($1); //#5900
            $ctx.sta = -1; //#5895
            $ctx.stb = -2; //#5895
            $ctx.stc = -3; //#5895
            $ctx.swa = -4; //#5896
            $ctx.swb = -5; //#5896
            $ctx.swc = -6; //#5896
            $ctx.fn1 = -7; //#5897
            $ctx.fn2 = -8; //#5897
            $ctx.fn3 = -9; //#5897
            $ctx.fn4 = -10; //#5898
            $ctx.sft = -11; //#5898
            $ctx.stp = -12; //#5898
            $ctx.lka = -13; //#5899
            $ctx.lkc = -14; //#5899
            for (var _2 in $ctx) {
                $ctx.hasOwnProperty(_2) && (bwipp_code128.$ctx[_2] = $ctx[_2]);
            } //#5899
            bwipp_code128.$ctx._5900 = 1; //#5899
        })(); //#5899
    } //#5899
    var _5 = $1.fn1; //#5906
    var _B = new Map([
        ["parse", $1.parse],
        ["parsefnc", $1.parsefnc],
        ["FNC1", _5],
        ["FNC1", $1.fn1],
        ["FNC2", $1.fn2],
        ["FNC3", $1.fn3],
        ["LNKA", $1.lka],
        ["LNKC", $1.lkc]
    ]); //#5912
    $1.fncvals = _B; //#5913
    $k[$j++] = 'msg'; //#5914
    $k[$j++] = $1.barcode; //#5914
    $k[$j++] = $1.fncvals; //#5914
    bwipp_parseinput(); //#5914
    var _E = $k[--$j]; //#5914
    $1[$k[--$j]] = _E; //#5914
    $1.msglen = $1.msg.length; //#5915
    if (!bwipp_code128.$ctx._5973) { //#5973
        (function() { //#5973
            var $ctx = Object.create($1); //#5973
            $ctx.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$ctx.fn3, $ctx.fn3, "96"]), $a([$ctx.fn2, $ctx.fn2, "97"]), $a([$ctx.sft, $ctx.sft, "98"]), $a([$ctx.swc, $ctx.swc, "99"]), $a([$ctx.swb, $ctx.fn4, $ctx.swb]), $a([$ctx.fn4, $ctx.swa, $ctx.swa]), $a([$ctx.fn1, $ctx.fn1, $ctx.fn1]), $a([$ctx.sta, $ctx.sta, $ctx.sta]), $a([$ctx.stb, $ctx.stb, $ctx.stb]), $a([$ctx.stc, $ctx.stc, $ctx.stc]), $a([$ctx.stp, $ctx.stp, $ctx.stp])]); //#5957
            $ctx.charvals = $a([new Map, new Map, new Map]); //#5960
            for (var _2X = 0, _2W = $ctx.charmaps.length - 1; _2X <= _2W; _2X += 1) { //#5969
                $ctx.i = _2X; //#5962
                $ctx.encs = $get($ctx.charmaps, $ctx.i); //#5963
                for (var _2b = 0; _2b <= 2; _2b += 1) { //#5968
                    $ctx.j = _2b; //#5965
                    var _2e = $get($ctx.encs, $ctx.j); //#5966
                    $k[$j++] = _2e; //#5966
                    if ($eq($type(_2e), 'stringtype')) { //#5966
                        var _2h = $get($k[--$j], 0); //#5966
                        $k[$j++] = _2h; //#5966
                    } //#5966
                    $put($get($ctx.charvals, $ctx.j), $k[--$j], $ctx.i); //#5967
                } //#5967
            } //#5967
            $ctx.seta = $get($ctx.charvals, 0); //#5970
            $ctx.setb = $get($ctx.charvals, 1); //#5971
            $ctx.setc = $get($ctx.charvals, 2); //#5972
            for (var _2t in $ctx) {
                $ctx.hasOwnProperty(_2t) && (bwipp_code128.$ctx[_2t] = $ctx[_2t]);
            } //#5972
            bwipp_code128.$ctx._5973 = 1; //#5972
        })(); //#5972
    } //#5972
    $put($1.seta, $1.lka, $get($1.seta, $1.swb)); //#5976
    $put($1.seta, $1.lkc, $get($1.seta, $1.swc)); //#5976
    $put($1.setb, $1.lka, $get($1.setb, $1.swc)); //#5977
    $put($1.setb, $1.lkc, $get($1.setb, $1.swa)); //#5977
    $put($1.setc, $1.lka, $get($1.setc, $1.swa)); //#5978
    $put($1.setc, $1.lkc, $get($1.setc, $1.swb)); //#5978
    if ($1.raw) { //#5980
        $1.encoding = "raw"; //#5980
    } //#5980
    if ($eq($1.encoding, "raw")) { //#5994
        $1.cws = $a($1.barcode.length); //#5983
        $1.i = 0; //#5984
        $1.j = 0; //#5984
        for (;;) { //#5991
            if ($1.i == $1.barcode.length) { //#5986
                break; //#5986
            } //#5986
            $1.cw = $cvi($geti($1.barcode, $1.i + 1, 3)); //#5987
            $put($1.cws, $1.j, $1.cw); //#5988
            $1.i = $1.i + 4; //#5989
            $1.j = $1.j + 1; //#5990
        } //#5990
        $1.cws = $geti($1.cws, 0, $1.j); //#5992
        $1.text = ""; //#5993
    } //#5993
    if ($eq($1.encoding, "auto")) { //#6219
        $1.text = $s($1.msglen); //#5998
        for (var _3k = 0, _3j = $1.msglen - 1; _3k <= _3j; _3k += 1) { //#6002
            $1.i = _3k; //#6000
            var _3p = $get($1.msg, $1.i); //#6001
            $k[$j++] = $1.text; //#6001
            $k[$j++] = $1.i; //#6001
            $k[$j++] = _3p; //#6001
            if (_3p < 0) { //#6001
                $j--; //#6001
                $k[$j++] = 32; //#6001
            } //#6001
            var _3q = $k[--$j]; //#6001
            var _3r = $k[--$j]; //#6001
            $put($k[--$j], _3r, _3q); //#6001
        } //#6001
        $k[$j++] = Infinity; //#6005
        for (var _3u = 0, _3v = $1.msglen; _3u < _3v; _3u++) { //#6005
            $k[$j++] = 0; //#6005
        } //#6005
        $k[$j++] = 0; //#6005
        $1.numSA = $a(); //#6005
        $k[$j++] = Infinity; //#6006
        for (var _3y = 0, _3z = $1.msglen; _3y < _3z; _3y++) { //#6006
            $k[$j++] = 0; //#6006
        } //#6006
        $k[$j++] = 0; //#6006
        $1.numEA = $a(); //#6006
        for (var _42 = $1.msglen - 1; _42 >= 0; _42 -= 1) { //#6016
            $1.i = _42; //#6008
            if ($get($1.msg, $1.i) >= 0) { //#6015
                if ($get($1.msg, $1.i) >= 128) { //#6013
                    $put($1.numEA, $1.i, $f($get($1.numEA, $1.i + 1) + 1)); //#6011
                } else { //#6013
                    $put($1.numSA, $1.i, $f($get($1.numSA, $1.i + 1) + 1)); //#6013
                } //#6013
            } //#6013
        } //#6013
        $1.ea = false; //#6019
        $1.msgtmp = $a([]); //#6019
        for (var _4M = 0, _4L = $1.msglen - 1; _4M <= _4L; _4M += 1) { //#6034
            $1.i = _4M; //#6021
            $1.c = $get($1.msg, $1.i); //#6022
            if ((!$xo($1.ea, $1.c < 128)) && ($1.c >= 0)) { //#6032
                if ($1.ea) { //#6024
                    $k[$j++] = $1.numSA; //#6024
                } else { //#6024
                    $k[$j++] = $1.numEA; //#6024
                } //#6024
                var _4Y = $get($k[--$j], $1.i); //#6024
                var _4b = ($f(_4Y + $1.i) == $1.msglen) ? 3 : 5; //#6025
                if (_4Y < _4b) { //#6030
                    $k[$j++] = Infinity; //#6027
                    $aload($1.msgtmp); //#6027
                    $k[$j++] = $1.fn4; //#6027
                    $1.msgtmp = $a(); //#6027
                } else { //#6030
                    $k[$j++] = Infinity; //#6029
                    $aload($1.msgtmp); //#6029
                    $k[$j++] = $1.fn4; //#6029
                    $k[$j++] = $1.fn4; //#6029
                    $1.msgtmp = $a(); //#6029
                    $1.ea = !$1.ea; //#6030
                } //#6030
            } //#6030
            $k[$j++] = Infinity; //#6033
            $aload($1.msgtmp); //#6033
            if ($1.c >= 0) { //#6033
                $k[$j++] = $1.c & 127; //#6033
            } else { //#6033
                $k[$j++] = $1.c; //#6033
            } //#6033
            $1.msgtmp = $a(); //#6033
        } //#6033
        $1.msg = $1.msgtmp; //#6035
        $1.msglen = $1.msg.length; //#6036
        $1.numsscr = function() {
            $1.n = 0; //#6040
            $1.s = 0; //#6040
            $1.p = $k[--$j]; //#6041
            for (;;) { //#6054
                if ($1.p >= $1.msglen) { //#6042
                    break; //#6042
                } //#6042
                var _4w = $get($1.msg, $1.p); //#6043
                var _4y = $get($1.setc, _4w) !== undefined; //#6044
                $k[$j++] = _4w; //#6044
                if (!_4y) { //#6044
                    $j--; //#6044
                    break; //#6044
                } //#6044
                var _4z = $k[--$j]; //#6045
                $k[$j++] = _4z; //#6050
                if (_4z <= -1) { //#6049
                    var _51 = $k[--$j]; //#6047
                    if ((_51 == $1.fn1) && (($1.s % 2) == 0)) { //#6047
                        $1.s = $1.s + 1; //#6047
                    } else { //#6047
                        break; //#6047
                    } //#6047
                } else { //#6049
                    $j--; //#6049
                } //#6049
                $1.n = $1.n + 1; //#6051
                $1.s = $1.s + 1; //#6052
                $1.p = $f($1.p + 1); //#6053
            } //#6053
            $k[$j++] = $1.n; //#6055
            $k[$j++] = $1.s; //#6055
        }; //#6055
        $1.enca = function() {
            $put($1.cws, $1.j, $get($1.seta, $k[--$j])); //#6060
            $1.j = $1.j + 1; //#6061
        }; //#6061
        $1.encb = function() {
            $put($1.cws, $1.j, $get($1.setb, $k[--$j])); //#6064
            $1.j = $1.j + 1; //#6065
        }; //#6065
        $1.encc = function() {
            var _5L = $k[--$j]; //#6068
            $k[$j++] = _5L; //#6072
            if ($ne($type(_5L), 'arraytype')) { //#6071
                var _5P = $get($1.setc, $k[--$j]); //#6069
                $k[$j++] = _5P; //#6069
            } else { //#6071
                $aload($k[--$j]); //#6071
                var _5R = $k[--$j]; //#6071
                var _5S = $k[--$j]; //#6071
                $k[$j++] = $f($f(_5R - 48) + ($f(_5S - 48) * 10)); //#6071
            } //#6071
            $put($1.cws, $1.j, $k[--$j]); //#6073
            $1.j = $1.j + 1; //#6074
        }; //#6074
        $1.anotb = function() {
            var _5X = $k[--$j]; //#6078
            var _5Z = $get($1.seta, _5X) !== undefined; //#6078
            var _5b = $get($1.setb, _5X) !== undefined; //#6078
            $k[$j++] = _5Z && (!_5b); //#6078
        }; //#6078
        $1.bnota = function() {
            var _5c = $k[--$j]; //#6079
            var _5e = $get($1.setb, _5c) !== undefined; //#6079
            var _5g = $get($1.seta, _5c) !== undefined; //#6079
            $k[$j++] = _5e && (!_5g); //#6079
        }; //#6079
        $k[$j++] = Infinity; //#6082
        for (var _5i = 0, _5j = $1.msg.length; _5i < _5j; _5i++) { //#6082
            $k[$j++] = 0; //#6082
        } //#6082
        $k[$j++] = 9999; //#6082
        $1.nextanotb = $a(); //#6082
        $k[$j++] = Infinity; //#6083
        for (var _5m = 0, _5n = $1.msg.length; _5m < _5n; _5m++) { //#6083
            $k[$j++] = 0; //#6083
        } //#6083
        $k[$j++] = 9999; //#6083
        $1.nextbnota = $a(); //#6083
        for (var _5q = $1.msg.length - 1; _5q >= 0; _5q -= 1) { //#6096
            $1.i = _5q; //#6085
            $k[$j++] = $get($1.msg, $1.i); //#6086
            $1.anotb(); //#6086
            if ($k[--$j]) { //#6089
                $put($1.nextanotb, $1.i, 0); //#6087
            } else { //#6089
                $put($1.nextanotb, $1.i, $f($get($1.nextanotb, $1.i + 1) + 1)); //#6089
            } //#6089
            $k[$j++] = $get($1.msg, $1.i); //#6091
            $1.bnota(); //#6091
            if ($k[--$j]) { //#6094
                $put($1.nextbnota, $1.i, 0); //#6092
            } else { //#6094
                $put($1.nextbnota, $1.i, $f($get($1.nextbnota, $1.i + 1) + 1)); //#6094
            } //#6094
        } //#6094
        $1.abeforeb = function() {
            var _6D = $k[--$j]; //#6099
            $k[$j++] = $lt($get($1.nextanotb, _6D), $get($1.nextbnota, _6D)); //#6099
        }; //#6099
        $1.bbeforea = function() {
            var _6I = $k[--$j]; //#6100
            $k[$j++] = $lt($get($1.nextbnota, _6I), $get($1.nextanotb, _6I)); //#6100
        }; //#6100
        $1.cws = $a(($1.barcode.length * 2) + 3); //#6102
        $1.j = 0; //#6105
        if ($1.msglen > 0) { //#6106
            $k[$j++] = 0; //#6106
            $1.numsscr(); //#6106
        } else { //#6106
            $k[$j++] = -1; //#6106
            $k[$j++] = -1; //#6106
        } //#6106
        $1.nums = $k[--$j]; //#6106
        $1.nchars = $k[--$j]; //#6106
        for (;;) { //#6131
            if ($1.msglen == 0) { //#6112
                $k[$j++] = $1.stb; //#6109
                $1.enca(); //#6109
                $1.cset = "setb"; //#6110
                break; //#6111
            } //#6111
            if (($1.msglen == 2) && ($1.nums == 2)) { //#6117
                $k[$j++] = $1.stc; //#6114
                $1.enca(); //#6114
                $1.cset = "setc"; //#6115
                break; //#6116
            } //#6116
            if ($1.nums >= 4) { //#6122
                $k[$j++] = $1.stc; //#6119
                $1.enca(); //#6119
                $1.cset = "setc"; //#6120
                break; //#6121
            } //#6121
            $k[$j++] = 0; //#6123
            $1.abeforeb(); //#6123
            if ($k[--$j]) { //#6127
                $k[$j++] = $1.sta; //#6124
                $1.enca(); //#6124
                $1.cset = "seta"; //#6125
                break; //#6126
            } //#6126
            $k[$j++] = $1.stb; //#6128
            $1.enca(); //#6128
            $1.cset = "setb"; //#6129
            break; //#6130
        } //#6130
        $1.i = 0; //#6134
        for (;;) { //#6217
            if ($1.i == $1.msglen) { //#6135
                break; //#6135
            } //#6135
            $k[$j++] = $1.i; //#6137
            $1.numsscr(); //#6137
            $1.nums = $k[--$j]; //#6137
            $1.nchars = $k[--$j]; //#6137
            for (;;) { //#6215
                if ((($eq($1.cset, "seta") || $eq($1.cset, "setb")) && ($1.nums >= 4)) && ($get($1.msg, $1.i) != $1.fn1)) { //#6154
                    if (($1.nums % 2) == 0) { //#6152
                        $k[$j++] = $1.swc; //#6144
                        if ($eq($1.cset, "seta")) { //#6144
                            $1.enca(); //#6144
                        } else { //#6144
                            $1.encb(); //#6144
                        } //#6144
                        $1.cset = "setc"; //#6145
                        break; //#6146
                    } else { //#6152
                        $k[$j++] = $get($1.msg, $1.i); //#6148
                        if ($eq($1.cset, "seta")) { //#6148
                            $1.enca(); //#6148
                        } else { //#6148
                            $1.encb(); //#6148
                        } //#6148
                        $1.i = $1.i + 1; //#6149
                        $k[$j++] = $1.swc; //#6150
                        if ($eq($1.cset, "seta")) { //#6150
                            $1.enca(); //#6150
                        } else { //#6150
                            $1.encb(); //#6150
                        } //#6150
                        $1.cset = "setc"; //#6151
                        break; //#6152
                    } //#6152
                } //#6152
                $k[$j++] = $eq($1.cset, "setb"); //#6155
                $k[$j++] = $get($1.msg, $1.i); //#6155
                $1.anotb(); //#6155
                var _72 = $k[--$j]; //#6155
                var _73 = $k[--$j]; //#6155
                if ((_73 && _72)) { //#6167
                    if ($1.i < ($1.msglen - 1)) { //#6163
                        $k[$j++] = $1.i + 1; //#6157
                        $1.bbeforea(); //#6157
                        if ($k[--$j]) { //#6162
                            $k[$j++] = $1.sft; //#6158
                            $1.encb(); //#6158
                            $k[$j++] = $get($1.msg, $1.i); //#6159
                            $1.enca(); //#6159
                            $1.i = $1.i + 1; //#6160
                            break; //#6161
                        } //#6161
                    } //#6161
                    $k[$j++] = $1.swa; //#6164
                    $1.encb(); //#6164
                    $1.cset = "seta"; //#6165
                    break; //#6166
                } //#6166
                $k[$j++] = $eq($1.cset, "seta"); //#6168
                $k[$j++] = $get($1.msg, $1.i); //#6168
                $1.bnota(); //#6168
                var _7I = $k[--$j]; //#6168
                var _7J = $k[--$j]; //#6168
                if ((_7J && _7I)) { //#6180
                    if ($1.i < ($1.msglen - 1)) { //#6176
                        $k[$j++] = $1.i + 1; //#6170
                        $1.abeforeb(); //#6170
                        if ($k[--$j]) { //#6175
                            $k[$j++] = $1.sft; //#6171
                            $1.enca(); //#6171
                            $k[$j++] = $get($1.msg, $1.i); //#6172
                            $1.encb(); //#6172
                            $1.i = $1.i + 1; //#6173
                            break; //#6174
                        } //#6174
                    } //#6174
                    $k[$j++] = $1.swb; //#6177
                    $1.enca(); //#6177
                    $1.cset = "setb"; //#6178
                    break; //#6179
                } //#6179
                if (($eq($1.cset, "setc") && ($1.nums < 2)) && (($get($1.msg, $1.i) > -1) || ($get($1.msg, $1.i) == $1.fn4))) { //#6190
                    $k[$j++] = $1.i; //#6182
                    $1.abeforeb(); //#6182
                    if ($k[--$j]) { //#6186
                        $k[$j++] = $1.swa; //#6183
                        $1.encc(); //#6183
                        $1.cset = "seta"; //#6184
                        break; //#6185
                    } //#6185
                    $k[$j++] = $1.swb; //#6187
                    $1.encc(); //#6187
                    $1.cset = "setb"; //#6188
                    break; //#6189
                } //#6189
                if ($eq($1.cset, "seta")) { //#6197
                    $k[$j++] = $get($1.msg, $1.i); //#6194
                    $1.enca(); //#6194
                    $1.i = $1.i + 1; //#6195
                    break; //#6196
                } //#6196
                if ($eq($1.cset, "setb")) { //#6202
                    $k[$j++] = $get($1.msg, $1.i); //#6199
                    $1.encb(); //#6199
                    $1.i = $1.i + 1; //#6200
                    break; //#6201
                } //#6201
                if ($eq($1.cset, "setc")) { //#6212
                    if ($get($1.msg, $1.i) <= -1) { //#6209
                        $k[$j++] = $get($1.msg, $1.i); //#6205
                        $1.encc(); //#6205
                        $1.i = $1.i + 1; //#6206
                    } else { //#6209
                        $k[$j++] = $geti($1.msg, $1.i, 2); //#6208
                        $1.encc(); //#6208
                        $1.i = $1.i + 2; //#6209
                    } //#6209
                    break; //#6211
                } //#6211
                break; //#6214
            } //#6214
        } //#6214
        $1.cws = $geti($1.cws, 0, $1.j); //#6218
    } //#6218
    var _87 = $a($1.j + 2); //#6222
    $puti(_87, 0, $1.cws); //#6222
    $1.cws = _87; //#6222
    $1.csum = $get($1.cws, 0); //#6223
    for (var _8D = 1, _8C = $1.j - 1; _8D <= _8C; _8D += 1) { //#6227
        $1.i = _8D; //#6225
        $1.csum = $f($1.csum + ($get($1.cws, $1.i) * $1.i)); //#6226
    } //#6226
    $1.csum = $1.csum % 103; //#6228
    $put($1.cws, $1.j, $1.csum); //#6229
    $put($1.cws, $1.j + 1, $get($1.seta, $1.stp)); //#6230
    var _8T = $get($1.options, 'debugcws') !== undefined; //#6232
    if (_8T) { //#6232
        $k[$j++] = 'bwipp.debugcws#6232'; //#6232
        $k[$j++] = $1.cws; //#6232
        bwipp_raiseerror(); //#6232
    } //#6232
    if (!bwipp_code128.$ctx._6254) { //#6254
        (function() { //#6254
            var $ctx = Object.create($1); //#6254
            $ctx.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "211214", "211232", "2331112"]); //#6253
            for (var _8W in $ctx) {
                $ctx.hasOwnProperty(_8W) && (bwipp_code128.$ctx[_8W] = $ctx[_8W]);
            } //#6253
            bwipp_code128.$ctx._6254 = 1; //#6253
        })(); //#6253
    } //#6253
    $1.sbs = $s(($1.cws.length * 6) + 1); //#6257
    for (var _8b = 0, _8a = $1.cws.length - 1; _8b <= _8a; _8b += 1) { //#6261
        $1.i = _8b; //#6259
        $puti($1.sbs, $1.i * 6, $get($1.encs, $get($1.cws, $1.i))); //#6260
    } //#6260
    $k[$j++] = Infinity; //#6271
    $k[$j++] = Infinity; //#6266
    var _8j = $1.sbs; //#6266
    for (var _8k = 0, _8l = _8j.length; _8k < _8l; _8k++) { //#6266
        $k[$j++] = $get(_8j, _8k) - 48; //#6266
    } //#6266
    var _8n = $a(); //#6266
    $k[$j++] = Infinity; //#6267
    for (var _8p = 0, _8q = ~~(($1.sbs.length + 1) / 2); _8p < _8q; _8p++) { //#6267
        $k[$j++] = $1.height; //#6267
    } //#6267
    var _8s = $a(); //#6267
    $k[$j++] = Infinity; //#6268
    for (var _8u = 0, _8v = ~~(($1.sbs.length + 1) / 2); _8u < _8v; _8u++) { //#6268
        $k[$j++] = 0; //#6268
    } //#6268
    var _8w = $a(); //#6268
    $k[$j++] = 'ren'; //#6271
    $k[$j++] = bwipp_renlinear; //#6271
    $k[$j++] = 'sbs'; //#6271
    $k[$j++] = _8n; //#6271
    $k[$j++] = 'bhs'; //#6271
    $k[$j++] = _8s; //#6271
    $k[$j++] = 'bbs'; //#6271
    $k[$j++] = _8w; //#6271
    $k[$j++] = 'txt'; //#6271
    $k[$j++] = $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])]); //#6271
    $k[$j++] = 'textxalign'; //#6271
    $k[$j++] = "center"; //#6271
    $k[$j++] = 'opt'; //#6271
    $k[$j++] = $1.options; //#6271
    var _95 = $d(); //#6271
    $k[$j++] = _95; //#6274
    if (!$1.dontdraw) { //#6274
        bwipp_renlinear(); //#6274
    } //#6274
}

function bwipp_gs1_128() {
    var $1 = Object.create(bwipp_gs1_128.$ctx || (bwipp_gs1_128.$ctx = {})); //#6309
    $1.dontdraw = false; //#6312
    $1.includetext = false; //#6313
    $1.textfont = "OCR-B"; //#6314
    $1.textsize = 10; //#6315
    $1.textxoffset = 0; //#6316
    $1.textyoffset = -8; //#6317
    $1.height = 0.5; //#6318
    $1.linkagea = false; //#6319
    $1.linkagec = false; //#6320
    $1.parse = false; //#6321
    $1.dontlint = false; //#6322
    $1.lintreqs = false; //#6323
    $k[$j++] = $1; //#6325
    bwipp_processoptions(); //#6325
    $1.options = $k[--$j]; //#6325
    $1.barcode = $k[--$j]; //#6326
    $1.text = $1.barcode; //#6328
    $k[$j++] = $1.barcode; //#6330
    $k[$j++] = 'ai'; //#6330
    bwipp_gs1process(); //#6330
    $1.fncs = $k[--$j]; //#6331
    $1.vals = $k[--$j]; //#6332
    $1.ais = $k[--$j]; //#6333
    $1.fnc1 = -1; //#6336
    $1.c128 = $a([$1.fnc1]); //#6337
    for (var _B = 0, _A = $1.ais.length - 1; _B <= _A; _B += 1) { //#6353
        $1.i = _B; //#6339
        $1.ai = $get($1.ais, $1.i); //#6340
        $1.val = $get($1.vals, $1.i); //#6341
        var _L = $a(($1.c128.length + $1.ai.length) + $1.val.length); //#6342
        $puti(_L, 0, $1.c128); //#6343
        $k[$j++] = _L; //#6344
        $k[$j++] = _L; //#6344
        $k[$j++] = $1.c128.length; //#6344
        $k[$j++] = $1.ai; //#6344
        $k[$j++] = Infinity; //#6344
        var _P = $k[--$j]; //#6344
        var _Q = $k[--$j]; //#6344
        $k[$j++] = _P; //#6344
        $forall(_Q); //#6344
        var _R = $a(); //#6344
        var _S = $k[--$j]; //#6344
        $puti($k[--$j], _S, _R); //#6344
        var _U = $k[--$j]; //#6345
        $k[$j++] = _U; //#6345
        $k[$j++] = _U; //#6345
        $k[$j++] = $1.c128.length + $1.ai.length; //#6345
        $k[$j++] = $1.val; //#6345
        $k[$j++] = Infinity; //#6345
        var _Y = $k[--$j]; //#6345
        var _Z = $k[--$j]; //#6345
        $k[$j++] = _Y; //#6345
        $forall(_Z); //#6345
        var _a = $a(); //#6345
        var _b = $k[--$j]; //#6345
        $puti($k[--$j], _b, _a); //#6345
        $1.c128 = $k[--$j]; //#6346
        if (($1.i != ($1.ais.length - 1)) && $get($1.fncs, $1.i)) { //#6352
            var _k = $a($1.c128.length + 1); //#6348
            $puti(_k, 0, $1.c128); //#6349
            $put(_k, $1.c128.length, $1.fnc1); //#6350
            $1.c128 = _k; //#6351
        } //#6351
    } //#6351
    $1.barcode = $s(($1.c128.length + 1) * 5); //#6356
    $1.i = 0; //#6357
    $1.j = 0; //#6357
    for (;;) { //#6367
        if ($1.i == $1.c128.length) { //#6358
            break; //#6358
        } //#6358
        var _u = $get($1.c128, $1.i); //#6359
        $k[$j++] = _u; //#6364
        if (_u == $1.fnc1) { //#6363
            $j--; //#6360
            $puti($1.barcode, $1.j, "^FNC1"); //#6360
            $1.j = $1.j + 4; //#6361
        } else { //#6363
            $put($1.barcode, $1.j, $k[--$j]); //#6363
        } //#6363
        $1.i = $1.i + 1; //#6365
        $1.j = $1.j + 1; //#6366
    } //#6366
    if ($1.linkagea || $1.linkagec) { //#6371
        $k[$j++] = $1.barcode; //#6369
        $k[$j++] = $1.j; //#6369
        if ($1.linkagea) { //#6369
            $k[$j++] = "^LNKA"; //#6369
        } else { //#6369
            $k[$j++] = "^LNKC"; //#6369
        } //#6369
        var _19 = $k[--$j]; //#6369
        var _1A = $k[--$j]; //#6369
        $puti($k[--$j], _1A, _19); //#6369
        $1.j = $1.j + 5; //#6370
    } //#6370
    $1.barcode = $geti($1.barcode, 0, $1.j); //#6372
    delete $1.options["parse"]; //#6375
    $put($1.options, "height", $1.height); //#6376
    $put($1.options, "dontdraw", true); //#6377
    $put($1.options, "parsefnc", true); //#6378
    $k[$j++] = 'args'; //#6379
    $k[$j++] = $1.barcode; //#6379
    $k[$j++] = $1.options; //#6379
    bwipp_code128(); //#6379
    var _1N = $k[--$j]; //#6379
    $1[$k[--$j]] = _1N; //#6379
    $put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); //#6381
    $put($1.args, "textxalign", "center"); //#6382
    $put($1.args, "opt", $1.options); //#6383
    $k[$j++] = $1.args; //#6386
    if (!$1.dontdraw) { //#6386
        bwipp_renlinear(); //#6386
    } //#6386
}

function bwipp_ean14() {
    var $1 = Object.create(bwipp_ean14.$ctx || (bwipp_ean14.$ctx = {})); //#6417
    $1.dontdraw = false; //#6420
    $1.includetext = false; //#6421
    $1.textfont = "OCR-B"; //#6422
    $1.textsize = 10; //#6423
    $1.textxoffset = 0; //#6424
    $1.textyoffset = -8; //#6425
    $1.height = 1; //#6426
    $k[$j++] = $1; //#6428
    bwipp_processoptions(); //#6428
    $1.options = $k[--$j]; //#6428
    $1.barcode = $k[--$j]; //#6429
    $1.text = $1.barcode; //#6432
    var _3 = $1.barcode; //#6433
    $k[$j++] = $s(_3.length); //#6434
    $k[$j++] = 0; //#6434
    $forall(_3, function() { //#6434
        var _5 = $k[--$j]; //#6434
        $k[$j++] = _5; //#6434
        if (_5 != 32) { //#6434
            var _6 = $k[--$j]; //#6434
            var _7 = $k[--$j]; //#6434
            var _8 = $k[--$j]; //#6434
            $put(_8, _7, _6); //#6434
            $k[$j++] = _8; //#6434
            $k[$j++] = $f(_7 + 1); //#6434
        } else { //#6434
            $j--; //#6434
        } //#6434
    }); //#6434
    var _9 = $k[--$j]; //#6435
    $1.barcode = $geti($k[--$j], 0, _9); //#6435
    $1.hasspace = $1.text.length != $1.barcode.length; //#6436
    if ($ne($geti($1.barcode, 0, 4), "(01)")) { //#6441
        $k[$j++] = 'bwipp.ean14badAI#6440'; //#6440
        $k[$j++] = "GS1-14 must begin with (01) application identifier"; //#6440
        bwipp_raiseerror(); //#6440
    } //#6440
    if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //#6444
        $k[$j++] = 'bwipp.ean14badLength#6443'; //#6443
        $k[$j++] = "GS1-14 must be 13 or 14 digits"; //#6443
        bwipp_raiseerror(); //#6443
    } //#6443
    var _K = $geti($1.barcode, 4, $1.barcode.length - 4); //#6445
    for (var _L = 0, _M = _K.length; _L < _M; _L++) { //#6449
        var _N = $get(_K, _L); //#6449
        if ((_N < 48) || (_N > 57)) { //#6448
            $k[$j++] = 'bwipp.ean14badCharacter#6447'; //#6447
            $k[$j++] = "GS1-14 must contain only digits"; //#6447
            bwipp_raiseerror(); //#6447
        } //#6447
    } //#6447
    $1.checksum = 0; //#6452
    for (var _O = 0; _O <= 12; _O += 1) { //#6456
        $1.i = _O; //#6454
        $k[$j++] = 'checksum'; //#6455
        $k[$j++] = $1.checksum; //#6455
        $k[$j++] = $f($get($1.barcode, $1.i + 4) - 48); //#6455
        if (($1.i % 2) == 0) { //#6455
            var _U = $k[--$j]; //#6455
            $k[$j++] = _U * 3; //#6455
        } //#6455
        var _V = $k[--$j]; //#6455
        var _W = $k[--$j]; //#6455
        $1[$k[--$j]] = $f(_W + _V); //#6455
    } //#6455
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#6457
    if ($1.barcode.length == 18) { //#6471
        if ($get($1.barcode, 17) != ($1.checksum + 48)) { //#6461
            $k[$j++] = 'bwipp.ean14badCheckDigit#6460'; //#6460
            $k[$j++] = "Incorrect GS1-14 check digit provided"; //#6460
            bwipp_raiseerror(); //#6460
        } //#6460
    } else { //#6471
        var _d = $s(18); //#6463
        $puti(_d, 0, $1.barcode); //#6464
        $put(_d, 17, $1.checksum + 48); //#6465
        $1.barcode = _d; //#6466
        var _i = $1.hasspace ? 2 : 1; //#6467
        var _j = $s($1.text.length + _i); //#6467
        $puti(_j, _j.length - 2, " "); //#6468
        $put(_j, _j.length - 1, $1.checksum + 48); //#6469
        $puti(_j, 0, $1.text); //#6470
        $1.text = _j; //#6471
    } //#6471
    $1.gtin = $geti($1.barcode, 4, 14); //#6473
    $1.barcode = $s(21); //#6476
    $puti($1.barcode, 0, "^FNC101"); //#6477
    var _r = $1.gtin; //#6478
    $puti($1.barcode, 7, _r); //#6478
    $put($1.options, "dontdraw", true); //#6481
    $put($1.options, "parsefnc", true); //#6482
    $k[$j++] = 'args'; //#6483
    $k[$j++] = $1.barcode; //#6483
    $k[$j++] = $1.options; //#6483
    bwipp_code128(); //#6483
    var _w = $k[--$j]; //#6483
    $1[$k[--$j]] = _w; //#6483
    $put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); //#6485
    $put($1.args, "textxalign", "center"); //#6486
    $put($1.args, "opt", $1.options); //#6487
    $k[$j++] = $1.args; //#6490
    if (!$1.dontdraw) { //#6490
        bwipp_renlinear(); //#6490
    } //#6490
}

function bwipp_sscc18() {
    var $1 = Object.create(bwipp_sscc18.$ctx || (bwipp_sscc18.$ctx = {})); //#6521
    $1.dontdraw = false; //#6524
    $1.includetext = false; //#6525
    $1.textfont = "OCR-B"; //#6526
    $1.textsize = 10; //#6527
    $1.textxoffset = 0; //#6528
    $1.textyoffset = -8; //#6529
    $1.height = 1; //#6530
    $k[$j++] = $1; //#6532
    bwipp_processoptions(); //#6532
    $1.options = $k[--$j]; //#6532
    $1.barcode = $k[--$j]; //#6533
    $1.text = $1.barcode; //#6536
    var _3 = $1.barcode; //#6537
    $k[$j++] = $s(_3.length); //#6538
    $k[$j++] = 0; //#6538
    $forall(_3, function() { //#6538
        var _5 = $k[--$j]; //#6538
        $k[$j++] = _5; //#6538
        if (_5 != 32) { //#6538
            var _6 = $k[--$j]; //#6538
            var _7 = $k[--$j]; //#6538
            var _8 = $k[--$j]; //#6538
            $put(_8, _7, _6); //#6538
            $k[$j++] = _8; //#6538
            $k[$j++] = $f(_7 + 1); //#6538
        } else { //#6538
            $j--; //#6538
        } //#6538
    }); //#6538
    var _9 = $k[--$j]; //#6539
    $1.barcode = $geti($k[--$j], 0, _9); //#6539
    $1.hasspace = $1.text.length != $1.barcode.length; //#6540
    if ($ne($geti($1.barcode, 0, 4), "(00)")) { //#6545
        $k[$j++] = 'bwipp.sscc18badAI#6544'; //#6544
        $k[$j++] = "SSCC-18 must begin with (00) application identifier"; //#6544
        bwipp_raiseerror(); //#6544
    } //#6544
    if (($1.barcode.length != 21) && ($1.barcode.length != 22)) { //#6548
        $k[$j++] = 'bwipp.sscc18badLength#6547'; //#6547
        $k[$j++] = "SSCC-18 must be 17 or 18 digits"; //#6547
        bwipp_raiseerror(); //#6547
    } //#6547
    var _K = $geti($1.barcode, 4, $1.barcode.length - 4); //#6549
    for (var _L = 0, _M = _K.length; _L < _M; _L++) { //#6553
        var _N = $get(_K, _L); //#6553
        if ((_N < 48) || (_N > 57)) { //#6552
            $k[$j++] = 'bwipp.sscc18badCharacter#6551'; //#6551
            $k[$j++] = "SSCC-18 must contain only digits"; //#6551
            bwipp_raiseerror(); //#6551
        } //#6551
    } //#6551
    $1.checksum = 0; //#6556
    for (var _O = 0; _O <= 16; _O += 1) { //#6560
        $1.i = _O; //#6558
        $k[$j++] = 'checksum'; //#6559
        $k[$j++] = $1.checksum; //#6559
        $k[$j++] = $f($get($1.barcode, $1.i + 4) - 48); //#6559
        if (($1.i % 2) == 0) { //#6559
            var _U = $k[--$j]; //#6559
            $k[$j++] = _U * 3; //#6559
        } //#6559
        var _V = $k[--$j]; //#6559
        var _W = $k[--$j]; //#6559
        $1[$k[--$j]] = $f(_W + _V); //#6559
    } //#6559
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#6561
    if ($1.barcode.length == 22) { //#6575
        if ($get($1.barcode, 21) != ($1.checksum + 48)) { //#6565
            $k[$j++] = 'bwipp.sscc18badCheckDigit#6564'; //#6564
            $k[$j++] = "Incorrect SSCC-18 check digit provided"; //#6564
            bwipp_raiseerror(); //#6564
        } //#6564
    } else { //#6575
        var _d = $s(22); //#6567
        $puti(_d, 0, $1.barcode); //#6568
        $put(_d, 21, $1.checksum + 48); //#6569
        $1.barcode = _d; //#6570
        var _i = $1.hasspace ? 2 : 1; //#6571
        var _j = $s($1.text.length + _i); //#6571
        $puti(_j, _j.length - 2, " "); //#6572
        $put(_j, _j.length - 1, $1.checksum + 48); //#6573
        $puti(_j, 0, $1.text); //#6574
        $1.text = _j; //#6575
    } //#6575
    $1.sscc = $geti($1.barcode, 4, 18); //#6577
    $1.barcode = $s(25); //#6580
    $puti($1.barcode, 0, "^FNC100"); //#6581
    var _r = $1.sscc; //#6582
    $puti($1.barcode, 7, _r); //#6582
    $put($1.options, "dontdraw", true); //#6585
    $put($1.options, "parsefnc", true); //#6586
    $k[$j++] = 'args'; //#6587
    $k[$j++] = $1.barcode; //#6587
    $k[$j++] = $1.options; //#6587
    bwipp_code128(); //#6587
    var _w = $k[--$j]; //#6587
    $1[$k[--$j]] = _w; //#6587
    $put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); //#6589
    $put($1.args, "textxalign", "center"); //#6590
    $put($1.args, "opt", $1.options); //#6591
    $k[$j++] = $1.args; //#6594
    if (!$1.dontdraw) { //#6594
        bwipp_renlinear(); //#6594
    } //#6594
}

function bwipp_code39() {
    var $1 = Object.create(bwipp_code39.$ctx || (bwipp_code39.$ctx = {})); //#6626
    $1.dontdraw = false; //#6629
    $1.includecheck = false; //#6630
    $1.validatecheck = false; //#6631
    $1.includetext = false; //#6632
    $1.includecheckintext = false; //#6633
    $1.hidestars = false; //#6634
    $1.textfont = "OCR-B"; //#6635
    $1.textsize = 10; //#6636
    $1.textyoffset = -8; //#6637
    $1.height = 1; //#6638
    $k[$j++] = $1; //#6640
    bwipp_processoptions(); //#6640
    $1.options = $k[--$j]; //#6640
    $1.barcode = $k[--$j]; //#6641
    if (!bwipp_code39.$ctx._6663) { //#6663
        (function() { //#6663
            var $ctx = Object.create($1); //#6663
            $ctx.encs = $a(["1113313111", "3113111131", "1133111131", "3133111111", "1113311131", "3113311111", "1133311111", "1113113131", "3113113111", "1133113111", "3111131131", "1131131131", "3131131111", "1111331131", "3111331111", "1131331111", "1111133131", "3111133111", "1131133111", "1111333111", "3111111331", "1131111331", "3131111311", "1111311331", "3111311311", "1131311311", "1111113331", "3111113311", "1131113311", "1111313311", "3311111131", "1331111131", "3331111111", "1311311131", "3311311111", "1331311111", "1311113131", "3311113111", "1331113111", "1313131111", "1313111311", "1311131311", "1113131311", "1311313111"]); //#6657
            $ctx.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#6660
            $ctx.charvals = new Map; //#6661
            for (var _3 = 0; _3 <= 42; _3 += 1) { //#6662
                $put($ctx.charvals, $geti($ctx.barchars, _3, 1), _3); //#6662
            } //#6662
            for (var _7 in $ctx) {
                $ctx.hasOwnProperty(_7) && (bwipp_code39.$ctx[_7] = $ctx[_7]);
            } //#6662
            bwipp_code39.$ctx._6663 = 1; //#6662
        })(); //#6662
    } //#6662
    for (var _A = 0, _9 = $1.barcode.length - 1; _A <= _9; _A += 1) { //#6670
        var _E = $get($1.charvals, $geti($1.barcode, _A, 1)) !== undefined; //#6667
        if (!_E) { //#6669
            $k[$j++] = 'bwipp.code39badCharacter#6668'; //#6668
            $k[$j++] = "Code 39 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#6668
            bwipp_raiseerror(); //#6668
        } //#6668
    } //#6668
    $k[$j++] = 'barlen'; //#6672
    $k[$j++] = $1.barcode.length; //#6672
    if ($1.validatecheck) { //#6672
        var _H = $k[--$j]; //#6672
        $k[$j++] = $f(_H - 1); //#6672
    } //#6672
    var _I = $k[--$j]; //#6672
    $1[$k[--$j]] = _I; //#6672
    $1.checksum = 0; //#6674
    for (var _M = 0, _L = $f($1.barlen - 1); _M <= _L; _M += 1) { //#6678
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _M, 1)) + $1.checksum); //#6677
    } //#6677
    $1.checksum = $1.checksum % 43; //#6679
    if ($1.validatecheck) { //#6686
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#6683
            $k[$j++] = 'bwipp.code39badCheckDigit#6682'; //#6682
            $k[$j++] = "Incorrect Code 39 check digit provided"; //#6682
            bwipp_raiseerror(); //#6682
        } //#6682
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#6684
        $1.includecheck = true; //#6685
    } //#6685
    var _f = $1.includecheck ? 3 : 2; //#6688
    $1.sbs = $s($f($1.barlen + _f) * 10); //#6688
    var _j = $1.includecheck ? 3 : 2; //#6689
    $1.txt = $a($f($1.barlen + _j)); //#6689
    $puti($1.sbs, 0, $get($1.encs, 43)); //#6692
    if (!$1.hidestars) { //#6696
        $put($1.txt, 0, $a(["*", 0, $1.textyoffset, $1.textfont, $1.textsize])); //#6694
    } else { //#6696
        $put($1.txt, 0, $a(["", 0, $1.textyoffset, $1.textfont, $1.textsize])); //#6696
    } //#6696
    for (var _11 = 0, _10 = $f($1.barlen - 1); _11 <= _10; _11 += 1) { //#6704
        $1.i = _11; //#6700
        $1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); //#6701
        $puti($1.sbs, ($1.i * 10) + 10, $get($1.encs, $1.indx)); //#6702
        $put($1.txt, $1.i + 1, $a([$geti($1.barcode, $1.i, 1), ($1.i + 1) * 16, $1.textyoffset, $1.textfont, $1.textsize])); //#6703
    } //#6703
    if ($1.includecheck) { //#6725
        $puti($1.sbs, $f(($1.barlen * 10) + 10), $get($1.encs, $1.checksum)); //#6708
        if ($1.includecheckintext) { //#6712
            $put($1.txt, $f($1.barlen + 1), $a([$geti($1.barchars, $1.checksum, 1), $f($1.barlen + 1) * 16, $1.textyoffset, $1.textfont, $1.textsize])); //#6710
        } else { //#6712
            $put($1.txt, $f($1.barlen + 1), $a(["", $f($1.barlen + 1) * 16, $1.textyoffset, $1.textfont, $1.textsize])); //#6712
        } //#6712
        $puti($1.sbs, $f(($1.barlen * 10) + 20), $get($1.encs, 43)); //#6714
        if (!$1.hidestars) { //#6718
            $put($1.txt, $f($1.barlen + 2), $a(["*", $f($1.barlen + 2) * 16, $1.textyoffset, $1.textfont, $1.textsize])); //#6716
        } else { //#6718
            $put($1.txt, $f($1.barlen + 2), $a(["", $f($1.barlen + 2) * 16, $1.textyoffset, $1.textfont, $1.textsize])); //#6718
        } //#6718
    } else { //#6725
        $puti($1.sbs, $f(($1.barlen * 10) + 10), $get($1.encs, 43)); //#6721
        if (!$1.hidestars) { //#6725
            $put($1.txt, $f($1.barlen + 1), $a(["*", $f($1.barlen + 1) * 16, $1.textyoffset, $1.textfont, $1.textsize])); //#6723
        } else { //#6725
            $put($1.txt, $f($1.barlen + 1), $a(["", $f($1.barlen + 1) * 16, $1.textyoffset, $1.textfont, $1.textsize])); //#6725
        } //#6725
    } //#6725
    $k[$j++] = Infinity; //#6738
    $k[$j++] = Infinity; //#6732
    var _2M = $1.sbs; //#6732
    for (var _2N = 0, _2O = _2M.length; _2N < _2O; _2N++) { //#6732
        $k[$j++] = $get(_2M, _2N) - 48; //#6732
    } //#6732
    var _2Q = $a(); //#6732
    $k[$j++] = Infinity; //#6733
    for (var _2S = 0, _2T = ~~(($1.sbs.length + 1) / 2); _2S < _2T; _2S++) { //#6733
        $k[$j++] = $1.height; //#6733
    } //#6733
    var _2V = $a(); //#6733
    $k[$j++] = Infinity; //#6734
    for (var _2X = 0, _2Y = ~~(($1.sbs.length + 1) / 2); _2X < _2Y; _2X++) { //#6734
        $k[$j++] = 0; //#6734
    } //#6734
    var _2Z = $a(); //#6734
    $k[$j++] = 'ren'; //#6737
    $k[$j++] = bwipp_renlinear; //#6737
    $k[$j++] = 'sbs'; //#6737
    $k[$j++] = _2Q; //#6737
    $k[$j++] = 'bhs'; //#6737
    $k[$j++] = _2V; //#6737
    $k[$j++] = 'bbs'; //#6737
    $k[$j++] = _2Z; //#6737
    if ($1.includetext) { //#6737
        $k[$j++] = 'txt'; //#6736
        $k[$j++] = $1.txt; //#6736
    } //#6736
    $k[$j++] = 'opt'; //#6738
    $k[$j++] = $1.options; //#6738
    var _2d = $d(); //#6738
    $k[$j++] = _2d; //#6741
    if (!$1.dontdraw) { //#6741
        bwipp_renlinear(); //#6741
    } //#6741
}

function bwipp_code39ext() {
    var $1 = Object.create(bwipp_code39ext.$ctx || (bwipp_code39ext.$ctx = {})); //#6777
    $1.dontdraw = false; //#6780
    $1.includetext = false; //#6781
    $1.parse = false; //#6782
    $k[$j++] = $1; //#6784
    bwipp_processoptions(); //#6784
    $1.options = $k[--$j]; //#6784
    $1.barcode = $k[--$j]; //#6785
    var _3 = new Map([
        ["parse", $1.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#6793
    $1.fncvals = _3; //#6794
    $k[$j++] = 'barcode'; //#6795
    $k[$j++] = $1.barcode; //#6795
    $k[$j++] = $1.fncvals; //#6795
    bwipp_parseinput(); //#6795
    var _6 = $k[--$j]; //#6795
    $1[$k[--$j]] = _6; //#6795
    $1.barlen = $1.barcode.length; //#6796
    delete $1.options["parse"]; //#6797
    $forall($1.barcode, function() { //#6804
        if ($k[--$j] >= 128) { //#6803
            $k[$j++] = 'bwipp.code39extBadCharacter#6802'; //#6802
            $k[$j++] = "Code 39 Extended must contain only ASCII characters"; //#6802
            bwipp_raiseerror(); //#6802
        } //#6802
    }); //#6802
    if (!bwipp_code39ext.$ctx._6818) { //#6818
        (function() { //#6818
            var $ctx = Object.create($1); //#6818
            $ctx.extencs = $a
            for (var _D in $ctx) {
                $ctx.hasOwnProperty(_D) && (bwipp_code39ext.$ctx[_D] = $ctx[_D]);
            } //#6817
            bwipp_code39ext.$ctx._6818 = 1; //#6817
        })(); //#6817
    } //#6817
    $1.newcode = $s($1.barlen * 2); //#6820
    $1.newtext = $s($1.barlen * 2); //#6821
    $1.j = 0; //#6822
    for (var _K = 0, _J = $1.barlen - 1; _K <= _J; _K += 1) { //#6830
        $1.i = _K; //#6824
        $1.extchar = $get($1.extencs, $get($1.barcode, $1.i)); //#6825
        $puti($1.newcode, $1.j, $1.extchar); //#6826
        $put($1.newtext, $1.j, $get($1.barcode, $1.i)); //#6827
        if ($1.extchar.length != 1) { //#6828
            $puti($1.newtext, $1.j + 1, " "); //#6828
        } //#6828
        $1.j = $1.j + $1.extchar.length; //#6829
    } //#6829
    $1.newcode = $geti($1.newcode, 0, $1.j); //#6831
    $1.newtext = $geti($1.newtext, 0, $1.j); //#6832
    $put($1.options, "dontdraw", true); //#6835
    $k[$j++] = 'args'; //#6836
    $k[$j++] = $1.newcode; //#6836
    $k[$j++] = $1.options; //#6836
    bwipp_code39(); //#6836
    var _m = $k[--$j]; //#6836
    $1[$k[--$j]] = _m; //#6836
    if ($1.includetext) { //#6848
        $1.txt = $get($1.args, "txt"); //#6840
        for (var _t = 0, _s = $1.newtext.length - 1; _t <= _s; _t += 1) { //#6846
            $1.i = _t; //#6842
            $1.txtentry = $get($1.txt, $1.i + 1); //#6843
            $put($1.txtentry, 0, $geti($1.newtext, $1.i, 1)); //#6844
            $put($1.txt, $1.i + 1, $1.txtentry); //#6845
        } //#6845
        $put($1.args, "txt", $1.txt); //#6847
    } //#6847
    $put($1.args, "opt", $1.options); //#6849
    $k[$j++] = $1.args; //#6852
    if (!$1.dontdraw) { //#6852
        bwipp_renlinear(); //#6852
    } //#6852
}

function bwipp_code32() {
    var $1 = Object.create(bwipp_code32.$ctx || (bwipp_code32.$ctx = {})); //#6885
    $1.dontdraw = false; //#6888
    $1.includetext = false; //#6889
    $1.textfont = "OCR-B"; //#6890
    $1.textsize = 10; //#6891
    $1.textyoffset = -8; //#6892
    $1.textxoffset = 0; //#6893
    $1.height = 1; //#6894
    $k[$j++] = $1; //#6896
    bwipp_processoptions(); //#6896
    $1.options = $k[--$j]; //#6896
    $1.barcode = $k[--$j]; //#6897
    if (($1.barcode.length != 8) && ($1.barcode.length != 9)) { //#6902
        $k[$j++] = 'bwipp.code32badLength#6901'; //#6901
        $k[$j++] = "Italian Pharmacode must be 8 or 9 digits"; //#6901
        bwipp_raiseerror(); //#6901
    } //#6901
    $forall($1.barcode, function() { //#6907
        var _5 = $k[--$j]; //#6904
        if ((_5 < 48) || (_5 > 57)) { //#6906
            $k[$j++] = 'bwipp.code32badCharacter#6905'; //#6905
            $k[$j++] = "Italian Pharmacode must contain only digits"; //#6905
            bwipp_raiseerror(); //#6905
        } //#6905
    }); //#6905
    $1.checksum = 0; //#6910
    for (var _6 = 0; _6 <= 7; _6 += 1) { //#6915
        $1.i = _6; //#6912
        $k[$j++] = $f($get($1.barcode, $1.i) - 48); //#6913
        if (($1.i % 2) != 0) { //#6913
            var _B = $k[--$j]; //#6913
            $k[$j++] = _B * 2; //#6913
        } //#6913
        var _C = $k[--$j]; //#6913
        $k[$j++] = _C; //#6913
        if (_C > 9) { //#6913
            var _D = $k[--$j]; //#6913
            $k[$j++] = $f(_D - 9); //#6913
        } //#6913
        $1.checksum = $f($k[--$j] + $1.checksum); //#6914
    } //#6914
    $1.checksum = $1.checksum % 10; //#6916
    if ($1.barcode.length == 9) { //#6921
        if ($get($1.barcode, 8) != $f($1.checksum + 48)) { //#6920
            $k[$j++] = 'bwipp.code32badCheckDigit#6919'; //#6919
            $k[$j++] = "Incorrect Italian Pharmacode check digit provided"; //#6919
            bwipp_raiseerror(); //#6919
        } //#6919
    } //#6919
    var _L = $s(10); //#6922
    $puti(_L, 0, $1.barcode); //#6923
    $put(_L, 8, $f($1.checksum + 48)); //#6924
    $1.text = _L; //#6925
    $1.val = $cvrs($s(6), $cvi($1.text), 32); //#6928
    $1.barcode = $s(6); //#6929
    for (var _S = 0; _S <= 5; _S += 1) { //#6930
        $put($1.barcode, _S, 48); //#6930
    } //#6930
    $puti($1.barcode, 6 - $1.val.length, $1.val); //#6931
    for (var _X = 0; _X <= 5; _X += 1) { //#6938
        var _Z = $get($1.barcode, _X); //#6935
        $k[$j++] = _X; //#6936
        $k[$j++] = _Z; //#6936
        $k[$j++] = _Z; //#6936
        for (var _a = 0, _b = "AEIO".length; _a < _b; _a++) { //#6936
            if ($k[--$j] >= $get("AEIO", _a)) { //#6936
                var _e = $k[--$j]; //#6936
                $k[$j++] = $f(_e + 1); //#6936
            } //#6936
            var _f = $k[--$j]; //#6936
            $k[$j++] = _f; //#6936
            $k[$j++] = _f; //#6936
        } //#6936
        $j--; //#6936
        var _h = $k[--$j]; //#6937
        $put($1.barcode, $k[--$j], _h); //#6937
    } //#6937
    $puti($1.text, 1, $geti($1.text, 0, 9)); //#6941
    $put($1.text, 0, 65); //#6942
    $put($1.options, "dontdraw", true); //#6945
    $k[$j++] = 'args'; //#6946
    $k[$j++] = $1.barcode; //#6946
    $k[$j++] = $1.options; //#6946
    bwipp_code39(); //#6946
    var _q = $k[--$j]; //#6946
    var _r = $k[--$j]; //#6946
    $1[_r] = _q; //#6946
    $put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); //#6948
    $put($1.args, "textxalign", "center"); //#6949
    $put($1.args, "opt", $1.options); //#6950
    $k[$j++] = $1.args; //#6953
    if (!$1.dontdraw) { //#6953
        bwipp_renlinear(); //#6953
    } //#6953
}

function bwipp_pzn() {
    var $1 = Object.create(bwipp_pzn.$ctx || (bwipp_pzn.$ctx = {})); //#6984
    $1.dontdraw = false; //#6987
    $1.includetext = false; //#6988
    $1.textfont = "OCR-B"; //#6989
    $1.textsize = 10; //#6990
    $1.textyoffset = -8; //#6991
    $1.textxoffset = 0; //#6992
    $1.height = 1; //#6993
    $1.pzn8 = false; //#6994
    $k[$j++] = $1; //#6996
    bwipp_processoptions(); //#6996
    $1.options = $k[--$j]; //#6996
    $1.barcode = $k[--$j]; //#6997
    if ($1.pzn8) { //#7006
        if (($1.barcode.length != 7) && ($1.barcode.length != 8)) { //#7003
            $k[$j++] = 'bwipp.pzn8badLength#7002'; //#7002
            $k[$j++] = "PZN8 must be 7 or 8 digits"; //#7002
            bwipp_raiseerror(); //#7002
        } //#7002
    } else { //#7006
        if (($1.barcode.length != 6) && ($1.barcode.length != 7)) { //#7007
            $k[$j++] = 'bwipp.pzn7badLength#7006'; //#7006
            $k[$j++] = "PZN7 must be 6 or 7 digits"; //#7006
            bwipp_raiseerror(); //#7006
        } //#7006
    } //#7006
    $forall($1.barcode, function() { //#7013
        var _8 = $k[--$j]; //#7010
        if ((_8 < 48) || (_8 > 57)) { //#7012
            $k[$j++] = 'bwipp.pznBadCharacter#7011'; //#7011
            $k[$j++] = "PZN must contain only digits"; //#7011
            bwipp_raiseerror(); //#7011
        } //#7011
    }); //#7011
    var _A = $1.pzn8 ? 9 : 8; //#7016
    $1.msglen = _A; //#7016
    $1.checksum = 0; //#7017
    for (var _D = 0, _C = $1.msglen - 3; _D <= _C; _D += 1) { //#7022
        $1.i = _D; //#7019
        var _J = $1.pzn8 ? 1 : 2; //#7020
        $1.checksum = $f(($f($get($1.barcode, $1.i) - 48) * ($1.i + _J)) + $1.checksum); //#7021
    } //#7021
    $1.checksum = $1.checksum % 11; //#7023
    if ($1.checksum == 10) { //#7026
        $k[$j++] = 'bwipp.pznBadInputSequence#7025'; //#7025
        $k[$j++] = "Incorrect PZN input sequence provided"; //#7025
        bwipp_raiseerror(); //#7025
    } //#7025
    if ($1.barcode.length == ($1.msglen - 1)) { //#7031
        if ($get($1.barcode, $1.msglen - 2) != $f($1.checksum + 48)) { //#7030
            $k[$j++] = 'bwipp.pznBadCheckDigit#7029'; //#7029
            $k[$j++] = "Incorrect PZN check digit provided"; //#7029
            bwipp_raiseerror(); //#7029
        } //#7029
    } //#7029
    var _U = $s($1.msglen); //#7032
    $put(_U, 0, 45); //#7033
    $puti(_U, 1, $1.barcode); //#7034
    $put(_U, $1.msglen - 1, $f($1.checksum + 48)); //#7035
    $1.msg = _U; //#7036
    $put($1.options, "dontdraw", true); //#7039
    $k[$j++] = 'args'; //#7040
    $k[$j++] = $1.msg; //#7040
    $k[$j++] = $1.options; //#7040
    bwipp_code39(); //#7040
    var _b = $k[--$j]; //#7040
    $1[$k[--$j]] = _b; //#7040
    $1.text = $s($1.msglen + 5); //#7043
    $puti($1.text, 0, "PZN - "); //#7044
    $puti($1.text, 6, $geti($1.msg, 1, $1.msglen - 1)); //#7045
    var _r = $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])]); //#7047
    $put($1.args, "txt", _r); //#7047
    $put($1.args, "textxalign", "center"); //#7048
    $put($1.args, "opt", $1.options); //#7049
    $k[$j++] = $1.args; //#7052
    if (!$1.dontdraw) { //#7052
        bwipp_renlinear(); //#7052
    } //#7052
}

function bwipp_code93() {
    var $1 = Object.create(bwipp_code93.$ctx || (bwipp_code93.$ctx = {})); //#7085
    $1.dontdraw = false; //#7088
    $1.includecheck = false; //#7089
    $1.includetext = false; //#7090
    $1.textfont = "OCR-B"; //#7091
    $1.textsize = 10; //#7092
    $1.textyoffset = -8; //#7093
    $1.height = 1; //#7094
    $1.parse = false; //#7095
    $1.parsefnc = false; //#7096
    $k[$j++] = $1; //#7098
    bwipp_processoptions(); //#7098
    $1.options = $k[--$j]; //#7098
    $1.barcode = $k[--$j]; //#7099
    if (!bwipp_code93.$ctx._7129) { //#7129
        (function() { //#7129
            var $ctx = Object.create($1); //#7129
            $ctx.encs = $a(["131112", "111213", "111312", "111411", "121113", "121212", "121311", "111114", "131211", "141111", "211113", "211212", "211311", "221112", "221211", "231111", "112113", "112212", "112311", "122112", "132111", "111123", "111222", "111321", "121122", "131121", "212112", "212211", "211122", "211221", "221121", "222111", "112122", "112221", "122121", "123111", "121131", "311112", "311211", "321111", "112131", "113121", "211131", "121221", "312111", "311121", "122211", "111141", "1111411"]); //#7115
            $ctx.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#7118
            $ctx.charvals = new Map; //#7119
            for (var _3 = 0; _3 <= 42; _3 += 1) { //#7120
                $put($ctx.charvals, $get($ctx.barchars, _3), _3); //#7120
            } //#7120
            $ctx.sft1 = -1; //#7122
            $ctx.sft2 = -2; //#7122
            $ctx.sft3 = -3; //#7122
            $ctx.sft4 = -4; //#7122
            var _7 = $ctx.charvals; //#7124
            $put(_7, $ctx.sft1, 43); //#7124
            $put($ctx.charvals, $ctx.sft2, 44); //#7125
            $put($ctx.charvals, $ctx.sft3, 45); //#7126
            $put($ctx.charvals, $ctx.sft4, 46); //#7127
            for (var _F in $ctx) {
                $ctx.hasOwnProperty(_F) && (bwipp_code93.$ctx[_F] = $ctx[_F]);
            } //#7127
            bwipp_code93.$ctx._7129 = 1; //#7127
        })(); //#7127
    } //#7127
    var _M = new Map([
        ["parse", $1.parse],
        ["parsefnc", $1.parsefnc],
        ["SFT$", $1.sft1],
        ["SFT%", $1.sft2],
        ["SFT/", $1.sft3],
        ["SFT+", $1.sft4]
    ]); //#7138
    $1.fncvals = _M; //#7139
    $k[$j++] = 'msg'; //#7140
    $k[$j++] = $1.barcode; //#7140
    $k[$j++] = $1.fncvals; //#7140
    bwipp_parseinput(); //#7140
    var _P = $k[--$j]; //#7140
    $1[$k[--$j]] = _P; //#7140
    $1.msglen = $1.msg.length; //#7141
    $forall($1.msg, function() { //#7148
        var _V = $get($1.charvals, $k[--$j]) !== undefined; //#7145
        if (!_V) { //#7147
            $k[$j++] = 'bwipp.code93BadCharacter#7146'; //#7146
            $k[$j++] = "Code 93 must only contain digits, capital letters, spaces, the symbols -.$/+ and shift non-data characters"; //#7146
            bwipp_raiseerror(); //#7146
        } //#7146
    }); //#7146
    if ($1.includecheck) { //#7153
        $1.sbs = $s(($1.msglen * 6) + 25); //#7151
    } else { //#7153
        $1.sbs = $s(($1.msglen * 6) + 13); //#7153
    } //#7153
    $1.txt = $a($1.msglen); //#7155
    $puti($1.sbs, 0, $get($1.encs, 47)); //#7158
    $1.checksum1 = 0; //#7160
    $1.checksum2 = 0; //#7160
    for (var _i = 0, _h = $1.msglen - 1; _i <= _h; _i += 1) { //#7169
        $1.i = _i; //#7162
        $1.indx = $get($1.charvals, $get($1.msg, $1.i)); //#7163
        $puti($1.sbs, ($1.i * 6) + 6, $get($1.encs, $1.indx)); //#7164
        var _v = $get($1.msg, $1.i); //#7165
        $k[$j++] = 'char'; //#7165
        $k[$j++] = _v; //#7165
        if (_v < 0) { //#7165
            $j--; //#7165
            $k[$j++] = " "; //#7165
        } else { //#7165
            var _w = $s(1); //#7165
            $put(_w, 0, $k[--$j]); //#7165
            $k[$j++] = _w; //#7165
        } //#7165
        var _y = $k[--$j]; //#7165
        $1[$k[--$j]] = _y; //#7165
        $put($1.txt, $1.i, $a([$1.char, ($1.i * 9) + 9, $1.textyoffset, $1.textfont, $1.textsize])); //#7166
        $1.checksum1 = $f($1.checksum1 + ((((($1.msglen - $1.i) - 1) % 20) + 1) * $1.indx)); //#7167
        $1.checksum2 = $f($1.checksum2 + (((($1.msglen - $1.i) % 15) + 1) * $1.indx)); //#7168
    } //#7168
    if ($1.includecheck) { //#7181
        $1.checksum1 = $1.checksum1 % 47; //#7173
        $1.checksum2 = $f($1.checksum2 + $1.checksum1) % 47; //#7174
        $puti($1.sbs, ($1.msglen * 6) + 6, $get($1.encs, $1.checksum1)); //#7175
        $puti($1.sbs, ($1.msglen * 6) + 12, $get($1.encs, $1.checksum2)); //#7176
        $puti($1.sbs, ($1.msglen * 6) + 18, $get($1.encs, 48)); //#7178
    } else { //#7181
        $puti($1.sbs, ($1.msglen * 6) + 6, $get($1.encs, 48)); //#7181
    } //#7181
    $k[$j++] = Infinity; //#7193
    $k[$j++] = Infinity; //#7187
    var _1c = $1.sbs; //#7187
    for (var _1d = 0, _1e = _1c.length; _1d < _1e; _1d++) { //#7187
        $k[$j++] = $get(_1c, _1d) - 48; //#7187
    } //#7187
    var _1g = $a(); //#7187
    $k[$j++] = Infinity; //#7188
    for (var _1i = 0, _1j = ~~(($1.sbs.length + 1) / 2); _1i < _1j; _1i++) { //#7188
        $k[$j++] = $1.height; //#7188
    } //#7188
    var _1l = $a(); //#7188
    $k[$j++] = Infinity; //#7189
    for (var _1n = 0, _1o = ~~(($1.sbs.length + 1) / 2); _1n < _1o; _1n++) { //#7189
        $k[$j++] = 0; //#7189
    } //#7189
    var _1p = $a(); //#7189
    $k[$j++] = 'ren'; //#7192
    $k[$j++] = bwipp_renlinear; //#7192
    $k[$j++] = 'sbs'; //#7192
    $k[$j++] = _1g; //#7192
    $k[$j++] = 'bhs'; //#7192
    $k[$j++] = _1l; //#7192
    $k[$j++] = 'bbs'; //#7192
    $k[$j++] = _1p; //#7192
    if ($1.includetext) { //#7192
        $k[$j++] = 'txt'; //#7191
        $k[$j++] = $1.txt; //#7191
    } //#7191
    $k[$j++] = 'opt'; //#7193
    $k[$j++] = $1.options; //#7193
    var _1t = $d(); //#7193
    $k[$j++] = _1t; //#7196
    if (!$1.dontdraw) { //#7196
        bwipp_renlinear(); //#7196
    } //#7196
}

function bwipp_code93ext() {
    var $1 = Object.create(bwipp_code93ext.$ctx || (bwipp_code93ext.$ctx = {})); //#7232
    $1.dontdraw = false; //#7235
    $1.includetext = false; //#7236
    $1.parse = false; //#7237
    $k[$j++] = $1; //#7239
    bwipp_processoptions(); //#7239
    $1.options = $k[--$j]; //#7239
    $1.barcode = $k[--$j]; //#7240
    var _3 = new Map([
        ["parse", $1.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#7248
    $1.fncvals = _3; //#7249
    $k[$j++] = 'barcode'; //#7250
    $k[$j++] = $1.barcode; //#7250
    $k[$j++] = $1.fncvals; //#7250
    bwipp_parseinput(); //#7250
    var _6 = $k[--$j]; //#7250
    var _7 = $k[--$j]; //#7250
    $1[_7] = _6; //#7250
    $1.barlen = $1.barcode.length; //#7251
    delete $1.options["parse"]; //#7252
    if (!bwipp_code93ext.$ctx._7274) { //#7274
        (function() { //#7274
            var $ctx = Object.create($1); //#7274
            $ctx.extencs = $a
            for (var _B in $ctx) {
                $ctx.hasOwnProperty(_B) && (bwipp_code93ext.$ctx[_B] = $ctx[_B]);
            } //#7273
            bwipp_code93ext.$ctx._7274 = 1; //#7273
        })(); //#7273
    } //#7273
    $1.newcode = $s($1.barlen * 6); //#7276
    $1.newtext = $s($1.barlen * 6); //#7277
    $1.j = 0; //#7278
    $1.k = 0; //#7278
    for (var _I = 0, _H = $1.barlen - 1; _I <= _H; _I += 1) { //#7288
        $1.i = _I; //#7280
        $1.extchar = $get($1.extencs, $get($1.barcode, $1.i)); //#7281
        $1.extlen = $1.extchar.length; //#7282
        $puti($1.newcode, $1.j, $1.extchar); //#7283
        $put($1.newtext, $1.k, $get($1.barcode, $1.i)); //#7284
        if ($1.extlen != 1) { //#7285
            $puti($1.newtext, $1.k + 1, " "); //#7285
        } //#7285
        $1.j = $1.j + $1.extlen; //#7286
        var _e = ($1.extlen == 1) ? 1 : 2; //#7287
        $1.k = $1.k + _e; //#7287
    } //#7287
    $1.newcode = $geti($1.newcode, 0, $1.j); //#7289
    $1.newtext = $geti($1.newtext, 0, $1.k); //#7290
    $put($1.options, "dontdraw", true); //#7293
    $put($1.options, "parsefnc", true); //#7294
    $k[$j++] = 'args'; //#7295
    $k[$j++] = $1.newcode; //#7295
    $k[$j++] = $1.options; //#7295
    bwipp_code93(); //#7295
    var _p = $k[--$j]; //#7295
    $1[$k[--$j]] = _p; //#7295
    if ($1.includetext) { //#7307
        $1.txt = $get($1.args, "txt"); //#7299
        for (var _w = 0, _v = $1.newtext.length - 1; _w <= _v; _w += 1) { //#7305
            $1.i = _w; //#7301
            $1.txtentry = $get($1.txt, $1.i); //#7302
            $put($1.txtentry, 0, $geti($1.newtext, $1.i, 1)); //#7303
            $put($1.txt, $1.i, $1.txtentry); //#7304
        } //#7304
        $put($1.args, "txt", $1.txt); //#7306
    } //#7306
    $put($1.args, "opt", $1.options); //#7308
    $k[$j++] = $1.args; //#7311
    if (!$1.dontdraw) { //#7311
        bwipp_renlinear(); //#7311
    } //#7311
}

function bwipp_interleaved2of5() {
    var $1 = Object.create(bwipp_interleaved2of5.$ctx || (bwipp_interleaved2of5.$ctx = {})); //#7345
    $1.dontdraw = false; //#7348
    $1.includecheck = false; //#7349
    $1.includetext = false; //#7350
    $1.includecheckintext = false; //#7351
    $1.textfont = "OCR-B"; //#7352
    $1.textsize = 10; //#7353
    $1.textyoffset = -8; //#7354
    $1.height = 1; //#7355
    $k[$j++] = $1; //#7357
    bwipp_processoptions(); //#7357
    $1.options = $k[--$j]; //#7357
    $1.barcode = $k[--$j]; //#7358
    $forall($1.barcode, function() { //#7367
        var _3 = $k[--$j]; //#7364
        if ((_3 < 48) || (_3 > 57)) { //#7366
            $k[$j++] = 'bwipp.interleaved2of5badCharacter#7365'; //#7365
            $k[$j++] = "Interleaved 2 of 5 must contain only digits"; //#7365
            bwipp_raiseerror(); //#7365
        } //#7365
    }); //#7365
    $1.barlen = $1.barcode.length; //#7369
    if (((($1.barlen % 2) == 0) && $1.includecheck) || ((($1.barlen % 2) != 0) && (!$1.includecheck))) { //#7380
        $1.pad = $s($1.barlen + 1); //#7375
        $put($1.pad, 0, 48); //#7376
        $puti($1.pad, 1, $1.barcode); //#7377
        $1.barcode = $1.pad; //#7378
        $1.barlen = $1.barlen + 1; //#7379
    } //#7379
    if ($1.includecheck) { //#7399
        $1.checksum = 0; //#7384
        for (var _J = 0, _I = $1.barlen - 1; _J <= _I; _J += 1) { //#7392
            $1.i = _J; //#7386
            if (($1.i % 2) == 0) { //#7390
                $1.checksum = $1.checksum + (($get($1.barcode, $1.i) - 48) * 3); //#7388
            } else { //#7390
                $1.checksum = $1.checksum + ($get($1.barcode, $1.i) - 48); //#7390
            } //#7390
        } //#7390
        $1.checksum = (10 - ($1.checksum % 10)) % 10; //#7393
        $1.pad = $s($1.barlen + 1); //#7394
        $puti($1.pad, 0, $1.barcode); //#7395
        $put($1.pad, $1.barlen, $1.checksum + 48); //#7396
        $1.barcode = $1.pad; //#7397
        $1.barlen = $1.barlen + 1; //#7398
    } //#7398
    if (!bwipp_interleaved2of5.$ctx._7411) { //#7411
        (function() { //#7411
            var $ctx = Object.create($1); //#7411
            $ctx.encs = $a(["11221", "21112", "12112", "22111", "11212", "21211", "12211", "11122", "21121", "12121", "1111", "2111"]); //#7407
            $ctx.barchars = "0123456789"; //#7410
            for (var _e in $ctx) {
                $ctx.hasOwnProperty(_e) && (bwipp_interleaved2of5.$ctx[_e] = $ctx[_e]);
            } //#7410
            bwipp_interleaved2of5.$ctx._7411 = 1; //#7410
        })(); //#7410
    } //#7410
    $1.sbs = $s(($1.barlen * 5) + 8); //#7413
    $1.txt = $a($1.barlen); //#7414
    $puti($1.sbs, 0, $get($1.encs, 10)); //#7417
    for (var _o = 0, _n = $1.barlen - 1; _o <= _n; _o += 2) { //#7451
        $1.i = _o; //#7420
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#7422
        $j--; //#7423
        $1.indx = $k[--$j].length; //#7424
        $j -= 2; //#7425
        $1.enca = $get($1.encs, $1.indx); //#7426
        $search($1.barchars, $geti($1.barcode, $1.i + 1, 1)); //#7428
        $j--; //#7429
        $1.indx = $k[--$j].length; //#7430
        $j -= 2; //#7431
        $1.encb = $get($1.encs, $1.indx); //#7432
        $1.intl = $s($1.enca.length * 2); //#7435
        for (var _19 = 0, _18 = $1.enca.length - 1; _19 <= _18; _19 += 1) { //#7442
            $1.j = _19; //#7437
            $1.achar = $get($1.enca, $1.j); //#7438
            $1.bchar = $get($1.encb, $1.j); //#7439
            $put($1.intl, $1.j * 2, $1.achar); //#7440
            $put($1.intl, ($1.j * 2) + 1, $1.bchar); //#7441
        } //#7441
        $puti($1.sbs, ($1.i * 5) + 4, $1.intl); //#7444
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 9) + 4, $1.textyoffset, $1.textfont, $1.textsize])); //#7445
        if (($1.includecheck && (!$1.includecheckintext)) && (($1.barlen - 2) == $1.i)) { //#7449
            $put($1.txt, $1.i + 1, $a([" ", (($1.i + 1) * 9) + 4, $1.textyoffset, $1.textfont, $1.textsize])); //#7447
        } else { //#7449
            $put($1.txt, $1.i + 1, $a([$geti($1.barcode, $1.i + 1, 1), (($1.i + 1) * 9) + 4, $1.textyoffset, $1.textfont, $1.textsize])); //#7449
        } //#7449
    } //#7449
    $puti($1.sbs, ($1.barlen * 5) + 4, $get($1.encs, 11)); //#7454
    $k[$j++] = Infinity; //#7467
    $k[$j++] = Infinity; //#7459
    var _1y = $1.sbs; //#7459
    for (var _1z = 0, _20 = _1y.length; _1z < _20; _1z++) { //#7459
        $k[$j++] = $get(_1y, _1z) - 48; //#7459
    } //#7459
    var _22 = $a(); //#7459
    $k[$j++] = Infinity; //#7460
    for (var _24 = 0, _25 = ~~(($1.sbs.length + 1) / 2); _24 < _25; _24++) { //#7460
        $k[$j++] = $1.height; //#7460
    } //#7460
    var _27 = $a(); //#7460
    $k[$j++] = Infinity; //#7461
    for (var _29 = 0, _2A = ~~(($1.sbs.length + 1) / 2); _29 < _2A; _29++) { //#7461
        $k[$j++] = 0; //#7461
    } //#7461
    var _2B = $a(); //#7461
    $k[$j++] = 'ren'; //#7464
    $k[$j++] = bwipp_renlinear; //#7464
    $k[$j++] = 'sbs'; //#7464
    $k[$j++] = _22; //#7464
    $k[$j++] = 'bhs'; //#7464
    $k[$j++] = _27; //#7464
    $k[$j++] = 'bbs'; //#7464
    $k[$j++] = _2B; //#7464
    if ($1.includetext) { //#7464
        $k[$j++] = 'txt'; //#7463
        $k[$j++] = $1.txt; //#7463
    } //#7463
    $k[$j++] = 'barratio'; //#7467
    $k[$j++] = 2; //#7467
    $k[$j++] = 'spaceratio'; //#7467
    $k[$j++] = 2; //#7467
    $k[$j++] = 'opt'; //#7467
    $k[$j++] = $1.options; //#7467
    var _2F = $d(); //#7467
    $k[$j++] = _2F; //#7470
    if (!$1.dontdraw) { //#7470
        bwipp_renlinear(); //#7470
    } //#7470
}

function bwipp_itf14() {
    var $1 = Object.create(bwipp_itf14.$ctx || (bwipp_itf14.$ctx = {})); //#7503
    $1.dontdraw = false; //#7506
    $1.includetext = false; //#7507
    $1.includecheckintext = true; //#7508
    $1.textfont = "OCR-B"; //#7509
    $1.textsize = 10; //#7510
    $1.textxoffset = 0; //#7511
    $1.textyoffset = 3; //#7512
    $1.height = 0.5; //#7513
    $1.showborder = true; //#7514
    $1.borderwidth = 4; //#7515
    $1.borderleft = 15; //#7516
    $1.borderright = 15; //#7517
    $k[$j++] = $1; //#7519
    bwipp_processoptions(); //#7519
    $1.options = $k[--$j]; //#7519
    $1.barcode = $k[--$j]; //#7520
    $1.text = $1.barcode; //#7523
    var _3 = $1.barcode; //#7524
    $k[$j++] = $s(_3.length); //#7525
    $k[$j++] = 0; //#7525
    $forall(_3, function() { //#7525
        var _5 = $k[--$j]; //#7525
        $k[$j++] = _5; //#7525
        if (_5 != 32) { //#7525
            var _6 = $k[--$j]; //#7525
            var _7 = $k[--$j]; //#7525
            var _8 = $k[--$j]; //#7525
            $put(_8, _7, _6); //#7525
            $k[$j++] = _8; //#7525
            $k[$j++] = $f(_7 + 1); //#7525
        } else { //#7525
            $j--; //#7525
        } //#7525
    }); //#7525
    var _9 = $k[--$j]; //#7526
    $1.barcode = $geti($k[--$j], 0, _9); //#7526
    $1.hasspace = $1.text.length != $1.barcode.length; //#7527
    if (($1.barcode.length != 13) && ($1.barcode.length != 14)) { //#7532
        $k[$j++] = 'bwipp.itf14badLength#7531'; //#7531
        $k[$j++] = "ITF-14 must be 13 or 14 digits"; //#7531
        bwipp_raiseerror(); //#7531
    } //#7531
    var _G = $1.barcode; //#7533
    for (var _H = 0, _I = _G.length; _H < _I; _H++) { //#7537
        var _J = $get(_G, _H); //#7537
        if ((_J < 48) || (_J > 57)) { //#7536
            $k[$j++] = 'bwipp.itf14badCharacter#7535'; //#7535
            $k[$j++] = "ITF-14 must contain only digits"; //#7535
            bwipp_raiseerror(); //#7535
        } //#7535
    } //#7535
    $1.checksum = 0; //#7540
    for (var _K = 0; _K <= 12; _K += 1) { //#7544
        $1.i = _K; //#7542
        $k[$j++] = 'checksum'; //#7543
        $k[$j++] = $1.checksum; //#7543
        $k[$j++] = $f($get($1.barcode, $1.i) - 48); //#7543
        if (($1.i % 2) == 0) { //#7543
            var _Q = $k[--$j]; //#7543
            $k[$j++] = _Q * 3; //#7543
        } //#7543
        var _R = $k[--$j]; //#7543
        var _S = $k[--$j]; //#7543
        $1[$k[--$j]] = $f(_S + _R); //#7543
    } //#7543
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#7545
    if ($1.barcode.length == 14) { //#7559
        if ($get($1.barcode, 13) != ($1.checksum + 48)) { //#7549
            $k[$j++] = 'bwipp.itf14badCheckDigit#7548'; //#7548
            $k[$j++] = "Incorrect ITF-14 check digit provided"; //#7548
            bwipp_raiseerror(); //#7548
        } //#7548
    } else { //#7559
        var _Z = $s(14); //#7551
        $puti(_Z, 0, $1.barcode); //#7552
        $put(_Z, 13, $1.checksum + 48); //#7553
        $1.barcode = _Z; //#7554
        var _e = $1.hasspace ? 2 : 1; //#7555
        var _f = $s($1.text.length + _e); //#7555
        $puti(_f, _f.length - 2, " "); //#7556
        $put(_f, _f.length - 1, $1.checksum + 48); //#7557
        $puti(_f, 0, $1.text); //#7558
        $1.text = _f; //#7559
    } //#7559
    var _i = $1.options; //#7563
    $put(_i, "dontdraw", true); //#7563
    $put($1.options, "showborder", $1.showborder); //#7564
    $put($1.options, "borderwidth", $1.borderwidth); //#7565
    $put($1.options, "borderleft", $1.borderleft); //#7566
    $put($1.options, "borderright", $1.borderright); //#7567
    var _r = $1.options; //#7568
    $put(_r, "height", $1.height); //#7568
    $put($1.options, "textyoffset", $1.textyoffset); //#7569
    $k[$j++] = 'args'; //#7570
    $k[$j++] = $1.barcode; //#7570
    $k[$j++] = $1.options; //#7570
    bwipp_interleaved2of5(); //#7570
    var _x = $k[--$j]; //#7570
    $1[$k[--$j]] = _x; //#7570
    $put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); //#7572
    $put($1.args, "textxalign", "center"); //#7573
    $put($1.args, "opt", $1.options); //#7574
    $k[$j++] = $1.args; //#7577
    if (!$1.dontdraw) { //#7577
        bwipp_renlinear(); //#7577
    } //#7577
}

function bwipp_identcode() {
    var $1 = Object.create(bwipp_identcode.$ctx || (bwipp_identcode.$ctx = {})); //#7608
    $1.dontdraw = false; //#7611
    $1.includetext = false; //#7612
    $1.textfont = "OCR-B"; //#7613
    $1.textsize = 10; //#7614
    $1.textxoffset = 0; //#7615
    $1.textyoffset = -8; //#7616
    $1.height = 1; //#7617
    $k[$j++] = $1; //#7619
    bwipp_processoptions(); //#7619
    $1.options = $k[--$j]; //#7619
    $1.barcode = $k[--$j]; //#7620
    if (($1.barcode.length != 11) && ($1.barcode.length != 12)) { //#7625
        $k[$j++] = 'bwipp.identcodeBadLength#7624'; //#7624
        $k[$j++] = "Deutsche Post Identcode must be 11 or 12 digits"; //#7624
        bwipp_raiseerror(); //#7624
    } //#7624
    $forall($1.barcode, function() { //#7630
        var _5 = $k[--$j]; //#7627
        if ((_5 < 48) || (_5 > 57)) { //#7629
            $k[$j++] = 'bwipp.identcodeBadCharacter#7628'; //#7628
            $k[$j++] = "Deutsche Post Identcode must contain only digits"; //#7628
            bwipp_raiseerror(); //#7628
        } //#7628
    }); //#7628
    $1.checksum = 0; //#7633
    for (var _6 = 0; _6 <= 10; _6 += 1) { //#7637
        $1.i = _6; //#7635
        $k[$j++] = 'checksum'; //#7636
        $k[$j++] = $1.checksum; //#7636
        $k[$j++] = $f($get($1.barcode, $1.i) - 48); //#7636
        if (($1.i % 2) == 0) { //#7636
            var _C = $k[--$j]; //#7636
            $k[$j++] = _C * 4; //#7636
        } else { //#7636
            var _D = $k[--$j]; //#7636
            $k[$j++] = _D * 9; //#7636
        } //#7636
        var _E = $k[--$j]; //#7636
        var _F = $k[--$j]; //#7636
        $1[$k[--$j]] = $f(_F + _E); //#7636
    } //#7636
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#7638
    if ($1.barcode.length == 12) { //#7643
        if ($get($1.barcode, 11) != ($1.checksum + 48)) { //#7642
            $k[$j++] = 'bwipp.identcodeBadCheckDigit#7641'; //#7641
            $k[$j++] = "Incorrect Deutsche Post Identcode check digit provided"; //#7641
            bwipp_raiseerror(); //#7641
        } //#7641
    } //#7641
    var _M = $s(12); //#7644
    $puti(_M, 0, $1.barcode); //#7645
    $put(_M, 11, $1.checksum + 48); //#7646
    $1.barcode = _M; //#7647
    $1.text = $strcpy($s(16), "  .       .     "); //#7650
    $puti($1.text, 0, $geti($1.barcode, 0, 2)); //#7651
    $puti($1.text, 3, $geti($1.barcode, 2, 3)); //#7652
    $puti($1.text, 7, $geti($1.barcode, 5, 3)); //#7653
    $puti($1.text, 11, $geti($1.barcode, 8, 3)); //#7654
    $puti($1.text, 15, $geti($1.barcode, 11, 1)); //#7655
    $put($1.options, "dontdraw", true); //#7658
    $put($1.options, "includecheck", false); //#7659
    var _i = $1.barcode; //#7660
    $k[$j++] = 'args'; //#7660
    $k[$j++] = _i; //#7660
    $k[$j++] = $1.options; //#7660
    bwipp_interleaved2of5(); //#7660
    var _k = $k[--$j]; //#7660
    $1[$k[--$j]] = _k; //#7660
    var _r = $1.textsize; //#7662
    $put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, _r])])); //#7662
    $put($1.args, "textxalign", "center"); //#7663
    $put($1.args, "opt", $1.options); //#7664
    $k[$j++] = $1.args; //#7667
    if (!$1.dontdraw) { //#7667
        bwipp_renlinear(); //#7667
    } //#7667
}

function bwipp_leitcode() {
    var $1 = Object.create(bwipp_leitcode.$ctx || (bwipp_leitcode.$ctx = {})); //#7698
    $1.dontdraw = false; //#7701
    $1.includetext = false; //#7702
    $1.textfont = "OCR-B"; //#7703
    $1.textsize = 10; //#7704
    $1.textxoffset = 0; //#7705
    $1.textyoffset = -8; //#7706
    $1.height = 1; //#7707
    $k[$j++] = $1; //#7709
    bwipp_processoptions(); //#7709
    $1.options = $k[--$j]; //#7709
    $1.barcode = $k[--$j]; //#7710
    if (($1.barcode.length != 13) && ($1.barcode.length != 14)) { //#7715
        $k[$j++] = 'bwipp.leitcodeBadLength#7714'; //#7714
        $k[$j++] = "Deutsche Post Leitcode must be 13 or 14 digits"; //#7714
        bwipp_raiseerror(); //#7714
    } //#7714
    $forall($1.barcode, function() { //#7720
        var _5 = $k[--$j]; //#7717
        if ((_5 < 48) || (_5 > 57)) { //#7719
            $k[$j++] = 'bwipp.leitcodeBadCharacter#7718'; //#7718
            $k[$j++] = "Deutsche Post Leitcode must contain only digits"; //#7718
            bwipp_raiseerror(); //#7718
        } //#7718
    }); //#7718
    $1.checksum = 0; //#7723
    for (var _6 = 0; _6 <= 12; _6 += 1) { //#7727
        $1.i = _6; //#7725
        $k[$j++] = 'checksum'; //#7726
        $k[$j++] = $1.checksum; //#7726
        $k[$j++] = $f($get($1.barcode, $1.i) - 48); //#7726
        if (($1.i % 2) == 0) { //#7726
            var _C = $k[--$j]; //#7726
            $k[$j++] = _C * 4; //#7726
        } else { //#7726
            var _D = $k[--$j]; //#7726
            $k[$j++] = _D * 9; //#7726
        } //#7726
        var _E = $k[--$j]; //#7726
        var _F = $k[--$j]; //#7726
        $1[$k[--$j]] = $f(_F + _E); //#7726
    } //#7726
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#7728
    if ($1.barcode.length == 14) { //#7733
        if ($get($1.barcode, 13) != ($1.checksum + 48)) { //#7732
            $k[$j++] = 'bwipp.leitcodeBadCheckDigit#7731'; //#7731
            $k[$j++] = "Incorrect Deutsche Post Leitcode check digit provided"; //#7731
            bwipp_raiseerror(); //#7731
        } //#7731
    } //#7731
    var _M = $s(14); //#7734
    $puti(_M, 0, $1.barcode); //#7735
    $put(_M, 13, $1.checksum + 48); //#7736
    $1.barcode = _M; //#7737
    $1.text = $strcpy($s(18), "     .   .   .    "); //#7740
    $puti($1.text, 0, $geti($1.barcode, 0, 5)); //#7741
    $puti($1.text, 6, $geti($1.barcode, 5, 3)); //#7742
    $puti($1.text, 10, $geti($1.barcode, 8, 3)); //#7743
    $puti($1.text, 14, $geti($1.barcode, 11, 2)); //#7744
    $puti($1.text, 17, $geti($1.barcode, 13, 1)); //#7745
    $put($1.options, "dontdraw", true); //#7748
    $put($1.options, "includecheck", false); //#7749
    var _i = $1.barcode; //#7750
    $k[$j++] = 'args'; //#7750
    $k[$j++] = _i; //#7750
    $k[$j++] = $1.options; //#7750
    bwipp_interleaved2of5(); //#7750
    var _k = $k[--$j]; //#7750
    $1[$k[--$j]] = _k; //#7750
    var _r = $1.textsize; //#7752
    $put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, _r])])); //#7752
    $put($1.args, "textxalign", "center"); //#7753
    $put($1.args, "opt", $1.options); //#7754
    $k[$j++] = $1.args; //#7757
    if (!$1.dontdraw) { //#7757
        bwipp_renlinear(); //#7757
    } //#7757
}

function bwipp_databaromni() {
    var $1 = Object.create(bwipp_databaromni.$ctx || (bwipp_databaromni.$ctx = {})); //#7790
    $1.dontdraw = false; //#7793
    $1.height = 33 / 72; //#7794
    $1.linkage = false; //#7795
    $1.format = "omni"; //#7796
    $1.barxmult = 33; //#7797
    $k[$j++] = $1; //#7799
    bwipp_processoptions(); //#7799
    $1.options = $k[--$j]; //#7799
    $1.barcode = $k[--$j]; //#7800
    if ($eq($1.format, "truncated")) { //#7802
        $1.height = 13 / 72; //#7802
    } //#7802
    if ($ne($geti($1.barcode, 0, 4), "(01)")) { //#7809
        $k[$j++] = 'bwipp.databaromniBadAI#7808'; //#7808
        $k[$j++] = "GS1 DataBar Omnidirectional must begin with (01) application identifier"; //#7808
        bwipp_raiseerror(); //#7808
    } //#7808
    if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //#7812
        $k[$j++] = 'bwipp.databaromniBadLength#7811'; //#7811
        $k[$j++] = "GS1 DataBar Omnidirectional must be 13 or 14 digits"; //#7811
        bwipp_raiseerror(); //#7811
    } //#7811
    var _9 = $geti($1.barcode, 4, $1.barcode.length - 4); //#7813
    for (var _A = 0, _B = _9.length; _A < _B; _A++) { //#7817
        var _C = $get(_9, _A); //#7817
        if ((_C < 48) || (_C > 57)) { //#7816
            $k[$j++] = 'bwipp.databaromniBadCharacter#7815'; //#7815
            $k[$j++] = "GS1 DataBar Omnidirectional must contain only digits"; //#7815
            bwipp_raiseerror(); //#7815
        } //#7815
    } //#7815
    $1.checksum = 0; //#7820
    for (var _D = 0; _D <= 12; _D += 1) { //#7824
        $1.i = _D; //#7822
        $k[$j++] = 'checksum'; //#7823
        $k[$j++] = $1.checksum; //#7823
        $k[$j++] = $f($get($1.barcode, $1.i + 4) - 48); //#7823
        if (($1.i % 2) == 0) { //#7823
            var _J = $k[--$j]; //#7823
            $k[$j++] = _J * 3; //#7823
        } //#7823
        var _K = $k[--$j]; //#7823
        var _L = $k[--$j]; //#7823
        $1[$k[--$j]] = $f(_L + _K); //#7823
    } //#7823
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#7825
    if ($1.barcode.length == 18) { //#7830
        if ($get($1.barcode, 17) != ($1.checksum + 48)) { //#7829
            $k[$j++] = 'bwipp.databaromniBadCheckDigit#7828'; //#7828
            $k[$j++] = "Incorrect GS1 DataBar Omnidirectional check digit provided"; //#7828
            bwipp_raiseerror(); //#7828
        } //#7828
    } //#7828
    var _S = $s(18); //#7831
    $puti(_S, 0, $1.barcode); //#7832
    $put(_S, 17, $1.checksum + 48); //#7833
    $1.barcode = _S; //#7834
    $1.txt = $a($1.barcode.length); //#7837
    for (var _Z = 0, _Y = $1.barcode.length - 1; _Z <= _Y; _Z += 1) { //#7841
        $1.i = _Z; //#7839
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); //#7840
    } //#7840
    $1.ncr = function() {
        var _g = $k[--$j]; //#7844
        var _h = $k[--$j]; //#7844
        var _i = $f(_h - _g); //#7844
        if (_g < $f(_h - _g)) { //#7844
            var _ = _i; //#7844
            _i = _g; //#7844
            _g = _; //#7844
        } //#7844
        $k[$j++] = _i; //#7851
        $k[$j++] = 1; //#7851
        $k[$j++] = 1; //#7851
        for (var _k = _h, _j = $f(_g + 1); _k >= _j; _k -= 1) { //#7851
            var _l = $k[--$j]; //#7847
            var _m = $k[--$j]; //#7848
            var _n = $k[--$j]; //#7848
            $k[$j++] = _n; //#7850
            $k[$j++] = _m; //#7850
            $k[$j++] = _l * _k; //#7850
            if ($le(_m, _n)) { //#7850
                var _o = $k[--$j]; //#7849
                var _p = $k[--$j]; //#7849
                $k[$j++] = $f(_p + 1); //#7849
                $k[$j++] = ~~(_o / _p); //#7849
            } //#7849
        } //#7849
        for (;;) { //#7855
            var _q = $k[--$j]; //#7853
            var _r = $k[--$j]; //#7853
            var _s = $k[--$j]; //#7853
            $k[$j++] = _s; //#7853
            $k[$j++] = _r; //#7853
            $k[$j++] = _q; //#7853
            if ($gt(_r, _s)) { //#7853
                break; //#7853
            } //#7853
            var _t = $k[--$j]; //#7854
            var _u = $k[--$j]; //#7854
            $k[$j++] = $f(_u + 1); //#7854
            $k[$j++] = ~~(_t / _u); //#7854
        } //#7854
        var _v = $k[--$j]; //#7856
        var _w = $k[--$j]; //#7856
        $k[$j++] = _v; //#7856
        $k[$j++] = _w; //#7856
        $j--; //#7856
        var _x = $k[--$j]; //#7856
        var _y = $k[--$j]; //#7856
        $k[$j++] = _x; //#7856
        $k[$j++] = _y; //#7856
        $j--; //#7856
    }; //#7856
    $1.getRSSwidths = function() {
        $1.oe = $k[--$j]; //#7860
        $1.el = $k[--$j]; //#7861
        $1.mw = $k[--$j]; //#7862
        $1.nm = $k[--$j]; //#7863
        $1.val = $k[--$j]; //#7864
        $1.out = $a($1.el); //#7865
        $1.mask = 0; //#7866
        for (var _18 = 0, _17 = $f($1.el - 2); _18 <= _17; _18 += 1) { //#7893
            $1.bar = _18; //#7868
            $1.ew = 1; //#7869
            var _1A = $1.bar; //#7870
            $1.mask = $1.mask | ((_1A < 0 ? 1 >>> -_1A : 1 << _1A)); //#7870
            for (;;) { //#7889
                $k[$j++] = 'sval'; //#7871
                $k[$j++] = $f($f($1.nm - $1.ew) - 1); //#7871
                $k[$j++] = $f($f($1.el - $1.bar) - 2); //#7871
                $1.ncr(); //#7871
                var _1F = $k[--$j]; //#7871
                $1[$k[--$j]] = _1F; //#7871
                if (($1.oe && ($1.mask == 0)) && (($f(($f($f($1.nm - $1.ew) - ($1.el * 2))) + ($1.bar * 2))) >= -2)) { //#7874
                    $k[$j++] = 'sval'; //#7873
                    $k[$j++] = $1.sval; //#7873
                    $k[$j++] = $f(($f($f($1.nm - $1.ew) - $1.el)) + $1.bar); //#7873
                    $k[$j++] = $f($f($1.el - $1.bar) - 2); //#7873
                    $1.ncr(); //#7873
                    var _1U = $k[--$j]; //#7873
                    var _1V = $k[--$j]; //#7873
                    $1[$k[--$j]] = $f(_1V - _1U); //#7873
                } //#7873
                if ($f($1.el - $1.bar) > 2) { //#7883
                    $1.lval = 0; //#7876
                    for (var _1f = $f(($f(($f($f($1.nm - $1.ew) - $1.el)) + $1.bar)) + 2), _1e = $f($1.mw + 1); _1f >= _1e; _1f -= 1) { //#7880
                        $k[$j++] = $f(($f($f($1.nm - _1f) - $1.ew)) - 1); //#7878
                        $k[$j++] = $f($f($1.el - $1.bar) - 3); //#7878
                        $1.ncr(); //#7878
                        $1.lval = $f($k[--$j] + $1.lval); //#7879
                    } //#7879
                    $1.sval = $f($1.sval - ($1.lval * ($f($f($1.el - $1.bar) - 1)))); //#7881
                } else { //#7883
                    if ($f($1.nm - $1.ew) > $1.mw) { //#7883
                        $1.sval = $f($1.sval - 1); //#7883
                    } //#7883
                } //#7883
                $1.val = $f($1.val - $1.sval); //#7885
                if ($1.val < 0) { //#7886
                    break; //#7886
                } //#7886
                $1.ew = $1.ew + 1; //#7887
                var _1z = $1.bar; //#7888
                $1.mask = $1.mask & (~((_1z < 0 ? 1 >>> -_1z : 1 << _1z))); //#7888
            } //#7888
            $1.val = $f($1.val + $1.sval); //#7890
            $1.nm = $f($1.nm - $1.ew); //#7891
            $put($1.out, $1.bar, $1.ew); //#7892
        } //#7892
        $put($1.out, $f($1.el - 1), $1.nm); //#7894
        $k[$j++] = $1.out; //#7895
    }; //#7895
    $k[$j++] = Infinity; //#7900
    var _2C = $1.linkage ? 1 : 0; //#7899
    var _2E = $geti($1.barcode, 4, 13); //#7900
    $k[$j++] = _2C; //#7900
    for (var _2F = 0, _2G = _2E.length; _2F < _2G; _2F++) { //#7900
        $k[$j++] = $f($get(_2E, _2F) - 48); //#7900
    } //#7900
    $1.binval = $a(); //#7900
    for (var _2J = 0; _2J <= 12; _2J += 1) { //#7907
        $1.i = _2J; //#7904
        var _2K = $1.binval; //#7905
        var _2L = $1.i; //#7905
        $put(_2K, _2L + 1, $f($get(_2K, _2L + 1) + (($get($1.binval, $1.i) % 4537077) * 10))); //#7905
        $put($1.binval, $1.i, ~~($get($1.binval, $1.i) / 4537077)); //#7906
    } //#7906
    $1.right = $get($1.binval, 13) % 4537077; //#7908
    var _2X = $1.binval; //#7909
    $put(_2X, 13, ~~($get(_2X, 13) / 4537077)); //#7909
    $1.left = 0; //#7911
    $1.i = true; //#7912
    for (var _2Z = 0; _2Z <= 13; _2Z += 1) { //#7922
        $1.j = _2Z; //#7914
        var _2c = $get($1.binval, $1.j); //#7915
        $k[$j++] = _2c; //#7921
        if ((_2c == 0) && $1.i) { //#7920
            $j--; //#7917
        } else { //#7920
            $1.i = false; //#7919
            $1.left = $f($1.left + ($k[--$j] * (~~Math.pow(10, 13 - $1.j)))); //#7920
        } //#7920
    } //#7920
    $1.d1 = ~~($1.left / 1597); //#7924
    $1.d2 = $1.left % 1597; //#7925
    $1.d3 = ~~($1.right / 1597); //#7926
    $1.d4 = $1.right % 1597; //#7927
    if (!bwipp_databaromni.$ctx._7944) { //#7944
        (function() { //#7944
            var $ctx = Object.create($1); //#7944
            $ctx.tab164 = $a([160, 0, 12, 4, 8, 1, 161, 1, 960, 161, 10, 6, 6, 3, 80, 10, 2014, 961, 8, 8, 4, 5, 31, 34, 2714, 2015, 6, 10, 3, 6, 10, 70, 2840, 2715, 4, 12, 1, 8, 1, 126]); //#7936
            $ctx.tab154 = $a([335, 0, 5, 10, 2, 7, 4, 84, 1035, 336, 7, 8, 4, 5, 20, 35, 1515, 1036, 9, 6, 6, 3, 48, 10, 1596, 1516, 11, 4, 8, 1, 81, 1]); //#7943
            for (var _2n in $ctx) {
                $ctx.hasOwnProperty(_2n) && (bwipp_databaromni.$ctx[_2n] = $ctx[_2n]);
            } //#7943
            bwipp_databaromni.$ctx._7944 = 1; //#7943
        })(); //#7943
    } //#7943
    $1.i = 0; //#7946
    for (;;) { //#7956
        if ($1.d1 <= $get($1.tab164, $1.i)) { //#7954
            var _2u = $geti($1.tab164, $1.i + 1, 7); //#7948
            for (var _2v = 0, _2w = _2u.length; _2v < _2w; _2v++) { //#7948
                $k[$j++] = $get(_2u, _2v); //#7948
            } //#7948
            $1.d1te = $k[--$j]; //#7949
            $1.d1to = $k[--$j]; //#7949
            $1.d1mwe = $k[--$j]; //#7950
            $1.d1mwo = $k[--$j]; //#7950
            $1.d1ele = $k[--$j]; //#7951
            $1.d1elo = $k[--$j]; //#7951
            $1.d1gs = $k[--$j]; //#7952
            break; //#7953
        } //#7953
        $1.i = $1.i + 8; //#7955
    } //#7955
    $1.i = 0; //#7958
    for (;;) { //#7968
        if ($1.d2 <= $get($1.tab154, $1.i)) { //#7966
            var _3C = $geti($1.tab154, $1.i + 1, 7); //#7960
            for (var _3D = 0, _3E = _3C.length; _3D < _3E; _3D++) { //#7960
                $k[$j++] = $get(_3C, _3D); //#7960
            } //#7960
            $1.d2te = $k[--$j]; //#7961
            $1.d2to = $k[--$j]; //#7961
            $1.d2mwe = $k[--$j]; //#7962
            $1.d2mwo = $k[--$j]; //#7962
            $1.d2ele = $k[--$j]; //#7963
            $1.d2elo = $k[--$j]; //#7963
            $1.d2gs = $k[--$j]; //#7964
            break; //#7965
        } //#7965
        $1.i = $1.i + 8; //#7967
    } //#7967
    $1.i = 0; //#7970
    for (;;) { //#7980
        if ($1.d3 <= $get($1.tab164, $1.i)) { //#7978
            var _3U = $geti($1.tab164, $1.i + 1, 7); //#7972
            for (var _3V = 0, _3W = _3U.length; _3V < _3W; _3V++) { //#7972
                $k[$j++] = $get(_3U, _3V); //#7972
            } //#7972
            $1.d3te = $k[--$j]; //#7973
            $1.d3to = $k[--$j]; //#7973
            $1.d3mwe = $k[--$j]; //#7974
            $1.d3mwo = $k[--$j]; //#7974
            $1.d3ele = $k[--$j]; //#7975
            $1.d3elo = $k[--$j]; //#7975
            $1.d3gs = $k[--$j]; //#7976
            break; //#7977
        } //#7977
        $1.i = $1.i + 8; //#7979
    } //#7979
    $1.i = 0; //#7982
    for (;;) { //#7992
        if ($1.d4 <= $get($1.tab154, $1.i)) { //#7990
            var _3m = $geti($1.tab154, $1.i + 1, 7); //#7984
            for (var _3n = 0, _3o = _3m.length; _3n < _3o; _3n++) { //#7984
                $k[$j++] = $get(_3m, _3n); //#7984
            } //#7984
            $1.d4te = $k[--$j]; //#7985
            $1.d4to = $k[--$j]; //#7985
            $1.d4mwe = $k[--$j]; //#7986
            $1.d4mwo = $k[--$j]; //#7986
            $1.d4ele = $k[--$j]; //#7987
            $1.d4elo = $k[--$j]; //#7987
            $1.d4gs = $k[--$j]; //#7988
            break; //#7989
        } //#7989
        $1.i = $1.i + 8; //#7991
    } //#7991
    $k[$j++] = 'd1wo'; //#7994
    $k[$j++] = ~~($f($1.d1 - $1.d1gs) / $1.d1te); //#7994
    $k[$j++] = $1.d1elo; //#7994
    $k[$j++] = $1.d1mwo; //#7994
    $k[$j++] = 4; //#7994
    $k[$j++] = false; //#7994
    $1.getRSSwidths(); //#7994
    var _43 = $k[--$j]; //#7994
    $1[$k[--$j]] = _43; //#7994
    $k[$j++] = 'd1we'; //#7995
    $k[$j++] = $f($1.d1 - $1.d1gs) % $1.d1te; //#7995
    $k[$j++] = $1.d1ele; //#7995
    $k[$j++] = $1.d1mwe; //#7995
    $k[$j++] = 4; //#7995
    $k[$j++] = true; //#7995
    $1.getRSSwidths(); //#7995
    var _4A = $k[--$j]; //#7995
    $1[$k[--$j]] = _4A; //#7995
    $k[$j++] = 'd2wo'; //#7996
    $k[$j++] = $f($1.d2 - $1.d2gs) % $1.d2to; //#7996
    $k[$j++] = $1.d2elo; //#7996
    $k[$j++] = $1.d2mwo; //#7996
    $k[$j++] = 4; //#7996
    $k[$j++] = true; //#7996
    $1.getRSSwidths(); //#7996
    var _4H = $k[--$j]; //#7996
    $1[$k[--$j]] = _4H; //#7996
    $k[$j++] = 'd2we'; //#7997
    $k[$j++] = ~~($f($1.d2 - $1.d2gs) / $1.d2to); //#7997
    $k[$j++] = $1.d2ele; //#7997
    $k[$j++] = $1.d2mwe; //#7997
    $k[$j++] = 4; //#7997
    $k[$j++] = false; //#7997
    $1.getRSSwidths(); //#7997
    var _4O = $k[--$j]; //#7997
    $1[$k[--$j]] = _4O; //#7997
    $k[$j++] = 'd3wo'; //#7998
    $k[$j++] = ~~($f($1.d3 - $1.d3gs) / $1.d3te); //#7998
    $k[$j++] = $1.d3elo; //#7998
    $k[$j++] = $1.d3mwo; //#7998
    $k[$j++] = 4; //#7998
    $k[$j++] = false; //#7998
    $1.getRSSwidths(); //#7998
    var _4V = $k[--$j]; //#7998
    $1[$k[--$j]] = _4V; //#7998
    $k[$j++] = 'd3we'; //#7999
    $k[$j++] = $f($1.d3 - $1.d3gs) % $1.d3te; //#7999
    $k[$j++] = $1.d3ele; //#7999
    $k[$j++] = $1.d3mwe; //#7999
    $k[$j++] = 4; //#7999
    $k[$j++] = true; //#7999
    $1.getRSSwidths(); //#7999
    var _4c = $k[--$j]; //#7999
    $1[$k[--$j]] = _4c; //#7999
    $k[$j++] = 'd4wo'; //#8000
    $k[$j++] = $f($1.d4 - $1.d4gs) % $1.d4to; //#8000
    $k[$j++] = $1.d4elo; //#8000
    $k[$j++] = $1.d4mwo; //#8000
    $k[$j++] = 4; //#8000
    $k[$j++] = true; //#8000
    $1.getRSSwidths(); //#8000
    var _4j = $k[--$j]; //#8000
    $1[$k[--$j]] = _4j; //#8000
    $k[$j++] = 'd4we'; //#8001
    $k[$j++] = ~~($f($1.d4 - $1.d4gs) / $1.d4to); //#8001
    $k[$j++] = $1.d4ele; //#8001
    $k[$j++] = $1.d4mwe; //#8001
    $k[$j++] = 4; //#8001
    $k[$j++] = false; //#8001
    $1.getRSSwidths(); //#8001
    var _4q = $k[--$j]; //#8001
    $1[$k[--$j]] = _4q; //#8001
    $1.d1w = $a(8); //#8003
    for (var _4t = 0; _4t <= 3; _4t += 1) { //#8008
        $1.i = _4t; //#8005
        $put($1.d1w, $1.i * 2, $get($1.d1wo, $1.i)); //#8006
        $put($1.d1w, ($1.i * 2) + 1, $get($1.d1we, $1.i)); //#8007
    } //#8007
    $1.d2w = $a(8); //#8010
    for (var _55 = 0; _55 <= 3; _55 += 1) { //#8015
        $1.i = _55; //#8012
        $put($1.d2w, 7 - ($1.i * 2), $get($1.d2wo, $1.i)); //#8013
        $put($1.d2w, 6 - ($1.i * 2), $get($1.d2we, $1.i)); //#8014
    } //#8014
    $1.d3w = $a(8); //#8017
    for (var _5H = 0; _5H <= 3; _5H += 1) { //#8022
        $1.i = _5H; //#8019
        $put($1.d3w, 7 - ($1.i * 2), $get($1.d3wo, $1.i)); //#8020
        $put($1.d3w, 6 - ($1.i * 2), $get($1.d3we, $1.i)); //#8021
    } //#8021
    $1.d4w = $a(8); //#8024
    for (var _5T = 0; _5T <= 3; _5T += 1) { //#8029
        $1.i = _5T; //#8026
        $put($1.d4w, $1.i * 2, $get($1.d4wo, $1.i)); //#8027
        $put($1.d4w, ($1.i * 2) + 1, $get($1.d4we, $1.i)); //#8028
    } //#8028
    $k[$j++] = Infinity; //#8035
    var _5e = $1.d1w; //#8032
    for (var _5f = 0, _5g = _5e.length; _5f < _5g; _5f++) { //#8032
        $k[$j++] = $get(_5e, _5f); //#8032
    } //#8032
    var _5i = $1.d2w; //#8033
    for (var _5j = 0, _5k = _5i.length; _5j < _5k; _5j++) { //#8033
        $k[$j++] = $get(_5i, _5j); //#8033
    } //#8033
    var _5m = $1.d3w; //#8034
    for (var _5n = 0, _5o = _5m.length; _5n < _5o; _5n++) { //#8034
        $k[$j++] = $get(_5m, _5n); //#8034
    } //#8034
    var _5q = $1.d4w; //#8035
    for (var _5r = 0, _5s = _5q.length; _5r < _5s; _5r++) { //#8035
        $k[$j++] = $get(_5q, _5r); //#8035
    } //#8035
    $1.widths = $a(); //#8035
    if (!bwipp_databaromni.$ctx._8051) { //#8051
        (function() { //#8051
            var $ctx = Object.create($1); //#8051
            $ctx.checkweights = $a([1, 3, 9, 27, 2, 6, 18, 54, 58, 72, 24, 8, 29, 36, 12, 4, 74, 51, 17, 32, 37, 65, 48, 16, 64, 34, 23, 69, 49, 68, 46, 59]); //#8044
            $ctx.checkwidths = $a([3, 8, 2, 1, 1, 3, 5, 5, 1, 1, 3, 3, 7, 1, 1, 3, 1, 9, 1, 1, 2, 7, 4, 1, 1, 2, 5, 6, 1, 1, 2, 3, 8, 1, 1, 1, 5, 7, 1, 1, 1, 3, 9, 1, 1]); //#8050
            for (var _5x in $ctx) {
                $ctx.hasOwnProperty(_5x) && (bwipp_databaromni.$ctx[_5x] = $ctx[_5x]);
            } //#8050
            bwipp_databaromni.$ctx._8051 = 1; //#8050
        })(); //#8050
    } //#8050
    $1.checksum = 0; //#8053
    for (var _5y = 0; _5y <= 31; _5y += 1) { //#8057
        $1.i = _5y; //#8055
        $1.checksum = $f($1.checksum + ($get($1.widths, $1.i) * $get($1.checkweights, $1.i))); //#8056
    } //#8056
    $1.checksum = $1.checksum % 79; //#8058
    if ($1.checksum >= 8) { //#8059
        $1.checksum = $f($1.checksum + 1); //#8059
    } //#8059
    if ($1.checksum >= 72) { //#8060
        $1.checksum = $f($1.checksum + 1); //#8060
    } //#8060
    $1.checklt = $geti($1.checkwidths, (~~($1.checksum / 9)) * 5, 5); //#8061
    $1.checkrtrev = $geti($1.checkwidths, ($1.checksum % 9) * 5, 5); //#8062
    $1.checkrt = $a(5); //#8063
    for (var _6I = 0; _6I <= 4; _6I += 1) { //#8067
        $1.i = _6I; //#8065
        $put($1.checkrt, $1.i, $get($1.checkrtrev, 4 - $1.i)); //#8066
    } //#8066
    if ($eq($1.format, "omni") || $eq($1.format, "truncated")) { //#8189
        $k[$j++] = Infinity; //#8074
        var _6Q = $1.d1w; //#8073
        $k[$j++] = 1; //#8073
        for (var _6R = 0, _6S = _6Q.length; _6R < _6S; _6R++) { //#8073
            $k[$j++] = $get(_6Q, _6R); //#8073
        } //#8073
        var _6U = $1.checklt; //#8073
        for (var _6V = 0, _6W = _6U.length; _6V < _6W; _6V++) { //#8073
            $k[$j++] = $get(_6U, _6V); //#8073
        } //#8073
        var _6Y = $1.d2w; //#8073
        for (var _6Z = 0, _6a = _6Y.length; _6Z < _6a; _6Z++) { //#8073
            $k[$j++] = $get(_6Y, _6Z); //#8073
        } //#8073
        var _6c = $1.d4w; //#8074
        for (var _6d = 0, _6e = _6c.length; _6d < _6e; _6d++) { //#8074
            $k[$j++] = $get(_6c, _6d); //#8074
        } //#8074
        var _6g = $1.checkrt; //#8074
        for (var _6h = 0, _6i = _6g.length; _6h < _6i; _6h++) { //#8074
            $k[$j++] = $get(_6g, _6h); //#8074
        } //#8074
        var _6k = $1.d3w; //#8074
        for (var _6l = 0, _6m = _6k.length; _6l < _6m; _6l++) { //#8074
            $k[$j++] = $get(_6k, _6l); //#8074
        } //#8074
        $k[$j++] = 1; //#8074
        $k[$j++] = 1; //#8074
        $1.sbs = $a(); //#8074
        $k[$j++] = Infinity; //#8084
        var _6p = $1.sbs; //#8079
        $k[$j++] = Infinity; //#8080
        for (var _6r = 0, _6s = ~~(($1.sbs.length + 1) / 2); _6r < _6s; _6r++) { //#8080
            $k[$j++] = $1.height; //#8080
        } //#8080
        var _6u = $a(); //#8080
        $k[$j++] = Infinity; //#8081
        for (var _6w = 0, _6x = ~~(($1.sbs.length + 1) / 2); _6w < _6x; _6w++) { //#8081
            $k[$j++] = 0; //#8081
        } //#8081
        var _6y = $a(); //#8081
        $k[$j++] = 'ren'; //#8084
        $k[$j++] = bwipp_renlinear; //#8084
        $k[$j++] = 'sbs'; //#8084
        $k[$j++] = _6p; //#8084
        $k[$j++] = 'bhs'; //#8084
        $k[$j++] = _6u; //#8084
        $k[$j++] = 'bbs'; //#8084
        $k[$j++] = _6y; //#8084
        $k[$j++] = 'txt'; //#8084
        $k[$j++] = $1.txt; //#8084
        $k[$j++] = 'textxalign'; //#8084
        $k[$j++] = "center"; //#8084
        $k[$j++] = 'opt'; //#8084
        $k[$j++] = $1.options; //#8084
        var _71 = $d(); //#8084
        $k[$j++] = _71; //#8087
        if (!$1.dontdraw) { //#8087
            bwipp_renlinear(); //#8087
        } //#8087
    } else { //#8189
        $k[$j++] = Infinity; //#8091
        var _73 = $1.d1w; //#8091
        $k[$j++] = 1; //#8091
        $k[$j++] = 1; //#8091
        for (var _74 = 0, _75 = _73.length; _74 < _75; _74++) { //#8091
            $k[$j++] = $get(_73, _74); //#8091
        } //#8091
        var _77 = $1.checklt; //#8091
        for (var _78 = 0, _79 = _77.length; _78 < _79; _78++) { //#8091
            $k[$j++] = $get(_77, _78); //#8091
        } //#8091
        var _7B = $1.d2w; //#8091
        for (var _7C = 0, _7D = _7B.length; _7C < _7D; _7C++) { //#8091
            $k[$j++] = $get(_7B, _7C); //#8091
        } //#8091
        $k[$j++] = 1; //#8091
        $k[$j++] = 1; //#8091
        $k[$j++] = 0; //#8091
        $1.top = $a(); //#8091
        $k[$j++] = Infinity; //#8092
        var _7G = $1.d4w; //#8092
        $k[$j++] = 1; //#8092
        $k[$j++] = 1; //#8092
        for (var _7H = 0, _7I = _7G.length; _7H < _7I; _7H++) { //#8092
            $k[$j++] = $get(_7G, _7H); //#8092
        } //#8092
        var _7K = $1.checkrt; //#8092
        for (var _7L = 0, _7M = _7K.length; _7L < _7M; _7L++) { //#8092
            $k[$j++] = $get(_7K, _7L); //#8092
        } //#8092
        var _7O = $1.d3w; //#8092
        for (var _7P = 0, _7Q = _7O.length; _7P < _7Q; _7P++) { //#8092
            $k[$j++] = $get(_7O, _7P); //#8092
        } //#8092
        $k[$j++] = 1; //#8092
        $k[$j++] = 1; //#8092
        $k[$j++] = 0; //#8092
        $1.bot = $a(); //#8092
        for (var _7T = 0; _7T <= 24; _7T += 2) { //#8097
            $1.i = _7T; //#8094
            for (var _7X = 0, _7Y = $get($1.top, $1.i); _7X < _7Y; _7X++) { //#8095
                $k[$j++] = 0; //#8095
            } //#8095
            for (var _7c = 0, _7d = $get($1.top, $1.i + 1); _7c < _7d; _7c++) { //#8096
                $k[$j++] = 1; //#8096
            } //#8096
        } //#8096
        $astore($a(50)); //#8098
        $1.top = $k[--$j]; //#8098
        for (var _7g = 0; _7g <= 24; _7g += 2) { //#8103
            $1.i = _7g; //#8100
            for (var _7k = 0, _7l = $get($1.bot, $1.i); _7k < _7l; _7k++) { //#8101
                $k[$j++] = 1; //#8101
            } //#8101
            for (var _7p = 0, _7q = $get($1.bot, $1.i + 1); _7p < _7q; _7p++) { //#8102
                $k[$j++] = 0; //#8102
            } //#8102
        } //#8102
        $astore($a(50)); //#8104
        $1.bot = $k[--$j]; //#8104
        if ($eq($1.format, "stacked")) { //#8126
            $1.sep = $a(50); //#8108
            $put($1.sep, 0, 0); //#8109
            for (var _7w = 1; _7w <= 49; _7w += 1) { //#8117
                $1.i = _7w; //#8111
                if ($eq($get($1.top, $1.i), $get($1.bot, $1.i))) { //#8115
                    $put($1.sep, $1.i, $f(1 - $get($1.top, $1.i))); //#8113
                } else { //#8115
                    $put($1.sep, $1.i, $f(1 - $get($1.sep, $1.i - 1))); //#8115
                } //#8115
            } //#8115
            $puti($1.sep, 0, $a([0, 0, 0, 0])); //#8118
            $puti($1.sep, 46, $a([0, 0, 0, 0])); //#8119
            $k[$j++] = Infinity; //#8123
            for (var _8H = 0, _8I = 5; _8H < _8I; _8H++) { //#8121
                $aload($1.top); //#8121
            } //#8121
            $aload($1.sep); //#8122
            for (var _8L = 0, _8M = 7; _8L < _8M; _8L++) { //#8123
                $aload($1.bot); //#8123
            } //#8123
            $1.pixs = $a(); //#8123
            $1.pixy = ~~($1.pixs.length / 50); //#8125
        } //#8125
        if ($eq($1.format, "stackedomni")) { //#8176
            $k[$j++] = Infinity; //#8130
            $forall($1.top, function() { //#8130
                var _8S = $k[--$j]; //#8130
                $k[$j++] = $f(1 - _8S); //#8130
            }); //#8130
            $1.sep1 = $a(); //#8130
            $puti($1.sep1, 0, $a([0, 0, 0, 0])); //#8131
            $puti($1.sep1, 46, $a([0, 0, 0, 0])); //#8132
            for (var _8Y = 18; _8Y <= 30; _8Y += 1) { //#8145
                $1.i = _8Y; //#8134
                if ($get($1.top, $1.i) == 0) { //#8142
                    if ($get($1.top, $1.i - 1) == 1) { //#8139
                        $k[$j++] = 1; //#8137
                    } else { //#8139
                        var _8i = ($get($1.sep1, $1.i - 1) == 0) ? 1 : 0; //#8139
                        $k[$j++] = _8i; //#8139
                    } //#8139
                } else { //#8142
                    $k[$j++] = 0; //#8142
                } //#8142
                $put($1.sep1, $1.i, $k[--$j]); //#8144
            } //#8144
            $k[$j++] = Infinity; //#8146
            $k[$j++] = 0; //#8146
            $k[$j++] = 0; //#8146
            $k[$j++] = 0; //#8146
            $k[$j++] = 0; //#8146
            for (var _8m = 0, _8n = 21; _8m < _8n; _8m++) { //#8146
                $k[$j++] = 0; //#8146
                $k[$j++] = 1; //#8146
            } //#8146
            $k[$j++] = 0; //#8146
            $k[$j++] = 0; //#8146
            $k[$j++] = 0; //#8146
            $k[$j++] = 0; //#8146
            $1.sep2 = $a(); //#8146
            $k[$j++] = Infinity; //#8147
            $forall($1.bot, function() { //#8147
                var _8q = $k[--$j]; //#8147
                $k[$j++] = $f(1 - _8q); //#8147
            }); //#8147
            $1.sep3 = $a(); //#8147
            $puti($1.sep3, 0, $a([0, 0, 0, 0])); //#8148
            $puti($1.sep3, 46, $a([0, 0, 0, 0])); //#8149
            for (var _8w = 19; _8w <= 31; _8w += 1) { //#8162
                $1.i = _8w; //#8151
                if ($get($1.bot, $1.i) == 0) { //#8159
                    if ($get($1.bot, $1.i - 1) == 1) { //#8156
                        $k[$j++] = 1; //#8154
                    } else { //#8156
                        var _96 = ($get($1.sep3, $1.i - 1) == 0) ? 1 : 0; //#8156
                        $k[$j++] = _96; //#8156
                    } //#8156
                } else { //#8159
                    $k[$j++] = 0; //#8159
                } //#8159
                $put($1.sep3, $1.i, $k[--$j]); //#8161
            } //#8161
            $1.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#8163
            $k[$j++] = true; //#8164
            for (var _9B = 0; _9B <= 12; _9B += 1) { //#8164
                var _9G = $k[--$j]; //#8164
                $k[$j++] = _9G && $eq($get($1.bot, _9B + 19), $get($1.f3, _9B)); //#8164
            } //#8164
            if ($k[--$j]) { //#8167
                $puti($1.sep3, 19, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#8166
            } //#8166
            $k[$j++] = Infinity; //#8173
            for (var _9L = 0, _9M = $1.barxmult; _9L < _9M; _9L++) { //#8169
                $aload($1.top); //#8169
            } //#8169
            $aload($1.sep1); //#8170
            $aload($1.sep2); //#8171
            $aload($1.sep3); //#8172
            for (var _9S = 0, _9T = $1.barxmult; _9S < _9T; _9S++) { //#8173
                $aload($1.bot); //#8173
            } //#8173
            $1.pixs = $a(); //#8173
            $1.pixy = ~~($1.pixs.length / 50); //#8175
        } //#8175
        var _9b = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.pixs],
            ["pixx", 50],
            ["pixy", $1.pixy],
            ["height", $1.pixy / 72],
            ["width", 50 / 72],
            ["opt", $1.options]
        ]); //#8186
        $k[$j++] = _9b; //#8189
        if (!$1.dontdraw) { //#8189
            bwipp_renmatrix(); //#8189
        } //#8189
    } //#8189
}

function bwipp_databarstacked() {
    var $1 = Object.create(bwipp_databarstacked.$ctx || (bwipp_databarstacked.$ctx = {})); //#8224
    $1.dontdraw = false; //#8227
    $k[$j++] = $1; //#8229
    bwipp_processoptions(); //#8229
    $1.options = $k[--$j]; //#8229
    $1.barcode = $k[--$j]; //#8230
    if ($ne($geti($1.barcode, 0, 4), "(01)")) { //#8235
        $k[$j++] = 'bwipp.databarstackedBadAI#8234'; //#8234
        $k[$j++] = "GS1 DataBar Stacked must begin with (01) application identifier"; //#8234
        bwipp_raiseerror(); //#8234
    } //#8234
    if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //#8238
        $k[$j++] = 'bwipp.databarstackedBadLength#8237'; //#8237
        $k[$j++] = "GS1 DataBar Stacked must be 13 or 14 digits"; //#8237
        bwipp_raiseerror(); //#8237
    } //#8237
    var _8 = $geti($1.barcode, 4, $1.barcode.length - 4); //#8239
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#8243
        var _B = $get(_8, _9); //#8243
        if ((_B < 48) || (_B > 57)) { //#8242
            $k[$j++] = 'bwipp.databarstackedBadCharacter#8241'; //#8241
            $k[$j++] = "GS1 DataBar Stacked must contain only digits"; //#8241
            bwipp_raiseerror(); //#8241
        } //#8241
    } //#8241
    $1.checksum = 0; //#8246
    for (var _C = 0; _C <= 12; _C += 1) { //#8250
        $1.i = _C; //#8248
        $k[$j++] = 'checksum'; //#8249
        $k[$j++] = $1.checksum; //#8249
        $k[$j++] = $f($get($1.barcode, $1.i + 4) - 48); //#8249
        if (($1.i % 2) == 0) { //#8249
            var _I = $k[--$j]; //#8249
            $k[$j++] = _I * 3; //#8249
        } //#8249
        var _J = $k[--$j]; //#8249
        var _K = $k[--$j]; //#8249
        $1[$k[--$j]] = $f(_K + _J); //#8249
    } //#8249
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#8251
    if ($1.barcode.length == 18) { //#8256
        if ($get($1.barcode, 17) != ($1.checksum + 48)) { //#8255
            $k[$j++] = 'bwipp.databarstackedBadCheckDigit#8254'; //#8254
            $k[$j++] = "Incorrect GS1 DataBar Stacked check digit provided"; //#8254
            bwipp_raiseerror(); //#8254
        } //#8254
    } //#8254
    var _R = $s(18); //#8257
    $puti(_R, 0, $1.barcode); //#8258
    $put(_R, 17, $1.checksum + 48); //#8259
    $1.barcode = _R; //#8260
    $put($1.options, "dontdraw", true); //#8263
    $put($1.options, "format", "stacked"); //#8264
    $k[$j++] = 'args'; //#8266
    $k[$j++] = $1.barcode; //#8266
    $k[$j++] = $1.options; //#8266
    bwipp_databaromni(); //#8266
    var _Y = $k[--$j]; //#8266
    $1[$k[--$j]] = _Y; //#8266
    $put($1.args, "opt", $1.options); //#8268
    $k[$j++] = $1.args; //#8271
    if (!$1.dontdraw) { //#8271
        bwipp_renmatrix(); //#8271
    } //#8271
}

function bwipp_databarstackedomni() {
    var $1 = Object.create(bwipp_databarstackedomni.$ctx || (bwipp_databarstackedomni.$ctx = {})); //#8302
    $1.dontdraw = false; //#8305
    $k[$j++] = $1; //#8307
    bwipp_processoptions(); //#8307
    $1.options = $k[--$j]; //#8307
    $1.barcode = $k[--$j]; //#8308
    if ($ne($geti($1.barcode, 0, 4), "(01)")) { //#8313
        $k[$j++] = 'bwipp.databarstackedomniBadAI#8312'; //#8312
        $k[$j++] = "GS1 DataBar Stacked Omnidirectional must begin with (01) application identifier"; //#8312
        bwipp_raiseerror(); //#8312
    } //#8312
    if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //#8316
        $k[$j++] = 'bwipp.databarstackedomniBadLength#8315'; //#8315
        $k[$j++] = "GS1 DataBar Stacked Omnidirectional must be 13 or 14 digits"; //#8315
        bwipp_raiseerror(); //#8315
    } //#8315
    var _8 = $geti($1.barcode, 4, $1.barcode.length - 4); //#8317
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#8321
        var _B = $get(_8, _9); //#8321
        if ((_B < 48) || (_B > 57)) { //#8320
            $k[$j++] = 'bwipp.databarstackedomniBadCharacter#8319'; //#8319
            $k[$j++] = "GS1 DataBar Stacked Omnidirectional must contain only digits"; //#8319
            bwipp_raiseerror(); //#8319
        } //#8319
    } //#8319
    $1.checksum = 0; //#8324
    for (var _C = 0; _C <= 12; _C += 1) { //#8328
        $1.i = _C; //#8326
        $k[$j++] = 'checksum'; //#8327
        $k[$j++] = $1.checksum; //#8327
        $k[$j++] = $f($get($1.barcode, $1.i + 4) - 48); //#8327
        if (($1.i % 2) == 0) { //#8327
            var _I = $k[--$j]; //#8327
            $k[$j++] = _I * 3; //#8327
        } //#8327
        var _J = $k[--$j]; //#8327
        var _K = $k[--$j]; //#8327
        $1[$k[--$j]] = $f(_K + _J); //#8327
    } //#8327
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#8329
    if ($1.barcode.length == 18) { //#8334
        if ($get($1.barcode, 17) != ($1.checksum + 48)) { //#8333
            $k[$j++] = 'bwipp.databarstackedomniBadCheckDigit#8332'; //#8332
            $k[$j++] = "Incorrect GS1 DataBar Stacked Omnidirectional check digit provided"; //#8332
            bwipp_raiseerror(); //#8332
        } //#8332
    } //#8332
    var _R = $s(18); //#8335
    $puti(_R, 0, $1.barcode); //#8336
    $put(_R, 17, $1.checksum + 48); //#8337
    $1.barcode = _R; //#8338
    $put($1.options, "dontdraw", true); //#8341
    $put($1.options, "format", "stackedomni"); //#8342
    $k[$j++] = 'args'; //#8344
    $k[$j++] = $1.barcode; //#8344
    $k[$j++] = $1.options; //#8344
    bwipp_databaromni(); //#8344
    var _Y = $k[--$j]; //#8344
    $1[$k[--$j]] = _Y; //#8344
    $put($1.args, "opt", $1.options); //#8346
    $k[$j++] = $1.args; //#8349
    if (!$1.dontdraw) { //#8349
        bwipp_renmatrix(); //#8349
    } //#8349
}

function bwipp_databartruncated() {
    var $1 = Object.create(bwipp_databartruncated.$ctx || (bwipp_databartruncated.$ctx = {})); //#8380
    $1.dontdraw = false; //#8383
    $k[$j++] = $1; //#8385
    bwipp_processoptions(); //#8385
    $1.options = $k[--$j]; //#8385
    $1.barcode = $k[--$j]; //#8386
    if ($ne($geti($1.barcode, 0, 4), "(01)")) { //#8391
        $k[$j++] = 'bwipp.databartruncatedBadAI#8390'; //#8390
        $k[$j++] = "GS1 DataBar Truncated must begin with (01) application identifier"; //#8390
        bwipp_raiseerror(); //#8390
    } //#8390
    if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //#8394
        $k[$j++] = 'bwipp.databartruncatedBadLength#8393'; //#8393
        $k[$j++] = "GS1 DataBar Truncated must be 13 or 14 digits"; //#8393
        bwipp_raiseerror(); //#8393
    } //#8393
    var _8 = $geti($1.barcode, 4, $1.barcode.length - 4); //#8395
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#8399
        var _B = $get(_8, _9); //#8399
        if ((_B < 48) || (_B > 57)) { //#8398
            $k[$j++] = 'bwipp.databartruncatedBadCharacter#8397'; //#8397
            $k[$j++] = "GS1 DataBar Truncated must contain only digits"; //#8397
            bwipp_raiseerror(); //#8397
        } //#8397
    } //#8397
    $1.checksum = 0; //#8402
    for (var _C = 0; _C <= 12; _C += 1) { //#8406
        $1.i = _C; //#8404
        $k[$j++] = 'checksum'; //#8405
        $k[$j++] = $1.checksum; //#8405
        $k[$j++] = $f($get($1.barcode, $1.i + 4) - 48); //#8405
        if (($1.i % 2) == 0) { //#8405
            var _I = $k[--$j]; //#8405
            $k[$j++] = _I * 3; //#8405
        } //#8405
        var _J = $k[--$j]; //#8405
        var _K = $k[--$j]; //#8405
        $1[$k[--$j]] = $f(_K + _J); //#8405
    } //#8405
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#8407
    if ($1.barcode.length == 18) { //#8412
        if ($get($1.barcode, 17) != ($1.checksum + 48)) { //#8411
            $k[$j++] = 'bwipp.databartruncatedBadCheckDigit#8410'; //#8410
            $k[$j++] = "Incorrect GS1 DataBar Truncated check digit provided"; //#8410
            bwipp_raiseerror(); //#8410
        } //#8410
    } //#8410
    var _R = $s(18); //#8413
    $puti(_R, 0, $1.barcode); //#8414
    $put(_R, 17, $1.checksum + 48); //#8415
    $1.barcode = _R; //#8416
    $put($1.options, "dontdraw", true); //#8419
    $put($1.options, "format", "truncated"); //#8420
    $k[$j++] = 'args'; //#8422
    $k[$j++] = $1.barcode; //#8422
    $k[$j++] = $1.options; //#8422
    bwipp_databaromni(); //#8422
    var _Y = $k[--$j]; //#8422
    $1[$k[--$j]] = _Y; //#8422
    $put($1.args, "opt", $1.options); //#8424
    $k[$j++] = $1.args; //#8427
    if (!$1.dontdraw) { //#8427
        bwipp_renlinear(); //#8427
    } //#8427
}

function bwipp_databarlimited() {
    var $1 = Object.create(bwipp_databarlimited.$ctx || (bwipp_databarlimited.$ctx = {})); //#8459
    $1.dontdraw = false; //#8462
    $1.height = 10 / 72; //#8463
    $1.linkage = false; //#8464
    $k[$j++] = $1; //#8466
    bwipp_processoptions(); //#8466
    $1.options = $k[--$j]; //#8466
    $1.barcode = $k[--$j]; //#8467
    if ($ne($geti($1.barcode, 0, 4), "(01)")) { //#8474
        $k[$j++] = 'bwipp.databarlimitedBadAI#8473'; //#8473
        $k[$j++] = "GS1 DataBar Limited must begin with (01) application identifier"; //#8473
        bwipp_raiseerror(); //#8473
    } //#8473
    if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //#8477
        $k[$j++] = 'bwipp.databarlimitedBadLength#8476'; //#8476
        $k[$j++] = "GS1 DataBar Limited must be 13 or 14 digits"; //#8476
        bwipp_raiseerror(); //#8476
    } //#8476
    var _7 = $get($1.barcode, 4); //#8478
    if ((_7 < 48) || (_7 > 49)) { //#8480
        $k[$j++] = 'bwipp.databarlimitedBadStartDigit#8479'; //#8479
        $k[$j++] = "GS1 DataBar Limited must begin with 0 or 1"; //#8479
        bwipp_raiseerror(); //#8479
    } //#8479
    var _A = $geti($1.barcode, 5, $1.barcode.length - 5); //#8481
    for (var _B = 0, _C = _A.length; _B < _C; _B++) { //#8485
        var _D = $get(_A, _B); //#8485
        if ((_D < 48) || (_D > 57)) { //#8484
            $k[$j++] = 'bwipp.databarlimitedBadCharacter#8483'; //#8483
            $k[$j++] = "GS1 DataBar Limited must contain only digits"; //#8483
            bwipp_raiseerror(); //#8483
        } //#8483
    } //#8483
    $1.checksum = 0; //#8488
    for (var _E = 0; _E <= 12; _E += 1) { //#8492
        $1.i = _E; //#8490
        $k[$j++] = 'checksum'; //#8491
        $k[$j++] = $1.checksum; //#8491
        $k[$j++] = $f($get($1.barcode, $1.i + 4) - 48); //#8491
        if (($1.i % 2) == 0) { //#8491
            var _K = $k[--$j]; //#8491
            $k[$j++] = _K * 3; //#8491
        } //#8491
        var _L = $k[--$j]; //#8491
        var _M = $k[--$j]; //#8491
        $1[$k[--$j]] = $f(_M + _L); //#8491
    } //#8491
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#8493
    if ($1.barcode.length == 18) { //#8498
        if ($get($1.barcode, 17) != ($1.checksum + 48)) { //#8497
            $k[$j++] = 'bwipp.databarlimitedBadCheckDigit#8496'; //#8496
            $k[$j++] = "Incorrect GS1 DataBar Limited check digit provided"; //#8496
            bwipp_raiseerror(); //#8496
        } //#8496
    } //#8496
    var _T = $s(18); //#8499
    $puti(_T, 0, $1.barcode); //#8500
    $put(_T, 17, $1.checksum + 48); //#8501
    $1.barcode = _T; //#8502
    if (!bwipp_databarlimited.$ctx._8507) { //#8507
        (function() { //#8507
            var $ctx = Object.create($1); //#8507
            $ctx.linkval = $a([2, 0, 1, 5, 1, 3, 3, 5, 3, 1, 0, 9, 6]); //#8506
            for (var _X in $ctx) {
                $ctx.hasOwnProperty(_X) && (bwipp_databarlimited.$ctx[_X] = $ctx[_X]);
            } //#8506
            bwipp_databarlimited.$ctx._8507 = 1; //#8506
        })(); //#8506
    } //#8506
    $k[$j++] = Infinity; //#8509
    var _Z = $geti($1.barcode, 4, 13); //#8509
    for (var _a = 0, _b = _Z.length; _a < _b; _a++) { //#8509
        $k[$j++] = $f($get(_Z, _a) - 48); //#8509
    } //#8509
    $1.binval = $a(); //#8509
    if ($1.linkage) { //#8516
        for (var _h = 0, _g = $1.binval.length - 1; _h <= _g; _h += 1) { //#8515
            $1.i = _h; //#8513
            $put($1.binval, $1.i, $f($get($1.binval, $1.i) + $get($1.linkval, $1.i))); //#8514
        } //#8514
    } //#8514
    $1.txt = $a($1.barcode.length); //#8519
    for (var _u = 0, _t = $1.barcode.length - 1; _u <= _t; _u += 1) { //#8523
        $1.i = _u; //#8521
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); //#8522
    } //#8522
    $1.ncr = function() {
        var _11 = $k[--$j]; //#8526
        var _12 = $k[--$j]; //#8526
        var _13 = $f(_12 - _11); //#8526
        if (_11 < $f(_12 - _11)) { //#8526
            var _ = _13; //#8526
            _13 = _11; //#8526
            _11 = _; //#8526
        } //#8526
        $k[$j++] = _13; //#8533
        $k[$j++] = 1; //#8533
        $k[$j++] = 1; //#8533
        for (var _15 = _12, _14 = $f(_11 + 1); _15 >= _14; _15 -= 1) { //#8533
            var _16 = $k[--$j]; //#8529
            var _17 = $k[--$j]; //#8530
            var _18 = $k[--$j]; //#8530
            $k[$j++] = _18; //#8532
            $k[$j++] = _17; //#8532
            $k[$j++] = _16 * _15; //#8532
            if ($le(_17, _18)) { //#8532
                var _19 = $k[--$j]; //#8531
                var _1A = $k[--$j]; //#8531
                $k[$j++] = $f(_1A + 1); //#8531
                $k[$j++] = ~~(_19 / _1A); //#8531
            } //#8531
        } //#8531
        for (;;) { //#8537
            var _1B = $k[--$j]; //#8535
            var _1C = $k[--$j]; //#8535
            var _1D = $k[--$j]; //#8535
            $k[$j++] = _1D; //#8535
            $k[$j++] = _1C; //#8535
            $k[$j++] = _1B; //#8535
            if ($gt(_1C, _1D)) { //#8535
                break; //#8535
            } //#8535
            var _1E = $k[--$j]; //#8536
            var _1F = $k[--$j]; //#8536
            $k[$j++] = $f(_1F + 1); //#8536
            $k[$j++] = ~~(_1E / _1F); //#8536
        } //#8536
        var _1G = $k[--$j]; //#8538
        var _1H = $k[--$j]; //#8538
        $k[$j++] = _1G; //#8538
        $k[$j++] = _1H; //#8538
        $j--; //#8538
        var _1I = $k[--$j]; //#8538
        var _1J = $k[--$j]; //#8538
        $k[$j++] = _1I; //#8538
        $k[$j++] = _1J; //#8538
        $j--; //#8538
    }; //#8538
    $1.getRSSwidths = function() {
        $1.oe = $k[--$j]; //#8542
        $1.el = $k[--$j]; //#8543
        $1.mw = $k[--$j]; //#8544
        $1.nm = $k[--$j]; //#8545
        $1.val = $k[--$j]; //#8546
        $1.out = $a($1.el); //#8547
        $1.mask = 0; //#8548
        for (var _1T = 0, _1S = $f($1.el - 2); _1T <= _1S; _1T += 1) { //#8575
            $1.bar = _1T; //#8550
            $1.ew = 1; //#8551
            var _1V = $1.bar; //#8552
            $1.mask = $1.mask | ((_1V < 0 ? 1 >>> -_1V : 1 << _1V)); //#8552
            for (;;) { //#8571
                $k[$j++] = 'sval'; //#8553
                $k[$j++] = $f($f($1.nm - $1.ew) - 1); //#8553
                $k[$j++] = $f($f($1.el - $1.bar) - 2); //#8553
                $1.ncr(); //#8553
                var _1a = $k[--$j]; //#8553
                $1[$k[--$j]] = _1a; //#8553
                if (($1.oe && ($1.mask == 0)) && (($f(($f($f($1.nm - $1.ew) - ($1.el * 2))) + ($1.bar * 2))) >= -2)) { //#8556
                    $k[$j++] = 'sval'; //#8555
                    $k[$j++] = $1.sval; //#8555
                    $k[$j++] = $f(($f($f($1.nm - $1.ew) - $1.el)) + $1.bar); //#8555
                    $k[$j++] = $f($f($1.el - $1.bar) - 2); //#8555
                    $1.ncr(); //#8555
                    var _1p = $k[--$j]; //#8555
                    var _1q = $k[--$j]; //#8555
                    $1[$k[--$j]] = $f(_1q - _1p); //#8555
                } //#8555
                if ($f($1.el - $1.bar) > 2) { //#8565
                    $1.lval = 0; //#8558
                    for (var _20 = $f(($f(($f($f($1.nm - $1.ew) - $1.el)) + $1.bar)) + 2), _1z = $f($1.mw + 1); _20 >= _1z; _20 -= 1) { //#8562
                        $k[$j++] = $f(($f($f($1.nm - _20) - $1.ew)) - 1); //#8560
                        $k[$j++] = $f($f($1.el - $1.bar) - 3); //#8560
                        $1.ncr(); //#8560
                        $1.lval = $f($k[--$j] + $1.lval); //#8561
                    } //#8561
                    $1.sval = $f($1.sval - ($1.lval * ($f($f($1.el - $1.bar) - 1)))); //#8563
                } else { //#8565
                    if ($f($1.nm - $1.ew) > $1.mw) { //#8565
                        $1.sval = $f($1.sval - 1); //#8565
                    } //#8565
                } //#8565
                $1.val = $f($1.val - $1.sval); //#8567
                if ($1.val < 0) { //#8568
                    break; //#8568
                } //#8568
                $1.ew = $1.ew + 1; //#8569
                var _2K = $1.bar; //#8570
                $1.mask = $1.mask & (~((_2K < 0 ? 1 >>> -_2K : 1 << _2K))); //#8570
            } //#8570
            $1.val = $f($1.val + $1.sval); //#8572
            $1.nm = $f($1.nm - $1.ew); //#8573
            $put($1.out, $1.bar, $1.ew); //#8574
        } //#8574
        $put($1.out, $f($1.el - 1), $1.nm); //#8576
        $k[$j++] = $1.out; //#8577
    }; //#8577
    for (var _2W = 0; _2W <= 11; _2W += 1) { //#8584
        $1.i = _2W; //#8581
        var _2X = $1.binval; //#8582
        var _2Y = $1.i; //#8582
        $put(_2X, _2Y + 1, $f($get(_2X, _2Y + 1) + (($get($1.binval, $1.i) % 2013571) * 10))); //#8582
        $put($1.binval, $1.i, ~~($get($1.binval, $1.i) / 2013571)); //#8583
    } //#8583
    $1.d2 = $get($1.binval, 12) % 2013571; //#8585
    var _2k = $1.binval; //#8586
    $put(_2k, 12, ~~($get(_2k, 12) / 2013571)); //#8586
    $1.d1 = 0; //#8588
    $1.i = true; //#8589
    for (var _2m = 0; _2m <= 12; _2m += 1) { //#8599
        $1.j = _2m; //#8591
        var _2p = $get($1.binval, $1.j); //#8592
        $k[$j++] = _2p; //#8598
        if ((_2p == 0) && $1.i) { //#8597
            $j--; //#8594
        } else { //#8597
            $1.i = false; //#8596
            $1.d1 = $f($1.d1 + ($k[--$j] * (~~Math.pow(10, 12 - $1.j)))); //#8597
        } //#8597
    } //#8597
    if (!bwipp_databarlimited.$ctx._8611) { //#8611
        (function() { //#8611
            var $ctx = Object.create($1); //#8611
            $ctx.tab267 = $a([183063, 0, 17, 9, 6, 3, 6538, 28, 820063, 183064, 13, 13, 5, 4, 875, 728, 1000775, 820064, 9, 17, 3, 6, 28, 6454, 1491020, 1000776, 15, 11, 5, 4, 2415, 203, 1979844, 1491021, 11, 15, 4, 5, 203, 2408, 1996938, 1979845, 19, 7, 8, 1, 17094, 1, 2013570, 1996939, 7, 19, 1, 8, 1, 16632]); //#8610
            for (var _2v in $ctx) {
                $ctx.hasOwnProperty(_2v) && (bwipp_databarlimited.$ctx[_2v] = $ctx[_2v]);
            } //#8610
            bwipp_databarlimited.$ctx._8611 = 1; //#8610
        })(); //#8610
    } //#8610
    $1.i = 0; //#8613
    for (;;) { //#8623
        if ($1.d1 <= $get($1.tab267, $1.i)) { //#8621
            var _32 = $geti($1.tab267, $1.i + 1, 7); //#8615
            for (var _33 = 0, _34 = _32.length; _33 < _34; _33++) { //#8615
                $k[$j++] = $get(_32, _33); //#8615
            } //#8615
            $1.d1te = $k[--$j]; //#8616
            $1.d1to = $k[--$j]; //#8616
            $1.d1mwe = $k[--$j]; //#8617
            $1.d1mwo = $k[--$j]; //#8617
            $1.d1ele = $k[--$j]; //#8618
            $1.d1elo = $k[--$j]; //#8618
            $1.d1gs = $k[--$j]; //#8619
            break; //#8620
        } //#8620
        $1.i = $1.i + 8; //#8622
    } //#8622
    $1.i = 0; //#8625
    for (;;) { //#8635
        if ($1.d2 <= $get($1.tab267, $1.i)) { //#8633
            var _3K = $geti($1.tab267, $1.i + 1, 7); //#8627
            for (var _3L = 0, _3M = _3K.length; _3L < _3M; _3L++) { //#8627
                $k[$j++] = $get(_3K, _3L); //#8627
            } //#8627
            $1.d2te = $k[--$j]; //#8628
            $1.d2to = $k[--$j]; //#8628
            $1.d2mwe = $k[--$j]; //#8629
            $1.d2mwo = $k[--$j]; //#8629
            $1.d2ele = $k[--$j]; //#8630
            $1.d2elo = $k[--$j]; //#8630
            $1.d2gs = $k[--$j]; //#8631
            break; //#8632
        } //#8632
        $1.i = $1.i + 8; //#8634
    } //#8634
    $k[$j++] = 'd1wo'; //#8637
    $k[$j++] = ~~($f($1.d1 - $1.d1gs) / $1.d1te); //#8637
    $k[$j++] = $1.d1elo; //#8637
    $k[$j++] = $1.d1mwo; //#8637
    $k[$j++] = 7; //#8637
    $k[$j++] = false; //#8637
    $1.getRSSwidths(); //#8637
    var _3b = $k[--$j]; //#8637
    $1[$k[--$j]] = _3b; //#8637
    $k[$j++] = 'd1we'; //#8638
    $k[$j++] = $f($1.d1 - $1.d1gs) % $1.d1te; //#8638
    $k[$j++] = $1.d1ele; //#8638
    $k[$j++] = $1.d1mwe; //#8638
    $k[$j++] = 7; //#8638
    $k[$j++] = true; //#8638
    $1.getRSSwidths(); //#8638
    var _3i = $k[--$j]; //#8638
    $1[$k[--$j]] = _3i; //#8638
    $k[$j++] = 'd2wo'; //#8639
    $k[$j++] = ~~($f($1.d2 - $1.d2gs) / $1.d2te); //#8639
    $k[$j++] = $1.d2elo; //#8639
    $k[$j++] = $1.d2mwo; //#8639
    $k[$j++] = 7; //#8639
    $k[$j++] = false; //#8639
    $1.getRSSwidths(); //#8639
    var _3p = $k[--$j]; //#8639
    $1[$k[--$j]] = _3p; //#8639
    $k[$j++] = 'd2we'; //#8640
    $k[$j++] = $f($1.d2 - $1.d2gs) % $1.d2te; //#8640
    $k[$j++] = $1.d2ele; //#8640
    $k[$j++] = $1.d2mwe; //#8640
    $k[$j++] = 7; //#8640
    $k[$j++] = true; //#8640
    $1.getRSSwidths(); //#8640
    var _3w = $k[--$j]; //#8640
    $1[$k[--$j]] = _3w; //#8640
    $1.d1w = $a(14); //#8642
    for (var _3z = 0; _3z <= 6; _3z += 1) { //#8647
        $1.i = _3z; //#8644
        $put($1.d1w, $1.i * 2, $get($1.d1wo, $1.i)); //#8645
        $put($1.d1w, ($1.i * 2) + 1, $get($1.d1we, $1.i)); //#8646
    } //#8646
    $1.d2w = $a(14); //#8649
    for (var _4B = 0; _4B <= 6; _4B += 1) { //#8654
        $1.i = _4B; //#8651
        $put($1.d2w, $1.i * 2, $get($1.d2wo, $1.i)); //#8652
        $put($1.d2w, ($1.i * 2) + 1, $get($1.d2we, $1.i)); //#8653
    } //#8653
    $k[$j++] = Infinity; //#8658
    var _4M = $1.d1w; //#8657
    for (var _4N = 0, _4O = _4M.length; _4N < _4O; _4N++) { //#8657
        $k[$j++] = $get(_4M, _4N); //#8657
    } //#8657
    var _4Q = $1.d2w; //#8658
    for (var _4R = 0, _4S = _4Q.length; _4R < _4S; _4R++) { //#8658
        $k[$j++] = $get(_4Q, _4R); //#8658
    } //#8658
    $1.widths = $a(); //#8658
    if (!bwipp_databarlimited.$ctx._8682) { //#8682
        (function() { //#8682
            var $ctx = Object.create($1); //#8682
            $ctx.checkweights = $a([1, 3, 9, 27, 81, 65, 17, 51, 64, 14, 42, 37, 22, 66, 20, 60, 2, 6, 18, 54, 73, 41, 34, 13, 39, 28, 84, 74]); //#8665
            $k[$j++] = Infinity; //#8680
            for (var _4W = 0; _4W <= 43; _4W += 1) { //#8668
                $k[$j++] = _4W; //#8668
            } //#8668
            $k[$j++] = 45; //#8670
            $k[$j++] = 52; //#8670
            $k[$j++] = 57; //#8670
            for (var _4X = 63; _4X <= 66; _4X += 1) { //#8670
                $k[$j++] = _4X; //#8670
            } //#8670
            for (var _4Y = 73; _4Y <= 79; _4Y += 1) { //#8671
                $k[$j++] = _4Y; //#8671
            } //#8671
            $k[$j++] = 82; //#8673
            for (var _4Z = 126; _4Z <= 130; _4Z += 1) { //#8673
                $k[$j++] = _4Z; //#8673
            } //#8673
            $k[$j++] = 132; //#8675
            for (var _4a = 141; _4a <= 146; _4a += 1) { //#8675
                $k[$j++] = _4a; //#8675
            } //#8675
            for (var _4b = 210; _4b <= 217; _4b += 1) { //#8676
                $k[$j++] = _4b; //#8676
            } //#8676
            $k[$j++] = 220; //#8678
            for (var _4c = 316; _4c <= 320; _4c += 1) { //#8678
                $k[$j++] = _4c; //#8678
            } //#8678
            $k[$j++] = 322; //#8680
            $k[$j++] = 323; //#8680
            $k[$j++] = 326; //#8680
            $k[$j++] = 337; //#8680
            $ctx.checkseq = $a(); //#8680
            for (var _4e in $ctx) {
                $ctx.hasOwnProperty(_4e) && (bwipp_databarlimited.$ctx[_4e] = $ctx[_4e]);
            } //#8681
            bwipp_databarlimited.$ctx._8682 = 1; //#8681
        })(); //#8681
    } //#8681
    $1.checksum = 0; //#8684
    for (var _4f = 0; _4f <= 27; _4f += 1) { //#8688
        $1.i = _4f; //#8686
        $1.checksum = $f($1.checksum + ($get($1.widths, $1.i) * $get($1.checkweights, $1.i))); //#8687
    } //#8687
    $1.checksum = $1.checksum % 89; //#8689
    $1.seq = $get($1.checkseq, $1.checksum); //#8690
    $k[$j++] = 'swidths'; //#8691
    $k[$j++] = ~~($1.seq / 21); //#8691
    $k[$j++] = 8; //#8691
    $k[$j++] = 3; //#8691
    $k[$j++] = 6; //#8691
    $k[$j++] = false; //#8691
    $1.getRSSwidths(); //#8691
    var _4s = $k[--$j]; //#8691
    $1[$k[--$j]] = _4s; //#8691
    $k[$j++] = 'bwidths'; //#8692
    $k[$j++] = $1.seq % 21; //#8692
    $k[$j++] = 8; //#8692
    $k[$j++] = 3; //#8692
    $k[$j++] = 6; //#8692
    $k[$j++] = false; //#8692
    $1.getRSSwidths(); //#8692
    var _4v = $k[--$j]; //#8692
    $1[$k[--$j]] = _4v; //#8692
    $1.checkwidths = $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]); //#8694
    for (var _4y = 0; _4y <= 5; _4y += 1) { //#8699
        $1.i = _4y; //#8696
        $put($1.checkwidths, $1.i * 2, $get($1.swidths, $1.i)); //#8697
        $put($1.checkwidths, ($1.i * 2) + 1, $get($1.bwidths, $1.i)); //#8698
    } //#8698
    $k[$j++] = Infinity; //#8702
    var _59 = $1.d1w; //#8702
    $k[$j++] = 1; //#8702
    for (var _5A = 0, _5B = _59.length; _5A < _5B; _5A++) { //#8702
        $k[$j++] = $get(_59, _5A); //#8702
    } //#8702
    var _5D = $1.checkwidths; //#8702
    for (var _5E = 0, _5F = _5D.length; _5E < _5F; _5E++) { //#8702
        $k[$j++] = $get(_5D, _5E); //#8702
    } //#8702
    var _5H = $1.d2w; //#8702
    for (var _5I = 0, _5J = _5H.length; _5I < _5J; _5I++) { //#8702
        $k[$j++] = $get(_5H, _5I); //#8702
    } //#8702
    $k[$j++] = 1; //#8702
    $k[$j++] = 1; //#8702
    $k[$j++] = 5; //#8702
    $1.sbs = $a(); //#8702
    $k[$j++] = Infinity; //#8713
    var _5M = $1.sbs; //#8708
    $k[$j++] = Infinity; //#8709
    for (var _5O = 0, _5P = ~~(($1.sbs.length + 1) / 2); _5O < _5P; _5O++) { //#8709
        $k[$j++] = $1.height; //#8709
    } //#8709
    var _5R = $a(); //#8709
    $k[$j++] = Infinity; //#8710
    for (var _5T = 0, _5U = ~~(($1.sbs.length + 1) / 2); _5T < _5U; _5T++) { //#8710
        $k[$j++] = 0; //#8710
    } //#8710
    var _5V = $a(); //#8710
    $k[$j++] = 'ren'; //#8713
    $k[$j++] = bwipp_renlinear; //#8713
    $k[$j++] = 'sbs'; //#8713
    $k[$j++] = _5M; //#8713
    $k[$j++] = 'bhs'; //#8713
    $k[$j++] = _5R; //#8713
    $k[$j++] = 'bbs'; //#8713
    $k[$j++] = _5V; //#8713
    $k[$j++] = 'txt'; //#8713
    $k[$j++] = $1.txt; //#8713
    $k[$j++] = 'textxalign'; //#8713
    $k[$j++] = "center"; //#8713
    $k[$j++] = 'opt'; //#8713
    $k[$j++] = $1.options; //#8713
    var _5Y = $d(); //#8713
    $k[$j++] = _5Y; //#8716
    if (!$1.dontdraw) { //#8716
        bwipp_renlinear(); //#8716
    } //#8716
}

function bwipp_databarexpanded() {
    var $1 = Object.create(bwipp_databarexpanded.$ctx || (bwipp_databarexpanded.$ctx = {})); //#8752
    $1.parse = false; //#8755
    $1.dontlint = false; //#8756
    $1.lintreqs = true; //#8757
    $1.dontdraw = false; //#8758
    $1.height = 34 / 72; //#8759
    $1.format = "expanded"; //#8760
    $1.segments = -1; //#8761
    $1.linkage = false; //#8762
    $1.barxmult = 34; //#8763
    $k[$j++] = $1; //#8765
    bwipp_processoptions(); //#8765
    $1.options = $k[--$j]; //#8765
    $1.barcode = $k[--$j]; //#8766
    if ($1.segments == -1) { //#8774
        var _4 = $eq($1.format, "expandedstacked") ? 4 : 22; //#8771
        $1.segments = _4; //#8771
    } else { //#8774
        if ((($1.segments < 2) || ($1.segments > 22)) || (($1.segments % 2) != 0)) { //#8775
            $k[$j++] = 'bwipp.gs1databarexpandedBadSegments#8774'; //#8774
            $k[$j++] = "The number of segments must be even from 2 to 22"; //#8774
            bwipp_raiseerror(); //#8774
        } //#8774
    } //#8774
    $k[$j++] = $1.barcode; //#8778
    $k[$j++] = 'ai'; //#8778
    bwipp_gs1process(); //#8778
    $1.fncs = $k[--$j]; //#8779
    $1.vals = $k[--$j]; //#8780
    $1.ais = $k[--$j]; //#8781
    for (;;) { //#8869
        if ($1.ais.length == 2) { //#8793
            if ($eq($get($1.ais, 0), "01") && $eq($get($1.ais, 1), "3103")) { //#8792
                if ($eq($geti($get($1.vals, 0), 0, 1), "9") && ($cvi($get($1.vals, 1)) <= 32767)) { //#8791
                    $k[$j++] = "0100"; //#8790
                    $k[$j++] = false; //#8790
                    break; //#8790
                } //#8790
            } //#8790
        } //#8790
        if ($1.ais.length == 2) { //#8802
            if ($eq($get($1.ais, 0), "01") && $eq($get($1.ais, 1), "3202")) { //#8801
                if ($eq($geti($get($1.vals, 0), 0, 1), "9") && ($cvi($get($1.vals, 1)) <= 9999)) { //#8800
                    $k[$j++] = "0101"; //#8799
                    $k[$j++] = false; //#8799
                    break; //#8799
                } //#8799
            } //#8799
        } //#8799
        if ($1.ais.length == 2) { //#8811
            if ($eq($get($1.ais, 0), "01") && $eq($get($1.ais, 1), "3203")) { //#8810
                if ($eq($geti($get($1.vals, 0), 0, 1), "9") && ($cvi($get($1.vals, 1)) <= 22767)) { //#8809
                    $k[$j++] = "0101"; //#8808
                    $k[$j++] = false; //#8808
                    break; //#8808
                } //#8808
            } //#8808
        } //#8808
        var _h = $1.ais.length; //#8814
        if ((_h == 2) || (_h == 3)) { //#8845
            $k[$j++] = 'ai310x'; //#8815
            $k[$j++] = false; //#8815
            for (var _i = 3100; _i <= 3109; _i += 1) { //#8815
                var _n = $k[--$j]; //#8815
                $k[$j++] = _n || $eq($cvrs($s(4), _i, 10), $get($1.ais, 1)); //#8815
            } //#8815
            var _o = $k[--$j]; //#8815
            $1[$k[--$j]] = _o; //#8815
            $k[$j++] = 'ai320x'; //#8816
            $k[$j++] = false; //#8816
            for (var _q = 3200; _q <= 3209; _q += 1) { //#8816
                var _v = $k[--$j]; //#8816
                $k[$j++] = _v || $eq($cvrs($s(4), _q, 10), $get($1.ais, 1)); //#8816
            } //#8816
            var _w = $k[--$j]; //#8816
            $1[$k[--$j]] = _w; //#8816
            if ($1.ais.length == 3) { //#8820
                var _z = $a(["11", "13", "15", "17"]); //#8818
                $k[$j++] = 'aibad'; //#8818
                $k[$j++] = true; //#8818
                for (var _10 = 0, _11 = _z.length; _10 < _11; _10++) { //#8818
                    var _15 = $k[--$j]; //#8818
                    $k[$j++] = _15 && $ne($get(_z, _10), $get($1.ais, 2)); //#8818
                } //#8818
                var _16 = $k[--$j]; //#8818
                $1[$k[--$j]] = _16; //#8818
            } else { //#8820
                $1.aibad = false; //#8820
            } //#8820
            if (($eq($get($1.ais, 0), "01") && ($1.ai310x || $1.ai320x)) && (!$1.aibad)) { //#8844
                if ($1.ais.length == 3) { //#8841
                    var _1M = $cvi($geti($get($1.vals, 2), 2, 2)); //#8826
                    var _1Q = $cvi($geti($get($1.vals, 2), 4, 2)); //#8827
                    if ((($eq($geti($get($1.vals, 0), 0, 1), "9") && ($cvi($get($1.vals, 1)) <= 99999)) && ((_1M >= 1) && (_1M <= 12))) && ((_1Q >= 0) && (_1Q <= 31))) { //#8836
                        if ($1.ai310x && $eq($get($1.ais, 2), "11")) { //#8828
                            $k[$j++] = "0111000"; //#8828
                            $k[$j++] = false; //#8828
                            break; //#8828
                        } //#8828
                        if ($1.ai320x && $eq($get($1.ais, 2), "11")) { //#8829
                            $k[$j++] = "0111001"; //#8829
                            $k[$j++] = false; //#8829
                            break; //#8829
                        } //#8829
                        if ($1.ai310x && $eq($get($1.ais, 2), "13")) { //#8830
                            $k[$j++] = "0111010"; //#8830
                            $k[$j++] = false; //#8830
                            break; //#8830
                        } //#8830
                        if ($1.ai320x && $eq($get($1.ais, 2), "13")) { //#8831
                            $k[$j++] = "0111011"; //#8831
                            $k[$j++] = false; //#8831
                            break; //#8831
                        } //#8831
                        if ($1.ai310x && $eq($get($1.ais, 2), "15")) { //#8832
                            $k[$j++] = "0111100"; //#8832
                            $k[$j++] = false; //#8832
                            break; //#8832
                        } //#8832
                        if ($1.ai320x && $eq($get($1.ais, 2), "15")) { //#8833
                            $k[$j++] = "0111101"; //#8833
                            $k[$j++] = false; //#8833
                            break; //#8833
                        } //#8833
                        if ($1.ai310x && $eq($get($1.ais, 2), "17")) { //#8834
                            $k[$j++] = "0111110"; //#8834
                            $k[$j++] = false; //#8834
                            break; //#8834
                        } //#8834
                        if ($1.ai320x && $eq($get($1.ais, 2), "17")) { //#8835
                            $k[$j++] = "0111111"; //#8835
                            $k[$j++] = false; //#8835
                            break; //#8835
                        } //#8835
                    } //#8835
                } else { //#8841
                    if ($eq($geti($get($1.vals, 0), 0, 1), "9") && ($cvi($get($1.vals, 1)) <= 99999)) { //#8842
                        if ($1.ai310x) { //#8840
                            $k[$j++] = "0111000"; //#8840
                            $k[$j++] = false; //#8840
                            break; //#8840
                        } //#8840
                        if ($1.ai320x) { //#8841
                            $k[$j++] = "0111001"; //#8841
                            $k[$j++] = false; //#8841
                            break; //#8841
                        } //#8841
                    } //#8841
                } //#8841
            } //#8841
        } //#8841
        if ($1.ais.length >= 2) { //#8853
            $k[$j++] = 'ai392x'; //#8849
            $k[$j++] = false; //#8849
            for (var _1x = 3920; _1x <= 3923; _1x += 1) { //#8849
                var _22 = $k[--$j]; //#8849
                $k[$j++] = _22 || $eq($cvrs($s(4), _1x, 10), $get($1.ais, 1)); //#8849
            } //#8849
            var _23 = $k[--$j]; //#8849
            $1[$k[--$j]] = _23; //#8849
            if ($eq($get($1.ais, 0), "01") && $1.ai392x) { //#8852
                if ($eq($geti($get($1.vals, 0), 0, 1), "9")) { //#8851
                    $k[$j++] = "01100"; //#8851
                    $k[$j++] = true; //#8851
                    break; //#8851
                } //#8851
            } //#8851
        } //#8851
        if ($1.ais.length >= 2) { //#8861
            $k[$j++] = 'ai393x'; //#8857
            $k[$j++] = false; //#8857
            for (var _2C = 3930; _2C <= 3933; _2C += 1) { //#8857
                var _2H = $k[--$j]; //#8857
                $k[$j++] = _2H || $eq($cvrs($s(4), _2C, 10), $get($1.ais, 1)); //#8857
            } //#8857
            var _2I = $k[--$j]; //#8857
            $1[$k[--$j]] = _2I; //#8857
            if ($eq($get($1.ais, 0), "01") && $1.ai393x) { //#8860
                if ($eq($geti($get($1.vals, 0), 0, 1), "9")) { //#8859
                    $k[$j++] = "01101"; //#8859
                    $k[$j++] = true; //#8859
                    break; //#8859
                } //#8859
            } //#8859
        } //#8859
        if ($eq($get($1.ais, 0), "01")) { //#8864
            $k[$j++] = "1"; //#8864
            $k[$j++] = true; //#8864
            break; //#8864
        } //#8864
        $k[$j++] = "00"; //#8867
        $k[$j++] = true; //#8867
        break; //#8867
    } //#8867
    $1.gpfallow = $k[--$j]; //#8870
    $1.method = $k[--$j]; //#8871
    $1.conv12to40 = function() {
        var _2V = $strcpy($s(40), "0000000000000000000000000000000000000000"); //#8874
        var _2W = $k[--$j]; //#8875
        var _2a = $cvrs($s(10), $cvi($geti(_2W, 0, 3)), 2); //#8875
        $puti($geti(_2V, 0, 10), 10 - _2a.length, _2a); //#8875
        var _2e = $cvrs($s(10), $cvi($geti(_2W, 3, 3)), 2); //#8876
        $puti($geti(_2V, 10, 10), 10 - _2e.length, _2e); //#8876
        var _2i = $cvrs($s(10), $cvi($geti(_2W, 6, 3)), 2); //#8877
        $puti($geti(_2V, 20, 10), 10 - _2i.length, _2i); //#8877
        var _2m = $cvrs($s(10), $cvi($geti(_2W, 9, 3)), 2); //#8878
        $puti($geti(_2V, 30, 10), 10 - _2m.length, _2m); //#8878
        $k[$j++] = _2V; //#8879
        $k[$j++] = _2W; //#8879
        $j--; //#8879
    }; //#8879
    $1.conv13to44 = function() {
        var _2o = $strcpy($s(44), "00000000000000000000000000000000000000000000"); //#8883
        var _2p = $k[--$j]; //#8884
        var _2t = $cvrs($s(4), $cvi($geti(_2p, 0, 1)), 2); //#8884
        $puti($geti(_2o, 0, 4), 4 - _2t.length, _2t); //#8884
        $k[$j++] = _2o; //#8885
        $k[$j++] = _2o; //#8885
        $k[$j++] = $geti(_2p, 1, 12); //#8885
        $1.conv12to40(); //#8885
        var _2v = $k[--$j]; //#8885
        $puti($k[--$j], 4, _2v); //#8885
    }; //#8885
    $1.tobin = function() {
        var _2y = $s($k[--$j]); //#8889
        $k[$j++] = _2y; //#8889
        for (var _30 = 0, _2z = _2y.length - 1; _30 <= _2z; _30 += 1) { //#8889
            var _31 = $k[--$j]; //#8889
            $put(_31, _30, 48); //#8889
            $k[$j++] = _31; //#8889
        } //#8889
        var _32 = $k[--$j]; //#8890
        var _35 = $cvrs($s(_32.length), $k[--$j], 2); //#8890
        $puti(_32, _32.length - _35.length, _35); //#8890
        $k[$j++] = _32; //#8890
    }; //#8890
    $1.fnc1 = -1; //#8893
    $1.lnumeric = -2; //#8893
    $1.lalphanumeric = -3; //#8893
    $1.liso646 = -4; //#8893
    if ($eq($1.method, "00")) { //#8898
        $1.cdf = $a([]); //#8896
        $1.gpf = $a([]); //#8897
    } //#8897
    if ($eq($1.method, "1")) { //#8907
        $k[$j++] = 'cdf'; //#8901
        $k[$j++] = $geti($get($1.vals, 0), 0, 13); //#8901
        $1.conv13to44(); //#8901
        var _3D = $k[--$j]; //#8901
        $1[$k[--$j]] = _3D; //#8901
        $k[$j++] = Infinity; //#8902
        var _3F = $1.cdf; //#8902
        for (var _3G = 0, _3H = _3F.length; _3G < _3H; _3G++) { //#8902
            $k[$j++] = $f($get(_3F, _3G) - 48); //#8902
        } //#8902
        $1.cdf = $a(); //#8902
        $1.gpf = $a([]); //#8903
        $1.ais = $geti($1.ais, 1, $1.ais.length - 1); //#8904
        $1.vals = $geti($1.vals, 1, $1.vals.length - 1); //#8905
        $1.fncs = $geti($1.fncs, 1, $1.fncs.length - 1); //#8906
    } //#8906
    if ($eq($1.method, "0100")) { //#8918
        $1.cdf = $s(55); //#8910
        $k[$j++] = $1.cdf; //#8911
        $k[$j++] = 0; //#8911
        $k[$j++] = $geti($get($1.vals, 0), 1, 12); //#8911
        $1.conv12to40(); //#8911
        var _3a = $k[--$j]; //#8911
        var _3b = $k[--$j]; //#8911
        $puti($k[--$j], _3b, _3a); //#8911
        $k[$j++] = $1.cdf; //#8912
        $k[$j++] = 40; //#8912
        $k[$j++] = $cvi($get($1.vals, 1)); //#8912
        $k[$j++] = 15; //#8912
        $1.tobin(); //#8912
        var _3g = $k[--$j]; //#8912
        var _3h = $k[--$j]; //#8912
        $puti($k[--$j], _3h, _3g); //#8912
        $k[$j++] = Infinity; //#8913
        var _3j = $1.cdf; //#8913
        for (var _3k = 0, _3l = _3j.length; _3k < _3l; _3k++) { //#8913
            $k[$j++] = $get(_3j, _3k) - 48; //#8913
        } //#8913
        $1.cdf = $a(); //#8913
        $1.gpf = $a([]); //#8914
        $1.ais = $a([]); //#8915
        $1.vals = $a([]); //#8916
        $1.fncs = $a([]); //#8917
    } //#8917
    if ($eq($1.method, "0101")) { //#8934
        $1.cdf = $s(55); //#8921
        $k[$j++] = $1.cdf; //#8922
        $k[$j++] = 0; //#8922
        $k[$j++] = $geti($get($1.vals, 0), 1, 12); //#8922
        $1.conv12to40(); //#8922
        var _3y = $k[--$j]; //#8922
        var _3z = $k[--$j]; //#8922
        $puti($k[--$j], _3z, _3y); //#8922
        if ($eq($get($1.ais, 1), "3202")) { //#8926
            $k[$j++] = $cvi($get($1.vals, 1)); //#8924
            $k[$j++] = 15; //#8924
            $1.tobin(); //#8924
        } else { //#8926
            $k[$j++] = $cvi($get($1.vals, 1)) + 10000; //#8926
            $k[$j++] = 15; //#8926
            $1.tobin(); //#8926
        } //#8926
        $puti($1.cdf, 40, $k[--$j]); //#8928
        $k[$j++] = Infinity; //#8929
        var _49 = $1.cdf; //#8929
        for (var _4A = 0, _4B = _49.length; _4A < _4B; _4A++) { //#8929
            $k[$j++] = $get(_49, _4A) - 48; //#8929
        } //#8929
        $1.cdf = $a(); //#8929
        $1.gpf = $a([]); //#8930
        $1.ais = $a([]); //#8931
        $1.vals = $a([]); //#8932
        $1.fncs = $a([]); //#8933
    } //#8933
    if ($1.method.length == 7) { //#8956
        $1.cdf = $s(76); //#8937
        $k[$j++] = $1.cdf; //#8938
        $k[$j++] = 0; //#8938
        $k[$j++] = $geti($get($1.vals, 0), 1, 12); //#8938
        $1.conv12to40(); //#8938
        var _4O = $k[--$j]; //#8938
        var _4P = $k[--$j]; //#8938
        $puti($k[--$j], _4P, _4O); //#8938
        var _4R = $s(6); //#8939
        $puti(_4R, 0, $geti($get($1.ais, 1), 3, 1)); //#8939
        $puti(_4R, 1, $geti($get($1.vals, 1), 1, 5)); //#8940
        $k[$j++] = $cvi(_4R); //#8940
        $k[$j++] = 20; //#8940
        $1.tobin(); //#8940
        $puti($1.cdf, 40, $k[--$j]); //#8941
        if ($1.ais.length == 3) { //#8948
            var _4c = $get($1.vals, 2); //#8943
            $k[$j++] = ($cvi($geti(_4c, 0, 2)) * 384) + ((($cvi($geti(_4c, 2, 2)) - 1) * 32) + $cvi($geti(_4c, 4, 2))); //#8946
        } else { //#8948
            $k[$j++] = 38400; //#8948
        } //#8948
        $k[$j++] = 16; //#8950
        $1.tobin(); //#8950
        $puti($1.cdf, 60, $k[--$j]); //#8950
        $k[$j++] = Infinity; //#8951
        var _4i = $1.cdf; //#8951
        for (var _4j = 0, _4k = _4i.length; _4j < _4k; _4j++) { //#8951
            $k[$j++] = $get(_4i, _4j) - 48; //#8951
        } //#8951
        $1.cdf = $a(); //#8951
        $1.gpf = $a([]); //#8952
        $1.ais = $a([]); //#8953
        $1.vals = $a([]); //#8954
        $1.fncs = $a([]); //#8955
    } //#8955
    if ($eq($1.method, "01100")) { //#8967
        $1.cdf = $s(42); //#8959
        $k[$j++] = $1.cdf; //#8960
        $k[$j++] = 0; //#8960
        $k[$j++] = $geti($get($1.vals, 0), 1, 12); //#8960
        $1.conv12to40(); //#8960
        var _4x = $k[--$j]; //#8960
        var _4y = $k[--$j]; //#8960
        $puti($k[--$j], _4y, _4x); //#8960
        $k[$j++] = $1.cdf; //#8961
        $k[$j++] = 40; //#8961
        $k[$j++] = $cvi($geti($get($1.ais, 1), 3, 1)); //#8961
        $k[$j++] = 2; //#8961
        $1.tobin(); //#8961
        var _54 = $k[--$j]; //#8961
        var _55 = $k[--$j]; //#8961
        $puti($k[--$j], _55, _54); //#8961
        $k[$j++] = Infinity; //#8962
        var _57 = $1.cdf; //#8962
        for (var _58 = 0, _59 = _57.length; _58 < _59; _58++) { //#8962
            $k[$j++] = $get(_57, _58) - 48; //#8962
        } //#8962
        $1.cdf = $a(); //#8962
        $k[$j++] = Infinity; //#8963
        $forall($get($1.vals, 1)); //#8963
        if ($1.ais.length > 2) { //#8963
            $k[$j++] = $1.fnc1; //#8963
        } //#8963
        $1.gpf = $a(); //#8963
        $1.ais = $geti($1.ais, 2, $1.ais.length - 2); //#8964
        $1.vals = $geti($1.vals, 2, $1.vals.length - 2); //#8965
        $1.fncs = $geti($1.fncs, 2, $1.fncs.length - 2); //#8966
    } //#8966
    if ($eq($1.method, "01101")) { //#8979
        $1.cdf = $s(52); //#8970
        $k[$j++] = $1.cdf; //#8971
        $k[$j++] = 0; //#8971
        $k[$j++] = $geti($get($1.vals, 0), 1, 12); //#8971
        $1.conv12to40(); //#8971
        var _5W = $k[--$j]; //#8971
        var _5X = $k[--$j]; //#8971
        $puti($k[--$j], _5X, _5W); //#8971
        $k[$j++] = $1.cdf; //#8972
        $k[$j++] = 40; //#8972
        $k[$j++] = $cvi($geti($get($1.ais, 1), 3, 1)); //#8972
        $k[$j++] = 2; //#8972
        $1.tobin(); //#8972
        var _5d = $k[--$j]; //#8972
        var _5e = $k[--$j]; //#8972
        $puti($k[--$j], _5e, _5d); //#8972
        $k[$j++] = $1.cdf; //#8973
        $k[$j++] = 42; //#8973
        $k[$j++] = $cvi($geti($get($1.vals, 1), 0, 3)); //#8973
        $k[$j++] = 10; //#8973
        $1.tobin(); //#8973
        var _5k = $k[--$j]; //#8973
        var _5l = $k[--$j]; //#8973
        $puti($k[--$j], _5l, _5k); //#8973
        $k[$j++] = Infinity; //#8974
        var _5n = $1.cdf; //#8974
        for (var _5o = 0, _5p = _5n.length; _5o < _5p; _5o++) { //#8974
            $k[$j++] = $get(_5n, _5o) - 48; //#8974
        } //#8974
        $1.cdf = $a(); //#8974
        $k[$j++] = Infinity; //#8975
        var _5t = $get($1.vals, 1); //#8975
        var _5u = $geti(_5t, 3, _5t.length - 3); //#8975
        for (var _5v = 0, _5w = _5u.length; _5v < _5w; _5v++) { //#8975
            $k[$j++] = $get(_5u, _5v); //#8975
        } //#8975
        if ($1.ais.length > 2) { //#8975
            $k[$j++] = $1.fnc1; //#8975
        } //#8975
        $1.gpf = $a(); //#8975
        $1.ais = $geti($1.ais, 2, $1.ais.length - 2); //#8976
        $1.vals = $geti($1.vals, 2, $1.vals.length - 2); //#8977
        $1.fncs = $geti($1.fncs, 2, $1.fncs.length - 2); //#8978
    } //#8978
    if ($1.gpfallow) { //#8985
        $1.vlf = $a(2); //#8983
    } else { //#8985
        $1.vlf = $a([]); //#8985
    } //#8985
    if (!bwipp_databarexpanded.$ctx._9026) { //#9026
        (function() { //#9026
            var $ctx = Object.create($1); //#9026
            $k[$j++] = Infinity; //#8999
            for (var _6D = 0; _6D <= 119; _6D += 1) { //#8998
                var _6F = $strcpy($s(2), "00"); //#8991
                var _6H = $cvrs($s(2), _6D, 11); //#8991
                $puti(_6F, 2 - _6H.length, _6H); //#8992
                $k[$j++] = _6D; //#8993
                $k[$j++] = _6F; //#8993
                if ($get(_6F, 0) == 65) { //#8993
                    var _6J = $k[--$j]; //#8993
                    $put(_6J, 0, 94); //#8993
                    $k[$j++] = _6J; //#8993
                } //#8993
                var _6K = $k[--$j]; //#8994
                $k[$j++] = _6K; //#8994
                if ($get(_6K, 1) == 65) { //#8994
                    var _6M = $k[--$j]; //#8994
                    $put(_6M, 1, 94); //#8994
                    $k[$j++] = _6M; //#8994
                } //#8994
                var _6N = $k[--$j]; //#8995
                var _6Q = $strcpy($s(7), "0000000"); //#8996
                var _6S = $cvrs($s(7), $f($k[--$j] + 8), 2); //#8996
                $puti(_6Q, 7 - _6S.length, _6S); //#8997
                $k[$j++] = _6N; //#8997
                $k[$j++] = _6Q; //#8997
            } //#8997
            $k[$j++] = $ctx.lalphanumeric; //#8999
            $k[$j++] = "0000"; //#8999
            $ctx.numeric = $d(); //#9000
            $k[$j++] = Infinity; //#9009
            for (var _6V = 48; _6V <= 57; _6V += 1) { //#9003
                $k[$j++] = _6V; //#9003
                $k[$j++] = _6V - 43; //#9003
                $k[$j++] = 5; //#9003
                $ctx.tobin(); //#9003
            } //#9003
            $k[$j++] = $ctx.fnc1; //#9005
            $k[$j++] = "01111"; //#9005
            for (var _6X = 65; _6X <= 90; _6X += 1) { //#9005
                $k[$j++] = _6X; //#9005
                $k[$j++] = _6X - 33; //#9005
                $k[$j++] = 6; //#9005
                $ctx.tobin(); //#9005
            } //#9005
            $k[$j++] = 42; //#9007
            $k[$j++] = "111010"; //#9007
            for (var _6Y = 44; _6Y <= 47; _6Y += 1) { //#9007
                $k[$j++] = _6Y; //#9007
                $k[$j++] = _6Y + 15; //#9007
                $k[$j++] = 6; //#9007
                $ctx.tobin(); //#9007
            } //#9007
            $k[$j++] = $ctx.lnumeric; //#9009
            $k[$j++] = "000"; //#9009
            $k[$j++] = $ctx.liso646; //#9009
            $k[$j++] = "00100"; //#9009
            $ctx.alphanumeric = $d(); //#9010
            $k[$j++] = Infinity; //#9024
            for (var _6c = 48; _6c <= 57; _6c += 1) { //#9013
                $k[$j++] = _6c; //#9013
                $k[$j++] = _6c - 43; //#9013
                $k[$j++] = 5; //#9013
                $ctx.tobin(); //#9013
            } //#9013
            $k[$j++] = $ctx.fnc1; //#9015
            $k[$j++] = "01111"; //#9015
            for (var _6e = 65; _6e <= 90; _6e += 1) { //#9015
                $k[$j++] = _6e; //#9015
                $k[$j++] = _6e - 1; //#9015
                $k[$j++] = 7; //#9015
                $ctx.tobin(); //#9015
            } //#9015
            for (var _6f = 97; _6f <= 122; _6f += 1) { //#9016
                $k[$j++] = _6f; //#9016
                $k[$j++] = _6f - 7; //#9016
                $k[$j++] = 7; //#9016
                $ctx.tobin(); //#9016
            } //#9016
            $k[$j++] = 33; //#9019
            $k[$j++] = "11101000"; //#9019
            $k[$j++] = 34; //#9019
            $k[$j++] = "11101001"; //#9019
            for (var _6g = 37; _6g <= 47; _6g += 1) { //#9019
                $k[$j++] = _6g; //#9019
                $k[$j++] = _6g + 197; //#9019
                $k[$j++] = 8; //#9019
                $ctx.tobin(); //#9019
            } //#9019
            for (var _6h = 58; _6h <= 63; _6h += 1) { //#9020
                $k[$j++] = _6h; //#9020
                $k[$j++] = _6h + 187; //#9020
                $k[$j++] = 8; //#9020
                $ctx.tobin(); //#9020
            } //#9020
            $k[$j++] = 95; //#9024
            $k[$j++] = "11111011"; //#9024
            $k[$j++] = 32; //#9024
            $k[$j++] = "11111100"; //#9024
            $k[$j++] = $ctx.lnumeric; //#9024
            $k[$j++] = "000"; //#9024
            $k[$j++] = $ctx.lalphanumeric; //#9024
            $k[$j++] = "00100"; //#9024
            $ctx.iso646 = $d(); //#9025
            for (var _6l in $ctx) {
                $ctx.hasOwnProperty(_6l) && (bwipp_databarexpanded.$ctx[_6l] = $ctx[_6l]);
            } //#9025
            bwipp_databarexpanded.$ctx._9026 = 1; //#9025
        })(); //#9025
    } //#9025
    for (var _6o = 0, _6n = $1.ais.length - 1; _6o <= _6n; _6o += 1) { //#9044
        $1.i = _6o; //#9030
        $1.ai = $get($1.ais, $1.i); //#9031
        $1.val = $get($1.vals, $1.i); //#9032
        var _6y = $a(($1.gpf.length + $1.ai.length) + $1.val.length); //#9033
        $puti(_6y, 0, $1.gpf); //#9034
        $k[$j++] = _6y; //#9035
        $k[$j++] = _6y; //#9035
        $k[$j++] = $1.gpf.length; //#9035
        $k[$j++] = $1.ai; //#9035
        $k[$j++] = Infinity; //#9035
        var _72 = $k[--$j]; //#9035
        var _73 = $k[--$j]; //#9035
        $k[$j++] = _72; //#9035
        $forall(_73); //#9035
        var _74 = $a(); //#9035
        var _75 = $k[--$j]; //#9035
        $puti($k[--$j], _75, _74); //#9035
        var _77 = $k[--$j]; //#9036
        $k[$j++] = _77; //#9036
        $k[$j++] = _77; //#9036
        $k[$j++] = $1.gpf.length + $1.ai.length; //#9036
        $k[$j++] = $1.val; //#9036
        $k[$j++] = Infinity; //#9036
        var _7B = $k[--$j]; //#9036
        var _7C = $k[--$j]; //#9036
        $k[$j++] = _7B; //#9036
        $forall(_7C); //#9036
        var _7D = $a(); //#9036
        var _7E = $k[--$j]; //#9036
        $puti($k[--$j], _7E, _7D); //#9036
        $1.gpf = $k[--$j]; //#9037
        if (($1.i != ($1.ais.length - 1)) && $get($1.fncs, $1.i)) { //#9043
            var _7N = $a($1.gpf.length + 1); //#9039
            $puti(_7N, 0, $1.gpf); //#9040
            $put(_7N, $1.gpf.length, $1.fnc1); //#9041
            $1.gpf = _7N; //#9042
        } //#9042
    } //#9042
    $1.rembits = function() {
        var _7R = $k[--$j]; //#9048
        var _7S = 48; //#9050
        var _7T = (~~Math.ceil(_7R / 12)) * 12; //#9050
        if (((~~Math.ceil(_7R / 12)) * 12) < 48) { //#9050
            var _ = _7S; //#9050
            _7S = _7T; //#9050
            _7T = _; //#9050
        } //#9050
        var _7U = ~~(_7T / 12); //#9051
        $k[$j++] = _7R; //#9055
        $k[$j++] = _7T; //#9055
        $k[$j++] = _7U; //#9055
        if ((_7U % $1.segments) == 1) { //#9054
            var _7W = $k[--$j]; //#9052
            var _7X = $k[--$j]; //#9052
            $k[$j++] = $f(_7W + 1) * 12; //#9052
            $k[$j++] = _7X; //#9052
            $j--; //#9052
        } else { //#9054
            $j--; //#9054
        } //#9054
        var _7Y = $k[--$j]; //#9056
        var _7Z = $k[--$j]; //#9056
        $k[$j++] = $f(_7Y - _7Z); //#9056
    }; //#9056
    $1.encode = function() {
        var _7a = $k[--$j]; //#9060
        $k[$j++] = _7a; //#9060
        if ($ne(_7a, 'raw')) { //#9060
            var _7b = $k[--$j]; //#9060
            var _7d = $get(_7b, $k[--$j]); //#9060
            $k[$j++] = _7d; //#9060
        } else { //#9060
            $j--; //#9060
        } //#9060
        $k[$j++] = Infinity; //#9061
        var _7e = $k[--$j]; //#9061
        var _7f = $k[--$j]; //#9061
        $k[$j++] = _7e; //#9061
        $forall(_7f, function() { //#9061
            var _7g = $k[--$j]; //#9061
            $k[$j++] = $f(_7g - 48); //#9061
        }); //#9061
        var _7h = $a(); //#9061
        $puti($1.gpfenc, $1.j, _7h); //#9063
        $1.j = _7h.length + $1.j; //#9064
    }; //#9064
    $k[$j++] = Infinity; //#9068
    for (var _7m = 0, _7n = $1.gpf.length; _7m < _7n; _7m++) { //#9068
        $k[$j++] = 0; //#9068
    } //#9068
    $k[$j++] = 0; //#9068
    $k[$j++] = -1; //#9068
    $1.numericruns = $a(); //#9068
    $k[$j++] = Infinity; //#9069
    for (var _7q = 0, _7r = $1.gpf.length; _7q < _7r; _7q++) { //#9069
        $k[$j++] = 0; //#9069
    } //#9069
    $k[$j++] = 0; //#9069
    $1.alphanumericruns = $a(); //#9069
    $k[$j++] = Infinity; //#9070
    for (var _7u = 0, _7v = $1.gpf.length; _7u < _7v; _7u++) { //#9070
        $k[$j++] = 0; //#9070
    } //#9070
    $k[$j++] = 9999; //#9070
    $1.nextiso646only = $a(); //#9070
    for (var _7y = $1.gpf.length - 1; _7y >= 0; _7y -= 1) { //#9092
        $1.i = _7y; //#9072
        var _83 = $strcpy($s(2), "00"); //#9074
        var _86 = $get($1.gpf, $1.i); //#9075
        $k[$j++] = $get($1.gpf, $1.i); //#9075
        $k[$j++] = _83; //#9075
        $k[$j++] = _83; //#9075
        $k[$j++] = 0; //#9075
        $k[$j++] = _86; //#9075
        if (_86 == $1.fnc1) { //#9075
            $j--; //#9075
            $k[$j++] = 94; //#9075
        } //#9075
        var _88 = $k[--$j]; //#9075
        var _89 = $k[--$j]; //#9075
        $put($k[--$j], _89, _88); //#9075
        if ($1.i < ($1.gpf.length - 1)) { //#9076
            var _8D = $k[--$j]; //#9076
            var _8G = $get($1.gpf, $1.i + 1); //#9076
            $k[$j++] = _8D; //#9076
            $k[$j++] = _8D; //#9076
            $k[$j++] = 1; //#9076
            $k[$j++] = _8G; //#9076
            if (_8G == $1.fnc1) { //#9076
                $j--; //#9076
                $k[$j++] = 94; //#9076
            } //#9076
            var _8I = $k[--$j]; //#9076
            var _8J = $k[--$j]; //#9076
            $put($k[--$j], _8J, _8I); //#9076
        } //#9076
        var _8N = $get($1.numeric, $k[--$j]) !== undefined; //#9077
        if (_8N) { //#9080
            $put($1.numericruns, $1.i, $f($get($1.numericruns, $1.i + 2) + 2)); //#9078
        } else { //#9080
            $put($1.numericruns, $1.i, 0); //#9080
        } //#9080
        var _8V = $k[--$j]; //#9082
        var _8X = $get($1.alphanumeric, _8V) !== undefined; //#9082
        $k[$j++] = _8V; //#9086
        if (_8X) { //#9085
            $put($1.alphanumericruns, $1.i, $f($get($1.alphanumericruns, $1.i + 1) + 1)); //#9083
        } else { //#9085
            $put($1.alphanumericruns, $1.i, 0); //#9085
        } //#9085
        var _8f = $k[--$j]; //#9087
        var _8h = $get($1.iso646, _8f) !== undefined; //#9087
        var _8j = $get($1.alphanumeric, _8f) !== undefined; //#9087
        if (_8h && (!_8j)) { //#9090
            $put($1.nextiso646only, $1.i, 0); //#9088
        } else { //#9090
            $put($1.nextiso646only, $1.i, $f($get($1.nextiso646only, $1.i + 1) + 1)); //#9090
        } //#9090
    } //#9090
    $1.gpfenc = $a(252); //#9095
    $1.i = 0; //#9096
    $1.j = 0; //#9096
    $1.mode = "numeric"; //#9096
    for (;;) { //#9186
        if ($1.i == $1.gpf.length) { //#9098
            break; //#9098
        } //#9098
        for (;;) { //#9185
            if ($eq($1.mode, "numeric")) { //#9134
                if ($1.i <= ($1.gpf.length - 2)) { //#9131
                    var _8x = $s(2); //#9103
                    var _90 = $get($1.gpf, $1.i); //#9104
                    $k[$j++] = _8x; //#9104
                    $k[$j++] = _8x; //#9104
                    $k[$j++] = 0; //#9104
                    $k[$j++] = _90; //#9104
                    if (_90 == $1.fnc1) { //#9104
                        $j--; //#9104
                        $k[$j++] = 94; //#9104
                    } //#9104
                    var _92 = $k[--$j]; //#9104
                    var _93 = $k[--$j]; //#9104
                    $put($k[--$j], _93, _92); //#9104
                    var _95 = $k[--$j]; //#9105
                    var _98 = $get($1.gpf, $1.i + 1); //#9105
                    $k[$j++] = _95; //#9105
                    $k[$j++] = _95; //#9105
                    $k[$j++] = 1; //#9105
                    $k[$j++] = _98; //#9105
                    if (_98 == $1.fnc1) { //#9105
                        $j--; //#9105
                        $k[$j++] = 94; //#9105
                    } //#9105
                    var _9A = $k[--$j]; //#9105
                    var _9B = $k[--$j]; //#9105
                    $put($k[--$j], _9B, _9A); //#9105
                    var _9D = $k[--$j]; //#9106
                    var _9F = $get($1.numeric, _9D) !== undefined; //#9106
                    $k[$j++] = _9D; //#9110
                    if (_9F) { //#9110
                        $k[$j++] = $1.numeric; //#9107
                        $1.encode(); //#9107
                        $1.i = $1.i + 2; //#9108
                        break; //#9109
                    } //#9109
                    $j--; //#9111
                    $k[$j++] = $1.lalphanumeric; //#9112
                    $k[$j++] = $1.numeric; //#9112
                    $1.encode(); //#9112
                    $1.mode = "alphanumeric"; //#9113
                    break; //#9114
                } else { //#9131
                    var _9M = $get($1.gpf, $1.i); //#9116
                    if ((_9M < 48) || (_9M > 57)) { //#9120
                        $k[$j++] = $1.lalphanumeric; //#9117
                        $k[$j++] = $1.numeric; //#9117
                        $1.encode(); //#9117
                        $1.mode = "alphanumeric"; //#9118
                        break; //#9119
                    } //#9119
                    $k[$j++] = 'rem'; //#9121
                    $k[$j++] = ((((12 + 1) + $1.method.length) + $1.vlf.length) + $1.cdf.length) + $1.j; //#9121
                    $1.rembits(); //#9121
                    var _9T = $k[--$j]; //#9121
                    $1[$k[--$j]] = _9T; //#9121
                    if (($1.rem >= 4) && ($1.rem <= 6)) { //#9131
                        var _9a = $geti($strcpy($s(6), "000000"), 0, $1.rem); //#9123
                        var _9f = $cvrs($s(4), $f($get($1.gpf, $1.i) - 47), 2); //#9124
                        $puti(_9a, 4 - _9f.length, _9f); //#9125
                        $k[$j++] = _9a; //#9125
                        $k[$j++] = 'raw'; //#9125
                        $1.encode(); //#9125
                        $1.i = $1.i + 1; //#9126
                        break; //#9127
                    } else { //#9131
                        var _9h = $s(2); //#9129
                        $put(_9h, 0, $get($1.gpf, $1.i)); //#9129
                        $put(_9h, 1, 94); //#9129
                        $k[$j++] = _9h; //#9129
                        $k[$j++] = $1.numeric; //#9129
                        $1.encode(); //#9129
                        $1.i = $1.i + 1; //#9130
                        break; //#9131
                    } //#9131
                } //#9131
            } //#9131
            if ($eq($1.mode, "alphanumeric")) { //#9161
                if ($get($1.gpf, $1.i) == $1.fnc1) { //#9142
                    $k[$j++] = $1.fnc1; //#9138
                    $k[$j++] = $1.alphanumeric; //#9138
                    $1.encode(); //#9138
                    $1.mode = "numeric"; //#9139
                    $1.i = $1.i + 1; //#9140
                    break; //#9141
                } //#9141
                var _9x = $get($1.gpf, $1.i); //#9143
                var _9z = $get($1.iso646, _9x) !== undefined; //#9143
                var _A1 = $get($1.alphanumeric, _9x) !== undefined; //#9143
                if (_9z && (!_A1)) { //#9147
                    $k[$j++] = $1.liso646; //#9144
                    $k[$j++] = $1.alphanumeric; //#9144
                    $1.encode(); //#9144
                    $1.mode = "iso646"; //#9145
                    break; //#9146
                } //#9146
                if ($get($1.numericruns, $1.i) >= 6) { //#9152
                    $k[$j++] = $1.lnumeric; //#9149
                    $k[$j++] = $1.alphanumeric; //#9149
                    $1.encode(); //#9149
                    $1.mode = "numeric"; //#9150
                    break; //#9151
                } //#9151
                var _AB = $get($1.numericruns, $1.i); //#9153
                if ((_AB >= 4) && ($f(_AB + $1.i) == $1.gpf.length)) { //#9157
                    $k[$j++] = $1.lnumeric; //#9154
                    $k[$j++] = $1.alphanumeric; //#9154
                    $1.encode(); //#9154
                    $1.mode = "numeric"; //#9155
                    break; //#9156
                } //#9156
                $k[$j++] = $get($1.gpf, $1.i); //#9158
                $k[$j++] = $1.alphanumeric; //#9158
                $1.encode(); //#9158
                $1.i = $1.i + 1; //#9159
                break; //#9160
            } //#9160
            if ($eq($1.mode, "iso646")) { //#9183
                if ($get($1.gpf, $1.i) == $1.fnc1) { //#9169
                    $k[$j++] = $1.fnc1; //#9165
                    $k[$j++] = $1.iso646; //#9165
                    $1.encode(); //#9165
                    $1.mode = "numeric"; //#9166
                    $1.i = $1.i + 1; //#9167
                    break; //#9168
                } //#9168
                if (($get($1.numericruns, $1.i) >= 4) && ($get($1.nextiso646only, $1.i) >= 10)) { //#9174
                    $k[$j++] = $1.lnumeric; //#9171
                    $k[$j++] = $1.iso646; //#9171
                    $1.encode(); //#9171
                    $1.mode = "numeric"; //#9172
                    break; //#9173
                } //#9173
                if (($get($1.alphanumericruns, $1.i) >= 5) && ($get($1.nextiso646only, $1.i) >= 10)) { //#9179
                    $k[$j++] = $1.lalphanumeric; //#9176
                    $k[$j++] = $1.iso646; //#9176
                    $1.encode(); //#9176
                    $1.mode = "alphanumeric"; //#9177
                    break; //#9178
                } //#9178
                $k[$j++] = $get($1.gpf, $1.i); //#9180
                $k[$j++] = $1.iso646; //#9180
                $1.encode(); //#9180
                $1.i = $1.i + 1; //#9181
                break; //#9182
            } //#9182
        } //#9182
    } //#9182
    $1.gpf = $geti($1.gpfenc, 0, $1.j); //#9187
    var _Av = ((((1 + 12) + $1.method.length) + $1.vlf.length) + $1.cdf.length) + $1.gpf.length; //#9191
    $k[$j++] = _Av; //#9191
    $k[$j++] = _Av; //#9191
    $1.rembits(); //#9191
    var _Aw = $k[--$j]; //#9191
    $1.pad = $a(_Aw); //#9191
    $k[$j++] = _Aw; //#9198
    if ($1.vlf.length != 0) { //#9197
        var _Az = $k[--$j]; //#9193
        var _B1 = ~~($f($k[--$j] + _Az) / 12); //#9194
        $put($1.vlf, 0, _B1 % 2); //#9194
        var _B3 = (_B1 <= 14) ? 0 : 1; //#9195
        $put($1.vlf, 1, _B3); //#9195
    } else { //#9197
        $j -= 2; //#9197
    } //#9197
    if ($1.pad.length > 0) { //#9207
        for (var _B8 = 0, _B7 = $1.pad.length - 1; _B8 <= _B7; _B8 += 5) { //#9203
            $1.i = _B8; //#9201
            var _B9 = $1.pad; //#9202
            var _BA = $1.i; //#9202
            var _BB = $a([0, 0, 1, 0, 0]); //#9202
            var _BC = $1.pad; //#9202
            var _BD = $1.i; //#9202
            var _BE = 5; //#9202
            var _BF = _BC.length - _BD; //#9202
            if ((_BC.length - _BD) > 5) { //#9202
                var _ = _BE; //#9202
                _BE = _BF; //#9202
                _BF = _; //#9202
            } //#9202
            $puti(_B9, _BA, $geti(_BB, 0, _BF)); //#9202
        } //#9202
        if ($eq($1.mode, "numeric")) { //#9206
            $k[$j++] = Infinity; //#9205
            $k[$j++] = 0; //#9205
            $k[$j++] = 0; //#9205
            $k[$j++] = 0; //#9205
            $k[$j++] = 0; //#9205
            $aload($1.pad); //#9205
            $1.pad = $geti($a(), 0, $1.pad.length); //#9205
        } //#9205
    } //#9205
    $k[$j++] = Infinity; //#9216
    var _BN = $1.linkage ? 1 : 0; //#9211
    $k[$j++] = _BN; //#9212
    $forall($1.method, function() { //#9212
        var _BP = $k[--$j]; //#9212
        $k[$j++] = $f(_BP - 48); //#9212
    }); //#9212
    $aload($1.vlf); //#9213
    $aload($1.cdf); //#9214
    $aload($1.gpf); //#9215
    $aload($1.pad); //#9216
    $1.binval = $a(); //#9216
    $1.datalen = ~~($1.binval.length / 12); //#9218
    $1.ncr = function() {
        var _BW = $k[--$j]; //#9221
        var _BX = $k[--$j]; //#9221
        var _BY = $f(_BX - _BW); //#9221
        if (_BW < $f(_BX - _BW)) { //#9221
            var _ = _BY; //#9221
            _BY = _BW; //#9221
            _BW = _; //#9221
        } //#9221
        $k[$j++] = _BY; //#9228
        $k[$j++] = 1; //#9228
        $k[$j++] = 1; //#9228
        for (var _Ba = _BX, _BZ = $f(_BW + 1); _Ba >= _BZ; _Ba -= 1) { //#9228
            var _Bb = $k[--$j]; //#9224
            var _Bc = $k[--$j]; //#9225
            var _Bd = $k[--$j]; //#9225
            $k[$j++] = _Bd; //#9227
            $k[$j++] = _Bc; //#9227
            $k[$j++] = _Bb * _Ba; //#9227
            if ($le(_Bc, _Bd)) { //#9227
                var _Be = $k[--$j]; //#9226
                var _Bf = $k[--$j]; //#9226
                $k[$j++] = $f(_Bf + 1); //#9226
                $k[$j++] = ~~(_Be / _Bf); //#9226
            } //#9226
        } //#9226
        for (;;) { //#9232
            var _Bg = $k[--$j]; //#9230
            var _Bh = $k[--$j]; //#9230
            var _Bi = $k[--$j]; //#9230
            $k[$j++] = _Bi; //#9230
            $k[$j++] = _Bh; //#9230
            $k[$j++] = _Bg; //#9230
            if ($gt(_Bh, _Bi)) { //#9230
                break; //#9230
            } //#9230
            var _Bj = $k[--$j]; //#9231
            var _Bk = $k[--$j]; //#9231
            $k[$j++] = $f(_Bk + 1); //#9231
            $k[$j++] = ~~(_Bj / _Bk); //#9231
        } //#9231
        var _Bl = $k[--$j]; //#9233
        var _Bm = $k[--$j]; //#9233
        $k[$j++] = _Bl; //#9233
        $k[$j++] = _Bm; //#9233
        $j--; //#9233
        var _Bn = $k[--$j]; //#9233
        var _Bo = $k[--$j]; //#9233
        $k[$j++] = _Bn; //#9233
        $k[$j++] = _Bo; //#9233
        $j--; //#9233
    }; //#9233
    $1.getRSSwidths = function() {
        $1.oe = $k[--$j]; //#9237
        $1.el = $k[--$j]; //#9238
        $1.mw = $k[--$j]; //#9239
        $1.nm = $k[--$j]; //#9240
        $1.val = $k[--$j]; //#9241
        $1.out = $a($1.el); //#9242
        $1.mask = 0; //#9243
        for (var _By = 0, _Bx = $f($1.el - 2); _By <= _Bx; _By += 1) { //#9270
            $1.bar = _By; //#9245
            $1.ew = 1; //#9246
            var _C0 = $1.bar; //#9247
            $1.mask = $1.mask | ((_C0 < 0 ? 1 >>> -_C0 : 1 << _C0)); //#9247
            for (;;) { //#9266
                $k[$j++] = 'sval'; //#9248
                $k[$j++] = $f($f($1.nm - $1.ew) - 1); //#9248
                $k[$j++] = $f($f($1.el - $1.bar) - 2); //#9248
                $1.ncr(); //#9248
                var _C5 = $k[--$j]; //#9248
                $1[$k[--$j]] = _C5; //#9248
                if (($1.oe && ($1.mask == 0)) && (($f(($f($f($1.nm - $1.ew) - ($1.el * 2))) + ($1.bar * 2))) >= -2)) { //#9251
                    $k[$j++] = 'sval'; //#9250
                    $k[$j++] = $1.sval; //#9250
                    $k[$j++] = $f(($f($f($1.nm - $1.ew) - $1.el)) + $1.bar); //#9250
                    $k[$j++] = $f($f($1.el - $1.bar) - 2); //#9250
                    $1.ncr(); //#9250
                    var _CK = $k[--$j]; //#9250
                    var _CL = $k[--$j]; //#9250
                    $1[$k[--$j]] = $f(_CL - _CK); //#9250
                } //#9250
                if ($f($1.el - $1.bar) > 2) { //#9260
                    $1.lval = 0; //#9253
                    for (var _CV = $f(($f(($f($f($1.nm - $1.ew) - $1.el)) + $1.bar)) + 2), _CU = $f($1.mw + 1); _CV >= _CU; _CV -= 1) { //#9257
                        $k[$j++] = $f(($f($f($1.nm - _CV) - $1.ew)) - 1); //#9255
                        $k[$j++] = $f($f($1.el - $1.bar) - 3); //#9255
                        $1.ncr(); //#9255
                        $1.lval = $f($k[--$j] + $1.lval); //#9256
                    } //#9256
                    $1.sval = $f($1.sval - ($1.lval * ($f($f($1.el - $1.bar) - 1)))); //#9258
                } else { //#9260
                    if ($f($1.nm - $1.ew) > $1.mw) { //#9260
                        $1.sval = $f($1.sval - 1); //#9260
                    } //#9260
                } //#9260
                $1.val = $f($1.val - $1.sval); //#9262
                if ($1.val < 0) { //#9263
                    break; //#9263
                } //#9263
                $1.ew = $1.ew + 1; //#9264
                var _Cp = $1.bar; //#9265
                $1.mask = $1.mask & (~((_Cp < 0 ? 1 >>> -_Cp : 1 << _Cp))); //#9265
            } //#9265
            $1.val = $f($1.val + $1.sval); //#9267
            $1.nm = $f($1.nm - $1.ew); //#9268
            $put($1.out, $1.bar, $1.ew); //#9269
        } //#9269
        $put($1.out, $f($1.el - 1), $1.nm); //#9271
        $k[$j++] = $1.out; //#9272
    }; //#9272
    if (!bwipp_databarexpanded.$ctx._9283) { //#9283
        (function() { //#9283
            var $ctx = Object.create($1); //#9283
            $ctx.tab174 = $a([347, 0, 12, 5, 7, 2, 87, 4, 1387, 348, 10, 7, 5, 4, 52, 20, 2947, 1388, 8, 9, 4, 5, 30, 52, 3987, 2948, 6, 11, 3, 6, 10, 104, 4191, 3988, 4, 13, 1, 8, 1, 204]); //#9282
            for (var _D2 in $ctx) {
                $ctx.hasOwnProperty(_D2) && (bwipp_databarexpanded.$ctx[_D2] = $ctx[_D2]);
            } //#9282
            bwipp_databarexpanded.$ctx._9283 = 1; //#9282
        })(); //#9282
    } //#9282
    $1.dxw = $a($1.datalen); //#9285
    for (var _D7 = 0, _D6 = $1.datalen - 1; _D7 <= _D6; _D7 += 1) { //#9326
        $1.x = _D7; //#9289
        $1.d = $geti($1.binval, $1.x * 12, 12); //#9291
        $k[$j++] = 'd'; //#9292
        $k[$j++] = 0; //#9292
        for (var _DB = 0; _DB <= 11; _DB += 1) { //#9292
            $1.j = _DB; //#9292
            var _DG = $k[--$j]; //#9292
            $k[$j++] = $f(_DG + ((~~Math.pow(2, 11 - $1.j)) * $get($1.d, $1.j))); //#9292
        } //#9292
        var _DH = $k[--$j]; //#9292
        $1[$k[--$j]] = _DH; //#9292
        $1.j = 0; //#9294
        for (;;) { //#9304
            if ($le($1.d, $get($1.tab174, $1.j))) { //#9302
                var _DP = $geti($1.tab174, $1.j + 1, 7); //#9296
                for (var _DQ = 0, _DR = _DP.length; _DQ < _DR; _DQ++) { //#9296
                    $k[$j++] = $get(_DP, _DQ); //#9296
                } //#9296
                $1.dte = $k[--$j]; //#9297
                $1.dto = $k[--$j]; //#9297
                $1.dmwe = $k[--$j]; //#9298
                $1.dmwo = $k[--$j]; //#9298
                $1.dele = $k[--$j]; //#9299
                $1.delo = $k[--$j]; //#9299
                $1.dgs = $k[--$j]; //#9300
                break; //#9301
            } //#9301
            $1.j = $1.j + 8; //#9303
        } //#9303
        $k[$j++] = 'dwo'; //#9306
        $k[$j++] = ~~($f($1.d - $1.dgs) / $1.dte); //#9306
        $k[$j++] = $1.delo; //#9306
        $k[$j++] = $1.dmwo; //#9306
        $k[$j++] = 4; //#9306
        $k[$j++] = true; //#9306
        $1.getRSSwidths(); //#9306
        var _Dg = $k[--$j]; //#9306
        $1[$k[--$j]] = _Dg; //#9306
        $k[$j++] = 'dwe'; //#9307
        $k[$j++] = $f($1.d - $1.dgs) % $1.dte; //#9307
        $k[$j++] = $1.dele; //#9307
        $k[$j++] = $1.dmwe; //#9307
        $k[$j++] = 4; //#9307
        $k[$j++] = false; //#9307
        $1.getRSSwidths(); //#9307
        var _Dn = $k[--$j]; //#9307
        $1[$k[--$j]] = _Dn; //#9307
        $1.dw = $a(8); //#9309
        if (($1.x % 2) == 0) { //#9320
            for (var _Dr = 0; _Dr <= 3; _Dr += 1) { //#9315
                $1.j = _Dr; //#9312
                $put($1.dw, 7 - ($1.j * 2), $get($1.dwo, $1.j)); //#9313
                $put($1.dw, 6 - ($1.j * 2), $get($1.dwe, $1.j)); //#9314
            } //#9314
        } else { //#9320
            for (var _E2 = 0; _E2 <= 3; _E2 += 1) { //#9321
                $1.j = _E2; //#9318
                $put($1.dw, $1.j * 2, $get($1.dwo, $1.j)); //#9319
                $put($1.dw, ($1.j * 2) + 1, $get($1.dwe, $1.j)); //#9320
            } //#9320
        } //#9320
        $put($1.dxw, $1.x, $1.dw); //#9324
    } //#9324
    if (!bwipp_databarexpanded.$ctx._9350) { //#9350
        (function() { //#9350
            var $ctx = Object.create($1); //#9350
            $ctx.finderwidths = $a([1, 8, 4, 1, 1, 1, 1, 4, 8, 1, 3, 6, 4, 1, 1, 1, 1, 4, 6, 3, 3, 4, 6, 1, 1, 1, 1, 6, 4, 3, 3, 2, 8, 1, 1, 1, 1, 8, 2, 3, 2, 6, 5, 1, 1, 1, 1, 5, 6, 2, 2, 2, 9, 1, 1, 1, 1, 9, 2, 2]); //#9336
            $ctx.finderseq = $a([$a([0, 1]), $a([0, 3, 2]), $a([0, 5, 2, 7]), $a([0, 9, 2, 7, 4]), $a([0, 9, 2, 7, 6, 11]), $a([0, 9, 2, 7, 8, 11, 10]), $a([0, 1, 2, 3, 4, 5, 6, 7]), $a([0, 1, 2, 3, 4, 5, 6, 9, 8]), $a([0, 1, 2, 3, 4, 5, 6, 9, 10, 11]), $a([0, 1, 2, 3, 4, 7, 6, 9, 8, 11, 10])]); //#9349
            for (var _ES in $ctx) {
                $ctx.hasOwnProperty(_ES) && (bwipp_databarexpanded.$ctx[_ES] = $ctx[_ES]);
            } //#9349
            bwipp_databarexpanded.$ctx._9350 = 1; //#9349
        })(); //#9349
    } //#9349
    $1.seq = $get($1.finderseq, ~~(($1.datalen - 2) / 2)); //#9352
    $1.fxw = $a($1.seq.length); //#9353
    for (var _Ea = 0, _EZ = $1.seq.length - 1; _Ea <= _EZ; _Ea += 1) { //#9357
        $1.x = _Ea; //#9355
        $put($1.fxw, $1.x, $geti($1.finderwidths, $get($1.seq, $1.x) * 5, 5)); //#9356
    } //#9356
    if (!bwipp_databarexpanded.$ctx._9386) { //#9386
        (function() { //#9386
            var $ctx = Object.create($1); //#9386
            $ctx.checkweights = $a([-1, -1, -1, -1, -1, -1, -1, -1, 77, 96, 32, 81, 27, 9, 3, 1, 20, 60, 180, 118, 143, 7, 21, 63, 205, 209, 140, 117, 39, 13, 145, 189, 193, 157, 49, 147, 19, 57, 171, 91, 132, 44, 85, 169, 197, 136, 186, 62, 185, 133, 188, 142, 4, 12, 36, 108, 50, 87, 29, 80, 97, 173, 128, 113, 150, 28, 84, 41, 123, 158, 52, 156, 166, 196, 206, 139, 187, 203, 138, 46, 76, 17, 51, 153, 37, 111, 122, 155, 146, 119, 110, 107, 106, 176, 129, 43, 16, 48, 144, 10, 30, 90, 59, 177, 164, 125, 112, 178, 200, 137, 116, 109, 70, 210, 208, 202, 184, 130, 179, 115, 190, 204, 68, 93, 31, 151, 191, 134, 148, 22, 66, 198, 172, 94, 71, 2, 40, 154, 192, 64, 162, 54, 18, 6, 120, 149, 25, 75, 14, 42, 126, 167, 175, 199, 207, 69, 23, 78, 26, 79, 103, 98, 83, 38, 114, 131, 182, 124, 159, 53, 88, 170, 127, 183, 61, 161, 55, 165, 73, 8, 24, 72, 5, 15, 89, 100, 174, 58, 160, 194, 135, 45]); //#9385
            for (var _Ej in $ctx) {
                $ctx.hasOwnProperty(_Ej) && (bwipp_databarexpanded.$ctx[_Ej] = $ctx[_Ej]);
            } //#9385
            bwipp_databarexpanded.$ctx._9386 = 1; //#9385
        })(); //#9385
    } //#9385
    $k[$j++] = Infinity; //#9389
    $forall($1.seq, function() { //#9389
        $aload($geti($1.checkweights, $k[--$j] * 16, 16)); //#9389
    }); //#9389
    var _Eo = $a(); //#9389
    $1.checkweightseq = $geti(_Eo, 8, _Eo.length - 8); //#9390
    $k[$j++] = Infinity; //#9393
    var _Eq = $1.dxw; //#9393
    for (var _Er = 0, _Es = _Eq.length; _Er < _Es; _Er++) { //#9393
        $forall($get(_Eq, _Er)); //#9393
    } //#9393
    $1.widths = $a(); //#9393
    $1.checksum = 0; //#9396
    for (var _Ex = 0, _Ew = $1.widths.length - 1; _Ex <= _Ew; _Ex += 1) { //#9400
        $1.i = _Ex; //#9398
        $1.checksum = $f($1.checksum + ($get($1.widths, $1.i) * $get($1.checkweightseq, $1.i))); //#9399
    } //#9399
    $1.checksum = $f(($1.checksum % 211) + (($1.datalen - 3) * 211)); //#9401
    $1.i = 0; //#9403
    for (;;) { //#9413
        if ($1.checksum <= $get($1.tab174, $1.i)) { //#9411
            var _FD = $geti($1.tab174, $1.i + 1, 7); //#9405
            for (var _FE = 0, _FF = _FD.length; _FE < _FF; _FE++) { //#9405
                $k[$j++] = $get(_FD, _FE); //#9405
            } //#9405
            $1.cte = $k[--$j]; //#9406
            $1.cto = $k[--$j]; //#9406
            $1.cmwe = $k[--$j]; //#9407
            $1.cmwo = $k[--$j]; //#9407
            $1.cele = $k[--$j]; //#9408
            $1.celo = $k[--$j]; //#9408
            $1.cgs = $k[--$j]; //#9409
            break; //#9410
        } //#9410
        $1.i = $1.i + 8; //#9412
    } //#9412
    $k[$j++] = 'cwo'; //#9415
    $k[$j++] = ~~($f($1.checksum - $1.cgs) / $1.cte); //#9415
    $k[$j++] = $1.celo; //#9415
    $k[$j++] = $1.cmwo; //#9415
    $k[$j++] = 4; //#9415
    $k[$j++] = true; //#9415
    $1.getRSSwidths(); //#9415
    var _FU = $k[--$j]; //#9415
    $1[$k[--$j]] = _FU; //#9415
    $k[$j++] = 'cwe'; //#9416
    $k[$j++] = $f($1.checksum - $1.cgs) % $1.cte; //#9416
    $k[$j++] = $1.cele; //#9416
    $k[$j++] = $1.cmwe; //#9416
    $k[$j++] = 4; //#9416
    $k[$j++] = false; //#9416
    $1.getRSSwidths(); //#9416
    var _Fb = $k[--$j]; //#9416
    $1[$k[--$j]] = _Fb; //#9416
    $1.cw = $a(8); //#9418
    for (var _Fe = 0; _Fe <= 3; _Fe += 1) { //#9423
        $1.i = _Fe; //#9420
        $put($1.cw, $1.i * 2, $get($1.cwo, $1.i)); //#9421
        $put($1.cw, ($1.i * 2) + 1, $get($1.cwe, $1.i)); //#9422
    } //#9422
    var _Fp = $a(22); //#9425
    $put(_Fp, 0, $1.cw); //#9426
    $puti(_Fp, 1, $1.dxw); //#9426
    $1.dxw = $geti(_Fp, 0, $1.datalen + 1); //#9427
    $1.datalen = $1.dxw.length; //#9428
    $1.rows = $a(~~Math.ceil($1.datalen / $1.segments)); //#9431
    $1.numrows = $1.rows.length; //#9432
    for (var _G1 = 0, _G0 = $1.numrows - 1; _G1 <= _G0; _G1 += 1) { //#9447
        $1.r = _G1; //#9434
        $k[$j++] = Infinity; //#9435
        if ((($1.segments % 4) != 0) && (($1.r % 2) == 1)) { //#9436
            $k[$j++] = 0; //#9436
        } //#9436
        $k[$j++] = 1; //#9444
        $k[$j++] = 1; //#9444
        for (var _G6 = 0, _G5 = $1.segments - 1; _G6 <= _G5; _G6 += 1) { //#9444
            $1.pos = _G6 + ($1.r * $1.segments); //#9439
            if ($1.pos < $1.datalen) { //#9443
                $forall($get($1.dxw, $1.pos)); //#9441
                if (($1.pos % 2) == 0) { //#9442
                    $forall($get($1.fxw, ~~($1.pos / 2))); //#9442
                } //#9442
            } //#9442
        } //#9442
        var _GI = $counttomark() + 2; //#9446
        $k[$j++] = 1; //#9446
        $k[$j++] = 1; //#9446
        $astore($a(_GI)); //#9446
        $put($1.rows, $1.r, $k[--$j]); //#9446
        $j--; //#9446
    } //#9446
    if ($ne($1.format, "expandedstacked")) { //#9575
        var _GP = $get($1.rows, 0); //#9452
        $1.sbs = $geti(_GP, 1, _GP.length - 1); //#9452
        $k[$j++] = Infinity; //#9461
        $k[$j++] = 1; //#9460
        for (var _GT = 0, _GS = $1.datalen - 1; _GT <= _GS; _GT += 1) { //#9460
            $1.i = _GT; //#9457
            $forall($get($1.dxw, $1.i)); //#9458
            if (($1.i % 2) == 0) { //#9459
                $forall($get($1.fxw, ~~($1.i / 2))); //#9459
            } //#9459
        } //#9459
        $k[$j++] = 1; //#9461
        $k[$j++] = 1; //#9461
        $1.sbs = $a(); //#9461
        delete $1.options["parse"]; //#9464
        $k[$j++] = Infinity; //#9471
        var _Gd = $1.sbs; //#9468
        $k[$j++] = Infinity; //#9469
        for (var _Gf = 0, _Gg = ~~(($1.sbs.length + 1) / 2); _Gf < _Gg; _Gf++) { //#9469
            $k[$j++] = $1.height; //#9469
        } //#9469
        var _Gi = $a(); //#9469
        $k[$j++] = Infinity; //#9470
        for (var _Gk = 0, _Gl = ~~(($1.sbs.length + 1) / 2); _Gk < _Gl; _Gk++) { //#9470
            $k[$j++] = 0; //#9470
        } //#9470
        var _Gm = $a(); //#9470
        $k[$j++] = 'ren'; //#9471
        $k[$j++] = bwipp_renlinear; //#9471
        $k[$j++] = 'sbs'; //#9471
        $k[$j++] = _Gd; //#9471
        $k[$j++] = 'bhs'; //#9471
        $k[$j++] = _Gi; //#9471
        $k[$j++] = 'bbs'; //#9471
        $k[$j++] = _Gm; //#9471
        $k[$j++] = 'opt'; //#9471
        $k[$j++] = $1.options; //#9471
        var _Go = $d(); //#9471
        $k[$j++] = _Go; //#9474
        if (!$1.dontdraw) { //#9474
            bwipp_renlinear(); //#9474
        } //#9474
    } else { //#9575
        $1.seps = $a($1.numrows); //#9478
        for (var _Gu = 0, _Gt = $1.numrows - 1; _Gu <= _Gt; _Gu += 1) { //#9534
            $1.r = _Gu; //#9481
            $1.row = $get($1.rows, $1.r); //#9482
            $k[$j++] = Infinity; //#9485
            for (var _H0 = 0, _Gz = $1.row.length - 1; _H0 <= _Gz; _H0 += 2) { //#9490
                $1.i = _H0; //#9487
                for (var _H4 = 0, _H5 = $get($1.row, $1.i); _H4 < _H5; _H4++) { //#9488
                    $k[$j++] = 0; //#9488
                } //#9488
                if ($1.i < ($1.row.length - 1)) { //#9489
                    for (var _HB = 0, _HC = $get($1.row, $1.i + 1); _HB < _HC; _HB++) { //#9489
                        $k[$j++] = 1; //#9489
                    } //#9489
                } //#9489
            } //#9489
            $astore($a($counttomark())); //#9491
            $1.row = $k[--$j]; //#9491
            $j--; //#9491
            $k[$j++] = Infinity; //#9494
            $forall($1.row, function() { //#9494
                var _HH = $k[--$j]; //#9494
                $k[$j++] = $f(1 - _HH); //#9494
            }); //#9494
            $1.sep = $a(); //#9494
            $k[$j++] = Infinity; //#9497
            for (var _HL = 19, _HK = $1.row.length - 13; _HL <= _HK; _HL += 98) { //#9496
                $k[$j++] = _HL; //#9496
            } //#9496
            for (var _HO = 68, _HN = $1.row.length - 13; _HO <= _HN; _HO += 98) { //#9497
                $k[$j++] = _HO; //#9497
            } //#9497
            $1.finderpos = $a(); //#9497
            var _HQ = $1.finderpos; //#9499
            for (var _HR = 0, _HS = _HQ.length; _HR < _HS; _HR++) { //#9513
                var _HT = $get(_HQ, _HR); //#9513
                for (var _HV = _HT, _HU = $f(_HT + 14); _HV <= _HU; _HV += 1) { //#9512
                    $1.i = _HV; //#9501
                    if ($get($1.row, $1.i) == 0) { //#9509
                        if ($get($1.row, $1.i - 1) == 1) { //#9506
                            $k[$j++] = 1; //#9504
                        } else { //#9506
                            var _Hf = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; //#9506
                            $k[$j++] = _Hf; //#9506
                        } //#9506
                    } else { //#9509
                        $k[$j++] = 0; //#9509
                    } //#9509
                    $put($1.sep, $1.i, $k[--$j]); //#9511
                } //#9511
            } //#9511
            $puti($1.sep, 0, $a([0, 0, 0, 0])); //#9514
            $puti($1.sep, $1.row.length - 4, $a([0, 0, 0, 0])); //#9515
            if ((($1.segments % 4) == 0) && (($1.r % 2) == 1)) { //#9529
                if (($get($1.rows, $1.r).length != $get($1.rows, 0).length) && (($1.finderpos.length % 2) == 1)) { //#9527
                    $k[$j++] = Infinity; //#9521
                    $k[$j++] = 0; //#9521
                    $aload($1.row); //#9521
                    $1.row = $a(); //#9521
                    $k[$j++] = Infinity; //#9522
                    $k[$j++] = 0; //#9522
                    $aload($1.sep); //#9522
                    $1.sep = $a(); //#9522
                } else { //#9527
                    for (var _I1 = $1.row.length - 1; _I1 >= 0; _I1 -= 1) { //#9524
                        $k[$j++] = $get($1.row, _I1); //#9524
                    } //#9524
                    $astore($1.row); //#9525
                    $j--; //#9525
                    for (var _I6 = $1.sep.length - 1; _I6 >= 0; _I6 -= 1) { //#9526
                        $k[$j++] = $get($1.sep, _I6); //#9526
                    } //#9526
                    $astore($1.sep); //#9527
                    $j--; //#9527
                } //#9527
            } //#9527
            $put($1.rows, $1.r, $1.row); //#9531
            $put($1.seps, $1.r, $1.sep); //#9532
        } //#9532
        $1.pixx = $get($1.rows, 0).length; //#9537
        $k[$j++] = Infinity; //#9538
        for (var _IJ = 0, _IK = $1.pixx; _IJ < _IK; _IJ++) { //#9538
            $k[$j++] = 0; //#9538
        } //#9538
        var _IL = $a(); //#9538
        $puti(_IL, 0, $get($1.rows, $1.numrows - 1)); //#9538
        $put($1.rows, $1.numrows - 1, _IL); //#9539
        $k[$j++] = Infinity; //#9540
        for (var _IS = 0, _IT = $1.pixx; _IS < _IT; _IS++) { //#9540
            $k[$j++] = 0; //#9540
        } //#9540
        var _IU = $a(); //#9540
        $puti(_IU, 0, $get($1.seps, $1.numrows - 1)); //#9540
        $put($1.seps, $1.numrows - 1, _IU); //#9541
        $k[$j++] = Infinity; //#9544
        for (var _Ib = 0, _Ic = (~~($1.pixx / 2)) + 1; _Ib < _Ic; _Ib++) { //#9544
            $k[$j++] = 0; //#9544
            $k[$j++] = 1; //#9544
        } //#9544
        $1.sep = $geti($a(), 0, $1.pixx); //#9544
        $puti($1.sep, 0, $a([0, 0, 0, 0])); //#9545
        $puti($1.sep, $1.pixx - 4, $a([0, 0, 0, 0])); //#9546
        $k[$j++] = Infinity; //#9558
        for (var _In = 0, _Im = $1.numrows - 1; _In <= _Im; _In += 1) { //#9560
            $1.r = _In; //#9551
            if ($1.r != 0) { //#9554
                $aload($get($1.seps, $1.r)); //#9553
            } //#9553
            for (var _It = 0, _Iu = $1.barxmult; _It < _Iu; _It++) { //#9555
                $aload($get($1.rows, $1.r)); //#9555
            } //#9555
            if ($1.r != ($1.numrows - 1)) { //#9559
                $aload($get($1.seps, $1.r)); //#9557
                $aload($1.sep); //#9558
            } //#9558
        } //#9558
        $1.pixs = $a(); //#9558
        delete $1.options["parse"]; //#9563
        var _JE = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.pixs],
            ["pixx", $1.pixx],
            ["pixy", ~~($1.pixs.length / $1.pixx)],
            ["height", (~~($1.pixs.length / $1.pixx)) / 72],
            ["width", $1.pixx / 72],
            ["opt", $1.options]
        ]); //#9572
        $k[$j++] = _JE; //#9575
        if (!$1.dontdraw) { //#9575
            bwipp_renmatrix(); //#9575
        } //#9575
    } //#9575
}

function bwipp_databarexpandedstacked() {
    var $1 = Object.create(bwipp_databarexpandedstacked.$ctx || (bwipp_databarexpandedstacked.$ctx = {})); //#9610
    $1.dontdraw = false; //#9613
    $k[$j++] = $1; //#9615
    bwipp_processoptions(); //#9615
    $1.options = $k[--$j]; //#9615
    $1.barcode = $k[--$j]; //#9616
    $put($1.options, "dontdraw", true); //#9619
    $put($1.options, "format", "expandedstacked"); //#9620
    $k[$j++] = 'args'; //#9622
    $k[$j++] = $1.barcode; //#9622
    $k[$j++] = $1.options; //#9622
    bwipp_databarexpanded(); //#9622
    var _6 = $k[--$j]; //#9622
    $1[$k[--$j]] = _6; //#9622
    $put($1.args, "opt", $1.options); //#9624
    $k[$j++] = $1.args; //#9627
    if (!$1.dontdraw) { //#9627
        bwipp_renmatrix(); //#9627
    } //#9627
}

function bwipp_gs1northamericancoupon() {
    var $1 = Object.create(bwipp_gs1northamericancoupon.$ctx || (bwipp_gs1northamericancoupon.$ctx = {})); //#9659
    $1.dontdraw = false; //#9662
    $1.includetext = false; //#9663
    $1.coupontextfont = "OCR-B"; //#9664
    $1.coupontextsize = 9; //#9665
    $1.coupontextxoffset = null; //#9666
    $1.coupontextyoffset = null; //#9667
    $1.parse = false; //#9668
    $1.dontlint = false; //#9669
    $1.lintreqs = true; //#9670
    $k[$j++] = $1; //#9672
    bwipp_processoptions(); //#9672
    $1.options = $k[--$j]; //#9672
    $1.barcode = $k[--$j]; //#9673
    $k[$j++] = $1.barcode; //#9675
    $k[$j++] = 'ai'; //#9675
    bwipp_gs1process(); //#9675
    $j--; //#9676
    $1.vals = $k[--$j]; //#9677
    $1.ais = $k[--$j]; //#9678
    if ($1.ais.length != 1) { //#9683
        $k[$j++] = 'bwipp.gs1northamericancouponBadAIStructure#9682'; //#9682
        $k[$j++] = "A GS1 North American Coupon should consist of a single AI (8110)"; //#9682
        bwipp_raiseerror(); //#9682
    } //#9682
    if ($ne($get($1.ais, 0), "8110")) { //#9686
        $k[$j++] = 'bwipp.gs1northamericancouponBadAIStructure#9685'; //#9685
        $k[$j++] = "A GS1 North American Coupon should consist of a single AI (8110)"; //#9685
        bwipp_raiseerror(); //#9685
    } //#9685
    $1.val = $get($1.vals, 0); //#9689
    $1.vli = $f($get($1.val, 0) - 48); //#9690
    if (($1.vli < 0) || ($1.vli > 6)) { //#9693
        $k[$j++] = 'bwipp.gs1northamericancouponBadVLI#9692'; //#9692
        $k[$j++] = "The AI (8110) data should start with a Company Prefix length indicator in the range 0 to 6"; //#9692
        bwipp_raiseerror(); //#9692
    } //#9692
    $1.gcp = $geti($1.val, 1, $f($1.vli + 6)); //#9694
    $1.cod = $geti($1.val, $f($1.vli + 7), 6); //#9695
    $1.coupontext = $s($1.gcp.length + 7); //#9696
    $puti($1.coupontext, 0, $1.gcp); //#9697
    $puti($1.coupontext, $1.gcp.length, "-"); //#9698
    $puti($1.coupontext, $1.gcp.length + 1, $1.cod); //#9699
    delete $1.options["parse"]; //#9702
    $put($1.options, "dontdraw", true); //#9703
    $k[$j++] = 'args'; //#9705
    $k[$j++] = $1.barcode; //#9705
    $k[$j++] = $1.options; //#9705
    bwipp_databarexpandedstacked(); //#9705
    var _X = $k[--$j]; //#9705
    $1[$k[--$j]] = _X; //#9705
    if ($1.includetext) { //#9724
        if ($eq($1.coupontextxoffset, null)) { //#9711
            $1.coupontextxoffset = 0; //#9710
        } //#9710
        if ($eq($1.coupontextyoffset, null)) { //#9714
            $1.coupontextyoffset = $f(($get($1.args, "height") * 72) + 3); //#9713
        } //#9713
        var _f = $get($1.args, "txt") !== undefined; //#9715
        if (_f) { //#9722
            $1.txt = $get($1.args, "txt"); //#9716
            $1.newtxt = $a($1.txt.length + 1); //#9717
            $puti($1.newtxt, 0, $1.txt); //#9718
            $put($1.newtxt, $1.newtxt.length - 1, $a([$1.coupontext, $1.coupontextxoffset, $1.coupontextyoffset, $1.coupontextfont, $1.coupontextsize])); //#9719
            $put($1.args, "txt", $1.newtxt); //#9720
        } else { //#9722
            $put($1.args, "txt", $a([$a([$1.coupontext, $1.coupontextxoffset, $1.coupontextyoffset, $1.coupontextfont, $1.coupontextsize])])); //#9722
        } //#9722
    } //#9722
    $put($1.args, "opt", $1.options); //#9726
    $k[$j++] = $1.args; //#9729
    if (!$1.dontdraw) { //#9729
        bwipp_renmatrix(); //#9729
    } //#9729
}

function bwipp_pharmacode() {
    var $1 = Object.create(bwipp_pharmacode.$ctx || (bwipp_pharmacode.$ctx = {})); //#9759
    $1.dontdraw = false; //#9762
    $1.height = (8 * 2.835) / 72; //#9763
    $1.nwidth = 0.5 * 2.835; //#9764
    $1.wwidth = 1.5 * 2.835; //#9765
    $1.swidth = 1 * 2.835; //#9766
    $k[$j++] = $1; //#9768
    bwipp_processoptions(); //#9768
    $1.options = $k[--$j]; //#9768
    $1.barcode = $k[--$j]; //#9769
    if (($1.barcode.length < 1) || ($1.barcode.length > 6)) { //#9774
        $k[$j++] = 'bwipp.pharmacodeBadLength#9773'; //#9773
        $k[$j++] = "Pharmacode must be 1 to 6 digits"; //#9773
        bwipp_raiseerror(); //#9773
    } //#9773
    $forall($1.barcode, function() { //#9779
        var _5 = $k[--$j]; //#9776
        if ((_5 < 48) || (_5 > 57)) { //#9778
            $k[$j++] = 'bwipp.pharmacodeBadCharacter#9777'; //#9777
            $k[$j++] = "Pharmacode must contain only digits"; //#9777
            bwipp_raiseerror(); //#9777
        } //#9777
    }); //#9777
    var _7 = $cvi($1.barcode); //#9780
    if ((_7 < 3) || (_7 > 131070)) { //#9782
        $k[$j++] = 'bwipp.pharmacodeBadValue#9781'; //#9781
        $k[$j++] = "Pharmacode value must be between 3 and 131070"; //#9781
        bwipp_raiseerror(); //#9781
    } //#9781
    $1.txt = $a($1.barcode.length); //#9785
    for (var _C = 0, _B = $1.barcode.length - 1; _C <= _B; _C += 1) { //#9789
        $1.i = _C; //#9787
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); //#9788
    } //#9788
    $1.barcode = $cvrs($s(17), $cvi($1.barcode) + 1, 2); //#9792
    $1.barcode = $geti($1.barcode, 1, $1.barcode.length - 1); //#9793
    $1.barlen = $1.barcode.length; //#9795
    $1.sbs = $a($1.barlen * 2); //#9796
    for (var _U = 0, _T = $1.barlen - 1; _U <= _T; _U += 1) { //#9807
        $1.i = _U; //#9799
        $1.enc = $geti($1.barcode, $1.i, 1); //#9800
        if ($eq($1.enc, "0")) { //#9804
            $put($1.sbs, $1.i * 2, $1.nwidth); //#9802
        } else { //#9804
            $put($1.sbs, $1.i * 2, $1.wwidth); //#9804
        } //#9804
        $put($1.sbs, ($1.i * 2) + 1, $1.swidth); //#9806
    } //#9806
    $k[$j++] = Infinity; //#9817
    var _i = $1.sbs; //#9812
    $k[$j++] = Infinity; //#9813
    for (var _k = 0, _l = ~~(($1.sbs.length + 1) / 2); _k < _l; _k++) { //#9813
        $k[$j++] = $1.height; //#9813
    } //#9813
    var _n = $a(); //#9813
    $k[$j++] = Infinity; //#9814
    for (var _p = 0, _q = ~~(($1.sbs.length + 1) / 2); _p < _q; _p++) { //#9814
        $k[$j++] = 0; //#9814
    } //#9814
    var _r = $a(); //#9814
    $k[$j++] = 'ren'; //#9817
    $k[$j++] = bwipp_renlinear; //#9817
    $k[$j++] = 'sbs'; //#9817
    $k[$j++] = _i; //#9817
    $k[$j++] = 'bhs'; //#9817
    $k[$j++] = _n; //#9817
    $k[$j++] = 'bbs'; //#9817
    $k[$j++] = _r; //#9817
    $k[$j++] = 'txt'; //#9817
    $k[$j++] = $1.txt; //#9817
    $k[$j++] = 'textxalign'; //#9817
    $k[$j++] = "center"; //#9817
    $k[$j++] = 'opt'; //#9817
    $k[$j++] = $1.options; //#9817
    var _u = $d(); //#9817
    $k[$j++] = _u; //#9820
    if (!$1.dontdraw) { //#9820
        bwipp_renlinear(); //#9820
    } //#9820
}

function bwipp_pharmacode2() {
    var $1 = Object.create(bwipp_pharmacode2.$ctx || (bwipp_pharmacode2.$ctx = {})); //#9850
    $1.dontdraw = false; //#9853
    $1.includetext = false; //#9854
    $1.height = 4; //#9855
    $k[$j++] = $1; //#9857
    bwipp_processoptions(); //#9857
    $1.options = $k[--$j]; //#9857
    $1.barcode = $k[--$j]; //#9858
    if (($1.barcode.length < 1) || ($1.barcode.length > 8)) { //#9863
        $k[$j++] = 'bwipp.pharmacode2BadLength#9862'; //#9862
        $k[$j++] = "Two-track Pharmacode must be 1 to 6 digits"; //#9862
        bwipp_raiseerror(); //#9862
    } //#9862
    $forall($1.barcode, function() { //#9868
        var _5 = $k[--$j]; //#9865
        if ((_5 < 48) || (_5 > 57)) { //#9867
            $k[$j++] = 'bwipp.pharmacode2badCharacter#9866'; //#9866
            $k[$j++] = "Two-track Pharmacode must contain only digits"; //#9866
            bwipp_raiseerror(); //#9866
        } //#9866
    }); //#9866
    var _7 = $cvi($1.barcode); //#9869
    if ((_7 < 4) || (_7 > 64570080)) { //#9871
        $k[$j++] = 'bwipp.pharmacode2badValue#9870'; //#9870
        $k[$j++] = "Two-track Pharmacode value must be between 4 and 64570080"; //#9870
        bwipp_raiseerror(); //#9870
    } //#9870
    $1.txt = $a($1.barcode.length); //#9874
    for (var _C = 0, _B = $1.barcode.length - 1; _C <= _B; _C += 1) { //#9878
        $1.i = _C; //#9876
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); //#9877
    } //#9877
    $1.encstr = $s(16); //#9880
    $1.sbs = $a(32); //#9881
    $1.bar = (1 / 25.4) * $1.height; //#9882
    $1.spc = (1 / 25.4) * 72; //#9883
    $1.i = 15; //#9886
    $1.val = $cvi($1.barcode); //#9887
    for (;;) { //#9894
        if ($1.val == 0) { //#9889
            break; //#9889
        } //#9889
        var _P = $1.val % 3; //#9890
        $1.val = ~~($f($1.val - $get($a([3, 1, 2]), _P)) / 3); //#9891
        $put($1.encstr, $1.i, $get($a([2, 0, 1]), _P)); //#9892
        $1.i = $1.i - 1; //#9893
    } //#9893
    $1.encstr = $geti($1.encstr, $1.i + 1, 15 - $1.i); //#9895
    $1.bhs = $a($1.encstr.length); //#9898
    $1.bbs = $a($1.encstr.length); //#9899
    for (var _i = 0, _h = $1.encstr.length - 1; _i <= _h; _i += 1) { //#9905
        $1.i = _i; //#9901
        var _l = $get($1.encstr, $1.i); //#9902
        $put($1.bhs, $1.i, $1.bar * $get($a([1, 1, 2]), _l)); //#9903
        $put($1.bbs, $1.i, $get($a([0, $1.bar, 0]), _l)); //#9904
    } //#9904
    $k[$j++] = Infinity; //#9916
    var _w = $1.bhs; //#9910
    var _x = $1.bbs; //#9911
    $k[$j++] = Infinity; //#9912
    for (var _z = 0, _10 = $1.encstr.length * 2; _z < _10; _z++) { //#9912
        $k[$j++] = $1.spc; //#9912
    } //#9912
    var _12 = $a(); //#9912
    $k[$j++] = 'ren'; //#9916
    $k[$j++] = bwipp_renlinear; //#9916
    $k[$j++] = 'bhs'; //#9916
    $k[$j++] = _w; //#9916
    $k[$j++] = 'bbs'; //#9916
    $k[$j++] = _x; //#9916
    $k[$j++] = 'sbs'; //#9916
    $k[$j++] = _12; //#9916
    $k[$j++] = 'txt'; //#9916
    $k[$j++] = $1.txt; //#9916
    $k[$j++] = 'textxalign'; //#9916
    $k[$j++] = "center"; //#9916
    $k[$j++] = 'textyoffset'; //#9916
    $k[$j++] = 4; //#9916
    $k[$j++] = 'opt'; //#9916
    $k[$j++] = $1.options; //#9916
    var _15 = $d(); //#9916
    $k[$j++] = _15; //#9919
    if (!$1.dontdraw) { //#9919
        bwipp_renlinear(); //#9919
    } //#9919
}

function bwipp_code2of5() {
    var $1 = Object.create(bwipp_code2of5.$ctx || (bwipp_code2of5.$ctx = {})); //#9951
    $1.dontdraw = false; //#9954
    $1.includecheck = false; //#9955
    $1.validatecheck = false; //#9956
    $1.includetext = false; //#9957
    $1.includecheckintext = false; //#9958
    $1.textfont = "OCR-B"; //#9959
    $1.textsize = 10; //#9960
    $1.textyoffset = -8; //#9961
    $1.height = 1; //#9962
    $1.version = "industrial"; //#9963
    $k[$j++] = $1; //#9965
    bwipp_processoptions(); //#9965
    $1.options = $k[--$j]; //#9965
    $1.barcode = $k[--$j]; //#9966
    $forall($1.barcode, function() { //#9975
        var _3 = $k[--$j]; //#9972
        if ((_3 < 48) || (_3 > 57)) { //#9974
            $k[$j++] = 'bwipp.code2of5badCharacter#9973'; //#9973
            $k[$j++] = "Code 25 must contain only digits"; //#9973
            bwipp_raiseerror(); //#9973
        } //#9973
    }); //#9973
    $k[$j++] = 'barlen'; //#9977
    $k[$j++] = $1.barcode.length; //#9977
    if ($1.validatecheck) { //#9977
        var _6 = $k[--$j]; //#9977
        $k[$j++] = $f(_6 - 1); //#9977
    } //#9977
    var _7 = $k[--$j]; //#9977
    $1[$k[--$j]] = _7; //#9977
    $1.checksum = 0; //#9979
    for (var _B = 0, _A = $f($1.barlen - 1); _B <= _A; _B += 1) { //#9983
        $1.i = _B; //#9981
        $k[$j++] = 'checksum'; //#9982
        $k[$j++] = $1.checksum; //#9982
        $k[$j++] = $f($get($1.barcode, $1.i) - 48); //#9982
        if (($f($1.barlen - $1.i) % 2) != 0) { //#9982
            var _I = $k[--$j]; //#9982
            $k[$j++] = _I * 3; //#9982
        } //#9982
        var _J = $k[--$j]; //#9982
        var _K = $k[--$j]; //#9982
        $1[$k[--$j]] = $f(_K + _J); //#9982
    } //#9982
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#9984
    if ($1.validatecheck) { //#9991
        if ($get($1.barcode, $1.barlen) != ($1.checksum + 48)) { //#9988
            $k[$j++] = 'bwipp.code2of5badCheckDigit#9987'; //#9987
            $k[$j++] = "Incorrect Code 25 check digit provided"; //#9987
            bwipp_raiseerror(); //#9987
        } //#9987
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#9989
        $1.includecheck = true; //#9990
    } //#9990
    if (!bwipp_code2of5.$ctx._10019) { //#10019
        (function() { //#10019
            var $ctx = Object.create($1); //#10019
            var _a = new Map([
                ["industrial", $a(["1111313111", "3111111131", "1131111131", "3131111111", "1111311131", "3111311111", "1131311111", "1111113131", "3111113111", "1131113111", "313111", "31113"])],
                ["iata", $a(["1111313111", "3111111131", "1131111131", "3131111111", "1111311131", "3111311111", "1131311111", "1111113131", "3111113111", "1131113111", "1111", "311"])],
                ["matrix", $a(["113311", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "131311", "311111", "31111"])],
                ["coop", $a(["331111", "111331", "113131", "113311", "131131", "131311", "133111", "311131", "311311", "313111", "3131", "133"])],
                ["datalogic", $a(["113311", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "131311", "1111", "311"])]
            ]); //#10016
            $ctx.versions = _a; //#10018
            for (var _b in $ctx) {
                $ctx.hasOwnProperty(_b) && (bwipp_code2of5.$ctx[_b] = $ctx[_b]);
            } //#10018
            bwipp_code2of5.$ctx._10019 = 1; //#10018
        })(); //#10018
    } //#10018
    var _e = $get($1.versions, $1.version) !== undefined; //#10021
    if (!_e) { //#10023
        $k[$j++] = 'bwipp.code2of5badVersion#10022'; //#10022
        $k[$j++] = "Unrecognised Code 25 version"; //#10022
        bwipp_raiseerror(); //#10022
    } //#10022
    $1.encs = $get($1.versions, $1.version); //#10024
    $1.cs = $get($1.encs, 0).length; //#10026
    $k[$j++] = 'cw'; //#10027
    $k[$j++] = 0; //#10027
    $forall($get($1.encs, 0), function() { //#10027
        var _m = $k[--$j]; //#10027
        var _n = $k[--$j]; //#10027
        $k[$j++] = $f(_n + $f(_m - 48)); //#10027
    }); //#10027
    var _o = $k[--$j]; //#10027
    $1[$k[--$j]] = _o; //#10027
    $1.ss = $get($1.encs, 10).length; //#10028
    $k[$j++] = 'sw'; //#10029
    $k[$j++] = 0; //#10029
    $forall($get($1.encs, 10), function() { //#10029
        var _u = $k[--$j]; //#10029
        var _v = $k[--$j]; //#10029
        $k[$j++] = $f(_v + $f(_u - 48)); //#10029
    }); //#10029
    var _w = $k[--$j]; //#10029
    $1[$k[--$j]] = _w; //#10029
    $1.es = $get($1.encs, 11).length; //#10030
    if (!bwipp_code2of5.$ctx._10035) { //#10035
        (function() { //#10035
            var $ctx = Object.create($1); //#10035
            $ctx.barchars = "0123456789"; //#10034
            for (var _10 in $ctx) {
                $ctx.hasOwnProperty(_10) && (bwipp_code2of5.$ctx[_10] = $ctx[_10]);
            } //#10034
            bwipp_code2of5.$ctx._10035 = 1; //#10034
        })(); //#10034
    } //#10034
    $k[$j++] = 'sbs'; //#10037
    $k[$j++] = $1.barlen; //#10037
    if ($1.includecheck) { //#10037
        var _13 = $k[--$j]; //#10037
        $k[$j++] = $f(_13 + 1); //#10037
    } //#10037
    var _18 = $s($f(($f(($k[--$j] * $1.cs) + $1.ss)) + $1.es)); //#10037
    $1[$k[--$j]] = _18; //#10037
    $k[$j++] = 'txt'; //#10038
    $k[$j++] = $1.barlen; //#10038
    if ($1.includecheck) { //#10038
        var _1C = $k[--$j]; //#10038
        $k[$j++] = $f(_1C + 1); //#10038
    } //#10038
    var _1E = $a($k[--$j]); //#10038
    $1[$k[--$j]] = _1E; //#10038
    $puti($1.sbs, 0, $get($1.encs, 10)); //#10041
    for (var _1L = 0, _1K = $f($1.barlen - 1); _1L <= _1K; _1L += 1) { //#10052
        $1.i = _1L; //#10043
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#10045
        $j--; //#10046
        $1.indx = $k[--$j].length; //#10047
        $j -= 2; //#10048
        $1.enc = $get($1.encs, $1.indx); //#10049
        $puti($1.sbs, ($1.i * $1.cs) + $1.ss, $1.enc); //#10050
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $f(($1.i * $1.cw) + $1.sw), $1.textyoffset, $1.textfont, $1.textsize])); //#10051
    } //#10051
    if ($1.includecheck) { //#10064
        $puti($1.sbs, $f(($1.barlen * $1.cs) + $1.ss), $get($1.encs, $1.checksum)); //#10056
        $puti($1.sbs, $f(($f(($1.barlen * $1.cs) + $1.cs)) + $1.ss), $get($1.encs, 11)); //#10057
        if ($1.includecheckintext) { //#10061
            $put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum, 1), $f(($1.barlen * $1.cw) + $1.sw), $1.textyoffset, $1.textfont, $1.textsize])); //#10059
        } else { //#10061
            $put($1.txt, $1.barlen, $a([" ", $f(($1.barlen * $1.cw) + $1.sw), $1.textyoffset, $1.textfont, $1.textsize])); //#10061
        } //#10061
    } else { //#10064
        $puti($1.sbs, $f(($1.barlen * $1.cs) + $1.ss), $get($1.encs, 11)); //#10064
    } //#10064
    $k[$j++] = Infinity; //#10076
    $k[$j++] = Infinity; //#10070
    $forall($1.sbs, function() { //#10070
        var _2T = $k[--$j]; //#10070
        $k[$j++] = $f(_2T - 48); //#10070
    }); //#10070
    var _2U = $a(); //#10070
    $k[$j++] = Infinity; //#10071
    for (var _2W = 0, _2X = ~~(($1.sbs.length + 1) / 2); _2W < _2X; _2W++) { //#10071
        $k[$j++] = $1.height; //#10071
    } //#10071
    var _2Z = $a(); //#10071
    $k[$j++] = Infinity; //#10072
    for (var _2b = 0, _2c = ~~(($1.sbs.length + 1) / 2); _2b < _2c; _2b++) { //#10072
        $k[$j++] = 0; //#10072
    } //#10072
    var _2d = $a(); //#10072
    $k[$j++] = 'ren'; //#10075
    $k[$j++] = bwipp_renlinear; //#10075
    $k[$j++] = 'sbs'; //#10075
    $k[$j++] = _2U; //#10075
    $k[$j++] = 'bhs'; //#10075
    $k[$j++] = _2Z; //#10075
    $k[$j++] = 'bbs'; //#10075
    $k[$j++] = _2d; //#10075
    if ($1.includetext) { //#10075
        $k[$j++] = 'txt'; //#10074
        $k[$j++] = $1.txt; //#10074
    } //#10074
    $k[$j++] = 'opt'; //#10076
    $k[$j++] = $1.options; //#10076
    var _2h = $d(); //#10076
    $k[$j++] = _2h; //#10079
    if (!$1.dontdraw) { //#10079
        bwipp_renlinear(); //#10079
    } //#10079
}

function bwipp_industrial2of5() {
    var $1 = Object.create(bwipp_industrial2of5.$ctx || (bwipp_industrial2of5.$ctx = {})); //#10112
    $1.dontdraw = false; //#10115
    $1.includetext = false; //#10116
    $1.textfont = "OCR-B"; //#10117
    $1.textsize = 10; //#10118
    $1.textxoffset = 0; //#10119
    $1.textyoffset = -8; //#10120
    $1.height = 1; //#10121
    $k[$j++] = $1; //#10123
    bwipp_processoptions(); //#10123
    $1.options = $k[--$j]; //#10123
    $1.barcode = $k[--$j]; //#10124
    $put($1.options, "dontdraw", true); //#10127
    $put($1.options, "version", "industrial"); //#10128
    $k[$j++] = 'args'; //#10130
    $k[$j++] = $1.barcode; //#10130
    $k[$j++] = $1.options; //#10130
    bwipp_code2of5(); //#10130
    var _6 = $k[--$j]; //#10130
    $1[$k[--$j]] = _6; //#10130
    $put($1.args, "opt", $1.options); //#10132
    $k[$j++] = $1.args; //#10135
    if (!$1.dontdraw) { //#10135
        bwipp_renlinear(); //#10135
    } //#10135
}

function bwipp_iata2of5() {
    var $1 = Object.create(bwipp_iata2of5.$ctx || (bwipp_iata2of5.$ctx = {})); //#10166
    $1.dontdraw = false; //#10169
    $1.includetext = false; //#10170
    $1.textfont = "OCR-B"; //#10171
    $1.textsize = 10; //#10172
    $1.textxoffset = 0; //#10173
    $1.textyoffset = -8; //#10174
    $1.height = 1; //#10175
    $k[$j++] = $1; //#10177
    bwipp_processoptions(); //#10177
    $1.options = $k[--$j]; //#10177
    $1.barcode = $k[--$j]; //#10178
    $put($1.options, "dontdraw", true); //#10181
    $put($1.options, "version", "iata"); //#10182
    $k[$j++] = 'args'; //#10184
    $k[$j++] = $1.barcode; //#10184
    $k[$j++] = $1.options; //#10184
    bwipp_code2of5(); //#10184
    var _6 = $k[--$j]; //#10184
    $1[$k[--$j]] = _6; //#10184
    $put($1.args, "opt", $1.options); //#10186
    $k[$j++] = $1.args; //#10189
    if (!$1.dontdraw) { //#10189
        bwipp_renlinear(); //#10189
    } //#10189
}

function bwipp_matrix2of5() {
    var $1 = Object.create(bwipp_matrix2of5.$ctx || (bwipp_matrix2of5.$ctx = {})); //#10220
    $1.dontdraw = false; //#10223
    $1.includetext = false; //#10224
    $1.textfont = "OCR-B"; //#10225
    $1.textsize = 10; //#10226
    $1.textxoffset = 0; //#10227
    $1.textyoffset = -8; //#10228
    $1.height = 1; //#10229
    $k[$j++] = $1; //#10231
    bwipp_processoptions(); //#10231
    $1.options = $k[--$j]; //#10231
    $1.barcode = $k[--$j]; //#10232
    $put($1.options, "dontdraw", true); //#10235
    $put($1.options, "version", "matrix"); //#10236
    $k[$j++] = 'args'; //#10238
    $k[$j++] = $1.barcode; //#10238
    $k[$j++] = $1.options; //#10238
    bwipp_code2of5(); //#10238
    var _6 = $k[--$j]; //#10238
    $1[$k[--$j]] = _6; //#10238
    $put($1.args, "opt", $1.options); //#10240
    $k[$j++] = $1.args; //#10243
    if (!$1.dontdraw) { //#10243
        bwipp_renlinear(); //#10243
    } //#10243
}

function bwipp_coop2of5() {
    var $1 = Object.create(bwipp_coop2of5.$ctx || (bwipp_coop2of5.$ctx = {})); //#10274
    $1.dontdraw = false; //#10277
    $1.includetext = false; //#10278
    $1.textfont = "OCR-B"; //#10279
    $1.textsize = 10; //#10280
    $1.textxoffset = 0; //#10281
    $1.textyoffset = -8; //#10282
    $1.height = 1; //#10283
    $k[$j++] = $1; //#10285
    bwipp_processoptions(); //#10285
    $1.options = $k[--$j]; //#10285
    $1.barcode = $k[--$j]; //#10286
    $put($1.options, "dontdraw", true); //#10289
    $put($1.options, "version", "coop"); //#10290
    $k[$j++] = 'args'; //#10292
    $k[$j++] = $1.barcode; //#10292
    $k[$j++] = $1.options; //#10292
    bwipp_code2of5(); //#10292
    var _6 = $k[--$j]; //#10292
    $1[$k[--$j]] = _6; //#10292
    $put($1.args, "opt", $1.options); //#10294
    $k[$j++] = $1.args; //#10297
    if (!$1.dontdraw) { //#10297
        bwipp_renlinear(); //#10297
    } //#10297
}

function bwipp_datalogic2of5() {
    var $1 = Object.create(bwipp_datalogic2of5.$ctx || (bwipp_datalogic2of5.$ctx = {})); //#10328
    $1.dontdraw = false; //#10331
    $1.includetext = false; //#10332
    $1.textfont = "OCR-B"; //#10333
    $1.textsize = 10; //#10334
    $1.textxoffset = 0; //#10335
    $1.textyoffset = -8; //#10336
    $1.height = 1; //#10337
    $k[$j++] = $1; //#10339
    bwipp_processoptions(); //#10339
    $1.options = $k[--$j]; //#10339
    $1.barcode = $k[--$j]; //#10340
    $put($1.options, "dontdraw", true); //#10343
    $put($1.options, "version", "datalogic"); //#10344
    $k[$j++] = 'args'; //#10346
    $k[$j++] = $1.barcode; //#10346
    $k[$j++] = $1.options; //#10346
    bwipp_code2of5(); //#10346
    var _6 = $k[--$j]; //#10346
    $1[$k[--$j]] = _6; //#10346
    $put($1.args, "opt", $1.options); //#10348
    $k[$j++] = $1.args; //#10351
    if (!$1.dontdraw) { //#10351
        bwipp_renlinear(); //#10351
    } //#10351
}

function bwipp_code11() {
    var $1 = Object.create(bwipp_code11.$ctx || (bwipp_code11.$ctx = {})); //#10383
    $1.dontdraw = false; //#10386
    $1.includecheck = false; //#10387
    $1.validatecheck = false; //#10388
    $1.includetext = false; //#10389
    $1.includecheckintext = false; //#10390
    $1.textfont = "OCR-B"; //#10391
    $1.textsize = 10; //#10392
    $1.textyoffset = -8; //#10393
    $1.height = 1; //#10394
    $k[$j++] = $1; //#10396
    bwipp_processoptions(); //#10396
    $1.options = $k[--$j]; //#10396
    var _1 = $k[--$j]; //#10397
    $1.barcode = _1; //#10397
    if (!bwipp_code11.$ctx._10413) { //#10413
        (function() { //#10413
            var $ctx = Object.create($1); //#10413
            $ctx.encs = $a(["111131", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "311111", "113111", "113311"]); //#10407
            $ctx.barchars = "0123456789-"; //#10410
            $ctx.charvals = new Map; //#10411
            for (var _3 = 0; _3 <= 10; _3 += 1) { //#10412
                $put($ctx.charvals, $geti($ctx.barchars, _3, 1), _3); //#10412
            } //#10412
            for (var _7 in $ctx) {
                $ctx.hasOwnProperty(_7) && (bwipp_code11.$ctx[_7] = $ctx[_7]);
            } //#10412
            bwipp_code11.$ctx._10413 = 1; //#10412
        })(); //#10412
    } //#10412
    for (var _A = 0, _9 = $1.barcode.length - 1; _A <= _9; _A += 1) { //#10420
        var _E = $get($1.charvals, $geti($1.barcode, _A, 1)) !== undefined; //#10417
        if (!_E) { //#10419
            $k[$j++] = 'bwipp.code11badCharacter#10418'; //#10418
            $k[$j++] = "Code 11 must contain only digits and dashes"; //#10418
            bwipp_raiseerror(); //#10418
        } //#10418
    } //#10418
    $1.barlen = $1.barcode.length; //#10422
    if ($1.validatecheck) { //#10428
        if ($1.barlen == 11) { //#10426
            $k[$j++] = 'bwipp.code11badLength#10425'; //#10425
            $k[$j++] = "Code 11 cannot be 11 characters using check digits"; //#10425
            bwipp_raiseerror(); //#10425
        } //#10425
        var _K = ($1.barlen <= 10) ? 1 : 2; //#10427
        $1.barlen = $1.barlen - _K; //#10427
    } //#10427
    $k[$j++] = 'numchecks'; //#10430
    if ($1.includecheck || $1.validatecheck) { //#10430
        var _O = ($1.barlen >= 10) ? 2 : 1; //#10430
        $k[$j++] = _O; //#10430
    } else { //#10430
        $k[$j++] = 0; //#10430
    } //#10430
    var _P = $k[--$j]; //#10430
    $1[$k[--$j]] = _P; //#10430
    $1.checksum1 = 0; //#10431
    $1.checksum2 = 0; //#10431
    for (var _T = 0, _S = $1.barlen - 1; _T <= _S; _T += 1) { //#10437
        $1.i = _T; //#10433
        $1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); //#10434
        $1.checksum1 = $f($1.checksum1 + ((((($1.barlen - $1.i) - 1) % 10) + 1) * $1.indx)); //#10435
        $1.checksum2 = $f($1.checksum2 + (((($1.barlen - $1.i) % 9) + 1) * $1.indx)); //#10436
    } //#10436
    $1.checksum1 = $1.checksum1 % 11; //#10438
    $1.checksum2 = $f($1.checksum2 + $1.checksum1) % 11; //#10439
    if ($1.validatecheck) { //#10453
        if ($1.numchecks == 1) { //#10448
            var _r = $get($1.barchars, $1.checksum1); //#10442
            if ($get($1.barcode, $1.barlen) != _r) { //#10444
                $k[$j++] = 'bwipp.code11badCheckDigit#10443'; //#10443
                $k[$j++] = "Incorrect Code 11 check digit provided"; //#10443
                bwipp_raiseerror(); //#10443
            } //#10443
        } else { //#10448
            if (($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum1)) || ($get($1.barcode, $1.barlen + 1) != $get($1.barchars, $1.checksum2))) { //#10449
                $k[$j++] = 'bwipp.code11badCheckDigits#10448'; //#10448
                $k[$j++] = "Incorrect Code 11 check digits provided"; //#10448
                bwipp_raiseerror(); //#10448
            } //#10448
        } //#10448
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#10451
        $1.includecheck = true; //#10452
    } //#10452
    $1.sbs = $s($f(($f($1.barlen + $1.numchecks) * 6) + 12)); //#10455
    $1.txt = $a($f($1.barlen + $1.numchecks)); //#10456
    $puti($1.sbs, 0, $get($1.encs, 11)); //#10459
    $1.xpos = 8; //#10461
    for (var _1I = 0, _1H = $1.barlen - 1; _1I <= _1H; _1I += 1) { //#10471
        $1.i = _1I; //#10463
        $1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); //#10464
        $1.enc = $get($1.encs, $1.indx); //#10465
        $puti($1.sbs, ($1.i * 6) + 6, $1.enc); //#10466
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#10467
        for (var _1e = 0; _1e <= 5; _1e += 1) { //#10470
            $1.xpos = $f($f($get($1.enc, _1e) - 48) + $1.xpos); //#10469
        } //#10469
    } //#10469
    if ($1.includecheck) { //#10500
        if ($1.barlen >= 10) { //#10497
            $puti($1.sbs, ($1.barlen * 6) + 6, $get($1.encs, $1.checksum1)); //#10476
            $puti($1.sbs, ($1.barlen * 6) + 12, $get($1.encs, $1.checksum2)); //#10477
            if ($1.includecheckintext) { //#10487
                $put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum1, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#10479
                $1.enc = $get($1.encs, $1.checksum1); //#10480
                for (var _28 = 0; _28 <= 5; _28 += 1) { //#10483
                    $1.xpos = $f($f($get($1.enc, _28) - 48) + $1.xpos); //#10482
                } //#10482
                $put($1.txt, $1.barlen + 1, $a([$geti($1.barchars, $1.checksum2, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#10484
            } else { //#10487
                $put($1.txt, $1.barlen, $a(["", $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#10486
                $put($1.txt, $1.barlen + 1, $a(["", $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#10487
            } //#10487
            $puti($1.sbs, ($1.barlen * 6) + 18, $get($1.encs, 11)); //#10489
        } else { //#10497
            $puti($1.sbs, ($1.barlen * 6) + 6, $get($1.encs, $1.checksum1)); //#10491
            if ($1.includecheckintext) { //#10495
                $put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum1, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#10493
            } else { //#10495
                $put($1.txt, $1.barlen, $a(["", $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#10495
            } //#10495
            $puti($1.sbs, ($1.barlen * 6) + 12, $get($1.encs, 11)); //#10497
        } //#10497
    } else { //#10500
        $puti($1.sbs, ($1.barlen * 6) + 6, $get($1.encs, 11)); //#10500
    } //#10500
    $k[$j++] = Infinity; //#10512
    $k[$j++] = Infinity; //#10506
    var _39 = $1.sbs; //#10506
    for (var _3A = 0, _3B = _39.length; _3A < _3B; _3A++) { //#10506
        $k[$j++] = $get(_39, _3A) - 48; //#10506
    } //#10506
    var _3D = $a(); //#10506
    $k[$j++] = Infinity; //#10507
    for (var _3F = 0, _3G = ~~(($1.sbs.length + 1) / 2); _3F < _3G; _3F++) { //#10507
        $k[$j++] = $1.height; //#10507
    } //#10507
    var _3I = $a(); //#10507
    $k[$j++] = Infinity; //#10508
    for (var _3K = 0, _3L = ~~(($1.sbs.length + 1) / 2); _3K < _3L; _3K++) { //#10508
        $k[$j++] = 0; //#10508
    } //#10508
    var _3M = $a(); //#10508
    $k[$j++] = 'ren'; //#10511
    $k[$j++] = bwipp_renlinear; //#10511
    $k[$j++] = 'sbs'; //#10511
    $k[$j++] = _3D; //#10511
    $k[$j++] = 'bhs'; //#10511
    $k[$j++] = _3I; //#10511
    $k[$j++] = 'bbs'; //#10511
    $k[$j++] = _3M; //#10511
    if ($1.includetext) { //#10511
        $k[$j++] = 'txt'; //#10510
        $k[$j++] = $1.txt; //#10510
    } //#10510
    $k[$j++] = 'opt'; //#10512
    $k[$j++] = $1.options; //#10512
    var _3Q = $d(); //#10512
    $k[$j++] = _3Q; //#10515
    if (!$1.dontdraw) { //#10515
        bwipp_renlinear(); //#10515
    } //#10515
}

function bwipp_bc412() {
    var $1 = Object.create(bwipp_bc412.$ctx || (bwipp_bc412.$ctx = {})); //#10549
    $1.dontdraw = false; //#10552
    $1.includecheck = false; //#10553
    $1.validatecheck = false; //#10554
    $1.includetext = false; //#10555
    $1.includecheckintext = false; //#10556
    $1.includestartstop = false; //#10557
    $1.semi = false; //#10558
    $1.textfont = "OCR-B"; //#10559
    $1.textsize = 10; //#10560
    $1.textyoffset = -8; //#10561
    $1.height = 1; //#10562
    $k[$j++] = $1; //#10564
    bwipp_processoptions(); //#10564
    $1.options = $k[--$j]; //#10564
    $1.barcode = $k[--$j]; //#10565
    if ($1.semi) { //#10570
        $1.includestartstop = true; //#10569
    } //#10569
    if (!bwipp_bc412.$ctx._10579) { //#10579
        (function() { //#10579
            var $ctx = Object.create($1); //#10579
            $ctx.barchars = "0R9GLVHA8EZ4NTS1J2Q6C7DYKBUIX3FWP5M"; //#10576
            $ctx.charvals = new Map; //#10577
            for (var _3 = 0; _3 <= 34; _3 += 1) { //#10578
                $put($ctx.charvals, $geti($ctx.barchars, _3, 1), _3); //#10578
            } //#10578
            for (var _7 in $ctx) {
                $ctx.hasOwnProperty(_7) && (bwipp_bc412.$ctx[_7] = $ctx[_7]);
            } //#10578
            bwipp_bc412.$ctx._10579 = 1; //#10578
        })(); //#10578
    } //#10578
    for (var _A = 0, _9 = $1.barcode.length - 1; _A <= _9; _A += 1) { //#10586
        var _E = $get($1.charvals, $geti($1.barcode, _A, 1)) !== undefined; //#10583
        if (!_E) { //#10585
            $k[$j++] = 'bwipp.bc412badCharacter#10584'; //#10584
            $k[$j++] = "BC412 must contain only digits and capital letters except O"; //#10584
            bwipp_raiseerror(); //#10584
        } //#10584
    } //#10584
    if ($1.semi) { //#10642
        if ($1.validatecheck) { //#10596
            if (($1.barcode.length < 8) || ($1.barcode.length > 19)) { //#10593
                $k[$j++] = 'bwipp.bc412semivalidateBadLength#10592'; //#10592
                $k[$j++] = "BC412 semi with check digit must be 8 to 19 characters long"; //#10592
                bwipp_raiseerror(); //#10592
            } //#10592
        } else { //#10596
            if (($1.barcode.length < 7) || ($1.barcode.length > 18)) { //#10597
                $k[$j++] = 'bwipp.bc412semiBadLength#10596'; //#10596
                $k[$j++] = "BC412 semi must be 7 to 18 characters long"; //#10596
                bwipp_raiseerror(); //#10596
            } //#10596
        } //#10596
        $1.barlen = $1.barcode.length; //#10600
        if (!$1.validatecheck) { //#10608
            $1.barlen = $1.barlen + 1; //#10602
            $1.sbarcode = $s($1.barlen); //#10603
            $put($1.sbarcode, 0, $get($1.barcode, 0)); //#10604
            $put($1.sbarcode, 1, 48); //#10605
            $puti($1.sbarcode, 2, $geti($1.barcode, 1, $1.barlen - 2)); //#10606
            $1.barcode = $1.sbarcode; //#10607
        } //#10607
        $1.sumodd = 0; //#10609
        $1.sumeven = 0; //#10609
        for (var _b = 0, _a = $1.barlen - 1; _b <= _a; _b += 1) { //#10618
            $1.i = _b; //#10611
            $k[$j++] = $get($1.charvals, $geti($1.barcode, $1.i, 1)); //#10617
            if (($1.i % 2) == 0) { //#10616
                $1.sumodd = $f($k[--$j] + $1.sumodd); //#10614
            } else { //#10616
                $1.sumeven = $f($k[--$j] + $1.sumeven); //#10616
            } //#10616
        } //#10616
        $1.checksum = ($f(($1.sumodd % 35) + (($1.sumeven % 35) * 2))) % 35; //#10619
        if ($1.validatecheck) { //#10626
            if ($1.checksum != 0) { //#10623
                $k[$j++] = 'bwipp.bc412semiBadCheckDigit#10622'; //#10622
                $k[$j++] = "Incorrect BC412 semi check digit provided"; //#10622
                bwipp_raiseerror(); //#10622
            } //#10622
        } else { //#10626
            $1.checksum = ($1.checksum * 17) % 35; //#10625
            $put($1.barcode, 1, $get($1.barchars, $1.checksum)); //#10626
        } //#10626
    } else { //#10642
        $k[$j++] = 'barlen'; //#10629
        $k[$j++] = $1.barcode.length; //#10629
        if ($1.validatecheck) { //#10629
            var _x = $k[--$j]; //#10629
            $k[$j++] = $f(_x - 1); //#10629
        } //#10629
        var _y = $k[--$j]; //#10629
        $1[$k[--$j]] = _y; //#10629
        $1.checksum = 0; //#10631
        for (var _12 = 0, _11 = $1.barlen - 1; _12 <= _11; _12 += 1) { //#10635
            $1.checksum = $f($get($1.charvals, $geti($1.barcode, _12, 1)) + $1.checksum); //#10634
        } //#10634
        $1.checksum = $1.checksum % 35; //#10636
        if ($1.validatecheck) { //#10643
            if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#10640
                $k[$j++] = 'bwipp.bc412badCheckDigit#10639'; //#10639
                $k[$j++] = "Incorrect BC412 check digit provided"; //#10639
                bwipp_raiseerror(); //#10639
            } //#10639
            $1.barcode = $geti($1.barcode, 0, $1.barlen); //#10641
            $1.includecheck = true; //#10642
        } //#10642
    } //#10642
    if (!bwipp_bc412.$ctx._10658) { //#10658
        (function() { //#10658
            var $ctx = Object.create($1); //#10658
            $ctx.encs = $a(["11111115", "13111212", "11131113", "12111213", "12121311", "13131111", "12111312", "11131212", "11121411", "11151111", "15111111", "11111511", "12131211", "13121112", "13111311", "11111214", "12121113", "11111313", "13111113", "11121213", "11141112", "11121312", "11141211", "14121111", "12121212", "11131311", "13121211", "12111411", "14111211", "11111412", "12111114", "14111112", "12141111", "11121114", "12131112", "12", "111"]); //#10657
            for (var _1K in $ctx) {
                $ctx.hasOwnProperty(_1K) && (bwipp_bc412.$ctx[_1K] = $ctx[_1K]);
            } //#10657
            bwipp_bc412.$ctx._10658 = 1; //#10657
        })(); //#10657
    } //#10657
    $1.sbs = $s((($1.barlen + 1) * 8) + 5); //#10660
    if ($1.includecheck) { //#10664
        $1.txt = $a($1.barlen + 1); //#10662
    } else { //#10664
        $1.txt = $a($1.barlen); //#10664
    } //#10664
    if ($1.includestartstop) { //#10674
        $puti($1.sbs, 0, $get($1.encs, 35)); //#10669
        $1.pos = 2; //#10670
        $1.txtpos = 3; //#10671
    } else { //#10674
        $1.pos = 0; //#10673
        $1.txtpos = 0; //#10674
    } //#10674
    for (var _1Y = 0, _1X = $1.barlen - 1; _1Y <= _1X; _1Y += 1) { //#10683
        $1.i = _1Y; //#10678
        $1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); //#10679
        $puti($1.sbs, $1.pos, $get($1.encs, $1.indx)); //#10680
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 12) + $1.txtpos, $1.textyoffset, $1.textfont, $1.textsize])); //#10681
        $1.pos = $1.pos + 8; //#10682
    } //#10682
    if ($1.includecheck) { //#10694
        $puti($1.sbs, $1.pos, $get($1.encs, $1.checksum)); //#10687
        if ($1.includecheckintext) { //#10691
            $put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum, 1), ($1.barlen * 12) + $1.txtpos, $1.textyoffset, $1.textfont, $1.textsize])); //#10689
        } else { //#10691
            $put($1.txt, $1.barlen, $a(["", ($1.barlen * 12) + $1.txtpos, $1.textyoffset, $1.textfont, $1.textsize])); //#10691
        } //#10691
        $1.pos = $1.pos + 8; //#10693
    } //#10693
    if ($1.includestartstop) { //#10700
        $puti($1.sbs, $1.pos, $get($1.encs, 36)); //#10698
        $1.pos = $1.pos + 3; //#10699
    } //#10699
    $1.sbs = $geti($1.sbs, 0, $1.pos); //#10703
    $k[$j++] = Infinity; //#10712
    $k[$j++] = Infinity; //#10706
    var _2V = $1.sbs; //#10706
    for (var _2W = 0, _2X = _2V.length; _2W < _2X; _2W++) { //#10706
        $k[$j++] = $f($get(_2V, _2W) - 48); //#10706
    } //#10706
    var _2Z = $a(); //#10706
    $k[$j++] = Infinity; //#10707
    for (var _2b = 0, _2c = ~~(($1.sbs.length + 1) / 2); _2b < _2c; _2b++) { //#10707
        $k[$j++] = $1.height; //#10707
    } //#10707
    var _2e = $a(); //#10707
    $k[$j++] = Infinity; //#10708
    for (var _2g = 0, _2h = ~~(($1.sbs.length + 1) / 2); _2g < _2h; _2g++) { //#10708
        $k[$j++] = 0; //#10708
    } //#10708
    var _2i = $a(); //#10708
    $k[$j++] = 'ren'; //#10711
    $k[$j++] = bwipp_renlinear; //#10711
    $k[$j++] = 'sbs'; //#10711
    $k[$j++] = _2Z; //#10711
    $k[$j++] = 'bhs'; //#10711
    $k[$j++] = _2e; //#10711
    $k[$j++] = 'bbs'; //#10711
    $k[$j++] = _2i; //#10711
    if ($1.includetext) { //#10711
        $k[$j++] = 'txt'; //#10710
        $k[$j++] = $1.txt; //#10710
    } //#10710
    $k[$j++] = 'opt'; //#10712
    $k[$j++] = $1.options; //#10712
    var _2m = $d(); //#10712
    $k[$j++] = _2m; //#10715
    if (!$1.dontdraw) { //#10715
        bwipp_renlinear(); //#10715
    } //#10715
}

function bwipp_rationalizedCodabar() {
    var $1 = Object.create(bwipp_rationalizedCodabar.$ctx || (bwipp_rationalizedCodabar.$ctx = {})); //#10749
    $1.dontdraw = false; //#10752
    $1.altstartstop = false; //#10753
    $1.includecheck = false; //#10754
    $1.validatecheck = false; //#10755
    $1.includetext = false; //#10756
    $1.includecheckintext = false; //#10757
    $1.textfont = "OCR-B"; //#10758
    $1.textsize = 10; //#10759
    $1.textyoffset = -8; //#10760
    $1.height = 1; //#10761
    $k[$j++] = $1; //#10763
    bwipp_processoptions(); //#10763
    $1.options = $k[--$j]; //#10763
    var _1 = $k[--$j]; //#10764
    $1.barcode = _1; //#10764
    if (!bwipp_rationalizedCodabar.$ctx._10780) { //#10780
        (function() { //#10780
            var $ctx = Object.create($1); //#10780
            $ctx.encs = $a(["11111331", "11113311", "11131131", "33111111", "11311311", "31111311", "13111131", "13113111", "13311111", "31131111", "11133111", "11331111", "31113131", "31311131", "31313111", "11313131", "11331311", "13131131", "11131331", "11133311"]); //#10775
            $ctx.barcharsnormal = "0123456789-$:/.+ABCD"; //#10778
            $ctx.barcharsalt = "0123456789-$:/.+TN*E"; //#10779
            for (var _3 in $ctx) {
                $ctx.hasOwnProperty(_3) && (bwipp_rationalizedCodabar.$ctx[_3] = $ctx[_3]);
            } //#10779
            bwipp_rationalizedCodabar.$ctx._10780 = 1; //#10779
        })(); //#10779
    } //#10779
    var _5 = $1.altstartstop ? $1.barcharsalt : $1.barcharsnormal; //#10782
    $1.barchars = _5; //#10782
    $1.charvals = new Map; //#10784
    for (var _6 = 0; _6 <= 19; _6 += 1) { //#10785
        $put($1.charvals, $geti($1.barchars, _6, 1), _6); //#10785
    } //#10785
    $1.bodyvals = new Map; //#10786
    for (var _A = 0; _A <= 15; _A += 1) { //#10787
        $put($1.bodyvals, $geti($1.barchars, _A, 1), _A); //#10787
    } //#10787
    $1.ssvals = new Map; //#10788
    for (var _E = 16; _E <= 19; _E += 1) { //#10789
        $put($1.ssvals, $geti($1.barchars, _E, 1), _E); //#10789
    } //#10789
    var _L = $get($1.ssvals, $geti($1.barcode, 0, 1)) !== undefined; //#10792
    var _Q = $get($1.ssvals, $geti($1.barcode, $1.barcode.length - 1, 1)) !== undefined; //#10793
    if ((!_L) || (!_Q)) { //#10799
        if ($1.altstartstop) { //#10797
            $k[$j++] = 'bwipp.rationalizedCodabarBadAltStartStop#10795'; //#10795
            $k[$j++] = "Codabar start and stop characters must be one of E N T or *"; //#10795
            bwipp_raiseerror(); //#10795
        } else { //#10797
            $k[$j++] = 'bwipp.rationalizedCodabarBadStartStop#10797'; //#10797
            $k[$j++] = "Codabar start and stop characters must be one of A B C or D"; //#10797
            bwipp_raiseerror(); //#10797
        } //#10797
    } //#10797
    for (var _U = 1, _T = $1.barcode.length - 2; _U <= _T; _U += 1) { //#10804
        var _Y = $get($1.bodyvals, $geti($1.barcode, _U, 1)) !== undefined; //#10801
        if (!_Y) { //#10803
            $k[$j++] = 'bwipp.rationalizedCodabarBadCharacter#10802'; //#10802
            $k[$j++] = "Codabar body must contain only digits and symbols - $ : / . +"; //#10802
            bwipp_raiseerror(); //#10802
        } //#10802
    } //#10802
    $k[$j++] = 'barlen'; //#10806
    $k[$j++] = $1.barcode.length; //#10806
    if ($1.validatecheck) { //#10806
        var _b = $k[--$j]; //#10806
        $k[$j++] = $f(_b - 1); //#10806
    } //#10806
    var _c = $k[--$j]; //#10806
    $1[$k[--$j]] = _c; //#10806
    $1.checksum = 0; //#10808
    for (var _g = 0, _f = $f($1.barlen - 2); _g <= _f; _g += 1) { //#10812
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _g, 1)) + $1.checksum); //#10811
    } //#10811
    $1.checksum = $f($get($1.charvals, $geti($1.barcode, $1.barcode.length - 1, 1)) + $1.checksum); //#10814
    $1.checksum = ($f(16 - ($1.checksum % 16))) % 16; //#10815
    if ($1.validatecheck) { //#10825
        if ($get($1.barcode, $f($1.barlen - 1)) != $get($1.barchars, $1.checksum)) { //#10819
            $k[$j++] = 'bwipp.rationalizedCodabarBadCheckDigit#10818'; //#10818
            $k[$j++] = "Incorrect Codabar check digit provided"; //#10818
            bwipp_raiseerror(); //#10818
        } //#10818
        var _11 = $s($1.barlen); //#10820
        $puti(_11, 0, $geti($1.barcode, 0, $f($1.barlen - 1))); //#10821
        $puti(_11, $f($1.barlen - 1), $geti($1.barcode, $1.barlen, 1)); //#10822
        $1.barcode = _11; //#10823
        $1.includecheck = true; //#10824
    } //#10824
    $k[$j++] = 'sbs'; //#10827
    $k[$j++] = $1.barlen; //#10827
    if ($1.includecheck) { //#10827
        var _1B = $k[--$j]; //#10827
        $k[$j++] = $f(_1B + 1); //#10827
    } //#10827
    var _1D = $s($k[--$j] * 8); //#10827
    $1[$k[--$j]] = _1D; //#10827
    $k[$j++] = 'txt'; //#10828
    $k[$j++] = $1.barlen; //#10828
    if ($1.includecheck) { //#10828
        var _1H = $k[--$j]; //#10828
        $k[$j++] = $f(_1H + 1); //#10828
    } //#10828
    var _1J = $a($k[--$j]); //#10828
    $1[$k[--$j]] = _1J; //#10828
    $1.xpos = 0; //#10830
    for (var _1N = 0, _1M = $f($1.barlen - 2); _1N <= _1M; _1N += 1) { //#10840
        $1.i = _1N; //#10832
        $1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); //#10833
        $1.enc = $get($1.encs, $1.indx); //#10834
        $puti($1.sbs, $1.i * 8, $1.enc); //#10835
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#10836
        for (var _1j = 0; _1j <= 7; _1j += 1) { //#10839
            $1.xpos = $f($f($get($1.enc, _1j) - 48) + $1.xpos); //#10838
        } //#10838
    } //#10838
    if ($1.includecheck) { //#10864
        $puti($1.sbs, $f(($1.barlen * 8) - 8), $get($1.encs, $1.checksum)); //#10845
        if ($1.includecheckintext) { //#10849
            $put($1.txt, $f($1.barlen - 1), $a([$geti($1.barchars, $1.checksum, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#10847
        } else { //#10849
            $put($1.txt, $f($1.barlen - 1), $a([" ", $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#10849
        } //#10849
        for (var _2B = 0; _2B <= 7; _2B += 1) { //#10853
            $1.xpos = $f($f($get($get($1.encs, $1.checksum), _2B) - 48) + $1.xpos); //#10852
        } //#10852
        $1.indx = $get($1.charvals, $geti($1.barcode, $f($1.barlen - 1), 1)); //#10855
        $1.enc = $get($1.encs, $1.indx); //#10856
        $puti($1.sbs, $1.barlen * 8, $1.enc); //#10857
        $put($1.txt, $1.barlen, $a([$geti($1.barcode, $f($1.barlen - 1), 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#10858
    } else { //#10864
        $1.indx = $get($1.charvals, $geti($1.barcode, $f($1.barlen - 1), 1)); //#10861
        $1.enc = $get($1.encs, $1.indx); //#10862
        $puti($1.sbs, $f(($1.barlen * 8) - 8), $1.enc); //#10863
        $put($1.txt, $f($1.barlen - 1), $a([$geti($1.barcode, $f($1.barlen - 1), 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#10864
    } //#10864
    $k[$j++] = Infinity; //#10876
    $k[$j++] = Infinity; //#10870
    $forall($1.sbs, function() { //#10870
        var _2y = $k[--$j]; //#10870
        $k[$j++] = $f(_2y - 48); //#10870
    }); //#10870
    var _2z = $a(); //#10870
    $k[$j++] = Infinity; //#10871
    for (var _31 = 0, _32 = ~~(($1.sbs.length + 1) / 2); _31 < _32; _31++) { //#10871
        $k[$j++] = $1.height; //#10871
    } //#10871
    var _34 = $a(); //#10871
    $k[$j++] = Infinity; //#10872
    for (var _36 = 0, _37 = ~~(($1.sbs.length + 1) / 2); _36 < _37; _36++) { //#10872
        $k[$j++] = 0; //#10872
    } //#10872
    var _38 = $a(); //#10872
    $k[$j++] = 'ren'; //#10875
    $k[$j++] = bwipp_renlinear; //#10875
    $k[$j++] = 'sbs'; //#10875
    $k[$j++] = _2z; //#10875
    $k[$j++] = 'bhs'; //#10875
    $k[$j++] = _34; //#10875
    $k[$j++] = 'bbs'; //#10875
    $k[$j++] = _38; //#10875
    if ($1.includetext) { //#10875
        $k[$j++] = 'txt'; //#10874
        $k[$j++] = $1.txt; //#10874
    } //#10874
    $k[$j++] = 'opt'; //#10876
    $k[$j++] = $1.options; //#10876
    var _3C = $d(); //#10876
    $k[$j++] = _3C; //#10879
    if (!$1.dontdraw) { //#10879
        bwipp_renlinear(); //#10879
    } //#10879
}

function bwipp_onecode() {
    var $1 = Object.create(bwipp_onecode.$ctx || (bwipp_onecode.$ctx = {})); //#10913
    $1.dontdraw = false; //#10916
    $1.height = 0.15; //#10917
    $k[$j++] = $1; //#10919
    bwipp_processoptions(); //#10919
    $1.options = $k[--$j]; //#10919
    $1.barcode = $k[--$j]; //#10920
    $1.barlen = $1.barcode.length; //#10924
    $k[$j++] = Infinity; //#10933
    var _5 = $eq($geti($1.barcode, 5, 1), "9") ? 14 : 11; //#10930
    $k[$j++] = 2; //#10933
    $k[$j++] = 2; //#10933
    $k[$j++] = 5; //#10933
    $k[$j++] = 5; //#10933
    $k[$j++] = _5; //#10933
    $k[$j++] = _5; //#10933
    $k[$j++] = 20; //#10933
    $k[$j++] = 20; //#10933
    $k[$j++] = 25; //#10933
    $k[$j++] = 25; //#10933
    $k[$j++] = 29; //#10933
    $k[$j++] = 29; //#10933
    $1.txtdict = $d(); //#10934
    $1.txt = $a($1.barlen + 6); //#10935
    $1.spacecnt = 0; //#10936
    for (var _B = 0, _A = $1.barlen - 1; _B <= _A; _B += 1) { //#10944
        $1.i = _B; //#10938
        var _E = $get($1.txtdict, $1.i) !== undefined; //#10939
        if (_E) { //#10942
            $put($1.txt, $1.i + $1.spacecnt, $a([" ", 0, 0, "", 0])); //#10940
            $1.spacecnt = $1.spacecnt + 1; //#10941
        } //#10941
        $put($1.txt, $1.i + $1.spacecnt, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); //#10943
    } //#10943
    $1.txt = $geti($1.txt, 0, $1.barcode.length + $1.spacecnt); //#10945
    $1.normalize = function() {
        $1.base = $k[--$j]; //#10948
        $1.num = $k[--$j]; //#10949
        for (var _Y = $1.num.length - 1; _Y >= 1; _Y -= 1) { //#10954
            $1.i = _Y; //#10951
            var _Z = $1.num; //#10952
            var _a = $1.i; //#10952
            $put(_Z, _a - 1, $f($get(_Z, _a - 1) + (~~($get($1.num, $1.i) / $1.base)))); //#10952
            $put($1.num, $1.i, $get($1.num, $1.i) % $1.base); //#10953
        } //#10953
        for (;;) { //#10960
            if ($lt($get($1.num, 0), $1.base)) { //#10956
                break; //#10956
            } //#10956
            $k[$j++] = Infinity; //#10957
            $k[$j++] = 0; //#10957
            $forall($1.num); //#10957
            $1.num = $a(); //#10957
            $put($1.num, 0, $f($get($1.num, 0) + (~~($get($1.num, 1) / $1.base)))); //#10958
            $put($1.num, 1, $get($1.num, 1) % $1.base); //#10959
        } //#10959
        $k[$j++] = Infinity; //#10962
        $1.i = true; //#10962
        var _11 = $1.num; //#10962
        for (var _12 = 0, _13 = _11.length; _12 < _13; _12++) { //#10962
            var _14 = $get(_11, _12); //#10962
            $k[$j++] = _14; //#10962
            if ((_14 == 0) && $1.i) { //#10962
                $j--; //#10962
            } else { //#10962
                $1.i = false; //#10962
            } //#10962
        } //#10962
        $1.num = $a(); //#10962
        if ($1.num.length == 0) { //#10963
            $1.num = $a([0]); //#10963
        } //#10963
        $k[$j++] = $1.num; //#10964
    }; //#10964
    $1.bigadd = function() {
        var _1A = $k[--$j]; //#10968
        var _1B = $k[--$j]; //#10968
        $1.offset = Math.abs(_1A.length - _1B.length); //#10969
        if (_1A.length < _1B.length) { //#10970
            var _ = _1A; //#10970
            _1A = _1B; //#10970
            _1B = _; //#10970
        } //#10970
        $1.a = _1A; //#10971
        $1.b = _1B; //#10971
        for (var _1E = 0, _1D = $1.b.length - 1; _1E <= _1D; _1E += 1) { //#10974
            var _1F = $1.a; //#10973
            var _1G = $1.offset; //#10973
            $put(_1F, _1E + _1G, $f($get(_1F, _1E + _1G) + $get($1.b, _1E))); //#10973
        } //#10973
        $k[$j++] = $1.a; //#10975
    }; //#10975
    if ($1.barlen == 20) { //#10979
        $k[$j++] = $a([0]); //#10979
    } //#10979
    if ($1.barlen == 25) { //#10980
        $k[$j++] = $a([1]); //#10980
    } //#10980
    if ($1.barlen == 29) { //#10981
        $k[$j++] = $a([1, 0, 0, 0, 0, 1]); //#10981
    } //#10981
    if ($1.barlen == 31) { //#10982
        $k[$j++] = $a([1, 0, 0, 0, 1, 0, 0, 0, 0, 1]); //#10982
    } //#10982
    var _1T = $k[--$j]; //#10983
    $k[$j++] = 'binval'; //#10983
    $k[$j++] = _1T; //#10983
    $k[$j++] = Infinity; //#10983
    var _1W = $geti($1.barcode, 20, $1.barlen - 20); //#10983
    for (var _1X = 0, _1Y = _1W.length; _1X < _1Y; _1X++) { //#10983
        $k[$j++] = $f($get(_1W, _1X) - 48); //#10983
    } //#10983
    var _1a = $a(); //#10983
    $k[$j++] = _1a; //#10983
    $1.bigadd(); //#10983
    var _1b = $k[--$j]; //#10983
    $1[$k[--$j]] = _1b; //#10983
    $k[$j++] = Infinity; //#10984
    var _1d = $1.binval; //#10984
    for (var _1e = 0, _1f = _1d.length; _1e < _1f; _1e++) { //#10984
        $k[$j++] = $get(_1d, _1e); //#10984
    } //#10984
    $k[$j++] = $f($get($1.barcode, 0) - 48); //#10984
    $1.binval = $a(); //#10984
    $k[$j++] = Infinity; //#10985
    var _1k = $1.binval; //#10985
    for (var _1l = 0, _1m = _1k.length; _1l < _1m; _1l++) { //#10985
        $k[$j++] = $get(_1k, _1l) * 5; //#10985
    } //#10985
    var _1o = $a(); //#10985
    $k[$j++] = 'binval'; //#10985
    $k[$j++] = _1o; //#10985
    $k[$j++] = $a([$f($get($1.barcode, 1) - 48)]); //#10985
    $1.bigadd(); //#10985
    $k[$j++] = 10; //#10985
    $1.normalize(); //#10985
    var _1s = $k[--$j]; //#10985
    $1[$k[--$j]] = _1s; //#10985
    $k[$j++] = Infinity; //#10986
    var _1u = $1.binval; //#10986
    for (var _1v = 0, _1w = _1u.length; _1v < _1w; _1v++) { //#10986
        $k[$j++] = $get(_1u, _1v); //#10986
    } //#10986
    var _1z = $geti($1.barcode, 2, 18); //#10986
    for (var _20 = 0, _21 = _1z.length; _20 < _21; _20++) { //#10986
        $k[$j++] = $f($get(_1z, _20) - 48); //#10986
    } //#10986
    $1.binval = $a(); //#10986
    $1.bytes = $a(13); //#10989
    $k[$j++] = Infinity; //#10990
    var _25 = $1.binval; //#10990
    for (var _26 = 0, _27 = _25.length; _26 < _27; _26++) { //#10990
        $k[$j++] = $get(_25, _26); //#10990
    } //#10990
    $1.bintmp = $a(); //#10990
    for (var _2A = 12; _2A >= 0; _2A -= 1) { //#11000
        $1.i = _2A; //#10992
        for (var _2D = 0, _2C = $1.bintmp.length - 2; _2D <= _2C; _2D += 1) { //#10997
            $1.j = _2D; //#10994
            var _2E = $1.bintmp; //#10995
            var _2F = $1.j; //#10995
            $put(_2E, _2F + 1, $f($get(_2E, _2F + 1) + (($get($1.bintmp, $1.j) % 256) * 10))); //#10995
            $put($1.bintmp, $1.j, ~~($get($1.bintmp, $1.j) / 256)); //#10996
        } //#10996
        $put($1.bytes, $1.i, $get($1.bintmp, $1.bintmp.length - 1) % 256); //#10998
        var _2U = $1.bintmp; //#10999
        var _2V = $1.bintmp; //#10999
        $put(_2U, _2V.length - 1, ~~($get(_2U, _2V.length - 1) / 256)); //#10999
    } //#10999
    $1.fcs = 2047; //#11003
    $1.dat = $get($1.bytes, 0) << 5; //#11004
    for (var _2Z = 0, _2a = 6; _2Z < _2a; _2Z++) { //#11013
        if ((($1.fcs ^ $1.dat) & 1024) != 0) { //#11009
            $1.fcs = ($1.fcs << 1) ^ 3893; //#11007
        } else { //#11009
            $1.fcs = $1.fcs << 1; //#11009
        } //#11009
        $1.fcs = $1.fcs & 2047; //#11011
        $1.dat = $1.dat << 1; //#11012
    } //#11012
    for (var _2h = 1; _2h <= 12; _2h += 1) { //#11025
        $1.dat = $get($1.bytes, _2h) << 3; //#11015
        for (var _2k = 0, _2l = 8; _2k < _2l; _2k++) { //#11024
            if ((($1.fcs ^ $1.dat) & 1024) != 0) { //#11020
                $1.fcs = ($1.fcs << 1) ^ 3893; //#11018
            } else { //#11020
                $1.fcs = $1.fcs << 1; //#11020
            } //#11020
            $1.fcs = $1.fcs & 2047; //#11022
            $1.dat = $1.dat << 1; //#11023
        } //#11023
    } //#11023
    $1.codewords = $a(10); //#11028
    for (var _2t = 9; _2t >= 0; _2t -= 1) { //#11043
        $1.i = _2t; //#11030
        if ($1.i == 9) { //#11034
            $1.b = 636; //#11032
        } else { //#11034
            $1.b = 1365; //#11034
        } //#11034
        for (var _2x = 0, _2w = $1.binval.length - 2; _2x <= _2w; _2x += 1) { //#11040
            $1.j = _2x; //#11037
            var _2y = $1.binval; //#11038
            var _2z = $1.j; //#11038
            $put(_2y, _2z + 1, $f($get(_2y, _2z + 1) + (($get($1.binval, $1.j) % $1.b) * 10))); //#11038
            $put($1.binval, $1.j, ~~($get($1.binval, $1.j) / $1.b)); //#11039
        } //#11039
        $put($1.codewords, $1.i, $get($1.binval, $1.binval.length - 1) % $1.b); //#11041
        var _3H = $1.binval; //#11042
        var _3I = $1.binval; //#11042
        $put(_3H, _3I.length - 1, ~~($get(_3H, _3I.length - 1) / $1.b)); //#11042
    } //#11042
    $put($1.codewords, 9, $get($1.codewords, 9) * 2); //#11046
    if (($1.fcs & 1024) != 0) { //#11049
        $put($1.codewords, 0, $f($get($1.codewords, 0) + 659)); //#11048
    } //#11048
    if (!bwipp_onecode.$ctx._11150) { //#11150
        (function() { //#11150
            var $ctx = Object.create($1); //#11150
            $ctx.tab513 = $a([31, 7936, 47, 7808, 55, 7552, 59, 7040, 61, 6016, 62, 3968, 79, 7744, 87, 7488, 91, 6976, 93, 5952, 94, 3904, 103, 7360, 107, 6848, 109, 5824, 110, 3776, 115, 6592, 117, 5568, 118, 3520, 121, 5056, 122, 3008, 124, 1984, 143, 7712, 151, 7456, 155, 6944, 157, 5920, 158, 3872, 167, 7328, 171, 6816, 173, 5792, 174, 3744, 179, 6560, 181, 5536, 182, 3488, 185, 5024, 186, 2976, 188, 1952, 199, 7264, 203, 6752, 205, 5728, 206, 3680, 211, 6496, 213, 5472, 214, 3424, 217, 4960, 218, 2912, 220, 1888, 227, 6368, 229, 5344, 230, 3296, 233, 4832, 234, 2784, 236, 1760, 241, 4576, 242, 2528, 244, 1504, 248, 992, 271, 7696, 279, 7440, 283, 6928, 285, 5904, 286, 3856, 295, 7312, 299, 6800, 301, 5776, 302, 3728, 307, 6544, 309, 5520, 310, 3472, 313, 5008, 314, 2960, 316, 1936, 327, 7248, 331, 6736, 333, 5712, 334, 3664, 339, 6480, 341, 5456, 342, 3408, 345, 4944, 346, 2896, 348, 1872, 355, 6352, 357, 5328, 358, 3280, 361, 4816, 362, 2768, 364, 1744, 369, 4560, 370, 2512, 372, 1488, 376, 976, 391, 7216, 395, 6704, 397, 5680, 398, 3632, 403, 6448, 405, 5424, 406, 3376, 409, 4912, 410, 2864, 412, 1840, 419, 6320, 421, 5296, 422, 3248, 425, 4784, 426, 2736, 428, 1712, 433, 4528, 434, 2480, 436, 1456, 440, 944, 451, 6256, 453, 5232, 454, 3184, 457, 4720, 458, 2672, 460, 1648, 465, 4464, 466, 2416, 468, 1392, 472, 880, 481, 4336, 482, 2288, 484, 1264, 488, 752, 527, 7688, 535, 7432, 539, 6920, 541, 5896, 542, 3848, 551, 7304, 555, 6792, 557, 5768, 558, 3720, 563, 6536, 565, 5512, 566, 3464, 569, 5000, 570, 2952, 572, 1928, 583, 7240, 587, 6728, 589, 5704, 590, 3656, 595, 6472, 597, 5448, 598, 3400, 601, 4936, 602, 2888, 604, 1864, 611, 6344, 613, 5320, 614, 3272, 617, 4808, 618, 2760, 620, 1736, 625, 4552, 626, 2504, 628, 1480, 632, 968, 647, 7208, 651, 6696, 653, 5672, 654, 3624, 659, 6440, 661, 5416, 662, 3368, 665, 4904, 666, 2856, 668, 1832, 675, 6312, 677, 5288, 678, 3240, 681, 4776, 682, 2728, 684, 1704, 689, 4520, 690, 2472, 692, 1448, 696, 936, 707, 6248, 709, 5224, 710, 3176, 713, 4712, 714, 2664, 716, 1640, 721, 4456, 722, 2408, 724, 1384, 728, 872, 737, 4328, 738, 2280, 740, 1256, 775, 7192, 779, 6680, 781, 5656, 782, 3608, 787, 6424, 789, 5400, 790, 3352, 793, 4888, 794, 2840, 796, 1816, 803, 6296, 805, 5272, 806, 3224, 809, 4760, 810, 2712, 812, 1688, 817, 4504, 818, 2456, 820, 1432, 824, 920, 835, 6232, 837, 5208, 838, 3160, 841, 4696, 842, 2648, 844, 1624, 849, 4440, 850, 2392, 852, 1368, 865, 4312, 866, 2264, 868, 1240, 899, 6200, 901, 5176, 902, 3128, 905, 4664, 906, 2616, 908, 1592, 913, 4408, 914, 2360, 916, 1336, 929, 4280, 930, 2232, 932, 1208, 961, 4216, 962, 2168, 964, 1144, 1039, 7684, 1047, 7428, 1051, 6916, 1053, 5892, 1054, 3844, 1063, 7300, 1067, 6788, 1069, 5764, 1070, 3716, 1075, 6532, 1077, 5508, 1078, 3460, 1081, 4996, 1082, 2948, 1084, 1924, 1095, 7236, 1099, 6724, 1101, 5700, 1102, 3652, 1107, 6468, 1109, 5444, 1110, 3396, 1113, 4932, 1114, 2884, 1116, 1860, 1123, 6340, 1125, 5316, 1126, 3268, 1129, 4804, 1130, 2756, 1132, 1732, 1137, 4548, 1138, 2500, 1140, 1476, 1159, 7204, 1163, 6692, 1165, 5668, 1166, 3620, 1171, 6436, 1173, 5412, 1174, 3364, 1177, 4900, 1178, 2852, 1180, 1828, 1187, 6308, 1189, 5284, 1190, 3236, 1193, 4772, 1194, 2724, 1196, 1700, 1201, 4516, 1202, 2468, 1204, 1444, 1219, 6244, 1221, 5220, 1222, 3172, 1225, 4708, 1226, 2660, 1228, 1636, 1233, 4452, 1234, 2404, 1236, 1380, 1249, 4324, 1250, 2276, 1287, 7188, 1291, 6676, 1293, 5652, 1294, 3604, 1299, 6420, 1301, 5396, 1302, 3348, 1305, 4884, 1306, 2836, 1308, 1812, 1315, 6292, 1317, 5268, 1318, 3220, 1321, 4756, 1322, 2708, 1324, 1684, 1329, 4500, 1330, 2452, 1332, 1428, 1347, 6228, 1349, 5204, 1350, 3156, 1353, 4692, 1354, 2644, 1356, 1620, 1361, 4436, 1362, 2388, 1377, 4308, 1378, 2260, 1411, 6196, 1413, 5172, 1414, 3124, 1417, 4660, 1418, 2612, 1420, 1588, 1425, 4404, 1426, 2356, 1441, 4276, 1442, 2228, 1473, 4212, 1474, 2164, 1543, 7180, 1547, 6668, 1549, 5644, 1550, 3596, 1555, 6412, 1557, 5388, 1558, 3340, 1561, 4876, 1562, 2828, 1564, 1804, 1571, 6284, 1573, 5260, 1574, 3212, 1577, 4748, 1578, 2700, 1580, 1676, 1585, 4492, 1586, 2444, 1603, 6220, 1605, 5196, 1606, 3148, 1609, 4684, 1610, 2636, 1617, 4428, 1618, 2380, 1633, 4300, 1634, 2252, 1667, 6188, 1669, 5164, 1670, 3116, 1673, 4652, 1674, 2604, 1681, 4396, 1682, 2348, 1697, 4268, 1698, 2220, 1729, 4204, 1730, 2156, 1795, 6172, 1797, 5148, 1798, 3100, 1801, 4636, 1802, 2588, 1809, 4380, 1810, 2332, 1825, 4252, 1826, 2204, 1857, 4188, 1858, 2140, 1921, 4156, 1922, 2108, 2063, 7682, 2071, 7426, 2075, 6914, 2077, 5890, 2078, 3842, 2087, 7298, 2091, 6786, 2093, 5762, 2094, 3714, 2099, 6530, 2101, 5506, 2102, 3458, 2105, 4994, 2106, 2946, 2119, 7234, 2123, 6722, 2125, 5698, 2126, 3650, 2131, 6466, 2133, 5442, 2134, 3394, 2137, 4930, 2138, 2882, 2147, 6338, 2149, 5314, 2150, 3266, 2153, 4802, 2154, 2754, 2161, 4546, 2162, 2498, 2183, 7202, 2187, 6690, 2189, 5666, 2190, 3618, 2195, 6434, 2197, 5410, 2198, 3362, 2201, 4898, 2202, 2850, 2211, 6306, 2213, 5282, 2214, 3234, 2217, 4770, 2218, 2722, 2225, 4514, 2226, 2466, 2243, 6242, 2245, 5218, 2246, 3170, 2249, 4706, 2250, 2658, 2257, 4450, 2258, 2402, 2273, 4322, 2311, 7186, 2315, 6674, 2317, 5650, 2318, 3602, 2323, 6418, 2325, 5394, 2326, 3346, 2329, 4882, 2330, 2834, 2339, 6290, 2341, 5266, 2342, 3218, 2345, 4754, 2346, 2706, 2353, 4498, 2354, 2450, 2371, 6226, 2373, 5202, 2374, 3154, 2377, 4690, 2378, 2642, 2385, 4434, 2401, 4306, 2435, 6194, 2437, 5170, 2438, 3122, 2441, 4658, 2442, 2610, 2449, 4402, 2465, 4274, 2497, 4210, 2567, 7178, 2571, 6666, 2573, 5642, 2574, 3594, 2579, 6410, 2581, 5386, 2582, 3338, 2585, 4874, 2586, 2826, 2595, 6282, 2597, 5258, 2598, 3210, 2601, 4746, 2602, 2698, 2609, 4490, 2627, 6218, 2629, 5194, 2630, 3146, 2633, 4682, 2641, 4426, 2657, 4298, 2691, 6186, 2693, 5162, 2694, 3114, 2697, 4650, 2705, 4394, 2721, 4266, 2753, 4202, 2819, 6170, 2821, 5146, 2822, 3098, 2825, 4634, 2833, 4378, 2849, 4250, 2881, 4186, 2945, 4154, 3079, 7174, 3083, 6662, 3085, 5638, 3086, 3590, 3091, 6406, 3093, 5382, 3094, 3334, 3097, 4870, 3107, 6278, 3109, 5254, 3110, 3206, 3113, 4742, 3121, 4486, 3139, 6214, 3141, 5190, 3145, 4678, 3153, 4422, 3169, 4294, 3203, 6182, 3205, 5158, 3209, 4646, 3217, 4390, 3233, 4262, 3265, 4198, 3331, 6166, 3333, 5142, 3337, 4630, 3345, 4374, 3361, 4246, 3393, 4182, 3457, 4150, 3587, 6158, 3589, 5134, 3593, 4622, 3601, 4366, 3617, 4238, 3649, 4174, 3713, 4142, 3841, 4126, 4111, 7681, 4119, 7425, 4123, 6913, 4125, 5889, 4135, 7297, 4139, 6785, 4141, 5761, 4147, 6529, 4149, 5505, 4153, 4993, 4167, 7233, 4171, 6721, 4173, 5697, 4179, 6465, 4181, 5441, 4185, 4929, 4195, 6337, 4197, 5313, 4201, 4801, 4209, 4545, 4231, 7201, 4235, 6689, 4237, 5665, 4243, 6433, 4245, 5409, 4249, 4897, 4259, 6305, 4261, 5281, 4265, 4769, 4273, 4513, 4291, 6241, 4293, 5217, 4297, 4705, 4305, 4449, 4359, 7185, 4363, 6673, 4365, 5649, 4371, 6417, 4373, 5393, 4377, 4881, 4387, 6289, 4389, 5265, 4393, 4753, 4401, 4497, 4419, 6225, 4421, 5201, 4425, 4689, 4483, 6193, 4485, 5169, 4489, 4657, 4615, 7177, 4619, 6665, 4621, 5641, 4627, 6409, 4629, 5385, 4633, 4873, 4643, 6281, 4645, 5257, 4649, 4745, 4675, 6217, 4677, 5193, 4739, 6185, 4741, 5161, 4867, 6169, 4869, 5145, 5127, 7173, 5131, 6661, 5133, 5637, 5139, 6405, 5141, 5381, 5155, 6277, 5157, 5253, 5187, 6213, 5251, 6181, 5379, 6165, 5635, 6157, 6151, 7171, 6155, 6659, 6163, 6403, 6179, 6275, 6211, 5189, 4681, 4433, 4321, 3142, 2634, 2386, 2274, 1612, 1364, 1252, 856, 744, 496]); //#11140
            $ctx.tab213 = $a([3, 6144, 5, 5120, 6, 3072, 9, 4608, 10, 2560, 12, 1536, 17, 4352, 18, 2304, 20, 1280, 24, 768, 33, 4224, 34, 2176, 36, 1152, 40, 640, 48, 384, 65, 4160, 66, 2112, 68, 1088, 72, 576, 80, 320, 96, 192, 129, 4128, 130, 2080, 132, 1056, 136, 544, 144, 288, 257, 4112, 258, 2064, 260, 1040, 264, 528, 513, 4104, 514, 2056, 516, 1032, 1025, 4100, 1026, 2052, 2049, 4098, 4097, 2050, 1028, 520, 272, 160]); //#11149
            for (var _3U in $ctx) {
                $ctx.hasOwnProperty(_3U) && (bwipp_onecode.$ctx[_3U] = $ctx[_3U]);
            } //#11149
            bwipp_onecode.$ctx._11150 = 1; //#11149
        })(); //#11149
    } //#11149
    $1.chars = $a(10); //#11152
    for (var _3W = 0; _3W <= 9; _3W += 1) { //#11161
        $1.i = _3W; //#11154
        var _3Z = $get($1.codewords, $1.i); //#11155
        $k[$j++] = _3Z; //#11159
        if (_3Z <= 1286) { //#11158
            var _3c = $get($1.tab513, $k[--$j]); //#11156
            $k[$j++] = _3c; //#11156
        } else { //#11158
            var _3f = $get($1.tab213, $f($k[--$j] - 1287)); //#11158
            $k[$j++] = _3f; //#11158
        } //#11158
        $put($1.chars, $1.i, $k[--$j]); //#11160
    } //#11160
    for (var _3j = 9; _3j >= 0; _3j -= 1) { //#11168
        $1.i = _3j; //#11164
        if (((~~Math.pow(2, $1.i)) & $1.fcs) != 0) { //#11167
            $put($1.chars, $1.i, $get($1.chars, $1.i) ^ 8191); //#11166
        } //#11166
    } //#11166
    if (!bwipp_onecode.$ctx._11187) { //#11187
        (function() { //#11187
            var $ctx = Object.create($1); //#11187
            $ctx.barmap = $a([7, 2, 4, 3, 1, 10, 0, 0, 9, 12, 2, 8, 5, 5, 6, 11, 8, 9, 3, 1, 0, 1, 5, 12, 2, 5, 1, 8, 4, 4, 9, 11, 6, 3, 8, 10, 3, 9, 7, 6, 5, 11, 1, 4, 8, 5, 2, 12, 9, 10, 0, 2, 7, 1, 6, 7, 3, 6, 4, 9, 0, 3, 8, 6, 6, 4, 2, 7, 1, 1, 9, 9, 7, 10, 5, 2, 4, 0, 3, 8, 6, 2, 0, 4, 8, 11, 1, 0, 9, 8, 3, 12, 2, 6, 7, 7, 5, 1, 4, 10, 1, 12, 6, 9, 7, 3, 8, 0, 5, 8, 9, 7, 4, 6, 2, 10, 3, 4, 0, 5, 8, 4, 5, 7, 7, 11, 1, 9, 6, 0, 9, 6, 0, 6, 4, 8, 2, 1, 3, 2, 5, 9, 8, 12, 4, 11, 6, 1, 9, 5, 7, 4, 3, 3, 1, 2, 0, 7, 2, 0, 1, 3, 4, 1, 6, 10, 3, 5, 8, 7, 9, 4, 2, 11, 5, 6, 0, 8, 7, 12, 4, 2, 8, 1, 5, 10, 3, 0, 9, 3, 0, 9, 6, 5, 2, 4, 7, 8, 1, 7, 5, 0, 4, 5, 2, 3, 0, 10, 6, 12, 9, 2, 3, 11, 1, 6, 8, 8, 7, 9, 5, 4, 0, 11, 1, 5, 2, 2, 9, 1, 4, 12, 8, 3, 6, 6, 7, 0, 3, 7, 4, 7, 7, 5, 0, 12, 1, 11, 2, 9, 9, 0, 6, 8, 5, 3, 3, 10, 8, 2]); //#11186
            for (var _3s in $ctx) {
                $ctx.hasOwnProperty(_3s) && (bwipp_onecode.$ctx[_3s] = $ctx[_3s]);
            } //#11186
            bwipp_onecode.$ctx._11187 = 1; //#11186
        })(); //#11186
    } //#11186
    $1.bbs = $a(65); //#11189
    $1.bhs = $a(65); //#11190
    for (var _3v = 0; _3v <= 64; _3v += 1) { //#11211
        $1.i = _3v; //#11192
        $1.dec = ($get($1.chars, $get($1.barmap, $1.i * 4)) & (~~Math.pow(2, $get($1.barmap, ($1.i * 4) + 1)))) != 0; //#11193
        $1.asc = ($get($1.chars, $get($1.barmap, ($1.i * 4) + 2)) & (~~Math.pow(2, $get($1.barmap, ($1.i * 4) + 3)))) != 0; //#11194
        if ((!$1.dec) && (!$1.asc)) { //#11198
            $put($1.bbs, $1.i, (3 * $1.height) / 8); //#11196
            $put($1.bhs, $1.i, (2 * $1.height) / 8); //#11197
        } //#11197
        if ((!$1.dec) && $1.asc) { //#11202
            $put($1.bbs, $1.i, (3 * $1.height) / 8); //#11200
            $put($1.bhs, $1.i, (5 * $1.height) / 8); //#11201
        } //#11201
        if ($1.dec && (!$1.asc)) { //#11206
            $put($1.bbs, $1.i, (0 * $1.height) / 8); //#11204
            $put($1.bhs, $1.i, (5 * $1.height) / 8); //#11205
        } //#11205
        if ($1.dec && $1.asc) { //#11210
            $put($1.bbs, $1.i, (0 * $1.height) / 8); //#11208
            $put($1.bhs, $1.i, (8 * $1.height) / 8); //#11209
        } //#11209
    } //#11209
    $k[$j++] = Infinity; //#11224
    var _4i = $1.bbs; //#11216
    var _4j = $1.bhs; //#11217
    $k[$j++] = Infinity; //#11218
    for (var _4l = 0, _4m = $1.bhs.length - 1; _4l < _4m; _4l++) { //#11218
        $k[$j++] = 1.44; //#11218
        $k[$j++] = 1.872; //#11218
    } //#11218
    $k[$j++] = 1.44; //#11218
    var _4n = $a(); //#11218
    $k[$j++] = 'ren'; //#11224
    $k[$j++] = bwipp_renlinear; //#11224
    $k[$j++] = 'bbs'; //#11224
    $k[$j++] = _4i; //#11224
    $k[$j++] = 'bhs'; //#11224
    $k[$j++] = _4j; //#11224
    $k[$j++] = 'sbs'; //#11224
    $k[$j++] = _4n; //#11224
    $k[$j++] = 'txt'; //#11224
    $k[$j++] = $1.txt; //#11224
    $k[$j++] = 'textxalign'; //#11224
    $k[$j++] = "left"; //#11224
    $k[$j++] = 'textfont'; //#11224
    $k[$j++] = "OCR-B"; //#11224
    $k[$j++] = 'textyoffset'; //#11224
    $k[$j++] = 1; //#11224
    $k[$j++] = 'textxoffset'; //#11224
    $k[$j++] = -0.3; //#11224
    $k[$j++] = 'opt'; //#11224
    $k[$j++] = $1.options; //#11224
    var _4q = $d(); //#11224
    $k[$j++] = _4q; //#11227
    if (!$1.dontdraw) { //#11227
        bwipp_renlinear(); //#11227
    } //#11227
}

function bwipp_postnet() {
    var $1 = Object.create(bwipp_postnet.$ctx || (bwipp_postnet.$ctx = {})); //#11261
    $1.dontdraw = false; //#11264
    $1.includetext = false; //#11265
    $1.validatecheck = false; //#11266
    $1.includecheckintext = false; //#11267
    $1.textfont = "OCR-B"; //#11268
    $1.textsize = 10; //#11269
    $1.textyoffset = -8; //#11270
    $1.height = 0.125; //#11271
    $k[$j++] = $1; //#11273
    bwipp_processoptions(); //#11273
    $1.options = $k[--$j]; //#11273
    $1.barcode = $k[--$j]; //#11274
    $k[$j++] = 'barlen'; //#11278
    $k[$j++] = $1.barcode.length; //#11278
    if ($1.validatecheck) { //#11278
        var _4 = $k[--$j]; //#11278
        $k[$j++] = $f(_4 - 1); //#11278
    } //#11278
    var _5 = $k[--$j]; //#11278
    $1[$k[--$j]] = _5; //#11278
    if ((($1.barlen != 5) && ($1.barlen != 9)) && ($1.barlen != 11)) { //#11283
        $k[$j++] = 'bwipp.postnetBadLength#11282'; //#11282
        $k[$j++] = "USPS POSTNET must be 5, 9 or 11 digits excluding check digit"; //#11282
        bwipp_raiseerror(); //#11282
    } //#11282
    $forall($1.barcode, function() { //#11288
        var _B = $k[--$j]; //#11285
        if ((_B < 48) || (_B > 57)) { //#11287
            $k[$j++] = 'bwipp.postnetBadCharacter#11286'; //#11286
            $k[$j++] = "USPS POSTNET must contain only digits"; //#11286
            bwipp_raiseerror(); //#11286
        } //#11286
    }); //#11286
    if (!bwipp_postnet.$ctx._11300) { //#11300
        (function() { //#11300
            var $ctx = Object.create($1); //#11300
            $ctx.barchars = "0123456789"; //#11292
            $ctx.encs = $a(["55222", "22255", "22525", "22552", "25225", "25252", "25522", "52225", "52252", "52522", "5", "5"]); //#11299
            for (var _D in $ctx) {
                $ctx.hasOwnProperty(_D) && (bwipp_postnet.$ctx[_D] = $ctx[_D]);
            } //#11299
            bwipp_postnet.$ctx._11300 = 1; //#11299
        })(); //#11299
    } //#11299
    $1.checksum = 0; //#11302
    for (var _G = 0, _F = $f($1.barlen - 1); _G <= _F; _G += 1) { //#11306
        $1.i = _G; //#11304
        $1.checksum = $f($1.checksum + $f($get($1.barcode, $1.i) - 48)); //#11305
    } //#11305
    $1.checksum = ($f(10 - ($1.checksum % 10))) % 10; //#11307
    if ($1.validatecheck) { //#11313
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#11311
            $k[$j++] = 'bwipp.postnetBadCheckDigit#11310'; //#11310
            $k[$j++] = "Incorrect USPS POSTNET check digit provided"; //#11310
            bwipp_raiseerror(); //#11310
        } //#11310
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#11312
    } //#11312
    $1.bhs = $a($f(($1.barlen * 5) + 7)); //#11315
    $1.txt = $a($f($1.barlen + 1)); //#11316
    $1.enc = $get($1.encs, 10); //#11319
    $1.heights = $a($1.enc.length); //#11320
    for (var _g = 0, _f = $1.enc.length - 1; _g <= _f; _g += 1) { //#11324
        $1.j = _g; //#11322
        $put($1.heights, $1.j, ($cvi($geti($1.enc, $1.j, 1)) * $1.height) / 5); //#11323
    } //#11323
    $puti($1.bhs, 0, $1.heights); //#11325
    for (var _r = 0, _q = $f($1.barlen - 1); _r <= _q; _r += 1) { //#11337
        $1.i = _r; //#11328
        $1.enc = $get($1.encs, $f($get($1.barcode, $1.i) - 48)); //#11329
        $1.heights = $a($1.enc.length); //#11330
        for (var _11 = 0, _10 = $1.enc.length - 1; _11 <= _10; _11 += 1) { //#11334
            $1.j = _11; //#11332
            $put($1.heights, $1.j, ($cvi($geti($1.enc, $1.j, 1)) * $1.height) / 5); //#11333
        } //#11333
        $puti($1.bhs, ($1.i * 5) + 1, $1.heights); //#11335
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.i * 5) + 1) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#11336
    } //#11336
    $1.enc = $get($1.encs, $1.checksum); //#11340
    $1.heights = $a($1.enc.length); //#11341
    for (var _1S = 0, _1R = $1.enc.length - 1; _1S <= _1R; _1S += 1) { //#11345
        $1.j = _1S; //#11343
        $put($1.heights, $1.j, ($cvi($geti($1.enc, $1.j, 1)) * $1.height) / 5); //#11344
    } //#11344
    $puti($1.bhs, $f(($1.barlen * 5) + 1), $1.heights); //#11346
    if ($1.includecheckintext) { //#11351
        $put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum, 1), ($f(($1.barlen * 5) + 1)) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#11349
    } else { //#11351
        $put($1.txt, $1.barlen, $a([" ", (($f(($1.barlen * 5) + 1)) * 72) / 25, $1.textyoffset, $1.textfont, $1.textsize])); //#11351
    } //#11351
    $1.enc = $get($1.encs, 11); //#11355
    $1.heights = $a($1.enc.length); //#11356
    for (var _20 = 0, _1z = $1.enc.length - 1; _20 <= _1z; _20 += 1) { //#11360
        $1.j = _20; //#11358
        $put($1.heights, $1.j, ($cvi($geti($1.enc, $1.j, 1)) * $1.height) / 5); //#11359
    } //#11359
    $puti($1.bhs, $f(($1.barlen * 5) + 6), $1.heights); //#11361
    $k[$j++] = Infinity; //#11372
    var _2A = $1.bhs; //#11366
    $k[$j++] = Infinity; //#11367
    for (var _2C = 0, _2D = $1.bhs.length; _2C < _2D; _2C++) { //#11367
        $k[$j++] = 0; //#11367
    } //#11367
    var _2E = $a(); //#11367
    $k[$j++] = Infinity; //#11368
    for (var _2G = 0, _2H = $1.bhs.length - 1; _2G < _2H; _2G++) { //#11368
        $k[$j++] = 1.44; //#11368
        $k[$j++] = 1.872; //#11368
    } //#11368
    $k[$j++] = 1.44; //#11368
    var _2I = $a(); //#11368
    $k[$j++] = 'ren'; //#11371
    $k[$j++] = bwipp_renlinear; //#11371
    $k[$j++] = 'bhs'; //#11371
    $k[$j++] = _2A; //#11371
    $k[$j++] = 'bbs'; //#11371
    $k[$j++] = _2E; //#11371
    $k[$j++] = 'sbs'; //#11371
    $k[$j++] = _2I; //#11371
    if ($1.includetext) { //#11371
        $k[$j++] = 'txt'; //#11370
        $k[$j++] = $1.txt; //#11370
    } //#11370
    $k[$j++] = 'opt'; //#11372
    $k[$j++] = $1.options; //#11372
    var _2M = $d(); //#11372
    $k[$j++] = _2M; //#11375
    if (!$1.dontdraw) { //#11375
        bwipp_renlinear(); //#11375
    } //#11375
}

function bwipp_planet() {
    var $1 = Object.create(bwipp_planet.$ctx || (bwipp_planet.$ctx = {})); //#11409
    $1.dontdraw = false; //#11412
    $1.includetext = false; //#11413
    $1.validatecheck = false; //#11414
    $1.includecheckintext = false; //#11415
    $1.textfont = "OCR-B"; //#11416
    $1.textsize = 10; //#11417
    $1.textyoffset = -8; //#11418
    $1.height = 0.125; //#11419
    $k[$j++] = $1; //#11421
    bwipp_processoptions(); //#11421
    $1.options = $k[--$j]; //#11421
    $1.barcode = $k[--$j]; //#11422
    $k[$j++] = 'barlen'; //#11426
    $k[$j++] = $1.barcode.length; //#11426
    if ($1.validatecheck) { //#11426
        var _4 = $k[--$j]; //#11426
        $k[$j++] = $f(_4 - 1); //#11426
    } //#11426
    var _5 = $k[--$j]; //#11426
    $1[$k[--$j]] = _5; //#11426
    if (($1.barlen != 11) && ($1.barlen != 13)) { //#11431
        $k[$j++] = 'bwipp.planetBadLength#11430'; //#11430
        $k[$j++] = "USPS PLANET must be 11 or 13 digits excluding check digit"; //#11430
        bwipp_raiseerror(); //#11430
    } //#11430
    $forall($1.barcode, function() { //#11436
        var _A = $k[--$j]; //#11433
        if ((_A < 48) || (_A > 57)) { //#11435
            $k[$j++] = 'bwipp.planetBadCharacter#11434'; //#11434
            $k[$j++] = "USPS PLANET must contain only digits"; //#11434
            bwipp_raiseerror(); //#11434
        } //#11434
    }); //#11434
    if (!bwipp_planet.$ctx._11448) { //#11448
        (function() { //#11448
            var $ctx = Object.create($1); //#11448
            $ctx.barchars = "0123456789"; //#11440
            $ctx.encs = $a(["22555", "55522", "55252", "55225", "52552", "52525", "52255", "25552", "25525", "25255", "5", "5"]); //#11447
            for (var _C in $ctx) {
                $ctx.hasOwnProperty(_C) && (bwipp_planet.$ctx[_C] = $ctx[_C]);
            } //#11447
            bwipp_planet.$ctx._11448 = 1; //#11447
        })(); //#11447
    } //#11447
    $1.checksum = 0; //#11451
    for (var _F = 0, _E = $f($1.barlen - 1); _F <= _E; _F += 1) { //#11455
        $1.i = _F; //#11453
        $1.checksum = $f($1.checksum + $f($get($1.barcode, $1.i) - 48)); //#11454
    } //#11454
    $1.checksum = ($f(10 - ($1.checksum % 10))) % 10; //#11456
    if ($1.validatecheck) { //#11462
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#11460
            $k[$j++] = 'bwipp.planetBadCheckDigit#11459'; //#11459
            $k[$j++] = "Incorrect USPS PLANET check digit provided"; //#11459
            bwipp_raiseerror(); //#11459
        } //#11459
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#11461
    } //#11461
    $1.bhs = $a($f(($1.barlen * 5) + 7)); //#11464
    $1.txt = $a($f($1.barlen + 1)); //#11465
    $1.enc = $get($1.encs, 10); //#11468
    $1.heights = $a($1.enc.length); //#11469
    for (var _f = 0, _e = $1.enc.length - 1; _f <= _e; _f += 1) { //#11473
        $1.j = _f; //#11471
        $put($1.heights, $1.j, ($cvi($geti($1.enc, $1.j, 1)) * $1.height) / 5); //#11472
    } //#11472
    $puti($1.bhs, 0, $1.heights); //#11474
    for (var _q = 0, _p = $f($1.barlen - 1); _q <= _p; _q += 1) { //#11486
        $1.i = _q; //#11477
        $1.enc = $get($1.encs, $f($get($1.barcode, $1.i) - 48)); //#11478
        $1.heights = $a($1.enc.length); //#11479
        for (var _10 = 0, _z = $1.enc.length - 1; _10 <= _z; _10 += 1) { //#11483
            $1.j = _10; //#11481
            $put($1.heights, $1.j, ($cvi($geti($1.enc, $1.j, 1)) * $1.height) / 5); //#11482
        } //#11482
        $puti($1.bhs, ($1.i * 5) + 1, $1.heights); //#11484
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.i * 5) + 1) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#11485
    } //#11485
    $1.enc = $get($1.encs, $1.checksum); //#11489
    $1.heights = $a($1.enc.length); //#11490
    for (var _1R = 0, _1Q = $1.enc.length - 1; _1R <= _1Q; _1R += 1) { //#11494
        $1.j = _1R; //#11492
        $put($1.heights, $1.j, ($cvi($geti($1.enc, $1.j, 1)) * $1.height) / 5); //#11493
    } //#11493
    $puti($1.bhs, $f(($1.barlen * 5) + 1), $1.heights); //#11495
    if ($1.includecheckintext) { //#11500
        $put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum, 1), ($f(($1.barlen * 5) + 1)) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#11498
    } else { //#11500
        $put($1.txt, $1.barlen, $a([" ", (($f(($1.barlen * 5) + 1)) * 72) / 25, $1.textyoffset, $1.textfont, $1.textsize])); //#11500
    } //#11500
    $1.enc = $get($1.encs, 11); //#11504
    $1.heights = $a($1.enc.length); //#11505
    for (var _1z = 0, _1y = $1.enc.length - 1; _1z <= _1y; _1z += 1) { //#11509
        $1.j = _1z; //#11507
        $put($1.heights, $1.j, ($cvi($geti($1.enc, $1.j, 1)) * $1.height) / 5); //#11508
    } //#11508
    $puti($1.bhs, $f(($1.barlen * 5) + 6), $1.heights); //#11510
    $k[$j++] = Infinity; //#11521
    var _29 = $1.bhs; //#11515
    $k[$j++] = Infinity; //#11516
    for (var _2B = 0, _2C = $1.bhs.length; _2B < _2C; _2B++) { //#11516
        $k[$j++] = 0; //#11516
    } //#11516
    var _2D = $a(); //#11516
    $k[$j++] = Infinity; //#11517
    for (var _2F = 0, _2G = $1.bhs.length - 1; _2F < _2G; _2F++) { //#11517
        $k[$j++] = 1.44; //#11517
        $k[$j++] = 1.872; //#11517
    } //#11517
    $k[$j++] = 1.44; //#11517
    var _2H = $a(); //#11517
    $k[$j++] = 'ren'; //#11520
    $k[$j++] = bwipp_renlinear; //#11520
    $k[$j++] = 'bhs'; //#11520
    $k[$j++] = _29; //#11520
    $k[$j++] = 'bbs'; //#11520
    $k[$j++] = _2D; //#11520
    $k[$j++] = 'sbs'; //#11520
    $k[$j++] = _2H; //#11520
    if ($1.includetext) { //#11520
        $k[$j++] = 'txt'; //#11519
        $k[$j++] = $1.txt; //#11519
    } //#11519
    $k[$j++] = 'opt'; //#11521
    $k[$j++] = $1.options; //#11521
    var _2L = $d(); //#11521
    $k[$j++] = _2L; //#11524
    if (!$1.dontdraw) { //#11524
        bwipp_renlinear(); //#11524
    } //#11524
}

function bwipp_royalmail() {
    var $1 = Object.create(bwipp_royalmail.$ctx || (bwipp_royalmail.$ctx = {})); //#11558
    $1.dontdraw = false; //#11561
    $1.includetext = false; //#11562
    $1.validatecheck = false; //#11563
    $1.includecheckintext = false; //#11564
    $1.textfont = "OCR-B"; //#11565
    $1.textsize = 10; //#11566
    $1.textyoffset = -8; //#11567
    $1.height = 0.175; //#11568
    $k[$j++] = $1; //#11570
    bwipp_processoptions(); //#11570
    $1.options = $k[--$j]; //#11570
    var _1 = $k[--$j]; //#11571
    $1.barcode = _1; //#11571
    if (!bwipp_royalmail.$ctx._11591) { //#11591
        (function() { //#11591
            var $ctx = Object.create($1); //#11591
            $ctx.barchars = "ZUVWXY501234B6789AHCDEFGNIJKLMTOPQRS"; //#11577
            $ctx.charvals = new Map; //#11578
            for (var _2 = 0; _2 <= 35; _2 += 1) { //#11579
                $put($ctx.charvals, $geti($ctx.barchars, _2, 1), _2); //#11579
            } //#11579
            $ctx.encs = $a(["3300", "2211", "2301", "2310", "3201", "3210", "1122", "0033", "0123", "0132", "1023", "1032", "1302", "0213", "0303", "0312", "1203", "1212", "1320", "0231", "0321", "0330", "1221", "1230", "3102", "2013", "2103", "2112", "3003", "3012", "3120", "2031", "2121", "2130", "3021", "3030", "2", "3"]); //#11590
            for (var _7 in $ctx) {
                $ctx.hasOwnProperty(_7) && (bwipp_royalmail.$ctx[_7] = $ctx[_7]);
            } //#11590
            bwipp_royalmail.$ctx._11591 = 1; //#11590
        })(); //#11590
    } //#11590
    for (var _A = 0, _9 = $1.barcode.length - 1; _A <= _9; _A += 1) { //#11598
        var _E = $get($1.charvals, $geti($1.barcode, _A, 1)) !== undefined; //#11595
        if (!_E) { //#11597
            $k[$j++] = 'bwipp.royalmailBadCharacter#11596'; //#11596
            $k[$j++] = "RM4SCC must contain only capital letters and digits"; //#11596
            bwipp_raiseerror(); //#11596
        } //#11596
    } //#11596
    $k[$j++] = 'barlen'; //#11600
    $k[$j++] = $1.barcode.length; //#11600
    if ($1.validatecheck) { //#11600
        var _H = $k[--$j]; //#11600
        $k[$j++] = $f(_H - 1); //#11600
    } //#11600
    var _I = $k[--$j]; //#11600
    $1[$k[--$j]] = _I; //#11600
    $1.checksumrow = 0; //#11602
    $1.checksumcol = 0; //#11603
    for (var _M = 0, _L = $f($1.barlen - 1); _M <= _L; _M += 1) { //#11609
        $1.i = _M; //#11605
        $1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); //#11606
        $1.checksumrow = $1.checksumrow + (~~($1.indx / 6)); //#11607
        $1.checksumcol = $f($1.checksumcol + ($1.indx % 6)); //#11608
    } //#11608
    $1.checksum = $f((($1.checksumrow % 6) * 6) + ($1.checksumcol % 6)); //#11610
    if ($1.validatecheck) { //#11616
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#11614
            $k[$j++] = 'bwipp.royalmailBadCheckDigit#11613'; //#11613
            $k[$j++] = "Incorrect RM4SCC check digit provided"; //#11613
            bwipp_raiseerror(); //#11613
        } //#11613
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#11615
    } //#11615
    $1.encstr = $s($f(($1.barlen * 4) + 6)); //#11618
    $1.txt = $a($f($1.barlen + 1)); //#11619
    $puti($1.encstr, 0, $get($1.encs, 36)); //#11622
    for (var _r = 0, _q = $f($1.barlen - 1); _r <= _q; _r += 1) { //#11629
        $1.i = _r; //#11625
        $1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); //#11626
        $puti($1.encstr, ($1.i * 4) + 1, $get($1.encs, $1.indx)); //#11627
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.i * 4) + 1) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#11628
    } //#11628
    $puti($1.encstr, $f(($1.barlen * 4) + 1), $get($1.encs, $1.checksum)); //#11632
    if ($1.includecheckintext) { //#11636
        $put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum, 1), ($f(($1.barlen * 4) + 1)) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#11634
    } else { //#11636
        $put($1.txt, $1.barlen, $a([" ", ($f(($1.barlen * 4) + 1)) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#11636
    } //#11636
    $puti($1.encstr, $f(($1.barlen * 4) + 5), $get($1.encs, 37)); //#11640
    $1.bbs = $a($1.encstr.length); //#11642
    $1.bhs = $a($1.encstr.length); //#11643
    for (var _1j = 0, _1i = $1.encstr.length - 1; _1j <= _1i; _1j += 1) { //#11663
        $1.i = _1j; //#11645
        $1.enc = $geti($1.encstr, $1.i, 1); //#11646
        if ($eq($1.enc, "0")) { //#11650
            $put($1.bbs, $1.i, (3 * $1.height) / 8); //#11648
            $put($1.bhs, $1.i, (2 * $1.height) / 8); //#11649
        } //#11649
        if ($eq($1.enc, "1")) { //#11654
            $put($1.bbs, $1.i, (0 * $1.height) / 8); //#11652
            $put($1.bhs, $1.i, (5 * $1.height) / 8); //#11653
        } //#11653
        if ($eq($1.enc, "2")) { //#11658
            $put($1.bbs, $1.i, (3 * $1.height) / 8); //#11656
            $put($1.bhs, $1.i, (5 * $1.height) / 8); //#11657
        } //#11657
        if ($eq($1.enc, "3")) { //#11662
            $put($1.bbs, $1.i, (0 * $1.height) / 8); //#11660
            $put($1.bhs, $1.i, (8 * $1.height) / 8); //#11661
        } //#11661
    } //#11661
    $k[$j++] = Infinity; //#11674
    var _2F = $1.bbs; //#11668
    var _2G = $1.bhs; //#11669
    $k[$j++] = Infinity; //#11670
    for (var _2I = 0, _2J = $1.bhs.length - 1; _2I < _2J; _2I++) { //#11670
        $k[$j++] = 1.44; //#11670
        $k[$j++] = 1.872; //#11670
    } //#11670
    $k[$j++] = 1.44; //#11670
    var _2K = $a(); //#11670
    $k[$j++] = 'ren'; //#11673
    $k[$j++] = bwipp_renlinear; //#11673
    $k[$j++] = 'bbs'; //#11673
    $k[$j++] = _2F; //#11673
    $k[$j++] = 'bhs'; //#11673
    $k[$j++] = _2G; //#11673
    $k[$j++] = 'sbs'; //#11673
    $k[$j++] = _2K; //#11673
    if ($1.includetext) { //#11673
        $k[$j++] = 'txt'; //#11672
        $k[$j++] = $1.txt; //#11672
    } //#11672
    $k[$j++] = 'opt'; //#11674
    $k[$j++] = $1.options; //#11674
    var _2O = $d(); //#11674
    $k[$j++] = _2O; //#11677
    if (!$1.dontdraw) { //#11677
        bwipp_renlinear(); //#11677
    } //#11677
}

function bwipp_auspost() {
    var $1 = Object.create(bwipp_auspost.$ctx || (bwipp_auspost.$ctx = {})); //#11711
    $1.dontdraw = false; //#11714
    $1.includetext = false; //#11715
    $1.textfont = "OCR-B"; //#11716
    $1.textsize = 10; //#11717
    $1.textyoffset = -8; //#11718
    $1.height = 0.175; //#11719
    $1.custinfoenc = "character"; //#11720
    $k[$j++] = $1; //#11722
    bwipp_processoptions(); //#11722
    $1.options = $k[--$j]; //#11722
    var _1 = $k[--$j]; //#11723
    $1.barcode = _1; //#11723
    if (!bwipp_auspost.$ctx._11744) { //#11744
        (function() { //#11744
            var $ctx = Object.create($1); //#11744
            $ctx.encs = $a(["000", "001", "002", "010", "011", "012", "020", "021", "022", "100", "101", "102", "110", "111", "112", "120", "121", "122", "200", "201", "202", "210", "211", "212", "220", "221", "222", "300", "301", "302", "310", "311", "312", "320", "321", "322", "023", "030", "031", "032", "033", "103", "113", "123", "130", "131", "132", "133", "203", "213", "223", "230", "231", "232", "233", "303", "313", "323", "330", "331", "332", "333", "003", "013", "00", "01", "02", "10", "11", "12", "20", "21", "22", "30", "13", "3"]); //#11740
            $ctx.barchars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz #"; //#11743
            for (var _3 in $ctx) {
                $ctx.hasOwnProperty(_3) && (bwipp_auspost.$ctx[_3] = $ctx[_3]);
            } //#11743
            bwipp_auspost.$ctx._11744 = 1; //#11743
        })(); //#11743
    } //#11743
    $1.barlen = $1.barcode.length; //#11746
    if ($eq($geti($1.barcode, 0, 2), "11")) { //#11747
        $k[$j++] = 37; //#11747
    } //#11747
    if ($eq($geti($1.barcode, 0, 2), "45")) { //#11748
        $k[$j++] = 37; //#11748
    } //#11748
    if ($eq($geti($1.barcode, 0, 2), "59")) { //#11749
        $k[$j++] = 52; //#11749
    } //#11749
    if ($eq($geti($1.barcode, 0, 2), "62")) { //#11750
        $k[$j++] = 67; //#11750
    } //#11750
    $1.encstr = $s($k[--$j]); //#11751
    $1.txt = $a($1.barlen - 2); //#11752
    $puti($1.encstr, 0, $get($1.encs, 74)); //#11755
    for (var _K = 0; _K <= 1; _K += 1) { //#11762
        $1.i = _K; //#11759
        $puti($1.encstr, ($1.i * 2) + 2, $get($1.encs, $cvi($geti($1.barcode, $1.i, 1)) + 64)); //#11761
    } //#11761
    for (var _S = 2; _S <= 9; _S += 1) { //#11770
        $1.i = _S; //#11766
        $puti($1.encstr, ($1.i * 2) + 2, $get($1.encs, $cvi($geti($1.barcode, $1.i, 1)) + 64)); //#11768
        $put($1.txt, $1.i - 2, $a([$geti($1.barcode, $1.i, 1), ((($1.i - 2) * 2) + 6) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#11769
    } //#11769
    if ($eq($1.custinfoenc, "numeric")) { //#11792
        for (var _n = 0, _m = $1.barlen - 11; _n <= _m; _n += 1) { //#11779
            $1.i = _n; //#11775
            $puti($1.encstr, ($1.i * 2) + 22, $get($1.encs, $cvi($geti($1.barcode, $1.i + 10, 1)) + 64)); //#11777
            $put($1.txt, $1.i + 8, $a([$geti($1.barcode, $1.i + 10, 1), (($1.i * 2) + 22) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#11778
        } //#11778
        $1.ciflen = ($1.barlen - 10) * 2; //#11780
    } else { //#11792
        for (var _18 = 0, _17 = $1.barlen - 11; _18 <= _17; _18 += 1) { //#11791
            $1.i = _18; //#11783
            $search($1.barchars, $geti($1.barcode, $1.i + 10, 1)); //#11784
            $j--; //#11785
            $1.indx = $k[--$j].length; //#11786
            $j -= 2; //#11787
            $1.enc = $get($1.encs, $1.indx); //#11788
            $puti($1.encstr, ($1.i * 3) + 22, $1.enc); //#11789
            $put($1.txt, $1.i + 8, $a([$geti($1.barcode, $1.i + 10, 1), (($1.i * 3) + 22) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#11790
        } //#11790
        $1.ciflen = ($1.barlen - 10) * 3; //#11792
    } //#11792
    for (var _1Y = 22 + $1.ciflen, _1X = $1.encstr.length - 14; _1Y <= _1X; _1Y += 1) { //#11798
        $puti($1.encstr, _1Y, $get($1.encs, 75)); //#11797
    } //#11797
    if (!bwipp_auspost.$ctx._11821) { //#11821
        (function() { //#11821
            var $ctx = Object.create($1); //#11821
            $ctx.rstable = $a(64 * 64); //#11802
            $k[$j++] = $ctx.rstable; //#11803
            $k[$j++] = 0; //#11803
            $k[$j++] = Infinity; //#11803
            for (var _1e = 0, _1f = 64; _1e < _1f; _1e++) { //#11803
                $k[$j++] = 0; //#11803
            } //#11803
            var _1g = $a(); //#11803
            var _1h = $k[--$j]; //#11803
            $puti($k[--$j], _1h, _1g); //#11803
            $k[$j++] = $ctx.rstable; //#11804
            $k[$j++] = 64; //#11804
            $k[$j++] = Infinity; //#11804
            for (var _1k = 0; _1k <= 63; _1k += 1) { //#11804
                $k[$j++] = _1k; //#11804
            } //#11804
            var _1l = $a(); //#11804
            var _1m = $k[--$j]; //#11804
            $puti($k[--$j], _1m, _1l); //#11804
            $ctx.prev = 1; //#11805
            for (var _1o = 0, _1p = 64; _1o < _1p; _1o++) { //#11820
                $ctx.next = $ctx.prev << 1; //#11807
                if (($ctx.next & 64) != 0) { //#11810
                    $ctx.next = $ctx.next ^ 67; //#11809
                } //#11809
                for (var _1t = 0; _1t <= 63; _1t += 1) { //#11818
                    $ctx.j = _1t; //#11812
                    $ctx.nextcell = function() {
                        $k[$j++] = $ctx.rstable; //#11813
                        $k[$j++] = (64 * $ctx.next) + $ctx.j; //#11813
                    }; //#11813
                    $ctx.nextcell(); //#11814
                    var _21 = $k[--$j]; //#11814
                    $put($k[--$j], _21, $get($ctx.rstable, (64 * $ctx.prev) + $ctx.j) << 1); //#11814
                    $ctx.nextcell(); //#11815
                    var _23 = $k[--$j]; //#11815
                    if (($get($k[--$j], _23) & 64) != 0) { //#11817
                        $ctx.nextcell(); //#11816
                        $ctx.nextcell(); //#11816
                        var _26 = $k[--$j]; //#11816
                        var _28 = $get($k[--$j], _26); //#11816
                        var _29 = $k[--$j]; //#11816
                        $put($k[--$j], _29, _28 ^ 67); //#11816
                    } //#11816
                } //#11816
                $ctx.prev = $ctx.next; //#11819
            } //#11819
            for (var _2C in $ctx) {
                $ctx.hasOwnProperty(_2C) && (bwipp_auspost.$ctx[_2C] = $ctx[_2C]);
            } //#11819
            bwipp_auspost.$ctx._11821 = 1; //#11819
        })(); //#11819
    } //#11819
    $1.rscodes = $a((~~(($1.encstr.length - 16) / 3)) + 4); //#11824
    $k[$j++] = $1.rscodes; //#11825
    $k[$j++] = 0; //#11825
    $k[$j++] = Infinity; //#11825
    for (var _2G = 0, _2H = 4; _2G < _2H; _2G++) { //#11825
        $k[$j++] = 0; //#11825
    } //#11825
    var _2I = $a(); //#11825
    var _2J = $k[--$j]; //#11825
    $puti($k[--$j], _2J, _2I); //#11825
    for (var _2N = 2, _2M = $1.encstr.length - 16; _2N <= _2M; _2N += 3) { //#11833
        $1.i = _2N; //#11827
        $put($1.rscodes, ($1.rscodes.length - (~~(($1.i - 2) / 3))) - 1, (($cvi($geti($1.encstr, $1.i, 1)) * 16) + ($cvi($geti($1.encstr, $1.i + 1, 1)) * 4)) + $cvi($geti($1.encstr, $1.i + 2, 1))); //#11832
    } //#11832
    for (var _2b = $1.rscodes.length - 5; _2b >= 0; _2b -= 1) { //#11842
        $1.i = _2b; //#11835
        for (var _2c = 0; _2c <= 4; _2c += 1) { //#11841
            $1.j = _2c; //#11837
            $put($1.rscodes, $1.i + $1.j, $xo($get($1.rscodes, $1.i + $1.j), $get($1.rstable, $f((64 * $get($a([48, 17, 29, 30, 1]), $1.j)) + $get($1.rscodes, $1.i + 4))))); //#11840
        } //#11840
    } //#11840
    $1.checkcode = $strcpy($s(12), "000000000000"); //#11843
    for (var _2u = 0; _2u <= 3; _2u += 1) { //#11848
        $1.i = _2u; //#11845
        $1.enc = $cvrs($s(3), $get($1.rscodes, 3 - $1.i), 4); //#11846
        $puti($1.checkcode, ($1.i * 3) + (3 - $1.enc.length), $1.enc); //#11847
    } //#11847
    $puti($1.encstr, $1.encstr.length - 14, $1.checkcode); //#11851
    $puti($1.encstr, $1.encstr.length - 2, $get($1.encs, 74)); //#11852
    $1.bbs = $a($1.encstr.length); //#11854
    $1.bhs = $a($1.encstr.length); //#11855
    for (var _3H = 0, _3G = $1.encstr.length - 1; _3H <= _3G; _3H += 1) { //#11875
        $1.i = _3H; //#11857
        $1.enc = $geti($1.encstr, $1.i, 1); //#11858
        if ($eq($1.enc, "0")) { //#11862
            $put($1.bbs, $1.i, (0 * $1.height) / 8); //#11860
            $put($1.bhs, $1.i, (8 * $1.height) / 8); //#11861
        } //#11861
        if ($eq($1.enc, "1")) { //#11866
            $put($1.bbs, $1.i, (3 * $1.height) / 8); //#11864
            $put($1.bhs, $1.i, (5 * $1.height) / 8); //#11865
        } //#11865
        if ($eq($1.enc, "2")) { //#11870
            $put($1.bbs, $1.i, (0 * $1.height) / 8); //#11868
            $put($1.bhs, $1.i, (5 * $1.height) / 8); //#11869
        } //#11869
        if ($eq($1.enc, "3")) { //#11874
            $put($1.bbs, $1.i, (3 * $1.height) / 8); //#11872
            $put($1.bhs, $1.i, (2 * $1.height) / 8); //#11873
        } //#11873
    } //#11873
    $k[$j++] = Infinity; //#11886
    var _3n = $1.bbs; //#11880
    var _3o = $1.bhs; //#11881
    $k[$j++] = Infinity; //#11882
    for (var _3q = 0, _3r = $1.bhs.length - 1; _3q < _3r; _3q++) { //#11882
        $k[$j++] = 1.44; //#11882
        $k[$j++] = 1.872; //#11882
    } //#11882
    $k[$j++] = 1.44; //#11882
    var _3s = $a(); //#11882
    $k[$j++] = 'ren'; //#11885
    $k[$j++] = bwipp_renlinear; //#11885
    $k[$j++] = 'bbs'; //#11885
    $k[$j++] = _3n; //#11885
    $k[$j++] = 'bhs'; //#11885
    $k[$j++] = _3o; //#11885
    $k[$j++] = 'sbs'; //#11885
    $k[$j++] = _3s; //#11885
    if ($1.includetext) { //#11885
        $k[$j++] = 'txt'; //#11884
        $k[$j++] = $1.txt; //#11884
    } //#11884
    $k[$j++] = 'opt'; //#11886
    $k[$j++] = $1.options; //#11886
    var _3w = $d(); //#11886
    $k[$j++] = _3w; //#11889
    if (!$1.dontdraw) { //#11889
        bwipp_renlinear(); //#11889
    } //#11889
}

function bwipp_kix() {
    var $1 = Object.create(bwipp_kix.$ctx || (bwipp_kix.$ctx = {})); //#11923
    $1.dontdraw = false; //#11926
    $1.includetext = false; //#11927
    $1.textfont = "OCR-B"; //#11928
    $1.textsize = 10; //#11929
    $1.textyoffset = -8; //#11930
    $1.height = 0.175; //#11931
    $k[$j++] = $1; //#11933
    bwipp_processoptions(); //#11933
    $1.options = $k[--$j]; //#11933
    var _1 = $k[--$j]; //#11934
    $1.barcode = _1; //#11934
    if (!bwipp_kix.$ctx._11953) { //#11953
        (function() { //#11953
            var $ctx = Object.create($1); //#11953
            $ctx.encs = $a(["0033", "0123", "0132", "1023", "1032", "1122", "0213", "0303", "0312", "1203", "1212", "1302", "0231", "0321", "0330", "1221", "1230", "1320", "2013", "2103", "2112", "3003", "3012", "3102", "2031", "2121", "2130", "3021", "3030", "3120", "2211", "2301", "2310", "3201", "3210", "3300"]); //#11947
            $ctx.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"; //#11950
            $ctx.charvals = new Map; //#11951
            for (var _3 = 0; _3 <= 35; _3 += 1) { //#11952
                $put($ctx.charvals, $geti($ctx.barchars, _3, 1), _3); //#11952
            } //#11952
            for (var _7 in $ctx) {
                $ctx.hasOwnProperty(_7) && (bwipp_kix.$ctx[_7] = $ctx[_7]);
            } //#11952
            bwipp_kix.$ctx._11953 = 1; //#11952
        })(); //#11952
    } //#11952
    for (var _A = 0, _9 = $1.barcode.length - 1; _A <= _9; _A += 1) { //#11960
        var _E = $get($1.charvals, $geti($1.barcode, _A, 1)) !== undefined; //#11957
        if (!_E) { //#11959
            $k[$j++] = 'bwipp.kixBadCharacter#11958'; //#11958
            $k[$j++] = "KIX must contain only capital letters and digits"; //#11958
            bwipp_raiseerror(); //#11958
        } //#11958
    } //#11958
    $1.barlen = $1.barcode.length; //#11962
    $1.encstr = $s($1.barlen * 4); //#11963
    $1.txt = $a($1.barlen); //#11964
    for (var _M = 0, _L = $1.barlen - 1; _M <= _L; _M += 1) { //#11971
        $1.i = _M; //#11967
        $1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); //#11968
        $puti($1.encstr, $1.i * 4, $get($1.encs, $1.indx)); //#11969
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 4) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#11970
    } //#11970
    $1.bbs = $a($1.encstr.length); //#11973
    $1.bhs = $a($1.encstr.length); //#11974
    for (var _n = 0, _m = $1.encstr.length - 1; _n <= _m; _n += 1) { //#11994
        $1.i = _n; //#11976
        $1.enc = $geti($1.encstr, $1.i, 1); //#11977
        if ($eq($1.enc, "0")) { //#11981
            $put($1.bbs, $1.i, (3 * $1.height) / 8); //#11979
            $put($1.bhs, $1.i, (2 * $1.height) / 8); //#11980
        } //#11980
        if ($eq($1.enc, "1")) { //#11985
            $put($1.bbs, $1.i, (0 * $1.height) / 8); //#11983
            $put($1.bhs, $1.i, (5 * $1.height) / 8); //#11984
        } //#11984
        if ($eq($1.enc, "2")) { //#11989
            $put($1.bbs, $1.i, (3 * $1.height) / 8); //#11987
            $put($1.bhs, $1.i, (5 * $1.height) / 8); //#11988
        } //#11988
        if ($eq($1.enc, "3")) { //#11993
            $put($1.bbs, $1.i, (0 * $1.height) / 8); //#11991
            $put($1.bhs, $1.i, (8 * $1.height) / 8); //#11992
        } //#11992
    } //#11992
    $k[$j++] = Infinity; //#12005
    var _1J = $1.bbs; //#11999
    var _1K = $1.bhs; //#12000
    $k[$j++] = Infinity; //#12001
    for (var _1M = 0, _1N = $1.bhs.length - 1; _1M < _1N; _1M++) { //#12001
        $k[$j++] = 1.44; //#12001
        $k[$j++] = 1.872; //#12001
    } //#12001
    $k[$j++] = 1.44; //#12001
    var _1O = $a(); //#12001
    $k[$j++] = 'ren'; //#12004
    $k[$j++] = bwipp_renlinear; //#12004
    $k[$j++] = 'bbs'; //#12004
    $k[$j++] = _1J; //#12004
    $k[$j++] = 'bhs'; //#12004
    $k[$j++] = _1K; //#12004
    $k[$j++] = 'sbs'; //#12004
    $k[$j++] = _1O; //#12004
    if ($1.includetext) { //#12004
        $k[$j++] = 'txt'; //#12003
        $k[$j++] = $1.txt; //#12003
    } //#12003
    $k[$j++] = 'opt'; //#12005
    $k[$j++] = $1.options; //#12005
    var _1S = $d(); //#12005
    $k[$j++] = _1S; //#12008
    if (!$1.dontdraw) { //#12008
        bwipp_renlinear(); //#12008
    } //#12008
}

function bwipp_japanpost() {
    var $1 = Object.create(bwipp_japanpost.$ctx || (bwipp_japanpost.$ctx = {})); //#12042
    $1.dontdraw = false; //#12045
    $1.includetext = false; //#12046
    $1.includecheckintext = false; //#12047
    $1.textfont = "OCR-B"; //#12048
    $1.textsize = 10; //#12049
    $1.textyoffset = -8; //#12050
    $1.height = 0.175; //#12051
    $k[$j++] = $1; //#12053
    bwipp_processoptions(); //#12053
    $1.options = $k[--$j]; //#12053
    $1.barcode = $k[--$j]; //#12054
    $forall($1.barcode, function() { //#12065
        var _3 = $k[--$j]; //#12060
        if (!(((_3 >= 48) && (_3 <= 57)) || (((_3 >= 65) && (_3 <= 90)) || (_3 == 45)))) { //#12064
            $k[$j++] = 'bwipp.japanPostBadCharacter#12063'; //#12063
            $k[$j++] = "Japan Post must contain only digits, capital letters and the dash symbol"; //#12063
            if ('raiseerror'() === true) {
                return true;
            } //#12063
        } //#12063
    }); //#12063
    if (!bwipp_japanpost.$ctx._12077) { //#12077
        (function() { //#12077
            var $ctx = Object.create($1); //#12077
            $ctx.encs = $a(["300", "330", "312", "132", "321", "303", "123", "231", "213", "033", "030", "120", "102", "210", "012", "201", "021", "003", "333", "31", "13"]); //#12073
            $ctx.barchars = "0123456789-ABCDEFGHIJKLMNOPQRSTUVWXYZ"; //#12076
            for (var _5 in $ctx) {
                $ctx.hasOwnProperty(_5) && (bwipp_japanpost.$ctx[_5] = $ctx[_5]);
            } //#12076
            bwipp_japanpost.$ctx._12077 = 1; //#12076
        })(); //#12076
    } //#12076
    $1.barlen = $1.barcode.length; //#12079
    $1.encstr = $s(((20 + 1) * 3) + 4); //#12081
    $1.digits = $a(20); //#12082
    $1.txt = $a($1.barlen + 1); //#12083
    $puti($1.encstr, 0, $get($1.encs, 19)); //#12086
    $1.checksum = 0; //#12088
    $1.j = 0; //#12089
    $1.i = 0; //#12089
    for (var _G = 0, _F = $1.barlen - 1; _G <= _F; _G += 1) { //#12123
        $1.i = _G; //#12091
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#12092
        $j--; //#12093
        $1.indx = $k[--$j].length; //#12094
        $j -= 2; //#12095
        if (($1.indx >= 11) && ($1.indx < 37)) { //#12106
            if ($1.j > 18) { //#12097
                break; //#12097
            } //#12097
            $1.digit = (~~(($1.indx - 1) / 10)) + 10; //#12101
            $puti($1.encstr, ($1.j * 3) + 2, $get($1.encs, $1.digit)); //#12102
            $1.checksum = $1.checksum + $1.digit; //#12103
            $put($1.digits, $1.j, $1.digit); //#12104
            $1.j = $1.j + 1; //#12105
        } //#12105
        if ($1.j > 19) { //#12107
            break; //#12107
        } //#12107
        $1.digit = 0; //#12108
        if ($1.indx == 37) { //#12111
            $1.digit = 14; //#12110
        } //#12110
        if (($1.indx >= 11) && ($1.indx < 37)) { //#12114
            $1.digit = ($1.indx - 1) % 10; //#12113
        } //#12113
        if ($1.indx < 11) { //#12117
            $1.digit = $1.indx; //#12116
        } //#12116
        $puti($1.encstr, ($1.j * 3) + 2, $get($1.encs, $1.digit)); //#12118
        $1.checksum = $1.checksum + $1.digit; //#12119
        $put($1.digits, $1.j, $1.digit); //#12120
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.j * 3) + 2) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#12121
        $1.j = $1.j + 1; //#12122
    } //#12122
    for (var _15 = $1.j, _14 = 20 - 1; _15 <= _14; _15 += 1) { //#12131
        $1.k = _15; //#12127
        $puti($1.encstr, ($1.k * 3) + 2, $get($1.encs, 14)); //#12128
        $1.checksum = $1.checksum + 14; //#12129
        $put($1.digits, $1.k, 14); //#12130
    } //#12130
    $1.checksum = 19 - ($1.checksum % 19); //#12134
    $puti($1.encstr, 2 + (20 * 3), $get($1.encs, $1.checksum)); //#12135
    $puti($1.encstr, 2 + (21 * 3), $get($1.encs, 20)); //#12138
    $1.checkdigit = " "; //#12139
    if ($1.includecheckintext) { //#12142
        $1.checkdigit = $geti($1.barchars, $1.checksum, 1); //#12141
    } //#12141
    $put($1.txt, $1.i + 1, $a([$1.checkdigit, ((20 * 3) + 2) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#12143
    $puti($1.encstr, ((20 + 1) * 3) + 2, $get($1.encs, 20)); //#12146
    $1.bbs = $a((21 * 3) + 4); //#12148
    $1.bhs = $a($1.bbs.length); //#12149
    for (var _1e = 0, _1d = $1.bbs.length - 1; _1e <= _1d; _1e += 1) { //#12173
        $1.i = _1e; //#12151
        $1.enc = $geti($1.encstr, $1.i, 1); //#12152
        $1.bunit = 0; //#12153
        $1.hunit = 0; //#12154
        if ($eq($1.enc, "0")) { //#12158
            $1.bunit = 3; //#12156
            $1.hunit = 2; //#12157
        } //#12157
        if ($eq($1.enc, "1")) { //#12162
            $1.bunit = 0; //#12160
            $1.hunit = 5; //#12161
        } //#12161
        if ($eq($1.enc, "2")) { //#12166
            $1.bunit = 3; //#12164
            $1.hunit = 5; //#12165
        } //#12165
        if ($eq($1.enc, "3")) { //#12170
            $1.bunit = 0; //#12168
            $1.hunit = 8; //#12169
        } //#12169
        $put($1.bbs, $1.i, ($1.bunit * $1.height) / 8); //#12171
        $put($1.bhs, $1.i, ($1.hunit * $1.height) / 8); //#12172
    } //#12172
    $k[$j++] = Infinity; //#12184
    var _1u = $1.bbs; //#12178
    var _1v = $1.bhs; //#12179
    $k[$j++] = Infinity; //#12180
    for (var _1x = 0, _1y = $1.bhs.length - 1; _1x < _1y; _1x++) { //#12180
        $k[$j++] = 1.44; //#12180
        $k[$j++] = 1.872; //#12180
    } //#12180
    $k[$j++] = 1.44; //#12180
    var _1z = $a(); //#12180
    $k[$j++] = 'ren'; //#12183
    $k[$j++] = bwipp_renlinear; //#12183
    $k[$j++] = 'bbs'; //#12183
    $k[$j++] = _1u; //#12183
    $k[$j++] = 'bhs'; //#12183
    $k[$j++] = _1v; //#12183
    $k[$j++] = 'sbs'; //#12183
    $k[$j++] = _1z; //#12183
    if ($1.includetext) { //#12183
        $k[$j++] = 'txt'; //#12182
        $k[$j++] = $1.txt; //#12182
    } //#12182
    $k[$j++] = 'opt'; //#12184
    $k[$j++] = $1.options; //#12184
    var _23 = $d(); //#12184
    $k[$j++] = _23; //#12187
    if (!$1.dontdraw) { //#12187
        bwipp_renlinear(); //#12187
    } //#12187
}

function bwipp_msi() {
    var $1 = Object.create(bwipp_msi.$ctx || (bwipp_msi.$ctx = {})); //#12221
    $1.dontdraw = false; //#12224
    $1.includecheck = false; //#12225
    $1.includetext = false; //#12226
    $1.includecheckintext = false; //#12227
    $1.checktype = "mod10"; //#12228
    $1.badmod11 = false; //#12229
    $1.textfont = "OCR-B"; //#12230
    $1.textsize = 10; //#12231
    $1.textyoffset = -8; //#12232
    $1.height = 1; //#12233
    $k[$j++] = $1; //#12235
    bwipp_processoptions(); //#12235
    $1.options = $k[--$j]; //#12235
    $1.barcode = $k[--$j]; //#12236
    $forall($1.barcode, function() { //#12245
        var _3 = $k[--$j]; //#12242
        if ((_3 < 48) || (_3 > 57)) { //#12244
            $k[$j++] = 'bwipp.msiBadCharacter#12243'; //#12243
            $k[$j++] = "MSI must contain only digits"; //#12243
            bwipp_raiseerror(); //#12243
        } //#12243
    }); //#12243
    if (!bwipp_msi.$ctx._12257) { //#12257
        (function() { //#12257
            var $ctx = Object.create($1); //#12257
            $ctx.encs = $a(["12121212", "12121221", "12122112", "12122121", "12211212", "12211221", "12212112", "12212121", "21121212", "21121221", "21", "121"]); //#12253
            $ctx.barchars = "0123456789"; //#12256
            for (var _5 in $ctx) {
                $ctx.hasOwnProperty(_5) && (bwipp_msi.$ctx[_5] = $ctx[_5]);
            } //#12256
            bwipp_msi.$ctx._12257 = 1; //#12256
        })(); //#12256
    } //#12256
    $1.barlen = $1.barcode.length; //#12259
    $1.txtlen = $1.barlen; //#12260
    $1.mod10 = function() {
        $1.code = $k[--$j]; //#12263
        $k[$j++] = 0; //#12264
        $k[$j++] = 0; //#12264
        $forall($1.code, function() { //#12264
            var _A = $k[--$j]; //#12264
            var _B = $k[--$j]; //#12264
            var _C = $k[--$j]; //#12264
            $k[$j++] = $f($f(_A - 48) + (_B * 10)); //#12264
            $k[$j++] = _C; //#12264
        }); //#12264
        $j--; //#12264
        var _D = $k[--$j]; //#12264
        $k[$j++] = _D * 2; //#12265
        $k[$j++] = 0; //#12265
        for (;;) { //#12265
            var _E = $k[--$j]; //#12265
            var _F = $k[--$j]; //#12265
            var _G = ~~(_F / 10); //#12265
            $k[$j++] = $f(_E + (_F % 10)); //#12265
            $k[$j++] = _G; //#12265
            if (_G == 0) { //#12265
                $j--; //#12265
                break; //#12265
            } //#12265
            var _H = $k[--$j]; //#12265
            var _I = $k[--$j]; //#12265
            $k[$j++] = _H; //#12265
            $k[$j++] = _I; //#12265
        } //#12265
        $k[$j++] = 0; //#12266
        $k[$j++] = 0; //#12266
        $forall($1.code, function() { //#12266
            var _K = $k[--$j]; //#12266
            var _L = $k[--$j]; //#12266
            var _M = $k[--$j]; //#12266
            $k[$j++] = $f(_L + $f(_K - 48)); //#12266
            $k[$j++] = _M; //#12266
        }); //#12266
        var _N = $k[--$j]; //#12266
        var _O = $k[--$j]; //#12266
        $k[$j++] = _N; //#12266
        $k[$j++] = _O; //#12266
        $j--; //#12266
        var _P = $k[--$j]; //#12266
        var _S = $s($1.code.length + 1); //#12268
        $puti(_S, 0, $1.code); //#12268
        $put(_S, $1.code.length, $f((($f(10 - ($f($k[--$j] + _P) % 10))) % 10) + 48)); //#12268
        $k[$j++] = _S; //#12268
    }; //#12268
    $1.mod11 = function() {
        $1.code = $k[--$j]; //#12272
        $k[$j++] = $1.code.length - 1; //#12273
        $forall($1.code, function() { //#12273
            var _Y = $k[--$j]; //#12273
            var _Z = $k[--$j]; //#12273
            $k[$j++] = $f(_Y - 48); //#12273
            $k[$j++] = $f((_Z % 6) + 2); //#12273
            $k[$j++] = $f(_Z - 1); //#12273
        }); //#12273
        $j--; //#12273
        $k[$j++] = 0; //#12274
        for (var _b = 0, _c = $1.code.length; _b < _c; _b++) { //#12274
            var _d = $k[--$j]; //#12274
            var _e = $k[--$j]; //#12274
            var _f = $k[--$j]; //#12274
            $k[$j++] = $f(_d + (_f * _e)); //#12274
        } //#12274
        var _h = ($f(11 - ($k[--$j] % 11))) % 11; //#12276
        $k[$j++] = _h; //#12280
        if ((_h == 10) && $1.badmod11) { //#12279
            $j--; //#12277
            var _k = $s($1.code.length + 2); //#12277
            $puti(_k, 0, $1.code); //#12277
            $puti(_k, $1.code.length, "10"); //#12277
            $k[$j++] = _k; //#12277
        } else { //#12279
            var _o = $s($1.code.length + 1); //#12279
            $puti(_o, 0, $1.code); //#12279
            $put(_o, $1.code.length, $f($k[--$j] + 48)); //#12279
            $k[$j++] = _o; //#12279
        } //#12279
    }; //#12279
    $1.ncrmod11 = function() {
        $1.code = $k[--$j]; //#12284
        $k[$j++] = $1.code.length - 1; //#12285
        $forall($1.code, function() { //#12285
            var _v = $k[--$j]; //#12285
            var _w = $k[--$j]; //#12285
            $k[$j++] = $f(_v - 48); //#12285
            $k[$j++] = $f((_w % 8) + 2); //#12285
            $k[$j++] = $f(_w - 1); //#12285
        }); //#12285
        $j--; //#12285
        $k[$j++] = 0; //#12286
        for (var _y = 0, _z = $1.code.length; _y < _z; _y++) { //#12286
            var _10 = $k[--$j]; //#12286
            var _11 = $k[--$j]; //#12286
            var _12 = $k[--$j]; //#12286
            $k[$j++] = $f(_10 + (_12 * _11)); //#12286
        } //#12286
        var _14 = ($f(11 - ($k[--$j] % 11))) % 11; //#12288
        $k[$j++] = _14; //#12292
        if ((_14 == 10) && $1.badmod11) { //#12291
            $j--; //#12289
            var _17 = $s($1.code.length + 2); //#12289
            $puti(_17, 0, $1.code); //#12289
            $puti(_17, $1.code.length, "10"); //#12289
            $k[$j++] = _17; //#12289
        } else { //#12291
            var _1B = $s($1.code.length + 1); //#12291
            $puti(_1B, 0, $1.code); //#12291
            $put(_1B, $1.code.length, $f($k[--$j] + 48)); //#12291
            $k[$j++] = _1B; //#12291
        } //#12291
    }; //#12291
    if ($1.includecheck) { //#12306
        if ($eq($1.checktype, "mod10")) { //#12297
            $k[$j++] = $1.barcode; //#12297
            $1.mod10(); //#12297
        } //#12297
        if ($eq($1.checktype, "mod1010")) { //#12298
            $k[$j++] = $1.barcode; //#12298
            $1.mod10(); //#12298
            $1.mod10(); //#12298
        } //#12298
        if ($eq($1.checktype, "mod11")) { //#12299
            $k[$j++] = $1.barcode; //#12299
            $1.mod11(); //#12299
        } //#12299
        if ($eq($1.checktype, "ncrmod11")) { //#12300
            $k[$j++] = $1.barcode; //#12300
            $1.ncrmod11(); //#12300
        } //#12300
        if ($eq($1.checktype, "mod1110")) { //#12301
            $k[$j++] = $1.barcode; //#12301
            $1.mod11(); //#12301
            $1.mod10(); //#12301
        } //#12301
        if ($eq($1.checktype, "ncrmod1110")) { //#12302
            $k[$j++] = $1.barcode; //#12302
            $1.ncrmod11(); //#12302
            $1.mod10(); //#12302
        } //#12302
        $1.barcode = $k[--$j]; //#12303
        $1.barlen = $1.barcode.length; //#12304
        if ($1.includecheckintext) { //#12305
            $1.txtlen = $1.barlen; //#12305
        } //#12305
    } //#12305
    $1.sbs = $s(($1.barlen * 8) + 5); //#12308
    $1.txt = $a($1.barlen); //#12309
    $puti($1.sbs, 0, $get($1.encs, 10)); //#12312
    for (var _1f = 0, _1e = $1.barlen - 1; _1f <= _1e; _1f += 1) { //#12324
        $1.i = _1f; //#12315
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#12317
        $j--; //#12318
        $1.indx = $k[--$j].length; //#12319
        $j -= 2; //#12320
        $1.enc = $get($1.encs, $1.indx); //#12321
        $puti($1.sbs, ($1.i * 8) + 2, $1.enc); //#12322
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 12) + 3, $1.textyoffset, $1.textfont, $1.textsize])); //#12323
    } //#12323
    $puti($1.sbs, ($1.barlen * 8) + 2, $get($1.encs, 11)); //#12327
    $k[$j++] = Infinity; //#12338
    $k[$j++] = Infinity; //#12332
    var _25 = $1.sbs; //#12332
    for (var _26 = 0, _27 = _25.length; _26 < _27; _26++) { //#12332
        $k[$j++] = $get(_25, _26) - 48; //#12332
    } //#12332
    var _29 = $a(); //#12332
    $k[$j++] = Infinity; //#12333
    for (var _2B = 0, _2C = ~~(($1.sbs.length + 1) / 2); _2B < _2C; _2B++) { //#12333
        $k[$j++] = $1.height; //#12333
    } //#12333
    var _2E = $a(); //#12333
    $k[$j++] = Infinity; //#12334
    for (var _2G = 0, _2H = ~~(($1.sbs.length + 1) / 2); _2G < _2H; _2G++) { //#12334
        $k[$j++] = 0; //#12334
    } //#12334
    var _2I = $a(); //#12334
    $k[$j++] = 'ren'; //#12337
    $k[$j++] = bwipp_renlinear; //#12337
    $k[$j++] = 'sbs'; //#12337
    $k[$j++] = _29; //#12337
    $k[$j++] = 'bhs'; //#12337
    $k[$j++] = _2E; //#12337
    $k[$j++] = 'bbs'; //#12337
    $k[$j++] = _2I; //#12337
    if ($1.includetext) { //#12337
        $k[$j++] = 'txt'; //#12336
        $k[$j++] = $geti($1.txt, 0, $1.txtlen); //#12336
    } //#12336
    $k[$j++] = 'opt'; //#12338
    $k[$j++] = $1.options; //#12338
    var _2O = $d(); //#12338
    $k[$j++] = _2O; //#12341
    if (!$1.dontdraw) { //#12341
        bwipp_renlinear(); //#12341
    } //#12341
}

function bwipp_plessey() {
    var $1 = Object.create(bwipp_plessey.$ctx || (bwipp_plessey.$ctx = {})); //#12375
    $1.dontdraw = false; //#12378
    $1.includetext = false; //#12379
    $1.validatecheck = false; //#12380
    $1.includecheckintext = false; //#12381
    $1.unidirectional = false; //#12382
    $1.textfont = "OCR-B"; //#12383
    $1.textsize = 10; //#12384
    $1.textyoffset = -8; //#12385
    $1.height = 1; //#12386
    $k[$j++] = $1; //#12388
    bwipp_processoptions(); //#12388
    $1.options = $k[--$j]; //#12388
    var _1 = $k[--$j]; //#12389
    $1.barcode = _1; //#12389
    if (!bwipp_plessey.$ctx._12407) { //#12407
        (function() { //#12407
            var $ctx = Object.create($1); //#12407
            $ctx.barchars = "0123456789ABCDEF"; //#12395
            $ctx.charvals = new Map; //#12396
            for (var _2 = 0; _2 <= 15; _2 += 1) { //#12397
                $put($ctx.charvals, $geti($ctx.barchars, _2, 1), _2); //#12397
            } //#12397
            $ctx.encs = $a(["14141414", "32141414", "14321414", "32321414", "14143214", "32143214", "14323214", "32323214", "14141432", "32141432", "14321432", "32321432", "14143232", "32143232", "14323232", "32323232", "32321432", "541412323", "323"]); //#12406
            for (var _7 in $ctx) {
                $ctx.hasOwnProperty(_7) && (bwipp_plessey.$ctx[_7] = $ctx[_7]);
            } //#12406
            bwipp_plessey.$ctx._12407 = 1; //#12406
        })(); //#12406
    } //#12406
    for (var _A = 0, _9 = $1.barcode.length - 1; _A <= _9; _A += 1) { //#12414
        var _E = $get($1.charvals, $geti($1.barcode, _A, 1)) !== undefined; //#12411
        if (!_E) { //#12413
            $k[$j++] = 'bwipp.plesseyBadCharacter#12412'; //#12412
            $k[$j++] = "Plessey must contain only digits and letters A B C D E F"; //#12412
            bwipp_raiseerror(); //#12412
        } //#12412
    } //#12412
    $k[$j++] = 'barlen'; //#12416
    $k[$j++] = $1.barcode.length; //#12416
    if ($1.validatecheck) { //#12416
        var _H = $k[--$j]; //#12416
        $k[$j++] = $f(_H - 2); //#12416
    } //#12416
    var _I = $k[--$j]; //#12416
    $1[$k[--$j]] = _I; //#12416
    $1.checkbits = $a($f(($1.barlen * 4) + 8)); //#12419
    $puti($1.checkbits, $1.barlen * 4, $a([0, 0, 0, 0, 0, 0, 0, 0])); //#12420
    for (var _R = 0, _Q = $f($1.barlen - 1); _R <= _Q; _R += 1) { //#12430
        $1.i = _R; //#12422
        $1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); //#12423
        $puti($1.checkbits, $1.i * 4, $a([$1.indx & 1, ($1.indx >>> 1) & 1, ($1.indx >>> 2) & 1, $1.indx >>> 3])); //#12429
    } //#12429
    $1.checksalt = $a([1, 1, 1, 1, 0, 1, 0, 0, 1]); //#12431
    for (var _h = 0, _g = $f(($1.barlen * 4) - 1); _h <= _g; _h += 1) { //#12440
        $1.i = _h; //#12433
        if ($get($1.checkbits, $1.i) == 1) { //#12439
            for (var _l = 0; _l <= 8; _l += 1) { //#12438
                $1.j = _l; //#12436
                $put($1.checkbits, $1.i + $1.j, $xo($get($1.checkbits, $1.i + $1.j), $get($1.checksalt, $1.j))); //#12437
            } //#12437
        } //#12437
    } //#12437
    $1.checkval = 0; //#12441
    for (var _w = 0; _w <= 7; _w += 1) { //#12445
        $1.i = _w; //#12443
        $1.checkval = $f($1.checkval + ((~~Math.pow(2, $1.i)) * $get($1.checkbits, $f(($1.barlen * 4) + $1.i)))); //#12444
    } //#12444
    $1.checksum1 = $1.checkval & 15; //#12446
    $1.checksum2 = $1.checkval >>> 4; //#12447
    if ($1.validatecheck) { //#12454
        if (($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum1)) || ($get($1.barcode, $f($1.barlen + 1)) != $get($1.barchars, $1.checksum2))) { //#12452
            $k[$j++] = 'bwipp.plesseyBadCheckDigits#12451'; //#12451
            $k[$j++] = "Incorrect Plessey check digits provided"; //#12451
            bwipp_raiseerror(); //#12451
        } //#12451
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#12453
    } //#12453
    var _1N = $1.unidirectional ? 27 : 33; //#12456
    $1.sbs = $s($f(($1.barlen * 8) + _1N)); //#12456
    $1.txt = $a($f($1.barlen + 2)); //#12457
    $puti($1.sbs, 0, $get($1.encs, 16)); //#12460
    for (var _1W = 0, _1V = $f($1.barlen - 1); _1W <= _1V; _1W += 1) { //#12467
        $1.i = _1W; //#12463
        $1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); //#12464
        $puti($1.sbs, ($1.i * 8) + 8, $get($1.encs, $1.indx)); //#12465
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 20) + 20, $1.textyoffset, $1.textfont, $1.textsize])); //#12466
    } //#12466
    $puti($1.sbs, $f(($1.barlen * 8) + 8), $get($1.encs, $1.checksum1)); //#12470
    $puti($1.sbs, $f(($1.barlen * 8) + 16), $get($1.encs, $1.checksum2)); //#12471
    if ($1.includecheckintext) { //#12477
        $put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum1, 1), $f(($1.barlen * 20) + 20), $1.textyoffset, $1.textfont, $1.textsize])); //#12473
        $put($1.txt, $f($1.barlen + 1), $a([$geti($1.barchars, $1.checksum2, 1), $f(($f($1.barlen + 1) * 20) + 20), $1.textyoffset, $1.textfont, $1.textsize])); //#12474
    } else { //#12477
        $put($1.txt, $1.barlen, $a([" ", $f(($1.barlen * 20) + 20), $1.textyoffset, $1.textfont, $1.textsize])); //#12476
        $put($1.txt, $f($1.barlen + 1), $a([" ", $f(($f($1.barlen + 1) * 20) + 20), $1.textyoffset, $1.textfont, $1.textsize])); //#12477
    } //#12477
    var _2e = $1.unidirectional ? 18 : 17; //#12481
    $puti($1.sbs, $f(($1.barlen * 8) + 24), $get($1.encs, _2e)); //#12481
    $k[$j++] = Infinity; //#12492
    $k[$j++] = Infinity; //#12486
    var _2g = $1.sbs; //#12486
    for (var _2h = 0, _2i = _2g.length; _2h < _2i; _2h++) { //#12486
        $k[$j++] = $get(_2g, _2h) - 48; //#12486
    } //#12486
    var _2k = $a(); //#12486
    $k[$j++] = Infinity; //#12487
    for (var _2m = 0, _2n = ~~(($1.sbs.length + 1) / 2); _2m < _2n; _2m++) { //#12487
        $k[$j++] = $1.height; //#12487
    } //#12487
    var _2p = $a(); //#12487
    $k[$j++] = Infinity; //#12488
    for (var _2r = 0, _2s = ~~(($1.sbs.length + 1) / 2); _2r < _2s; _2r++) { //#12488
        $k[$j++] = 0; //#12488
    } //#12488
    var _2t = $a(); //#12488
    $k[$j++] = 'ren'; //#12491
    $k[$j++] = bwipp_renlinear; //#12491
    $k[$j++] = 'sbs'; //#12491
    $k[$j++] = _2k; //#12491
    $k[$j++] = 'bhs'; //#12491
    $k[$j++] = _2p; //#12491
    $k[$j++] = 'bbs'; //#12491
    $k[$j++] = _2t; //#12491
    if ($1.includetext) { //#12491
        $k[$j++] = 'txt'; //#12490
        $k[$j++] = $1.txt; //#12490
    } //#12490
    $k[$j++] = 'opt'; //#12492
    $k[$j++] = $1.options; //#12492
    var _2x = $d(); //#12492
    $k[$j++] = _2x; //#12495
    if (!$1.dontdraw) { //#12495
        bwipp_renlinear(); //#12495
    } //#12495
}

function bwipp_telepen() {
    var $1 = Object.create(bwipp_telepen.$ctx || (bwipp_telepen.$ctx = {})); //#12530
    $1.numeric = false; //#12533
    $1.dontdraw = false; //#12534
    $1.includetext = false; //#12535
    $1.textfont = "OCR-B"; //#12536
    $1.textsize = 10; //#12537
    $1.textyoffset = -8; //#12538
    $1.height = 1; //#12539
    $1.parse = false; //#12540
    $k[$j++] = $1; //#12542
    bwipp_processoptions(); //#12542
    $1.options = $k[--$j]; //#12542
    var _1 = $k[--$j]; //#12543
    $1.barcode = _1; //#12543
    var _3 = new Map([
        ["parse", $1.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#12551
    $1.fncvals = _3; //#12552
    $k[$j++] = 'barcode'; //#12553
    $k[$j++] = $1.barcode; //#12553
    $k[$j++] = $1.fncvals; //#12553
    bwipp_parseinput(); //#12553
    var _6 = $k[--$j]; //#12553
    $1[$k[--$j]] = _6; //#12553
    $1.barlen = $1.barcode.length; //#12554
    delete $1.options["parse"]; //#12555
    if (!bwipp_telepen.$ctx._12593) { //#12593
        (function() { //#12593
            var $ctx = Object.create($1); //#12593
            $ctx.encs = $a(["31313131", "1131313111", "33313111", "1111313131", "3111313111", "11333131", "13133131", "111111313111", "31333111", "1131113131", "33113131", "1111333111", "3111113131", "1113133111", "1311133111", "111111113131", "3131113111", "11313331", "333331", "111131113111", "31113331", "1133113111", "1313113111", "1111113331", "31131331", "113111113111", "3311113111", "1111131331", "311111113111", "1113111331", "1311111331", "11111111113111", "31313311", "1131311131", "33311131", "1111313311", "3111311131", "11333311", "13133311", "111111311131", "31331131", "1131113311", "33113311", "1111331131", "3111113311", "1113131131", "1311131131", "111111113311", "3131111131", "1131131311", "33131311", "111131111131", "3111131311", "1133111131", "1313111131", "111111131311", "3113111311", "113111111131", "3311111131", "111113111311", "311111111131", "111311111311", "131111111311", "11111111111131", "3131311111", "11313133", "333133", "111131311111", "31113133", "1133311111", "1313311111", "1111113133", "313333", "113111311111", "3311311111", "11113333", "311111311111", "11131333", "13111333", "11111111311111", "31311133", "1131331111", "33331111", "1111311133", "3111331111", "11331133", "13131133", "111111331111", "3113131111", "1131111133", "33111133", "111113131111", "3111111133", "111311131111", "131111131111", "111111111133", "31311313", "113131111111", "3331111111", "1111311313", "311131111111", "11331313", "13131313", "11111131111111", "3133111111", "1131111313", "33111313", "111133111111", "3111111313", "111313111111", "131113111111", "111111111313", "313111111111", "1131131113", "33131113", "11113111111111", "3111131113", "113311111111", "131311111111", "111111131113", "3113111113", "11311111111111", "331111111111", "111113111113", "31111111111111", "111311111113", "131111111113", "1111111111111111"]); //#12592
            for (var _B in $ctx) {
                $ctx.hasOwnProperty(_B) && (bwipp_telepen.$ctx[_B] = $ctx[_B]);
            } //#12592
            bwipp_telepen.$ctx._12593 = 1; //#12592
        })(); //#12592
    } //#12592
    $1.barlen = $1.barcode.length; //#12595
    $1.sbs = $s(($1.barlen * 16) + 48); //#12596
    $1.txt = $a($1.barlen); //#12597
    $1.enc = $get($1.encs, 95); //#12600
    $puti($1.sbs, 0, $1.enc); //#12601
    $1.l = $1.enc.length; //#12602
    $1.checksum = 0; //#12604
    $1.i = 0; //#12605
    $1.j = 0; //#12605
    for (;;) { //#12637
        if ($1.i == $1.barlen) { //#12607
            break; //#12607
        } //#12607
        if ($1.numeric) { //#12630
            if ($get($1.barcode, $1.i) > 16) { //#12621
                $1.np = $geti($1.barcode, $1.i, 2); //#12610
                if ($eq($geti($1.np, 1, 1), "X")) { //#12614
                    $1.indx = $cvi($geti($1.np, 0, 1)) + 17; //#12612
                } else { //#12614
                    $1.indx = $cvi($1.np) + 27; //#12614
                } //#12614
                $put($1.txt, $1.j, $a([$1.np, ($1.j * 16) + 16, $1.textyoffset, $1.textfont, $1.textsize])); //#12616
                $1.i = $1.i + 2; //#12617
            } else { //#12621
                $1.indx = $get($1.barcode, $1.i); //#12619
                $put($1.txt, $1.j, $a([" ", ($1.j * 16) + 16, $1.textyoffset, $1.textfont, $1.textsize])); //#12620
                $1.i = $1.i + 1; //#12621
            } //#12621
        } else { //#12630
            $1.indx = $get($1.barcode, $1.i); //#12624
            if (($1.indx >= 32) && ($1.indx <= 126)) { //#12628
                $put($1.txt, $1.j, $a([$geti($1.barcode, $1.i, 1), ($1.j * 16) + 16, $1.textyoffset, $1.textfont, $1.textsize])); //#12626
            } else { //#12628
                $put($1.txt, $1.j, $a([" ", ($1.j * 16) + 16, $1.textyoffset, $1.textfont, $1.textsize])); //#12628
            } //#12628
            $1.i = $1.i + 1; //#12630
        } //#12630
        $1.checksum = $f($1.checksum + $1.indx); //#12632
        $1.enc = $get($1.encs, $1.indx); //#12633
        $puti($1.sbs, $1.l, $1.enc); //#12634
        $1.l = $1.l + $1.enc.length; //#12635
        $1.j = $1.j + 1; //#12636
    } //#12636
    $1.checksum = ($f(127 - ($1.checksum % 127))) % 127; //#12640
    $1.enc = $get($1.encs, $1.checksum); //#12641
    $puti($1.sbs, $1.l, $1.enc); //#12642
    $1.l = $1.l + $1.enc.length; //#12643
    $1.enc = $get($1.encs, 122); //#12646
    $puti($1.sbs, $1.l, $1.enc); //#12647
    $1.l = $1.l + $1.enc.length; //#12648
    $1.sbs = $geti($1.sbs, 0, $1.l); //#12651
    $1.txt = $geti($1.txt, 0, $1.j); //#12652
    $k[$j++] = Infinity; //#12663
    $k[$j++] = Infinity; //#12657
    var _1o = $1.sbs; //#12657
    for (var _1p = 0, _1q = _1o.length; _1p < _1q; _1p++) { //#12657
        $k[$j++] = $f($get(_1o, _1p) - 48); //#12657
    } //#12657
    var _1s = $a(); //#12657
    $k[$j++] = Infinity; //#12658
    for (var _1u = 0, _1v = ~~(($1.sbs.length + 1) / 2); _1u < _1v; _1u++) { //#12658
        $k[$j++] = $1.height; //#12658
    } //#12658
    var _1x = $a(); //#12658
    $k[$j++] = Infinity; //#12659
    for (var _1z = 0, _20 = ~~(($1.sbs.length + 1) / 2); _1z < _20; _1z++) { //#12659
        $k[$j++] = 0; //#12659
    } //#12659
    var _21 = $a(); //#12659
    $k[$j++] = 'ren'; //#12662
    $k[$j++] = bwipp_renlinear; //#12662
    $k[$j++] = 'sbs'; //#12662
    $k[$j++] = _1s; //#12662
    $k[$j++] = 'bhs'; //#12662
    $k[$j++] = _1x; //#12662
    $k[$j++] = 'bbs'; //#12662
    $k[$j++] = _21; //#12662
    if ($1.includetext) { //#12662
        $k[$j++] = 'txt'; //#12661
        $k[$j++] = $1.txt; //#12661
    } //#12661
    $k[$j++] = 'opt'; //#12663
    $k[$j++] = $1.options; //#12663
    var _25 = $d(); //#12663
    $k[$j++] = _25; //#12666
    if (!$1.dontdraw) { //#12666
        bwipp_renlinear(); //#12666
    } //#12666
}

function bwipp_telepennumeric() {
    var $1 = Object.create(bwipp_telepennumeric.$ctx || (bwipp_telepennumeric.$ctx = {})); //#12699
    $1.dontdraw = false; //#12702
    $1.includetext = false; //#12703
    $1.textfont = "OCR-B"; //#12704
    $1.textsize = 10; //#12705
    $1.textxoffset = 0; //#12706
    $1.textyoffset = -8; //#12707
    $1.height = 1; //#12708
    $k[$j++] = $1; //#12710
    bwipp_processoptions(); //#12710
    $1.options = $k[--$j]; //#12710
    $1.barcode = $k[--$j]; //#12711
    $put($1.options, "dontdraw", true); //#12714
    $put($1.options, "numeric", true); //#12715
    $k[$j++] = 'args'; //#12717
    $k[$j++] = $1.barcode; //#12717
    $k[$j++] = $1.options; //#12717
    bwipp_telepen(); //#12717
    var _6 = $k[--$j]; //#12717
    $1[$k[--$j]] = _6; //#12717
    $put($1.args, "opt", $1.options); //#12719
    $k[$j++] = $1.args; //#12722
    if (!$1.dontdraw) { //#12722
        bwipp_renlinear(); //#12722
    } //#12722
}

function bwipp_posicode() {
    var $1 = Object.create(bwipp_posicode.$ctx || (bwipp_posicode.$ctx = {})); //#12755
    $1.dontdraw = false; //#12758
    $1.includetext = false; //#12759
    $1.textfont = "OCR-B"; //#12760
    $1.textsize = 10; //#12761
    $1.textxoffset = 0; //#12762
    $1.textyoffset = -8; //#12763
    $1.height = 1; //#12764
    $1.encoding = "auto"; //#12765
    $1.version = "a"; //#12766
    $1.checkoffset = 0; //#12767
    $1.raw = false; //#12768
    $1.parse = false; //#12769
    $1.parsefnc = false; //#12770
    $k[$j++] = $1; //#12772
    bwipp_processoptions(); //#12772
    $1.options = $k[--$j]; //#12772
    var _1 = $k[--$j]; //#12773
    $1.barcode = _1; //#12773
    if (!bwipp_posicode.$ctx._12818) { //#12818
        (function() { //#12818
            var $ctx = Object.create($1); //#12818
            $ctx.la0 = -1; //#12779
            $ctx.la1 = -2; //#12779
            $ctx.la2 = -3; //#12779
            $ctx.sf0 = -4; //#12780
            $ctx.sf1 = -5; //#12780
            $ctx.sf2 = -6; //#12780
            $ctx.fn1 = -7; //#12781
            $ctx.fn2 = -8; //#12781
            $ctx.fn3 = -9; //#12781
            $ctx.fn4 = -10; //#12781
            $ctx.charmapsnormal = $a([$a(["0", "^", "'"]), $a(["1", ";", 27]), $a(["2", "<", 28]), $a(["3", "=", 29]), $a(["4", ">", 30]), $a(["5", "?", 31]), $a(["6", "@", "!"]), $a(["7", "[", "\""]), $a(["8", 92, "#"]), $a(["9", "]", "&"]), $a(["A", "a", 1]), $a(["B", "b", 2]), $a(["C", "c", 3]), $a(["D", "d", 4]), $a(["E", "e", 5]), $a(["F", "f", 6]), $a(["G", "g", 7]), $a(["H", "h", 8]), $a(["I", "i", 9]), $a(["J", "j", 10]), $a(["K", "k", 11]), $a(["L", "l", 12]), $a(["M", "m", 13]), $a(["N", "n", 14]), $a(["O", "o", 15]), $a(["P", "p", 16]), $a(["Q", "q", 17]), $a(["R", "r", 18]), $a(["S", "s", 19]), $a(["T", "t", 20]), $a(["U", "u", 21]), $a(["V", "v", 22]), $a(["W", "w", 23]), $a(["X", "x", 24]), $a(["Y", "y", 25]), $a(["Z", "z", 26]), $a(["-", "_", 40]), $a([".", "`", 41]), $a([" ", 127, 0]), $a(["$", "{", "*"]), $a(["/", "|", ","]), $a(["+", "}", ":"]), $a(["%", "~", $ctx.fn1]), $a([$ctx.la1, $ctx.la0, $ctx.fn2]), $a([$ctx.sf1, $ctx.sf0, $ctx.fn3]), $a([$ctx.sf2, $ctx.sf2, $ctx.fn4])]); //#12802
            var _12 = $a(["5", -98, -98]); //#12805
            $ctx.chapmapslimited = $a([$a(["0", -98, -98]), $a(["1", -98, -98]), $a(["2", -98, -98]), $a(["3", -98, -98]), $a(["4", -98, -98]), _12, $a(["6", -98, -98]), $a(["7", -98, -98]), $a(["8", -98, -98]), $a(["9", -98, -98]), $a(["A", -98, -98]), $a(["B", -98, -98]), $a(["C", -98, -98]), $a(["D", -98, -98]), $a(["E", -98, -98]), $a(["F", -98, -98]), $a(["G", -98, -98]), $a(["H", -98, -98]), $a(["I", -98, -98]), $a(["J", -98, -98]), $a(["K", -98, -98]), $a(["L", -98, -98]), $a(["M", -98, -98]), $a(["N", -98, -98]), $a(["O", -98, -98]), $a(["P", -98, -98]), $a(["Q", -98, -98]), $a(["R", -98, -98]), $a(["S", -98, -98]), $a(["T", -98, -98]), $a(["U", -98, -98]), $a(["V", -98, -98]), $a(["W", -98, -98]), $a(["X", -98, -98]), $a(["Y", -98, -98]), $a(["Z", -98, -98]), $a(["-", -98, -98]), $a([".", -98, -98])]); //#12817
            for (var _1a in $ctx) {
                $ctx.hasOwnProperty(_1a) && (bwipp_posicode.$ctx[_1a] = $ctx[_1a]);
            } //#12817
            bwipp_posicode.$ctx._12818 = 1; //#12817
        })(); //#12817
    } //#12817
    $k[$j++] = 'charmaps'; //#12820
    if ($eq($1.version, "a") || $eq($1.version, "b")) { //#12820
        $k[$j++] = $1.charmapsnormal; //#12820
    } else { //#12820
        $k[$j++] = $1.chapmapslimited; //#12820
    } //#12820
    var _1f = $k[--$j]; //#12820
    $1[$k[--$j]] = _1f; //#12820
    var _1h = $1.charmaps; //#12824
    var _1i = $1.charmaps; //#12824
    var _1j = $1.charmaps; //#12824
    $1.charvals = $a([new Map, new Map, new Map]); //#12825
    for (var _1n = 0, _1m = $1.charmaps.length - 1; _1n <= _1m; _1n += 1) { //#12834
        $1.i = _1n; //#12827
        $1.encs = $get($1.charmaps, $1.i); //#12828
        for (var _1r = 0; _1r <= 2; _1r += 1) { //#12833
            $1.j = _1r; //#12830
            var _1u = $get($1.encs, $1.j); //#12831
            $k[$j++] = _1u; //#12831
            if ($eq($type(_1u), 'stringtype')) { //#12831
                var _1x = $get($k[--$j], 0); //#12831
                $k[$j++] = _1x; //#12831
            } //#12831
            $put($get($1.charvals, $1.j), $k[--$j], $1.i); //#12832
        } //#12832
    } //#12832
    $1.set0 = $get($1.charvals, 0); //#12835
    $1.set1 = $get($1.charvals, 1); //#12836
    $1.set2 = $get($1.charvals, 2); //#12837
    if ($1.raw) { //#12839
        $1.encoding = "raw"; //#12839
    } //#12839
    if ($eq($1.encoding, "raw")) { //#12853
        $1.cws = $a($1.barcode.length); //#12842
        $1.i = 0; //#12843
        $1.j = 0; //#12843
        for (;;) { //#12850
            if ($1.i == $1.barcode.length) { //#12845
                break; //#12845
            } //#12845
            $1.cw = $cvi($geti($1.barcode, $1.i + 1, 3)); //#12846
            $put($1.cws, $1.j, $1.cw); //#12847
            $1.i = $1.i + 4; //#12848
            $1.j = $1.j + 1; //#12849
        } //#12849
        $1.cws = $geti($1.cws, 0, $1.j); //#12851
        $1.text = ""; //#12852
    } //#12852
    if ($eq($1.encoding, "auto")) { //#12968
        var _2W = new Map([
            ["parse", $1.parse],
            ["parsefnc", $1.parsefnc],
            ["FNC1", $1.fn1],
            ["FNC2", $1.fn2],
            ["FNC3", $1.fn3]
        ]); //#12863
        $1.fncvals = _2W; //#12865
        $k[$j++] = 'msg'; //#12866
        $k[$j++] = $1.barcode; //#12866
        $k[$j++] = $1.fncvals; //#12866
        bwipp_parseinput(); //#12866
        var _2Z = $k[--$j]; //#12866
        $1[$k[--$j]] = _2Z; //#12866
        $1.msglen = $1.msg.length; //#12867
        $1.text = $s($1.msglen); //#12869
        for (var _2g = 0, _2f = $1.msglen - 1; _2g <= _2f; _2g += 1) { //#12873
            $1.i = _2g; //#12871
            var _2l = $get($1.msg, $1.i); //#12872
            $k[$j++] = $1.text; //#12872
            $k[$j++] = $1.i; //#12872
            $k[$j++] = _2l; //#12872
            if (_2l < 0) { //#12872
                $j--; //#12872
                $k[$j++] = 32; //#12872
            } //#12872
            var _2m = $k[--$j]; //#12872
            var _2n = $k[--$j]; //#12872
            $put($k[--$j], _2n, _2m); //#12872
        } //#12872
        $k[$j++] = Infinity; //#12876
        for (var _2q = 0, _2r = $1.msglen; _2q < _2r; _2q++) { //#12876
            $k[$j++] = 0; //#12876
        } //#12876
        $k[$j++] = 0; //#12876
        $1.numSA = $a(); //#12876
        $k[$j++] = Infinity; //#12877
        for (var _2u = 0, _2v = $1.msglen; _2u < _2v; _2u++) { //#12877
            $k[$j++] = 0; //#12877
        } //#12877
        $k[$j++] = 0; //#12877
        $1.numEA = $a(); //#12877
        for (var _2y = $1.msglen - 1; _2y >= 0; _2y -= 1) { //#12887
            $1.i = _2y; //#12879
            if ($get($1.msg, $1.i) >= 0) { //#12886
                if ($get($1.msg, $1.i) >= 128) { //#12884
                    $put($1.numEA, $1.i, $f($get($1.numEA, $1.i + 1) + 1)); //#12882
                } else { //#12884
                    $put($1.numSA, $1.i, $f($get($1.numSA, $1.i + 1) + 1)); //#12884
                } //#12884
            } //#12884
        } //#12884
        $1.ea = false; //#12890
        $1.msgtmp = $a([]); //#12890
        for (var _3I = 0, _3H = $1.msglen - 1; _3I <= _3H; _3I += 1) { //#12905
            $1.i = _3I; //#12892
            $1.c = $get($1.msg, $1.i); //#12893
            if ((!$xo($1.ea, $1.c < 128)) && ($1.c >= 0)) { //#12903
                if ($1.ea) { //#12895
                    $k[$j++] = $1.numSA; //#12895
                } else { //#12895
                    $k[$j++] = $1.numEA; //#12895
                } //#12895
                var _3U = $get($k[--$j], $1.i); //#12895
                var _3X = ($f(_3U + $1.i) == $1.msglen) ? 3 : 5; //#12896
                if (_3U < _3X) { //#12901
                    $k[$j++] = Infinity; //#12898
                    $aload($1.msgtmp); //#12898
                    $k[$j++] = $1.fn4; //#12898
                    $1.msgtmp = $a(); //#12898
                } else { //#12901
                    $k[$j++] = Infinity; //#12900
                    $aload($1.msgtmp); //#12900
                    $k[$j++] = $1.fn4; //#12900
                    $k[$j++] = $1.fn4; //#12900
                    $1.msgtmp = $a(); //#12900
                    $1.ea = !$1.ea; //#12901
                } //#12901
            } //#12901
            $k[$j++] = Infinity; //#12904
            $aload($1.msgtmp); //#12904
            if ($1.c >= 0) { //#12904
                $k[$j++] = $1.c & 127; //#12904
            } else { //#12904
                $k[$j++] = $1.c; //#12904
            } //#12904
            $1.msgtmp = $a(); //#12904
        } //#12904
        $1.msg = $1.msgtmp; //#12906
        $1.msglen = $1.msg.length; //#12907
        $1.enc = function() {
            var _3n = $k[--$j]; //#12911
            $put($1.cws, $1.j, $get(_3n, $k[--$j])); //#12911
            $1.j = $1.j + 1; //#12912
        }; //#12912
        $1.cws = $a($1.msglen * 2); //#12915
        $1.i = 0; //#12916
        $1.j = 0; //#12916
        $1.cset = "set0"; //#12916
        for (;;) { //#12966
            if ($1.i == $1.msglen) { //#12918
                break; //#12918
            } //#12918
            for (;;) { //#12964
                $1.char1 = $get($1.msg, $1.i); //#12923
                $k[$j++] = 'char2'; //#12924
                if (($1.i + 1) < $1.msglen) { //#12924
                    $k[$j++] = $get($1.msg, $1.i + 1); //#12924
                } else { //#12924
                    $k[$j++] = -99; //#12924
                } //#12924
                var _45 = $k[--$j]; //#12924
                $1[$k[--$j]] = _45; //#12924
                var _4A = $get($1[$1.cset], $1.char1) !== undefined; //#12927
                if (_4A) { //#12931
                    $k[$j++] = $1.char1; //#12928
                    $k[$j++] = $1[$1.cset]; //#12928
                    $1.enc(); //#12928
                    $1.i = $1.i + 1; //#12929
                    break; //#12930
                } //#12930
                var _4H = $get($1.set2, $1.char1) !== undefined; //#12934
                if (_4H) { //#12939
                    $k[$j++] = $1.sf2; //#12935
                    $k[$j++] = $1[$1.cset]; //#12935
                    $1.enc(); //#12935
                    $k[$j++] = $1.char1; //#12936
                    $k[$j++] = $1.set2; //#12936
                    $1.enc(); //#12936
                    $1.i = $1.i + 1; //#12937
                    break; //#12938
                } //#12938
                var _4R = $get($1[$1.cset], $1.char2) !== undefined; //#12942
                if (!_4R) { //#12960
                    if ($eq($1.cset, "set0")) { //#12948
                        $k[$j++] = $1.la1; //#12944
                        $k[$j++] = $1[$1.cset]; //#12944
                        $1.enc(); //#12944
                        $1.cset = "set1"; //#12945
                    } else { //#12948
                        $k[$j++] = $1.la0; //#12947
                        $k[$j++] = $1[$1.cset]; //#12947
                        $1.enc(); //#12947
                        $1.cset = "set0"; //#12948
                    } //#12948
                    break; //#12950
                } else { //#12960
                    if ($eq($1.cset, "set0")) { //#12957
                        $k[$j++] = $1.sf1; //#12953
                        $k[$j++] = $1[$1.cset]; //#12953
                        $1.enc(); //#12953
                        $k[$j++] = $1.char1; //#12954
                        $k[$j++] = $1.set1; //#12954
                        $1.enc(); //#12954
                    } else { //#12957
                        $k[$j++] = $1.sf0; //#12956
                        $k[$j++] = $1[$1.cset]; //#12956
                        $1.enc(); //#12956
                        $k[$j++] = $1.char1; //#12957
                        $k[$j++] = $1.set0; //#12957
                        $1.enc(); //#12957
                    } //#12957
                    $1.i = $1.i + 1; //#12959
                    break; //#12960
                } //#12960
                break; //#12963
            } //#12963
        } //#12963
        $1.cws = $geti($1.cws, 0, $1.j); //#12967
    } //#12967
    if (!bwipp_posicode.$ctx._13018) { //#13018
        (function() { //#13018
            var $ctx = Object.create($1); //#13018
            var _4s = new Map([
                ["a", $a(["141112", "131212", "121312", "111412", "131113", "121213", "111313", "121114", "111214", "111115", "181111", "171211", "161311", "151411", "141511", "131611", "121711", "111811", "171112", "161212", "151312", "141412", "131512", "121612", "111712", "161113", "151213", "141313", "131413", "121513", "111613", "151114", "141214", "131314", "121414", "111514", "141115", "131215", "121315", "111415", "131116", "121216", "111316", "121117", "111217", "111118", "1<111112", "111111111;1"])],
                ["b", $a(["151213", "141313", "131413", "121513", "141214", "131314", "121414", "131215", "121315", "121216", "191212", "181312", "171412", "161512", "151612", "141712", "131812", "121912", "181213", "171313", "161413", "151513", "141613", "131713", "121813", "171214", "161314", "151414", "141514", "131614", "121714", "161215", "151315", "141415", "131515", "121615", "151216", "141316", "131416", "121516", "141217", "131317", "121417", "131218", "121318", "121219", "1<121312", "121212121<1"])],
                ["limiteda", $a(["111411", "111312", "111213", "111114", "121311", "121212", "121113", "141111", "131211", "131112", "171111", "161211", "151311", "141411", "131511", "121611", "111711", "161112", "151212", "141312", "131412", "121512", "111612", "151113", "141213", "131313", "121413", "111513", "141114", "131214", "121314", "111414", "131115", "121215", "111315", "121116", "111216", "111117", "151111", "1"])],
                ["limitedb", $a(["121512", "121413", "121314", "121215", "131412", "131313", "131214", "151212", "141312", "141213", "181212", "171312", "161412", "151512", "141612", "131712", "121812", "171213", "161313", "151413", "141513", "131613", "121713", "161214", "151314", "141414", "131514", "121614", "151215", "141315", "131415", "121515", "141216", "131316", "121416", "131217", "121317", "121218", "141212", "1"])]
            ]); //#13015
            $ctx.encmaps = _4s; //#13017
            for (var _4t in $ctx) {
                $ctx.hasOwnProperty(_4t) && (bwipp_posicode.$ctx[_4t] = $ctx[_4t]);
            } //#13017
            bwipp_posicode.$ctx._13018 = 1; //#13017
        })(); //#13017
    } //#13017
    $1.encs = $get($1.encmaps, $1.version); //#13019
    if (!bwipp_posicode.$ctx._13029) { //#13029
        (function() { //#13029
            var $ctx = Object.create($1); //#13029
            $ctx.c2w = $a([$a([495, 330, 210, 126, 70, 35, 15, 5]), $a([165, 120, 84, 56, 35, 20, 10, 4]), $a([45, 36, 28, 21, 15, 10, 6, 3]), $a([9, 8, 7, 6, 5, 4, 3, 2]), $a([1, 1, 1, 1, 1, 1, 1, 1])]); //#13028
            for (var _53 in $ctx) {
                $ctx.hasOwnProperty(_53) && (bwipp_posicode.$ctx[_53] = $ctx[_53]);
            } //#13028
            bwipp_posicode.$ctx._13029 = 1; //#13028
        })(); //#13028
    } //#13028
    $1.v = 0; //#13030
    var _54 = $1.cws; //#13031
    for (var _55 = 0, _56 = _54.length; _55 < _56; _55++) { //#13040
        $1.cw = $get(_54, _55); //#13032
        for (var _58 = 0, _59 = 6; _58 < _59; _58++) { //#13039
            if ((($1.cw ^ $1.v) & 1) != 0) { //#13036
                $1.v = $1.v ^ 7682; //#13035
            } //#13035
            $1.v = $1.v >>> 1; //#13037
            $1.cw = $1.cw >>> 1; //#13038
        } //#13038
    } //#13038
    $1.v = $1.v + $1.checkoffset; //#13041
    if ($eq($1.version, "limiteda") || $eq($1.version, "limitedb")) { //#13049
        $1.v = $1.v & 1023; //#13044
        if (($1.v > 824) && ($1.v < 853)) { //#13047
            $1.v = $1.v + 292; //#13046
        } //#13046
    } else { //#13049
        $1.v = ($1.v & 1023) + 45; //#13049
    } //#13049
    $1.d = $a([2, 2, 2, 2, 2, 2]); //#13052
    $1.r = 0; //#13053
    $1.c = 0; //#13053
    $1.w = 0; //#13053
    $1.sum = 0; //#13053
    for (;;) { //#13072
        if ($1.sum == $1.v) { //#13055
            break; //#13055
        } //#13055
        $1.t = $f($1.sum + $get($get($1.c2w, $1.r), $1.c)); //#13056
        if ($1.t == $1.v) { //#13061
            $1.w = $1.w + 1; //#13058
            $put($1.d, $1.r, $1.w + 2); //#13059
            $1.sum = $1.t; //#13060
        } //#13060
        if ($1.t > $1.v) { //#13066
            $put($1.d, $1.r, $1.w + 2); //#13063
            $1.r = $1.r + 1; //#13064
            $1.w = 0; //#13065
        } //#13065
        if ($1.t < $1.v) { //#13071
            $1.c = $1.c + 1; //#13068
            $1.w = $1.w + 1; //#13069
            $1.sum = $1.t; //#13070
        } //#13070
    } //#13070
    $k[$j++] = 20; //#13073
    for (var _5p = 0; _5p <= 4; _5p += 1) { //#13073
        var _5s = $k[--$j]; //#13073
        $k[$j++] = $f(_5s - $get($1.d, _5p)); //#13073
    } //#13073
    $put($1.d, 5, $k[--$j]); //#13074
    if ($eq($1.version, "b") || $eq($1.version, "limitedb")) { //#13077
        $k[$j++] = Infinity; //#13076
        var _5x = $1.d; //#13076
        for (var _5y = 0, _5z = _5x.length; _5y < _5z; _5y++) { //#13076
            $k[$j++] = $f($get(_5x, _5y) + 1); //#13076
        } //#13076
        $1.d = $a(); //#13076
    } //#13076
    $1.cbs = $strcpy($s(12), "111111111111"); //#13078
    for (var _64 = 5; _64 >= 0; _64 -= 1) { //#13082
        $1.i = _64; //#13080
        $put($1.cbs, ((5 - $1.i) * 2) + 1, $f($get($1.d, $1.i) + 47)); //#13081
    } //#13081
    $1.sbs = $s(($1.cws.length * 6) + 31); //#13085
    var _6E = $get($1.encs, $1.encs.length - 2); //#13086
    $puti($1.sbs, 0, _6E); //#13087
    $1.j = _6E.length; //#13088
    for (var _6I = 0, _6H = $1.cws.length - 1; _6I <= _6H; _6I += 1) { //#13093
        $1.i = _6I; //#13090
        $puti($1.sbs, $1.j, $get($1.encs, $get($1.cws, $1.i))); //#13091
        $1.j = $1.j + 6; //#13092
    } //#13092
    $puti($1.sbs, $1.j, $1.cbs); //#13094
    $1.j = $1.j + 12; //#13095
    var _6X = $get($1.encs, $1.encs.length - 1); //#13096
    $puti($1.sbs, $1.j, _6X); //#13097
    $1.j = _6X.length + $1.j; //#13098
    $1.sbs = $geti($1.sbs, 0, $1.j); //#13099
    $k[$j++] = Infinity; //#13109
    $k[$j++] = Infinity; //#13104
    var _6e = $1.sbs; //#13104
    for (var _6f = 0, _6g = _6e.length; _6f < _6g; _6f++) { //#13104
        $k[$j++] = $f($get(_6e, _6f) - 48); //#13104
    } //#13104
    var _6i = $a(); //#13104
    $k[$j++] = Infinity; //#13105
    for (var _6k = 0, _6l = ~~(($1.sbs.length + 1) / 2); _6k < _6l; _6k++) { //#13105
        $k[$j++] = $1.height; //#13105
    } //#13105
    var _6n = $a(); //#13105
    $k[$j++] = Infinity; //#13106
    for (var _6p = 0, _6q = ~~(($1.sbs.length + 1) / 2); _6p < _6q; _6p++) { //#13106
        $k[$j++] = 0; //#13106
    } //#13106
    var _6r = $a(); //#13106
    $k[$j++] = 'ren'; //#13109
    $k[$j++] = bwipp_renlinear; //#13109
    $k[$j++] = 'sbs'; //#13109
    $k[$j++] = _6i; //#13109
    $k[$j++] = 'bhs'; //#13109
    $k[$j++] = _6n; //#13109
    $k[$j++] = 'bbs'; //#13109
    $k[$j++] = _6r; //#13109
    $k[$j++] = 'txt'; //#13109
    $k[$j++] = $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])]); //#13109
    $k[$j++] = 'textxalign'; //#13109
    $k[$j++] = "center"; //#13109
    $k[$j++] = 'opt'; //#13109
    $k[$j++] = $1.options; //#13109
    var _70 = $d(); //#13109
    $k[$j++] = _70; //#13112
    if (!$1.dontdraw) { //#13112
        bwipp_renlinear(); //#13112
    } //#13112
}

function bwipp_codablockf() {
    var $1 = Object.create(bwipp_codablockf.$ctx || (bwipp_codablockf.$ctx = {})); //#13147
    $1.dontdraw = false; //#13150
    $1.rows = -1; //#13151
    $1.columns = 8; //#13152
    $1.rowheight = 10; //#13153
    $1.sepheight = 1; //#13154
    $1.parse = false; //#13155
    $1.parsefnc = false; //#13156
    $k[$j++] = $1; //#13158
    bwipp_processoptions(); //#13158
    $1.options = $k[--$j]; //#13158
    $1.barcode = $k[--$j]; //#13159
    $k[$j++] = 'c'; //#13161
    if (($1.columns >= 4) && ($1.columns <= 62)) { //#13161
        $k[$j++] = $1.columns; //#13161
    } else { //#13161
        $k[$j++] = 8; //#13161
    } //#13161
    var _5 = $k[--$j]; //#13161
    $1[$k[--$j]] = _5; //#13161
    $k[$j++] = 'rows'; //#13162
    if (($1.rows >= 2) && ($1.rows <= 44)) { //#13162
        $k[$j++] = $1.rows; //#13162
    } else { //#13162
        $k[$j++] = -1; //#13162
    } //#13162
    var _A = $k[--$j]; //#13162
    $1[$k[--$j]] = _A; //#13162
    $1.swa = -1; //#13167
    $1.swb = -2; //#13167
    $1.swc = -3; //#13167
    $1.sft = -4; //#13167
    $1.fn1 = -5; //#13168
    $1.fn2 = -6; //#13168
    $1.fn3 = -7; //#13168
    $1.fn4 = -8; //#13168
    $1.sta = -9; //#13169
    $1.stp = -10; //#13169
    var _G = new Map([
        ["parse", $1.parse],
        ["parsefnc", $1.parsefnc],
        ["FNC1", $1.fn1],
        ["FNC3", $1.fn3]
    ]); //#13177
    $1.fncvals = _G; //#13179
    $k[$j++] = 'msg'; //#13180
    $k[$j++] = $1.barcode; //#13180
    $k[$j++] = $1.fncvals; //#13180
    bwipp_parseinput(); //#13180
    var _J = $k[--$j]; //#13180
    $1[$k[--$j]] = _J; //#13180
    $1.msglen = $1.msg.length; //#13181
    $1.msgtmp = $a([]); //#13184
    var _N = $1.msg; //#13185
    for (var _O = 0, _P = _N.length; _O < _P; _O++) { //#13188
        $1.char = $get(_N, _O); //#13186
        $k[$j++] = Infinity; //#13187
        $aload($1.msgtmp); //#13187
        if ($1.char < 128) { //#13187
            $k[$j++] = $1.char; //#13187
        } else { //#13187
            $k[$j++] = $1.fn4; //#13187
            $k[$j++] = $1.char & 127; //#13187
        } //#13187
        $1.msgtmp = $a(); //#13187
    } //#13187
    $1.kmsg = $1.msg; //#13189
    $1.msg = $1.msgtmp; //#13190
    $1.msglen = $1.msg.length; //#13191
    if (!bwipp_codablockf.$ctx._13248) { //#13248
        (function() { //#13248
            var $ctx = Object.create($1); //#13248
            $ctx.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$ctx.fn3, $ctx.fn3, "96"]), $a([$ctx.fn2, $ctx.fn2, "97"]), $a([$ctx.sft, $ctx.sft, "98"]), $a([$ctx.swc, $ctx.swc, "99"]), $a([$ctx.swb, $ctx.fn4, $ctx.swb]), $a([$ctx.fn4, $ctx.swa, $ctx.swa]), $a([$ctx.fn1, $ctx.fn1, $ctx.fn1]), $a([$ctx.sta, $ctx.sta, $ctx.sta]), $a([$ctx.stp, $ctx.stp, $ctx.stp])]); //#13232
            $ctx.charvals = $a([new Map, new Map, new Map]); //#13235
            for (var _2i = 0, _2h = $ctx.charmaps.length - 1; _2i <= _2h; _2i += 1) { //#13244
                $ctx.i = _2i; //#13237
                $ctx.encs = $get($ctx.charmaps, $ctx.i); //#13238
                for (var _2m = 0; _2m <= 2; _2m += 1) { //#13243
                    $ctx.j = _2m; //#13240
                    var _2p = $get($ctx.encs, $ctx.j); //#13241
                    $k[$j++] = _2p; //#13241
                    if ($eq($type(_2p), 'stringtype')) { //#13241
                        var _2s = $get($k[--$j], 0); //#13241
                        $k[$j++] = _2s; //#13241
                    } //#13241
                    $put($get($ctx.charvals, $ctx.j), $k[--$j], $ctx.i); //#13242
                } //#13242
            } //#13242
            $ctx.seta = $get($ctx.charvals, 0); //#13245
            $ctx.setb = $get($ctx.charvals, 1); //#13246
            $ctx.setc = $get($ctx.charvals, 2); //#13247
            for (var _34 in $ctx) {
                $ctx.hasOwnProperty(_34) && (bwipp_codablockf.$ctx[_34] = $ctx[_34]);
            } //#13247
            bwipp_codablockf.$ctx._13248 = 1; //#13247
        })(); //#13247
    } //#13247
    $1.numsscr = function() {
        $1.n = 0; //#13252
        $1.s = 0; //#13252
        $1.p = $k[--$j]; //#13253
        for (;;) { //#13264
            if ($1.p >= $1.msglen) { //#13254
                break; //#13254
            } //#13254
            var _3A = $get($1.msg, $1.p); //#13255
            var _3C = $get($1.setc, _3A) !== undefined; //#13256
            $k[$j++] = _3A; //#13256
            if (!_3C) { //#13256
                $j--; //#13256
                break; //#13256
            } //#13256
            if ($k[--$j] == $1.fn1) { //#13260
                if (($1.s % 2) == 0) { //#13259
                    $1.s = $1.s + 1; //#13259
                } else { //#13259
                    break; //#13259
                } //#13259
            } //#13259
            $1.n = $1.n + 1; //#13261
            $1.s = $1.s + 1; //#13262
            $1.p = $f($1.p + 1); //#13263
        } //#13263
        $k[$j++] = $1.n; //#13265
        $k[$j++] = $1.s; //#13265
    }; //#13265
    $1.enca = function() {
        $put($1.cws, $1.j, $get($1.seta, $k[--$j])); //#13270
        $1.j = $1.j + 1; //#13271
    }; //#13271
    $1.encb = function() {
        $put($1.cws, $1.j, $get($1.setb, $k[--$j])); //#13274
        $1.j = $1.j + 1; //#13275
    }; //#13275
    $1.encc = function() {
        var _3Y = $k[--$j]; //#13278
        $k[$j++] = _3Y; //#13282
        if ($ne($type(_3Y), 'arraytype')) { //#13281
            var _3c = $get($1.setc, $k[--$j]); //#13279
            $k[$j++] = _3c; //#13279
        } else { //#13281
            $aload($k[--$j]); //#13281
            var _3e = $k[--$j]; //#13281
            var _3f = $k[--$j]; //#13281
            $k[$j++] = $f($f(_3e - 48) + ($f(_3f - 48) * 10)); //#13281
        } //#13281
        $put($1.cws, $1.j, $k[--$j]); //#13283
        $1.j = $1.j + 1; //#13284
    }; //#13284
    $1.anotb = function() {
        var _3k = $k[--$j]; //#13288
        var _3m = $get($1.seta, _3k) !== undefined; //#13288
        var _3o = $get($1.setb, _3k) !== undefined; //#13288
        $k[$j++] = _3m && (!_3o); //#13288
    }; //#13288
    $1.bnota = function() {
        var _3p = $k[--$j]; //#13289
        var _3r = $get($1.setb, _3p) !== undefined; //#13289
        var _3t = $get($1.seta, _3p) !== undefined; //#13289
        $k[$j++] = _3r && (!_3t); //#13289
    }; //#13289
    $k[$j++] = Infinity; //#13292
    for (var _3v = 0, _3w = $1.msg.length; _3v < _3w; _3v++) { //#13292
        $k[$j++] = 0; //#13292
    } //#13292
    $k[$j++] = 9999; //#13292
    $1.nextanotb = $a(); //#13292
    $k[$j++] = Infinity; //#13293
    for (var _3z = 0, _40 = $1.msg.length; _3z < _40; _3z++) { //#13293
        $k[$j++] = 0; //#13293
    } //#13293
    $k[$j++] = 9999; //#13293
    $1.nextbnota = $a(); //#13293
    for (var _43 = $1.msg.length - 1; _43 >= 0; _43 -= 1) { //#13306
        $1.i = _43; //#13295
        $k[$j++] = $get($1.msg, $1.i); //#13296
        $1.anotb(); //#13296
        if ($k[--$j]) { //#13299
            $put($1.nextanotb, $1.i, 0); //#13297
        } else { //#13299
            $put($1.nextanotb, $1.i, $f($get($1.nextanotb, $1.i + 1) + 1)); //#13299
        } //#13299
        $k[$j++] = $get($1.msg, $1.i); //#13301
        $1.bnota(); //#13301
        if ($k[--$j]) { //#13304
            $put($1.nextbnota, $1.i, 0); //#13302
        } else { //#13304
            $put($1.nextbnota, $1.i, $f($get($1.nextbnota, $1.i + 1) + 1)); //#13304
        } //#13304
    } //#13304
    $1.abeforeb = function() {
        var _4Q = $k[--$j]; //#13309
        $k[$j++] = $lt($get($1.nextanotb, _4Q), $get($1.nextbnota, _4Q)); //#13309
    }; //#13309
    $1.bbeforea = function() {
        var _4V = $k[--$j]; //#13310
        $k[$j++] = $lt($get($1.nextbnota, _4V), $get($1.nextanotb, _4V)); //#13310
    }; //#13310
    $1.padrow = function() {
        for (var _4b = 0, _4c = $k[--$j]; _4b < _4c; _4b++) { //#13320
            for (;;) { //#13319
                if ($eq($1.cset, "seta")) { //#13316
                    $k[$j++] = $1.swc; //#13316
                    $1.enca(); //#13316
                    $1.cset = "setc"; //#13316
                    break; //#13316
                } //#13316
                if ($eq($1.cset, "setb")) { //#13317
                    $k[$j++] = $1.swc; //#13317
                    $1.encb(); //#13317
                    $1.cset = "setc"; //#13317
                    break; //#13317
                } //#13317
                if ($eq($1.cset, "setc")) { //#13318
                    $k[$j++] = $1.swb; //#13318
                    $1.encc(); //#13318
                    $1.cset = "setb"; //#13318
                    break; //#13318
                } //#13318
            } //#13318
        } //#13318
    }; //#13318
    $1.encafitsrow = function() {
        if (($1.rem <= 2) && ($get($1.msg, $1.i) == $1.fn4)) { //#13335
            var _4s = ($1.rem == 2) && ($get($1.msg, $1.i + 1) <= 95); //#13327
            $k[$j++] = _4s; //#13331
            if (_4s) { //#13331
                $k[$j++] = $1.fn4; //#13328
                $1.enca(); //#13328
                $k[$j++] = $get($1.msg, $1.i + 1); //#13329
                $1.enca(); //#13329
                $1.i = $1.i + 2; //#13330
            } //#13330
        } else { //#13335
            $k[$j++] = $get($1.msg, $1.i); //#13333
            $1.enca(); //#13333
            $1.i = $1.i + 1; //#13334
            $k[$j++] = true; //#13335
        } //#13335
    }; //#13335
    $1.encbfitsrow = function() {
        if (($1.rem <= 2) && ($get($1.msg, $1.i) == $1.fn4)) { //#13351
            var _5B = ($1.rem == 2) && ($get($1.msg, $1.i + 1) >= 32); //#13343
            $k[$j++] = _5B; //#13347
            if (_5B) { //#13347
                $k[$j++] = $1.fn4; //#13344
                $1.encb(); //#13344
                $k[$j++] = $get($1.msg, $1.i + 1); //#13345
                $1.encb(); //#13345
                $1.i = $1.i + 2; //#13346
            } //#13346
        } else { //#13351
            $k[$j++] = $get($1.msg, $1.i); //#13349
            $1.encb(); //#13349
            $1.i = $1.i + 1; //#13350
            $k[$j++] = true; //#13351
        } //#13351
    }; //#13351
    $1.cws = $a($f($1.c + 5) * 44); //#13356
    $1.i = 0; //#13358
    $1.j = 0; //#13358
    $1.r = 1; //#13358
    $1.lastrow = false; //#13359
    for (;;) { //#13522
        if ($1.lastrow) { //#13361
            break; //#13361
        } //#13361
        $k[$j++] = $1.sta; //#13364
        $1.enca(); //#13364
        if ($1.i < $1.msglen) { //#13365
            $k[$j++] = $1.i; //#13365
            $1.numsscr(); //#13365
        } else { //#13365
            $k[$j++] = -1; //#13365
            $k[$j++] = -1; //#13365
        } //#13365
        $1.nums = $k[--$j]; //#13365
        $1.nchars = $k[--$j]; //#13365
        for (;;) { //#13385
            if ($1.msglen == 0) { //#13371
                $k[$j++] = $1.swb; //#13368
                $1.enca(); //#13368
                $1.cset = "setb"; //#13369
                break; //#13370
            } //#13370
            if ($1.nums >= 2) { //#13376
                $k[$j++] = $1.swc; //#13373
                $1.enca(); //#13373
                $1.cset = "setc"; //#13374
                break; //#13375
            } //#13375
            $k[$j++] = $1.i; //#13377
            $1.abeforeb(); //#13377
            if ($k[--$j]) { //#13381
                $k[$j++] = $1.sft; //#13378
                $1.enca(); //#13378
                $1.cset = "seta"; //#13379
                break; //#13380
            } //#13380
            $k[$j++] = $1.swb; //#13382
            $1.enca(); //#13382
            $1.cset = "setb"; //#13383
            break; //#13384
        } //#13384
        $1.j = $1.j + 1; //#13386
        $1.endofrow = false; //#13389
        for (;;) { //#13507
            $1.rem = $f($f($1.c + 3) - ($1.j % $f($1.c + 5))); //#13390
            if (($1.i == $1.msglen) || $1.endofrow) { //#13392
                break; //#13392
            } //#13392
            $k[$j++] = $1.i; //#13394
            $1.numsscr(); //#13394
            $1.nums = $k[--$j]; //#13394
            $1.nchars = $k[--$j]; //#13394
            $k[$j++] = 'remnums'; //#13395
            if ($1.nums > ($1.rem * 2)) { //#13395
                $k[$j++] = $1.rem * 2; //#13395
            } else { //#13395
                $k[$j++] = $1.nums; //#13395
            } //#13395
            var _5q = $k[--$j]; //#13395
            $1[$k[--$j]] = _5q; //#13395
            for (;;) { //#13505
                if ((($eq($1.cset, "seta") || $eq($1.cset, "setb")) && ($1.remnums >= 4)) && ($get($1.msg, $1.i) != $1.fn1)) { //#13433
                    if ((($1.remnums % 2) == 0) && ($1.rem >= 3)) { //#13415
                        $k[$j++] = $1.swc; //#13403
                        if ($eq($1.cset, "seta")) { //#13403
                            $1.enca(); //#13403
                        } else { //#13403
                            $1.encb(); //#13403
                        } //#13403
                        $1.cset = "setc"; //#13404
                        for (var _63 = 0, _64 = 2; _63 < _64; _63++) { //#13413
                            if ($get($1.msg, $1.i) == $1.fn1) { //#13411
                                $k[$j++] = $1.fn1; //#13407
                                $1.encc(); //#13407
                                $1.i = $1.i + 1; //#13408
                            } else { //#13411
                                $k[$j++] = $geti($1.msg, $1.i, 2); //#13410
                                $1.encc(); //#13410
                                $1.i = $1.i + 2; //#13411
                            } //#13411
                        } //#13411
                        break; //#13414
                    } //#13414
                    if ((($1.remnums % 2) != 0) && ($1.rem >= 4)) { //#13432
                        $k[$j++] = $get($1.msg, $1.i); //#13418
                        if ($eq($1.cset, "seta")) { //#13418
                            $1.enca(); //#13418
                        } else { //#13418
                            $1.encb(); //#13418
                        } //#13418
                        $1.i = $1.i + 1; //#13419
                        $k[$j++] = $1.swc; //#13420
                        if ($eq($1.cset, "seta")) { //#13420
                            $1.enca(); //#13420
                        } else { //#13420
                            $1.encb(); //#13420
                        } //#13420
                        $1.cset = "setc"; //#13421
                        for (var _6O = 0, _6P = 2; _6O < _6P; _6O++) { //#13430
                            if ($get($1.msg, $1.i) == $1.fn1) { //#13428
                                $k[$j++] = $1.fn1; //#13424
                                $1.encc(); //#13424
                                $1.i = $1.i + 1; //#13425
                            } else { //#13428
                                $k[$j++] = $geti($1.msg, $1.i, 2); //#13427
                                $1.encc(); //#13427
                                $1.i = $1.i + 2; //#13428
                            } //#13428
                        } //#13428
                        break; //#13431
                    } //#13431
                } //#13431
                $k[$j++] = $eq($1.cset, "setb"); //#13434
                $k[$j++] = $get($1.msg, $1.i); //#13434
                $1.anotb(); //#13434
                var _6e = $k[--$j]; //#13434
                var _6f = $k[--$j]; //#13434
                if ((_6f && _6e) && ($1.rem >= 2)) { //#13449
                    if ($1.i < ($1.msglen - 1)) { //#13443
                        $k[$j++] = $1.i + 1; //#13437
                        $1.bbeforea(); //#13437
                        if ($k[--$j]) { //#13442
                            $k[$j++] = $1.sft; //#13438
                            $1.encb(); //#13438
                            $k[$j++] = $get($1.msg, $1.i); //#13439
                            $1.enca(); //#13439
                            $1.i = $1.i + 1; //#13440
                            break; //#13441
                        } //#13441
                    } //#13441
                    $k[$j++] = $1.swa; //#13444
                    $1.encb(); //#13444
                    $1.cset = "seta"; //#13445
                    $k[$j++] = $get($1.msg, $1.i); //#13446
                    $1.enca(); //#13446
                    $1.i = $1.i + 1; //#13447
                    break; //#13448
                } //#13448
                $k[$j++] = $eq($1.cset, "seta"); //#13450
                $k[$j++] = $get($1.msg, $1.i); //#13450
                $1.bnota(); //#13450
                var _6z = $k[--$j]; //#13450
                var _70 = $k[--$j]; //#13450
                if ((_70 && _6z) && ($1.rem >= 2)) { //#13465
                    if ($1.i < ($1.msglen - 1)) { //#13459
                        $k[$j++] = $1.i + 1; //#13453
                        $1.abeforeb(); //#13453
                        if ($k[--$j]) { //#13458
                            $k[$j++] = $1.sft; //#13454
                            $1.enca(); //#13454
                            $k[$j++] = $get($1.msg, $1.i); //#13455
                            $1.encb(); //#13455
                            $1.i = $1.i + 1; //#13456
                            break; //#13457
                        } //#13457
                    } //#13457
                    $k[$j++] = $1.swb; //#13460
                    $1.enca(); //#13460
                    $1.cset = "setb"; //#13461
                    $k[$j++] = $get($1.msg, $1.i); //#13462
                    $1.encb(); //#13462
                    $1.i = $1.i + 1; //#13463
                    break; //#13464
                } //#13464
                if (($eq($1.cset, "setc") && ($1.remnums < 2)) && ($1.rem >= 2)) { //#13478
                    $1.rem = $f($1.rem - 1); //#13468
                    $k[$j++] = $1.i; //#13469
                    $1.abeforeb(); //#13469
                    if ($k[--$j]) { //#13476
                        $k[$j++] = $1.swa; //#13470
                        $1.encc(); //#13470
                        $1.cset = "seta"; //#13471
                        $1.encafitsrow(); //#13472
                        if ($k[--$j]) { //#13472
                            break; //#13472
                        } //#13472
                    } else { //#13476
                        $k[$j++] = $1.swb; //#13474
                        $1.encc(); //#13474
                        $1.cset = "setb"; //#13475
                        $1.encbfitsrow(); //#13476
                        if ($k[--$j]) { //#13476
                            break; //#13476
                        } //#13476
                    } //#13476
                } //#13476
                var _7V = $get($1.seta, $get($1.msg, $1.i)) !== undefined; //#13481
                if (($eq($1.cset, "seta") && _7V) && ($1.rem >= 1)) { //#13484
                    $1.encafitsrow(); //#13483
                    if ($k[--$j]) { //#13483
                        break; //#13483
                    } //#13483
                } //#13483
                var _7d = $get($1.setb, $get($1.msg, $1.i)) !== undefined; //#13485
                if (($eq($1.cset, "setb") && _7d) && ($1.rem >= 1)) { //#13488
                    $1.encbfitsrow(); //#13487
                    if ($k[--$j]) { //#13487
                        break; //#13487
                    } //#13487
                } //#13487
                if (($eq($1.cset, "setc") && ($1.remnums >= 2)) && ($1.rem >= 1)) { //#13499
                    if ($get($1.msg, $1.i) == $1.fn1) { //#13496
                        $k[$j++] = $1.fn1; //#13492
                        $1.encc(); //#13492
                        $1.i = $1.i + 1; //#13493
                    } else { //#13496
                        $k[$j++] = $geti($1.msg, $1.i, 2); //#13495
                        $1.encc(); //#13495
                        $1.i = $1.i + 2; //#13496
                    } //#13496
                    break; //#13498
                } //#13498
                $1.endofrow = true; //#13502
                break; //#13503
            } //#13503
        } //#13503
        if ((((($1.r >= $1.rows) || ($1.rows == -1)) && ($1.r > 1)) && ($1.i == $1.msglen)) && ($1.rem >= 2)) { //#13519
            $k[$j++] = $f($1.rem - 2); //#13511
            $1.padrow(); //#13511
            $1.j = $1.j + 3; //#13512
            $k[$j++] = $1.stp; //#13513
            $1.enca(); //#13513
            $1.lastrow = true; //#13514
        } else { //#13519
            $k[$j++] = $1.rem; //#13516
            $1.padrow(); //#13516
            $1.j = $1.j + 1; //#13517
            $k[$j++] = $1.stp; //#13518
            $1.enca(); //#13518
            $1.r = $1.r + 1; //#13519
        } //#13519
    } //#13519
    $1.cws = $geti($1.cws, 0, $1.j); //#13523
    if (!bwipp_codablockf.$ctx._13533) { //#13533
        (function() { //#13533
            var $ctx = Object.create($1); //#13533
            $k[$j++] = Infinity; //#13530
            for (var _8A = 64; _8A <= 95; _8A += 1) { //#13528
                $k[$j++] = _8A; //#13528
            } //#13528
            for (var _8B = 0; _8B <= 15; _8B += 1) { //#13529
                $k[$j++] = _8B; //#13529
            } //#13529
            for (var _8C = 26; _8C <= 63; _8C += 1) { //#13530
                $k[$j++] = _8C; //#13530
            } //#13530
            $ctx.abmap = $a(); //#13530
            $k[$j++] = Infinity; //#13532
            for (var _8E = 0; _8E <= 85; _8E += 1) { //#13532
                $k[$j++] = _8E; //#13532
            } //#13532
            $ctx.cmap = $a(); //#13532
            for (var _8G in $ctx) {
                $ctx.hasOwnProperty(_8G) && (bwipp_codablockf.$ctx[_8G] = $ctx[_8G]);
            } //#13532
            bwipp_codablockf.$ctx._13533 = 1; //#13532
        })(); //#13532
    } //#13532
    $1.chkmsg = $a($1.kmsg.length); //#13536
    $1.j = 0; //#13537
    for (var _8L = 0, _8K = $1.kmsg.length - 1; _8L <= _8K; _8L += 1) { //#13543
        $1.i = _8L; //#13539
        $1.char = $get($1.kmsg, $1.i); //#13540
        if ($1.char >= 0) { //#13541
            $put($1.chkmsg, $1.j, $1.char); //#13541
            $1.j = $1.j + 1; //#13541
        } //#13541
        if (($1.char == $1.fn1) && ($1.i != 0)) { //#13542
            $put($1.chkmsg, $1.j, 29); //#13542
            $1.j = $1.j + 1; //#13542
        } //#13542
    } //#13542
    $1.t1 = 0; //#13544
    $1.t2 = 0; //#13544
    $1.k1 = 0; //#13544
    $1.k2 = 0; //#13544
    for (var _8c = 0, _8b = $1.j - 1; _8c <= _8b; _8c += 1) { //#13551
        $1.i = _8c; //#13546
        $1.t1 = ($get($1.chkmsg, $1.i) * $1.i) % 86; //#13547
        $1.t2 = $f($1.t1 + $get($1.chkmsg, $1.i)) % 86; //#13548
        $1.k1 = $f($1.k1 + $1.t2) % 86; //#13549
        $1.k2 = $f($1.k2 + $1.t1) % 86; //#13550
    } //#13550
    $k[$j++] = $1.cws; //#13552
    $k[$j++] = $1.cws.length - 4; //#13552
    if ($ne($1.cset, "setc")) { //#13552
        $k[$j++] = $1.abmap; //#13552
    } else { //#13552
        $k[$j++] = $1.cmap; //#13552
    } //#13552
    var _8w = $get($k[--$j], $1.k1); //#13552
    var _8x = $k[--$j]; //#13552
    $put($k[--$j], _8x, _8w); //#13552
    $k[$j++] = $1.cws; //#13553
    $k[$j++] = $1.cws.length - 3; //#13553
    if ($ne($1.cset, "setc")) { //#13553
        $k[$j++] = $1.abmap; //#13553
    } else { //#13553
        $k[$j++] = $1.cmap; //#13553
    } //#13553
    var _96 = $get($k[--$j], $1.k2); //#13553
    var _97 = $k[--$j]; //#13553
    $put($k[--$j], _97, _96); //#13553
    var _99 = $1.cws; //#13556
    $k[$j++] = _99; //#13556
    $k[$j++] = 2; //#13556
    if ($get(_99, 2 - 1) != 99) { //#13556
        $k[$j++] = $1.abmap; //#13556
    } else { //#13556
        $k[$j++] = $1.cmap; //#13556
    } //#13556
    var _9F = $get($k[--$j], $1.r - 2); //#13556
    var _9G = $k[--$j]; //#13556
    $put($k[--$j], _9G, _9F); //#13556
    for (var _9K = 1, _9J = $1.r - 1; _9K <= _9J; _9K += 1) { //#13560
        $1.i = _9K; //#13558
        var _9L = $1.cws; //#13559
        var _9M = $1.i; //#13559
        var _9N = $1.c; //#13559
        $k[$j++] = _9L; //#13559
        $k[$j++] = $f((_9M * $f(_9N + 5)) + 2); //#13559
        if ($get(_9L, $f(($f((_9M * $f(_9N + 5)) + 2)) - 1)) != 99) { //#13559
            $k[$j++] = $1.abmap; //#13559
        } else { //#13559
            $k[$j++] = $1.cmap; //#13559
        } //#13559
        var _9T = $get($k[--$j], $1.i + 42); //#13559
        var _9U = $k[--$j]; //#13559
        $put($k[--$j], _9U, _9T); //#13559
    } //#13559
    for (var _9Y = 0, _9X = $1.r - 1; _9Y <= _9X; _9Y += 1) { //#13571
        $1.rcws = $geti($1.cws, _9Y * $f($1.c + 5), $f($1.c + 4)); //#13564
        $1.csum = $get($1.rcws, 0); //#13565
        for (var _9h = 1, _9g = $1.rcws.length - 2; _9h <= _9g; _9h += 1) { //#13569
            $1.i = _9h; //#13567
            $1.csum = $f($1.csum + ($get($1.rcws, $1.i) * $1.i)); //#13568
        } //#13568
        $put($1.rcws, $1.rcws.length - 1, $1.csum % 103); //#13570
    } //#13570
    var _9r = $get($1.options, 'debugcws') !== undefined; //#13573
    if (_9r) { //#13573
        $k[$j++] = 'bwipp.debugcws#13573'; //#13573
        $k[$j++] = $1.cws; //#13573
        bwipp_raiseerror(); //#13573
    } //#13573
    if (!bwipp_codablockf.$ctx._13594) { //#13594
        (function() { //#13594
            var $ctx = Object.create($1); //#13594
            $ctx.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "2331112"]); //#13593
            for (var _9u in $ctx) {
                $ctx.hasOwnProperty(_9u) && (bwipp_codablockf.$ctx[_9u] = $ctx[_9u]);
            } //#13593
            bwipp_codablockf.$ctx._13594 = 1; //#13593
        })(); //#13593
    } //#13593
    $1.rowbits = $a($1.r); //#13597
    for (var _9z = 0, _9y = $1.r - 1; _9z <= _9y; _9z += 1) { //#13609
        $1.i = _9z; //#13599
        $k[$j++] = Infinity; //#13602
        var _A4 = $geti($1.cws, $1.i * $f($1.c + 5), $f($1.c + 5)); //#13601
        for (var _A5 = 0, _A6 = _A4.length; _A5 < _A6; _A5++) { //#13603
            $forall($get($1.encs, $get(_A4, _A5)), function() { //#13602
                var _AA = $k[--$j]; //#13602
                $k[$j++] = $f(_AA - 48); //#13602
            }); //#13602
        } //#13602
        $1.sbs = $a(); //#13602
        $k[$j++] = Infinity; //#13605
        var _AC = $1.sbs; //#13606
        $k[$j++] = 0; //#13606
        for (var _AD = 0, _AE = _AC.length; _AD < _AE; _AD++) { //#13606
            var _AG = $k[--$j]; //#13606
            var _AH = (_AG == 1) ? 0 : 1; //#13606
            $k[$j++] = _AG; //#13606
            for (var _AI = 0, _AJ = $get(_AC, _AD); _AI < _AJ; _AI++) { //#13606
                $k[$j++] = _AH //#13606
            } //#13606
        } //#13606
        $astore($a($counttomark() - 1)); //#13607
        var _AM = $k[--$j]; //#13607
        var _AN = $k[--$j]; //#13607
        $k[$j++] = _AM; //#13607
        $k[$j++] = _AN; //#13607
        $j--; //#13607
        var _AO = $k[--$j]; //#13607
        var _AP = $k[--$j]; //#13607
        $k[$j++] = _AO; //#13607
        $k[$j++] = _AP; //#13607
        $j--; //#13607
        $put($1.rowbits, $1.i, $k[--$j]); //#13608
    } //#13608
    $1.symwid = $f(($1.c * 11) + 57); //#13612
    $k[$j++] = Infinity; //#13625
    for (var _AW = 0, _AX = $1.symwid * $1.sepheight; _AW < _AX; _AW++) { //#13614
        $k[$j++] = 1; //#13614
    } //#13614
    for (var _Aa = 0, _AZ = $1.r - 2; _Aa <= _AZ; _Aa += 1) { //#13623
        $1.i = _Aa; //#13616
        for (var _Ac = 0, _Ad = $1.rowheight; _Ac < _Ad; _Ac++) { //#13617
            $aload($get($1.rowbits, $1.i)); //#13617
        } //#13617
        for (var _Ai = 0, _Aj = $1.sepheight; _Ai < _Aj; _Ai++) { //#13622
            $k[$j++] = 1; //#13620
            $k[$j++] = 1; //#13620
            $k[$j++] = 0; //#13620
            $k[$j++] = 1; //#13620
            $k[$j++] = 0; //#13620
            $k[$j++] = 0; //#13620
            $k[$j++] = 0; //#13620
            $k[$j++] = 0; //#13620
            $k[$j++] = 1; //#13620
            $k[$j++] = 0; //#13620
            $k[$j++] = 0; //#13620
            for (var _Al = 0, _Am = $f($1.symwid - 24); _Al < _Am; _Al++) { //#13620
                $k[$j++] = 1; //#13620
            } //#13620
            $k[$j++] = 1; //#13621
            $k[$j++] = 1; //#13621
            $k[$j++] = 0; //#13621
            $k[$j++] = 0; //#13621
            $k[$j++] = 0; //#13621
            $k[$j++] = 1; //#13621
            $k[$j++] = 1; //#13621
            $k[$j++] = 1; //#13621
            $k[$j++] = 0; //#13621
            $k[$j++] = 1; //#13621
            $k[$j++] = 0; //#13621
            $k[$j++] = 1; //#13621
            $k[$j++] = 1; //#13621
        } //#13621
    } //#13621
    for (var _Ao = 0, _Ap = $1.rowheight; _Ao < _Ap; _Ao++) { //#13624
        $aload($get($1.rowbits, $1.r - 1)); //#13624
    } //#13624
    for (var _Av = 0, _Aw = $1.symwid * $1.sepheight; _Av < _Aw; _Av++) { //#13625
        $k[$j++] = 1; //#13625
    } //#13625
    $1.pixs = $a(); //#13625
    var _B6 = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", $1.symwid],
        ["pixy", ~~($1.pixs.length / $1.symwid)],
        ["height", (~~($1.pixs.length / $1.symwid)) / 72],
        ["width", $1.symwid / 72],
        ["opt", $1.options]
    ]); //#13636
    $k[$j++] = _B6; //#13639
    if (!$1.dontdraw) { //#13639
        bwipp_renmatrix(); //#13639
    } //#13639
}

function bwipp_code16k() {
    var $1 = Object.create(bwipp_code16k.$ctx || (bwipp_code16k.$ctx = {})); //#13674
    $1.dontdraw = false; //#13677
    $1.mode = -1; //#13678
    $1.pos = -1; //#13679
    $1.rows = 0; //#13680
    $1.rowheight = 8; //#13681
    $1.sepheight = 1; //#13682
    $1.encoding = "auto"; //#13683
    $1.raw = false; //#13684
    $1.parse = false; //#13685
    $1.parsefnc = false; //#13686
    $k[$j++] = $1; //#13688
    bwipp_processoptions(); //#13688
    $1.options = $k[--$j]; //#13688
    $1.barcode = $k[--$j]; //#13689
    if ($1.pos != -1) { //#13693
        $1.rows = 16; //#13693
    } //#13693
    if (!bwipp_code16k.$ctx._13758) { //#13758
        (function() { //#13758
            var $ctx = Object.create($1); //#13758
            $ctx.swa = -1; //#13697
            $ctx.swb = -2; //#13697
            $ctx.swc = -3; //#13697
            $ctx.sa1 = -4; //#13698
            $ctx.sb1 = -5; //#13698
            $ctx.sc1 = -6; //#13698
            $ctx.sa2 = -7; //#13699
            $ctx.sb2 = -8; //#13699
            $ctx.sc2 = -9; //#13699
            $ctx.pad = -10; //#13700
            $ctx.sb3 = -11; //#13700
            $ctx.sc3 = -12; //#13700
            $ctx.fn1 = -13; //#13701
            $ctx.fn2 = -14; //#13701
            $ctx.fn3 = -15; //#13701
            $ctx.fn4 = -16; //#13701
            $ctx.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$ctx.fn3, $ctx.fn3, "96"]), $a([$ctx.fn2, $ctx.fn2, "97"]), $a([$ctx.sb1, $ctx.sa1, "98"]), $a([$ctx.swc, $ctx.swc, "99"]), $a([$ctx.swb, $ctx.fn4, $ctx.swb]), $a([$ctx.fn4, $ctx.swa, $ctx.swa]), $a([$ctx.fn1, $ctx.fn1, $ctx.fn1]), $a([$ctx.pad, $ctx.pad, $ctx.pad]), $a([$ctx.sb2, $ctx.sa2, $ctx.sb1]), $a([$ctx.sc2, $ctx.sc2, $ctx.sb2]), $a([$ctx.sc3, $ctx.sc3, $ctx.sb3])]); //#13742
            $ctx.charvals = $a([new Map, new Map, new Map]); //#13745
            for (var _2J = 0, _2I = $ctx.charmaps.length - 1; _2J <= _2I; _2J += 1) { //#13754
                $ctx.i = _2J; //#13747
                $ctx.encs = $get($ctx.charmaps, $ctx.i); //#13748
                for (var _2N = 0; _2N <= 2; _2N += 1) { //#13753
                    $ctx.j = _2N; //#13750
                    var _2Q = $get($ctx.encs, $ctx.j); //#13751
                    $k[$j++] = _2Q; //#13751
                    if ($eq($type(_2Q), 'stringtype')) { //#13751
                        var _2T = $get($k[--$j], 0); //#13751
                        $k[$j++] = _2T; //#13751
                    } //#13751
                    $put($get($ctx.charvals, $ctx.j), $k[--$j], $ctx.i); //#13752
                } //#13752
            } //#13752
            $ctx.seta = $get($ctx.charvals, 0); //#13755
            $ctx.setb = $get($ctx.charvals, 1); //#13756
            $ctx.setc = $get($ctx.charvals, 2); //#13757
            for (var _2f in $ctx) {
                $ctx.hasOwnProperty(_2f) && (bwipp_code16k.$ctx[_2f] = $ctx[_2f]);
            } //#13757
            bwipp_code16k.$ctx._13758 = 1; //#13757
        })(); //#13757
    } //#13757
    if ($1.raw) { //#13760
        $1.encoding = "raw"; //#13760
    } //#13760
    if ($eq($1.encoding, "raw")) { //#13773
        $1.cws = $a($1.barcode.length); //#13763
        $1.i = 0; //#13764
        $1.j = 0; //#13764
        for (;;) { //#13771
            if ($1.i == $1.barcode.length) { //#13766
                break; //#13766
            } //#13766
            $1.cw = $cvi($geti($1.barcode, $1.i + 1, 3)); //#13767
            $put($1.cws, $1.j, $1.cw); //#13768
            $1.i = $1.i + 4; //#13769
            $1.j = $1.j + 1; //#13770
        } //#13770
        $1.cws = $geti($1.cws, 0, $1.j); //#13772
    } //#13772
    if ($eq($1.encoding, "auto")) { //#14224
        var _33 = new Map([
            ["parse", $1.parse],
            ["parsefnc", $1.parsefnc],
            ["eci", true],
            ["FNC1", $1.fn1],
            ["FNC2", $1.fn2],
            ["FNC3", $1.fn3]
        ]); //#13784
        $1.fncvals = _33; //#13786
        $k[$j++] = 'msg'; //#13787
        $k[$j++] = $1.barcode; //#13787
        $k[$j++] = $1.fncvals; //#13787
        bwipp_parseinput(); //#13787
        var _36 = $k[--$j]; //#13787
        $1[$k[--$j]] = _36; //#13787
        $1.msglen = $1.msg.length; //#13788
        $k[$j++] = Infinity; //#13791
        for (var _3A = 0, _3B = $1.msglen; _3A < _3B; _3A++) { //#13791
            $k[$j++] = 0; //#13791
        } //#13791
        $k[$j++] = 0; //#13791
        $1.numSA = $a(); //#13791
        $k[$j++] = Infinity; //#13792
        for (var _3E = 0, _3F = $1.msglen; _3E < _3F; _3E++) { //#13792
            $k[$j++] = 0; //#13792
        } //#13792
        $k[$j++] = 0; //#13792
        $1.numEA = $a(); //#13792
        for (var _3I = $1.msglen - 1; _3I >= 0; _3I -= 1) { //#13802
            $1.i = _3I; //#13794
            if ($get($1.msg, $1.i) >= 0) { //#13801
                if ($get($1.msg, $1.i) >= 128) { //#13799
                    $put($1.numEA, $1.i, $f($get($1.numEA, $1.i + 1) + 1)); //#13797
                } else { //#13799
                    $put($1.numSA, $1.i, $f($get($1.numSA, $1.i + 1) + 1)); //#13799
                } //#13799
            } //#13799
        } //#13799
        $1.ea = false; //#13805
        $1.msgtmp = $a([]); //#13805
        for (var _3c = 0, _3b = $1.msglen - 1; _3c <= _3b; _3c += 1) { //#13820
            $1.i = _3c; //#13807
            $1.c = $get($1.msg, $1.i); //#13808
            if ((!$xo($1.ea, $1.c < 128)) && ($1.c >= 0)) { //#13818
                if ($1.ea) { //#13810
                    $k[$j++] = $1.numSA; //#13810
                } else { //#13810
                    $k[$j++] = $1.numEA; //#13810
                } //#13810
                var _3o = $get($k[--$j], $1.i); //#13810
                var _3r = ($f(_3o + $1.i) == $1.msglen) ? 3 : 5; //#13811
                if (_3o < _3r) { //#13816
                    $k[$j++] = Infinity; //#13813
                    $aload($1.msgtmp); //#13813
                    $k[$j++] = $1.fn4; //#13813
                    $1.msgtmp = $a(); //#13813
                } else { //#13816
                    $k[$j++] = Infinity; //#13815
                    $aload($1.msgtmp); //#13815
                    $k[$j++] = $1.fn4; //#13815
                    $k[$j++] = $1.fn4; //#13815
                    $1.msgtmp = $a(); //#13815
                    $1.ea = !$1.ea; //#13816
                } //#13816
            } //#13816
            $k[$j++] = Infinity; //#13819
            $aload($1.msgtmp); //#13819
            if ($1.c >= 0) { //#13819
                $k[$j++] = $1.c & 127; //#13819
            } else { //#13819
                $k[$j++] = $1.c; //#13819
            } //#13819
            $1.msgtmp = $a(); //#13819
        } //#13819
        $1.msg = $1.msgtmp; //#13821
        $1.msglen = $1.msg.length; //#13822
        $1.numsscr = function() {
            $1.n = 0; //#13826
            $1.s = 0; //#13826
            $1.p = $k[--$j]; //#13827
            for (;;) { //#13838
                if ($1.p >= $1.msglen) { //#13828
                    break; //#13828
                } //#13828
                var _4C = $get($1.msg, $1.p); //#13829
                var _4E = $get($1.setc, _4C) !== undefined; //#13830
                $k[$j++] = _4C; //#13830
                if (!_4E) { //#13830
                    $j--; //#13830
                    break; //#13830
                } //#13830
                if ($k[--$j] == $1.fn1) { //#13834
                    if (($1.s % 2) == 0) { //#13833
                        $1.s = $1.s + 1; //#13833
                    } else { //#13833
                        break; //#13833
                    } //#13833
                } //#13833
                $1.n = $1.n + 1; //#13835
                $1.s = $1.s + 1; //#13836
                $1.p = $f($1.p + 1); //#13837
            } //#13837
            $k[$j++] = $1.n; //#13839
            $k[$j++] = $1.s; //#13839
        }; //#13839
        $1.enca = function() {
            $put($1.cws, $1.j, $get($1.seta, $k[--$j])); //#13844
            $1.j = $1.j + 1; //#13845
        }; //#13845
        $1.encb = function() {
            $put($1.cws, $1.j, $get($1.setb, $k[--$j])); //#13848
            $1.j = $1.j + 1; //#13849
        }; //#13849
        $1.encc = function() {
            var _4a = $k[--$j]; //#13852
            $k[$j++] = _4a; //#13856
            if ($ne($type(_4a), 'arraytype')) { //#13855
                var _4e = $get($1.setc, $k[--$j]); //#13853
                $k[$j++] = _4e; //#13853
            } else { //#13855
                $aload($k[--$j]); //#13855
                var _4g = $k[--$j]; //#13855
                var _4h = $k[--$j]; //#13855
                $k[$j++] = $f($f(_4g - 48) + ($f(_4h - 48) * 10)); //#13855
            } //#13855
            $put($1.cws, $1.j, $k[--$j]); //#13857
            $1.j = $1.j + 1; //#13858
        }; //#13858
        $1.anotb = function() {
            var _4m = $k[--$j]; //#13862
            var _4o = $get($1.seta, _4m) !== undefined; //#13862
            var _4q = $get($1.setb, _4m) !== undefined; //#13862
            $k[$j++] = _4o && (!_4q); //#13862
        }; //#13862
        $1.bnota = function() {
            var _4r = $k[--$j]; //#13863
            var _4t = $get($1.setb, _4r) !== undefined; //#13863
            var _4v = $get($1.seta, _4r) !== undefined; //#13863
            $k[$j++] = _4t && (!_4v); //#13863
        }; //#13863
        $k[$j++] = Infinity; //#13866
        for (var _4x = 0, _4y = $1.msg.length; _4x < _4y; _4x++) { //#13866
            $k[$j++] = 0; //#13866
        } //#13866
        $k[$j++] = 9999; //#13866
        $1.nextanotb = $a(); //#13866
        $k[$j++] = Infinity; //#13867
        for (var _51 = 0, _52 = $1.msg.length; _51 < _52; _51++) { //#13867
            $k[$j++] = 0; //#13867
        } //#13867
        $k[$j++] = 9999; //#13867
        $1.nextbnota = $a(); //#13867
        for (var _55 = $1.msg.length - 1; _55 >= 0; _55 -= 1) { //#13880
            $1.i = _55; //#13869
            $k[$j++] = $get($1.msg, $1.i); //#13870
            $1.anotb(); //#13870
            if ($k[--$j]) { //#13873
                $put($1.nextanotb, $1.i, 0); //#13871
            } else { //#13873
                $put($1.nextanotb, $1.i, $f($get($1.nextanotb, $1.i + 1) + 1)); //#13873
            } //#13873
            $k[$j++] = $get($1.msg, $1.i); //#13875
            $1.bnota(); //#13875
            if ($k[--$j]) { //#13878
                $put($1.nextbnota, $1.i, 0); //#13876
            } else { //#13878
                $put($1.nextbnota, $1.i, $f($get($1.nextbnota, $1.i + 1) + 1)); //#13878
            } //#13878
        } //#13878
        $1.abeforeb = function() {
            var _5S = $k[--$j]; //#13883
            $k[$j++] = $lt($get($1.nextanotb, _5S), $get($1.nextbnota, _5S)); //#13883
        }; //#13883
        $1.bbeforea = function() {
            var _5X = $k[--$j]; //#13884
            $k[$j++] = $lt($get($1.nextbnota, _5X), $get($1.nextanotb, _5X)); //#13884
        }; //#13884
        $1.cws = $a(($1.barcode.length * 2) + 3); //#13886
        $1.i = 0; //#13889
        $1.j = 0; //#13889
        for (;;) { //#13979
            if ($1.pos != -1) { //#13900
                $put($1.cws, 0, (~~($1.pos / 10)) - 1); //#13894
                $put($1.cws, 1, ($1.pos % 10) - 1); //#13895
                $1.j = 2; //#13896
                $1.cset = "setb"; //#13897
                $1.mode = 7; //#13898
                break; //#13899
            } //#13899
            if ($1.msglen == 0) { //#13906
                $1.cset = "setb"; //#13903
                $1.mode = 1; //#13904
                break; //#13905
            } //#13905
            if ($1.msglen >= 2) { //#13915
                $k[$j++] = $get($1.msg, 0) == $1.fn1; //#13909
                $k[$j++] = 1; //#13909
                $1.numsscr(); //#13909
                var _5o = $k[--$j]; //#13909
                var _5p = $k[--$j]; //#13909
                $k[$j++] = _5o; //#13909
                $k[$j++] = _5p; //#13909
                $j--; //#13909
                var _5q = $k[--$j]; //#13909
                var _5r = $k[--$j]; //#13909
                if (_5r && (_5q >= 2)) { //#13914
                    $1.cset = "setc"; //#13910
                    $1.mode = 4; //#13911
                    $1.i = 1; //#13912
                    break; //#13913
                } //#13913
            } //#13913
            if ($get($1.msg, 0) == $1.fn1) { //#13922
                $1.cset = "setb"; //#13918
                $1.mode = 3; //#13919
                $1.i = 1; //#13920
                break; //#13921
            } //#13921
            if ($1.msglen >= 2) { //#13968
                $k[$j++] = 0; //#13925
                $1.numsscr(); //#13925
                var _5w = $k[--$j]; //#13925
                var _5x = $k[--$j]; //#13925
                $k[$j++] = _5w; //#13925
                $k[$j++] = _5x; //#13925
                $j--; //#13925
                var _5y = $k[--$j]; //#13925
                if ((_5y >= 2) && ((_5y % 2) == 0)) { //#13929
                    $1.cset = "setc"; //#13926
                    $1.mode = 2; //#13927
                    break; //#13928
                } //#13928
                $k[$j++] = 0; //#13931
                $1.numsscr(); //#13931
                var _5z = $k[--$j]; //#13931
                var _60 = $k[--$j]; //#13931
                $k[$j++] = _5z; //#13931
                $k[$j++] = _60; //#13931
                $j--; //#13931
                var _61 = $k[--$j]; //#13931
                if ((_61 >= 3) && ((_61 % 2) == 1)) { //#13937
                    $k[$j++] = $get($1.msg, 0); //#13932
                    $1.encb(); //#13932
                    $1.cset = "setc"; //#13933
                    $1.mode = 5; //#13934
                    $1.i = 1; //#13935
                    break; //#13936
                } //#13936
                var _67 = $get($1.setb, $get($1.msg, 0)) !== undefined; //#13939
                $k[$j++] = _67; //#13940
                $k[$j++] = 1; //#13940
                $1.numsscr(); //#13940
                var _68 = $k[--$j]; //#13940
                var _69 = $k[--$j]; //#13940
                $k[$j++] = _68; //#13940
                $k[$j++] = _69; //#13940
                $j--; //#13940
                var _6A = $k[--$j]; //#13940
                var _6B = $k[--$j]; //#13940
                if (_6B && ((_6A >= 2) && ((_6A % 2) == 0))) { //#13946
                    $k[$j++] = $get($1.msg, 0); //#13941
                    $1.encb(); //#13941
                    $1.cset = "setc"; //#13942
                    $1.mode = 5; //#13943
                    $1.i = 1; //#13944
                    break; //#13945
                } //#13945
                var _6H = $get($1.setb, $get($1.msg, 0)) !== undefined; //#13948
                $k[$j++] = _6H; //#13949
                $k[$j++] = 1; //#13949
                $1.numsscr(); //#13949
                var _6I = $k[--$j]; //#13949
                var _6J = $k[--$j]; //#13949
                $k[$j++] = _6I; //#13949
                $k[$j++] = _6J; //#13949
                $j--; //#13949
                var _6K = $k[--$j]; //#13949
                var _6L = $k[--$j]; //#13949
                if (_6L && ((_6K >= 3) && ((_6K % 2) == 1))) { //#13956
                    $k[$j++] = $get($1.msg, 0); //#13950
                    $1.encb(); //#13950
                    $k[$j++] = $get($1.msg, 1); //#13951
                    $1.encb(); //#13951
                    $1.cset = "setc"; //#13952
                    $1.mode = 6; //#13953
                    $1.i = 2; //#13954
                    break; //#13955
                } //#13955
                var _6T = $get($1.setb, $get($1.msg, 0)) !== undefined; //#13958
                var _6X = $get($1.setb, $get($1.msg, 1)) !== undefined; //#13959
                $k[$j++] = _6T && _6X; //#13960
                $k[$j++] = 2; //#13960
                $1.numsscr(); //#13960
                var _6Y = $k[--$j]; //#13960
                var _6Z = $k[--$j]; //#13960
                $k[$j++] = _6Y; //#13960
                $k[$j++] = _6Z; //#13960
                $j--; //#13960
                var _6a = $k[--$j]; //#13960
                var _6b = $k[--$j]; //#13960
                if (_6b && ((_6a >= 2) && ((_6a % 2) == 0))) { //#13967
                    $k[$j++] = $get($1.msg, 0); //#13961
                    $1.encb(); //#13961
                    $k[$j++] = $get($1.msg, 1); //#13962
                    $1.encb(); //#13962
                    $1.cset = "setc"; //#13963
                    $1.mode = 6; //#13964
                    $1.i = 2; //#13965
                    break; //#13966
                } //#13966
            } //#13966
            $k[$j++] = 0; //#13970
            $1.abeforeb(); //#13970
            if ($k[--$j]) { //#13974
                $1.cset = "seta"; //#13971
                $1.mode = 0; //#13972
                break; //#13973
            } //#13973
            $1.cset = "setb"; //#13976
            $1.mode = 1; //#13977
            break; //#13978
        } //#13978
        for (;;) { //#14222
            if ($1.i == $1.msglen) { //#13982
                break; //#13982
            } //#13982
            $k[$j++] = $1.i; //#13984
            $1.numsscr(); //#13984
            $1.nums = $k[--$j]; //#13984
            $1.nchars = $k[--$j]; //#13984
            for (;;) { //#14220
                if ($eq($1.cset, "seta")) { //#14061
                    if ($1.i < ($1.msglen - 1)) { //#13998
                        $k[$j++] = $get($1.msg, $1.i); //#13991
                        $1.bnota(); //#13991
                        $k[$j++] = $1.i + 1; //#13992
                        $1.abeforeb(); //#13992
                        var _6t = $k[--$j]; //#13992
                        var _6u = $k[--$j]; //#13992
                        if ((_6u && _6t)) { //#13997
                            $k[$j++] = $1.sb1; //#13993
                            $1.enca(); //#13993
                            $k[$j++] = $get($1.msg, $1.i); //#13994
                            $1.encb(); //#13994
                            $1.i = $1.i + 1; //#13995
                            break; //#13996
                        } //#13996
                    } //#13996
                    if ($1.i < ($1.msglen - 2)) { //#14010
                        $k[$j++] = $get($1.msg, $1.i); //#14001
                        $1.bnota(); //#14001
                        $k[$j++] = $get($1.msg, $1.i + 1); //#14002
                        $1.bnota(); //#14002
                        var _78 = $k[--$j]; //#14002
                        var _79 = $k[--$j]; //#14002
                        $k[$j++] = $an(_79, _78); //#14003
                        $k[$j++] = $1.i + 2; //#14003
                        $1.abeforeb(); //#14003
                        var _7B = $k[--$j]; //#14003
                        var _7C = $k[--$j]; //#14003
                        if ((_7C && _7B)) { //#14009
                            $k[$j++] = $1.sb2; //#14004
                            $1.enca(); //#14004
                            $k[$j++] = $get($1.msg, $1.i); //#14005
                            $1.encb(); //#14005
                            $k[$j++] = $get($1.msg, $1.i + 1); //#14006
                            $1.encb(); //#14006
                            $1.i = $1.i + 2; //#14007
                            break; //#14008
                        } //#14008
                    } //#14008
                    $k[$j++] = $get($1.msg, $1.i); //#14012
                    $1.bnota(); //#14012
                    if ($k[--$j]) { //#14016
                        $k[$j++] = $1.swb; //#14013
                        $1.enca(); //#14013
                        $1.cset = "setb"; //#14014
                        break; //#14015
                    } //#14015
                    if ($1.i < ($1.msglen - 4)) { //#14033
                        var _7X = $get($1.seta, $get($1.msg, $1.i + 4)) !== undefined; //#14020
                        if (($1.nums == 4) && _7X) { //#14032
                            $k[$j++] = $1.sc2; //#14021
                            $1.enca(); //#14021
                            for (var _7Z = 0, _7a = 2; _7Z < _7a; _7Z++) { //#14030
                                if ($get($1.msg, $1.i) == $1.fn1) { //#14028
                                    $k[$j++] = $1.fn1; //#14024
                                    $1.encc(); //#14024
                                    $1.i = $1.i + 1; //#14025
                                } else { //#14028
                                    $k[$j++] = $geti($1.msg, $1.i, 2); //#14027
                                    $1.encc(); //#14027
                                    $1.i = $1.i + 2; //#14028
                                } //#14028
                            } //#14028
                            break; //#14031
                        } //#14031
                    } //#14031
                    if ($1.i < ($1.msglen - 6)) { //#14050
                        var _7s = $get($1.seta, $get($1.msg, $1.i + 6)) !== undefined; //#14037
                        if (($1.nums == 6) && _7s) { //#14049
                            $k[$j++] = $1.sc3; //#14038
                            $1.enca(); //#14038
                            for (var _7u = 0, _7v = 3; _7u < _7v; _7u++) { //#14047
                                if ($get($1.msg, $1.i) == $1.fn1) { //#14045
                                    $k[$j++] = $1.fn1; //#14041
                                    $1.encc(); //#14041
                                    $1.i = $1.i + 1; //#14042
                                } else { //#14045
                                    $k[$j++] = $geti($1.msg, $1.i, 2); //#14044
                                    $1.encc(); //#14044
                                    $1.i = $1.i + 2; //#14045
                                } //#14045
                            } //#14045
                            break; //#14048
                        } //#14048
                    } //#14048
                    if (($1.nums >= 4) && (($1.nums % 2) == 0)) { //#14056
                        $k[$j++] = $1.swc; //#14053
                        $1.enca(); //#14053
                        $1.cset = "setc"; //#14054
                        break; //#14055
                    } //#14055
                    $k[$j++] = $get($1.msg, $1.i); //#14058
                    $1.enca(); //#14058
                    $1.i = $1.i + 1; //#14059
                    break; //#14060
                } //#14060
                if ($eq($1.cset, "setb")) { //#14135
                    if ($1.i < ($1.msglen - 1)) { //#14072
                        $k[$j++] = $get($1.msg, $1.i); //#14065
                        $1.anotb(); //#14065
                        $k[$j++] = $1.i + 1; //#14066
                        $1.bbeforea(); //#14066
                        var _8K = $k[--$j]; //#14066
                        var _8L = $k[--$j]; //#14066
                        if ((_8L && _8K)) { //#14071
                            $k[$j++] = $1.sa1; //#14067
                            $1.encb(); //#14067
                            $k[$j++] = $get($1.msg, $1.i); //#14068
                            $1.enca(); //#14068
                            $1.i = $1.i + 1; //#14069
                            break; //#14070
                        } //#14070
                    } //#14070
                    if ($1.i < ($1.msglen - 2)) { //#14084
                        $k[$j++] = $get($1.msg, $1.i); //#14075
                        $1.anotb(); //#14075
                        $k[$j++] = $get($1.msg, $1.i + 1); //#14076
                        $1.anotb(); //#14076
                        var _8Z = $k[--$j]; //#14076
                        var _8a = $k[--$j]; //#14076
                        $k[$j++] = $an(_8a, _8Z); //#14077
                        $k[$j++] = $1.i + 2; //#14077
                        $1.bbeforea(); //#14077
                        var _8c = $k[--$j]; //#14077
                        var _8d = $k[--$j]; //#14077
                        if ((_8d && _8c)) { //#14083
                            $k[$j++] = $1.sa2; //#14078
                            $1.encb(); //#14078
                            $k[$j++] = $get($1.msg, $1.i); //#14079
                            $1.enca(); //#14079
                            $k[$j++] = $get($1.msg, $1.i + 1); //#14080
                            $1.enca(); //#14080
                            $1.i = $1.i + 2; //#14081
                            break; //#14082
                        } //#14082
                    } //#14082
                    $k[$j++] = $get($1.msg, $1.i); //#14086
                    $1.anotb(); //#14086
                    if ($k[--$j]) { //#14090
                        $k[$j++] = $1.swa; //#14087
                        $1.encb(); //#14087
                        $1.cset = "seta"; //#14088
                        break; //#14089
                    } //#14089
                    if ($1.i < ($1.msglen - 4)) { //#14107
                        var _8y = $get($1.setb, $get($1.msg, $1.i + 4)) !== undefined; //#14094
                        if (($1.nums == 4) && _8y) { //#14106
                            $k[$j++] = $1.sc2; //#14095
                            $1.encb(); //#14095
                            for (var _90 = 0, _91 = 2; _90 < _91; _90++) { //#14104
                                if ($get($1.msg, $1.i) == $1.fn1) { //#14102
                                    $k[$j++] = $1.fn1; //#14098
                                    $1.encc(); //#14098
                                    $1.i = $1.i + 1; //#14099
                                } else { //#14102
                                    $k[$j++] = $geti($1.msg, $1.i, 2); //#14101
                                    $1.encc(); //#14101
                                    $1.i = $1.i + 2; //#14102
                                } //#14102
                            } //#14102
                            break; //#14105
                        } //#14105
                    } //#14105
                    if ($1.i < ($1.msglen - 6)) { //#14124
                        var _9J = $get($1.setb, $get($1.msg, $1.i + 6)) !== undefined; //#14111
                        if (($1.nums == 6) && _9J) { //#14123
                            $k[$j++] = $1.sc3; //#14112
                            $1.encb(); //#14112
                            for (var _9L = 0, _9M = 3; _9L < _9M; _9L++) { //#14121
                                if ($get($1.msg, $1.i) == $1.fn1) { //#14119
                                    $k[$j++] = $1.fn1; //#14115
                                    $1.encc(); //#14115
                                    $1.i = $1.i + 1; //#14116
                                } else { //#14119
                                    $k[$j++] = $geti($1.msg, $1.i, 2); //#14118
                                    $1.encc(); //#14118
                                    $1.i = $1.i + 2; //#14119
                                } //#14119
                            } //#14119
                            break; //#14122
                        } //#14122
                    } //#14122
                    if (($1.nums >= 4) && (($1.nums % 2) == 0)) { //#14130
                        $k[$j++] = $1.swc; //#14127
                        $1.encb(); //#14127
                        $1.cset = "setc"; //#14128
                        break; //#14129
                    } //#14129
                    $k[$j++] = $get($1.msg, $1.i); //#14132
                    $1.encb(); //#14132
                    $1.i = $1.i + 1; //#14133
                    break; //#14134
                } //#14134
                if ($eq($1.cset, "setc")) { //#14218
                    if ($1.nums >= 2) { //#14147
                        if ($get($1.msg, $1.i) == $1.fn1) { //#14144
                            $k[$j++] = $1.fn1; //#14140
                            $1.encc(); //#14140
                            $1.i = $1.i + 1; //#14141
                        } else { //#14144
                            $k[$j++] = $geti($1.msg, $1.i, 2); //#14143
                            $1.encc(); //#14143
                            $1.i = $1.i + 2; //#14144
                        } //#14144
                        break; //#14146
                    } //#14146
                    if ($1.i < ($1.msglen - 1)) { //#14157
                        var _9w = $get($1.setb, $get($1.msg, $1.i)) !== undefined; //#14150
                        $k[$j++] = _9w; //#14151
                        $k[$j++] = $1.i + 1; //#14151
                        $1.numsscr(); //#14151
                        var _9y = $k[--$j]; //#14151
                        var _9z = $k[--$j]; //#14151
                        $k[$j++] = _9y; //#14151
                        $k[$j++] = _9z; //#14151
                        $j--; //#14151
                        var _A0 = $k[--$j]; //#14151
                        var _A1 = $k[--$j]; //#14151
                        if (_A1 && ((_A0 >= 2) && ((_A0 % 2) == 0))) { //#14156
                            $k[$j++] = $1.sb1; //#14152
                            $1.encc(); //#14152
                            $k[$j++] = $get($1.msg, $1.i); //#14153
                            $1.encb(); //#14153
                            $1.i = $1.i + 1; //#14154
                            break; //#14155
                        } //#14155
                    } //#14155
                    if ($1.i < ($1.msglen - 1)) { //#14168
                        var _AD = $get($1.setb, $get($1.msg, $1.i)) !== undefined; //#14160
                        $k[$j++] = _AD; //#14161
                        $k[$j++] = $1.i + 1; //#14161
                        $1.numsscr(); //#14161
                        var _AF = $k[--$j]; //#14161
                        var _AG = $k[--$j]; //#14161
                        $k[$j++] = _AF; //#14161
                        $k[$j++] = _AG; //#14161
                        $j--; //#14161
                        var _AH = $k[--$j]; //#14161
                        var _AI = $k[--$j]; //#14161
                        if (_AI && ((_AH >= 3) && ((_AH % 2) == 1))) { //#14167
                            $k[$j++] = $1.sb2; //#14162
                            $1.encc(); //#14162
                            $k[$j++] = $get($1.msg, $1.i); //#14163
                            $1.encb(); //#14163
                            $k[$j++] = $get($1.msg, $1.i + 1); //#14164
                            $1.encb(); //#14164
                            $1.i = $1.i + 2; //#14165
                            break; //#14166
                        } //#14166
                    } //#14166
                    if ($1.i < ($1.msglen - 2)) { //#14180
                        var _AX = $get($1.setb, $get($1.msg, $1.i)) !== undefined; //#14171
                        var _Ac = $get($1.setb, $get($1.msg, $1.i + 1)) !== undefined; //#14172
                        $k[$j++] = _AX && _Ac; //#14173
                        $k[$j++] = $1.i + 2; //#14173
                        $1.numsscr(); //#14173
                        var _Ae = $k[--$j]; //#14173
                        var _Af = $k[--$j]; //#14173
                        $k[$j++] = _Ae; //#14173
                        $k[$j++] = _Af; //#14173
                        $j--; //#14173
                        var _Ag = $k[--$j]; //#14173
                        var _Ah = $k[--$j]; //#14173
                        if (_Ah && ((_Ag >= 2) && ((_Ag % 2) == 0))) { //#14179
                            $k[$j++] = $1.sb2; //#14174
                            $1.encc(); //#14174
                            $k[$j++] = $get($1.msg, $1.i); //#14175
                            $1.encb(); //#14175
                            $k[$j++] = $get($1.msg, $1.i + 1); //#14176
                            $1.encb(); //#14176
                            $1.i = $1.i + 2; //#14177
                            break; //#14178
                        } //#14178
                    } //#14178
                    if ($1.i < ($1.msglen - 3)) { //#14193
                        var _Aw = $get($1.setb, $get($1.msg, $1.i)) !== undefined; //#14183
                        var _B1 = $get($1.setb, $get($1.msg, $1.i + 1)) !== undefined; //#14184
                        $k[$j++] = _Aw && _B1; //#14185
                        $k[$j++] = $1.i + 2; //#14185
                        $1.numsscr(); //#14185
                        var _B3 = $k[--$j]; //#14185
                        var _B4 = $k[--$j]; //#14185
                        $k[$j++] = _B3; //#14185
                        $k[$j++] = _B4; //#14185
                        $j--; //#14185
                        var _B5 = $k[--$j]; //#14185
                        var _B6 = $k[--$j]; //#14185
                        if (_B6 && ((_B5 >= 3) && ((_B5 % 2) == 1))) { //#14192
                            $k[$j++] = $1.sb3; //#14186
                            $1.encc(); //#14186
                            $k[$j++] = $get($1.msg, $1.i); //#14187
                            $1.encb(); //#14187
                            $k[$j++] = $get($1.msg, $1.i + 1); //#14188
                            $1.encb(); //#14188
                            $k[$j++] = $get($1.msg, $1.i + 2); //#14189
                            $1.encb(); //#14189
                            $1.i = $1.i + 3; //#14190
                            break; //#14191
                        } //#14191
                    } //#14191
                    if ($1.i < ($1.msglen - 3)) { //#14207
                        var _BO = $get($1.setb, $get($1.msg, $1.i)) !== undefined; //#14196
                        var _BT = $get($1.setb, $get($1.msg, $1.i + 1)) !== undefined; //#14197
                        var _BY = $get($1.setb, $get($1.msg, $1.i + 2)) !== undefined; //#14198
                        $k[$j++] = (_BO && _BT) && _BY; //#14199
                        $k[$j++] = $1.i + 3; //#14199
                        $1.numsscr(); //#14199
                        var _Ba = $k[--$j]; //#14199
                        var _Bb = $k[--$j]; //#14199
                        $k[$j++] = _Ba; //#14199
                        $k[$j++] = _Bb; //#14199
                        $j--; //#14199
                        var _Bc = $k[--$j]; //#14199
                        var _Bd = $k[--$j]; //#14199
                        if (_Bd && ((_Bc >= 2) && ((_Bc % 2) == 0))) { //#14206
                            $k[$j++] = $1.sb3; //#14200
                            $1.encc(); //#14200
                            $k[$j++] = $get($1.msg, $1.i); //#14201
                            $1.encb(); //#14201
                            $k[$j++] = $get($1.msg, $1.i + 1); //#14202
                            $1.encb(); //#14202
                            $k[$j++] = $get($1.msg, $1.i + 2); //#14203
                            $1.encb(); //#14203
                            $1.i = $1.i + 3; //#14204
                            break; //#14205
                        } //#14205
                    } //#14205
                    $k[$j++] = $1.i; //#14209
                    $1.abeforeb(); //#14209
                    if ($k[--$j]) { //#14213
                        $k[$j++] = $1.swa; //#14210
                        $1.encc(); //#14210
                        $1.cset = "seta"; //#14211
                        break; //#14212
                    } //#14212
                    $k[$j++] = $1.swb; //#14215
                    $1.encc(); //#14215
                    $1.cset = "setb"; //#14216
                    break; //#14217
                } //#14217
                break; //#14219
            } //#14219
        } //#14219
        $1.cws = $geti($1.cws, 0, $1.j); //#14223
    } //#14223
    if (!bwipp_code16k.$ctx._14246) { //#14246
        (function() { //#14246
            var $ctx = Object.create($1); //#14246
            $ctx.metrics = $a([$a([2, 7]), $a([3, 12]), $a([4, 17]), $a([5, 22]), $a([6, 27]), $a([7, 32]), $a([8, 37]), $a([9, 42]), $a([10, 47]), $a([11, 52]), $a([12, 57]), $a([13, 62]), $a([14, 67]), $a([15, 72]), $a([16, 77])]); //#14245
            for (var _CC in $ctx) {
                $ctx.hasOwnProperty(_CC) && (bwipp_code16k.$ctx[_CC] = $ctx[_CC]);
            } //#14245
            bwipp_code16k.$ctx._14246 = 1; //#14245
        })(); //#14245
    } //#14245
    $1.urows = $1.rows; //#14249
    for (var _CG = 0, _CF = $1.metrics.length - 1; _CG <= _CF; _CG += 1) { //#14259
        $1.i = _CG; //#14251
        $1.m = $get($1.metrics, $1.i); //#14252
        $1.r = $get($1.m, 0); //#14253
        $1.dcws = $get($1.m, 1); //#14254
        $1.okay = true; //#14255
        if (($1.urows != 0) && ($1.urows != $1.r)) { //#14256
            $1.okay = false; //#14256
        } //#14256
        if ($1.cws.length > $1.dcws) { //#14257
            $1.okay = false; //#14257
        } //#14257
        if ($1.okay) { //#14258
            break; //#14258
        } //#14258
    } //#14258
    if (!$1.okay) { //#14263
        $k[$j++] = 'bwipp.code16kNoValidSymbol#14262'; //#14262
        $k[$j++] = "Maximum length exceeded or data too large for given options"; //#14262
        bwipp_raiseerror(); //#14262
    } //#14262
    $k[$j++] = Infinity; //#14266
    $aload($1.cws); //#14266
    for (var _CY = 0, _CZ = $f($1.dcws - $1.cws.length); _CY < _CZ; _CY++) { //#14266
        $k[$j++] = 103; //#14266
    } //#14266
    $1.cws = $a(); //#14266
    $k[$j++] = Infinity; //#14269
    $k[$j++] = $f(($f($1.r - 2) * 7) + $1.mode); //#14269
    $aload($1.cws); //#14269
    $1.cws = $a(); //#14269
    $k[$j++] = 0; //#14272
    for (var _Ch = 0, _Cg = $1.dcws; _Ch <= _Cg; _Ch += 1) { //#14272
        var _Ck = $k[--$j]; //#14272
        $k[$j++] = $f(_Ck + ((_Ch + 2) * $get($1.cws, _Ch))); //#14272
    } //#14272
    $1.c1 = $k[--$j] % 107; //#14273
    $k[$j++] = 0; //#14274
    for (var _Co = 0, _Cn = $1.dcws; _Co <= _Cn; _Co += 1) { //#14274
        var _Cr = $k[--$j]; //#14274
        $k[$j++] = $f(_Cr + ((_Co + 1) * $get($1.cws, _Co))); //#14274
    } //#14274
    $1.c2 = ($f($k[--$j] + ($1.c1 * $f($1.dcws + 2)))) % 107; //#14275
    $k[$j++] = Infinity; //#14276
    $aload($1.cws); //#14276
    $k[$j++] = $1.c1; //#14276
    $k[$j++] = $1.c2; //#14276
    $1.cws = $a(); //#14276
    var _D0 = $get($1.options, 'debugcws') !== undefined; //#14278
    if (_D0) { //#14278
        $k[$j++] = 'bwipp.debugcws#14278'; //#14278
        $k[$j++] = $1.cws; //#14278
        bwipp_raiseerror(); //#14278
    } //#14278
    if (!bwipp_code16k.$ctx._14314) { //#14314
        (function() { //#14314
            var $ctx = Object.create($1); //#14314
            $ctx.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "211214", "211232", "211133"]); //#14299
            $ctx.startencs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112"]); //#14305
            $ctx.stopencsodd = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411"]); //#14309
            $ctx.stopencseven = $a(["2122", "1411", "1132", "1231", "1114", "3112", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411", "3211", "2221"]); //#14313
            for (var _D6 in $ctx) {
                $ctx.hasOwnProperty(_D6) && (bwipp_code16k.$ctx[_D6] = $ctx[_D6]);
            } //#14313
            bwipp_code16k.$ctx._14314 = 1; //#14313
        })(); //#14313
    } //#14313
    if (($1.pos == -1) || (((~~($1.pos / 10)) % 2) == 1)) { //#14319
        $1.stopencs = $1.stopencsodd; //#14317
    } else { //#14319
        $1.stopencs = $1.stopencseven; //#14319
    } //#14319
    $1.rowbits = $a($1.r); //#14323
    for (var _DF = 0, _DE = $f($1.r - 1); _DF <= _DE; _DF += 1) { //#14340
        $1.i = _DF; //#14325
        $k[$j++] = Infinity; //#14334
        $k[$j++] = 10; //#14328
        $forall($get($1.startencs, $1.i), function() { //#14328
            var _DJ = $k[--$j]; //#14328
            $k[$j++] = $f(_DJ - 48); //#14328
        }); //#14328
        var _DM = $geti($1.cws, $1.i * 5, 5); //#14330
        $k[$j++] = 1; //#14332
        for (var _DN = 0, _DO = _DM.length; _DN < _DO; _DN++) { //#14332
            $forall($get($1.encs, $get(_DM, _DN)), function() { //#14331
                var _DS = $k[--$j]; //#14331
                $k[$j++] = $f(_DS - 48); //#14331
            }); //#14331
        } //#14331
        $forall($get($1.stopencs, $1.i), function() { //#14333
            var _DW = $k[--$j]; //#14333
            $k[$j++] = $f(_DW - 48); //#14333
        }); //#14333
        $k[$j++] = 1; //#14334
        $1.sbs = $a(); //#14334
        $k[$j++] = Infinity; //#14336
        var _DY = $1.sbs; //#14337
        $k[$j++] = 1; //#14337
        for (var _DZ = 0, _Da = _DY.length; _DZ < _Da; _DZ++) { //#14337
            var _Dc = $k[--$j]; //#14337
            var _Dd = (_Dc == 0) ? 1 : 0; //#14337
            $k[$j++] = _Dc; //#14337
            for (var _De = 0, _Df = $get(_DY, _DZ); _De < _Df; _De++) { //#14337
                $k[$j++] = _Dd //#14337
            } //#14337
        } //#14337
        $astore($a($counttomark() - 1)); //#14338
        var _Di = $k[--$j]; //#14338
        var _Dj = $k[--$j]; //#14338
        $k[$j++] = _Di; //#14338
        $k[$j++] = _Dj; //#14338
        $j--; //#14338
        var _Dk = $k[--$j]; //#14338
        var _Dl = $k[--$j]; //#14338
        $k[$j++] = _Dk; //#14338
        $k[$j++] = _Dl; //#14338
        $j--; //#14338
        $put($1.rowbits, $1.i, $k[--$j]); //#14339
    } //#14339
    $k[$j++] = Infinity; //#14351
    for (var _Dq = 0, _Dr = 81 * $1.sepheight; _Dq < _Dr; _Dq++) { //#14344
        $k[$j++] = 1; //#14344
    } //#14344
    for (var _Du = 0, _Dt = $f($1.r - 2); _Du <= _Dt; _Du += 1) { //#14349
        $1.i = _Du; //#14346
        for (var _Dw = 0, _Dx = $1.rowheight; _Dw < _Dx; _Dw++) { //#14347
            $aload($get($1.rowbits, $1.i)); //#14347
        } //#14347
        for (var _E2 = 0, _E3 = $1.sepheight; _E2 < _E3; _E2++) { //#14348
            for (var _E4 = 0, _E5 = 10; _E4 < _E5; _E4++) { //#14348
                $k[$j++] = 0; //#14348
            } //#14348
            for (var _E6 = 0, _E7 = 70; _E6 < _E7; _E6++) { //#14348
                $k[$j++] = 1; //#14348
            } //#14348
            $k[$j++] = 0; //#14348
        } //#14348
    } //#14348
    for (var _E9 = 0, _EA = $1.rowheight; _E9 < _EA; _E9++) { //#14350
        $aload($get($1.rowbits, $f($1.r - 1))); //#14350
    } //#14350
    for (var _EF = 0, _EG = 81 * $1.sepheight; _EF < _EG; _EF++) { //#14351
        $k[$j++] = 1; //#14351
    } //#14351
    $1.pixs = $a(); //#14351
    var _EM = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", 81],
        ["pixy", ~~($1.pixs.length / 81)],
        ["height", (~~($1.pixs.length / 81)) / 72],
        ["width", 81 / 72],
        ["opt", $1.options]
    ]); //#14362
    $k[$j++] = _EM; //#14365
    if (!$1.dontdraw) { //#14365
        bwipp_renmatrix(); //#14365
    } //#14365
}

function bwipp_code49() {
    var $1 = Object.create(bwipp_code49.$ctx || (bwipp_code49.$ctx = {})); //#14400
    $1.dontdraw = false; //#14403
    $1.mode = -1; //#14404
    $1.pos = -1; //#14405
    $1.rows = 0; //#14406
    $1.rowheight = 8; //#14407
    $1.sepheight = 1; //#14408
    $1.parse = false; //#14409
    $1.parsefnc = false; //#14410
    $k[$j++] = $1; //#14412
    bwipp_processoptions(); //#14412
    $1.options = $k[--$j]; //#14412
    var _1 = $k[--$j]; //#14413
    $1.barcode = _1; //#14413
    if (!bwipp_code49.$ctx._14419) { //#14419
        (function() { //#14419
            var $ctx = Object.create($1); //#14419
            $ctx.s1 = -1; //#14418
            $ctx.s2 = -2; //#14418
            $ctx.fn1 = -3; //#14418
            $ctx.fn2 = -4; //#14418
            $ctx.fn3 = -5; //#14418
            $ctx.ns = -6; //#14418
            for (var _2 in $ctx) {
                $ctx.hasOwnProperty(_2) && (bwipp_code49.$ctx[_2] = $ctx[_2]);
            } //#14418
            bwipp_code49.$ctx._14419 = 1; //#14418
        })(); //#14418
    } //#14418
    var _8 = new Map([
        ["parse", $1.parse],
        ["parsefnc", $1.parsefnc],
        ["FNC1", $1.fn1],
        ["FNC2", $1.fn2],
        ["FNC3", $1.fn3]
    ]); //#14427
    $1.fncvals = _8; //#14428
    $k[$j++] = 'msg'; //#14429
    $k[$j++] = $1.barcode; //#14429
    $k[$j++] = $1.fncvals; //#14429
    bwipp_parseinput(); //#14429
    var _B = $k[--$j]; //#14429
    $1[$k[--$j]] = _B; //#14429
    $1.msglen = $1.msg.length; //#14430
    if (!bwipp_code49.$ctx._14472) { //#14472
        (function() { //#14472
            var $ctx = Object.create($1); //#14472
            $ctx.charmap = $a(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "-", ".", " ", "$", "/", "+", "%", $ctx.s1, $ctx.s2, $ctx.fn1, $ctx.fn2, $ctx.fn3, $ctx.ns]); //#14440
            $ctx.charvals = new Map; //#14443
            for (var _L = 0; _L <= 48; _L += 1) { //#14449
                $ctx.i = _L; //#14445
                var _O = $get($ctx.charmap, $ctx.i); //#14446
                $k[$j++] = _O; //#14447
                if ($eq($type(_O), 'stringtype')) { //#14447
                    var _R = $get($k[--$j], 0); //#14447
                    $k[$j++] = _R; //#14447
                } //#14447
                $put($ctx.charvals, $k[--$j], $ctx.i); //#14448
            } //#14448
            $ctx.combos = $a(["1 ", "1A", "1B", "1C", "1D", "1E", "1F", "1G", "1H", "1I", "1J", "1K", "1L", "1M", "1N", "1O", "1P", "1Q", "1R", "1S", "1T", "1U", "1V", "1W", "1X", "1Y", "1Z", "11", "12", "13", "14", "15", "  ", "16", "17", "18", " $", " %", "19", "10", "1-", "1.", "1$", " +", "1/", " -", " .", " /", " 0", " 1", " 2", " 3", " 4", " 5", " 6", " 7", " 8", " 9", "1+", "21", "22", "23", "24", "25", "26", " A", " B", " C", " D", " E", " F", " G", " H", " I", " J", " K", " L", " M", " N", " O", " P", " Q", " R", " S", " T", " U", " V", " W", " X", " Y", " Z", "27", "28", "29", "20", "2-", "2.", "2A", "2B", "2C", "2D", "2E", "2F", "2G", "2H", "2I", "2J", "2K", "2L", "2M", "2N", "2O", "2P", "2Q", "2R", "2S", "2T", "2U", "2V", "2W", "2X", "2Y", "2Z", "2$", "2/", "2+", "2%", "2 "]); //#14461
            for (var _W = 0; _W <= 127; _W += 1) { //#14471
                $ctx.i = _W; //#14463
                var _Z = $get($ctx.combos, $ctx.i); //#14464
                $ctx.c1 = $get(_Z, 0); //#14464
                $ctx.c2 = $get(_Z, 1); //#14464
                if ($ctx.c1 == 49) { //#14467
                    $put($ctx.charvals, $ctx.i, $a([$get($ctx.charvals, $ctx.s1), $get($ctx.charvals, $ctx.c2)])); //#14466
                } //#14466
                if ($ctx.c1 == 50) { //#14470
                    $put($ctx.charvals, $ctx.i, $a([$get($ctx.charvals, $ctx.s2), $get($ctx.charvals, $ctx.c2)])); //#14469
                } //#14469
            } //#14469
            for (var _w in $ctx) {
                $ctx.hasOwnProperty(_w) && (bwipp_code49.$ctx[_w] = $ctx[_w]);
            } //#14469
            bwipp_code49.$ctx._14472 = 1; //#14469
        })(); //#14469
    } //#14469
    $1.encodealpha = function() {
        var _z = $get($1.charvals, $k[--$j]); //#14475
        $k[$j++] = _z; //#14476
        if ($ne($type(_z), 'arraytype')) { //#14476
            $astore($a(1)); //#14476
        } //#14476
        var _12 = $k[--$j]; //#14477
        $puti($1.cws, $1.j, _12); //#14477
        $1.j = _12.length + $1.j; //#14478
    }; //#14478
    $1.base48 = function() {
        var _16 = $k[--$j]; //#14482
        $k[$j++] = 0; //#14482
        $forall(_16, function() { //#14482
            var _17 = $k[--$j]; //#14482
            var _18 = $k[--$j]; //#14482
            $k[$j++] = $f($f(_17 - 48) + (_18 * 10)); //#14482
        }); //#14482
        $k[$j++] = Infinity; //#14483
        var _19 = $k[--$j]; //#14483
        var _1A = $k[--$j]; //#14483
        var _1B = $k[--$j]; //#14483
        $k[$j++] = _19; //#14483
        $k[$j++] = _1A; //#14483
        for (var _1C = 0, _1D = $f(_1B - 1); _1C < _1D; _1C++) { //#14483
            var _1E = $k[--$j]; //#14483
            $k[$j++] = _1E % 48; //#14483
            $k[$j++] = ~~(_1E / 48); //#14483
        } //#14483
        var _1F = $a(); //#14483
        $k[$j++] = _1F; //#14484
        $k[$j++] = Infinity; //#14484
        var _1G = $k[--$j]; //#14484
        var _1H = $k[--$j]; //#14484
        $k[$j++] = _1G; //#14484
        $k[$j++] = _1H; //#14484
        for (var _1I = _1H.length - 1; _1I >= 0; _1I -= 1) { //#14484
            var _1J = $k[--$j]; //#14484
            $k[$j++] = $get(_1J, _1I); //#14484
            $k[$j++] = _1J; //#14484
        } //#14484
        $j--; //#14484
        var _1L = $a(); //#14484
        $puti($1.cws, $1.j, _1L); //#14485
        $1.j = _1L.length + $1.j; //#14486
    }; //#14486
    $1.encodenumeric = function() {
        $1.nums = $k[--$j]; //#14490
        var _1R = $1.nums.length; //#14491
        var _1S = _1R % 5; //#14491
        $k[$j++] = 'pre'; //#14491
        $k[$j++] = _1R; //#14491
        $k[$j++] = _1S; //#14491
        if (_1S != 2) { //#14491
            var _1T = $k[--$j]; //#14491
            var _1U = $k[--$j]; //#14491
            $k[$j++] = $f(_1U - _1T); //#14491
        } else { //#14491
            var _1V = $k[--$j]; //#14491
            var _1W = $k[--$j]; //#14491
            $k[$j++] = $f($f(_1W - _1V) - 5); //#14491
        } //#14491
        var _1X = $k[--$j]; //#14491
        $1[$k[--$j]] = _1X; //#14491
        for (var _1b = 0, _1a = $f($1.pre - 1); _1b <= _1a; _1b += 5) { //#14492
            $k[$j++] = 3; //#14492
            $k[$j++] = $geti($1.nums, _1b, 5); //#14492
            $1.base48(); //#14492
        } //#14492
        $1.nums = $geti($1.nums, $1.pre, $f($1.nums.length - $1.pre)); //#14493
        var _1k = $1.nums.length; //#14495
        $k[$j++] = _1k; //#14495
        if (_1k == 1) { //#14495
            $k[$j++] = $get($1.nums, $1.i); //#14495
            $1.encodealpha(); //#14495
        } //#14495
        var _1o = $k[--$j]; //#14496
        $k[$j++] = _1o; //#14496
        if (_1o == 3) { //#14496
            $k[$j++] = 2; //#14496
            $k[$j++] = $1.nums; //#14496
            $1.base48(); //#14496
        } //#14496
        var _1q = $k[--$j]; //#14497
        $k[$j++] = _1q; //#14497
        if (_1q == 4) { //#14497
            $k[$j++] = 3; //#14497
            $k[$j++] = Infinity; //#14497
            $k[$j++] = 49; //#14497
            $k[$j++] = 48; //#14497
            $aload($1.nums); //#14497
            var _1s = $a(); //#14497
            $k[$j++] = _1s; //#14497
            $1.base48(); //#14497
        } //#14497
        if ($k[--$j] == 7) { //#14501
            $k[$j++] = 3; //#14499
            $k[$j++] = Infinity; //#14499
            $k[$j++] = 49; //#14499
            $k[$j++] = 48; //#14499
            $aload($geti($1.nums, 0, 4)); //#14499
            var _1w = $a(); //#14499
            $k[$j++] = _1w; //#14499
            $1.base48(); //#14499
            $k[$j++] = 2; //#14500
            $k[$j++] = $geti($1.nums, 4, 3); //#14500
            $1.base48(); //#14500
        } //#14500
    }; //#14500
    $k[$j++] = Infinity; //#14505
    for (var _20 = 0, _21 = $1.msglen; _20 < _21; _20++) { //#14505
        $k[$j++] = 0; //#14505
    } //#14505
    $k[$j++] = 0; //#14505
    $1.numericruns = $a(); //#14505
    for (var _24 = $1.msglen - 1; _24 >= 0; _24 -= 1) { //#14514
        $1.i = _24; //#14507
        var _27 = $get($1.msg, $1.i); //#14508
        if ((_27 >= 48) && (_27 <= 57)) { //#14512
            $put($1.numericruns, $1.i, $f($get($1.numericruns, $1.i + 1) + 1)); //#14510
        } else { //#14512
            $put($1.numericruns, $1.i, 0); //#14512
        } //#14512
    } //#14512
    if ($1.mode == -1) { //#14526
        for (;;) { //#14525
            if ($1.pos != -1) { //#14519
                $1.mode = 3; //#14519
                break; //#14519
            } //#14519
            if ($get($1.numericruns, 0) >= 5) { //#14520
                $1.mode = 2; //#14520
                break; //#14520
            } //#14520
            var _2M = $get($1.charvals, $get($1.msg, 0)); //#14521
            $k[$j++] = _2M; //#14522
            if ($ne($type(_2M), 'arraytype')) { //#14522
                $j--; //#14522
                $1.mode = 0; //#14522
                break; //#14522
            } //#14522
            var _2Q = ($get($k[--$j], 0) == 43) ? 4 : 5; //#14523
            $1.mode = _2Q; //#14523
            break; //#14524
        } //#14524
    } //#14524
    $1.cws = $a(($1.msglen * 2) + 1); //#14528
    $1.method = "alpha"; //#14529
    $1.i = -1; //#14529
    $1.j = -1; //#14529
    if (!bwipp_code49.$ctx._14542) { //#14542
        (function() { //#14542
            var $ctx = Object.create($1); //#14542
            $ctx.posval = $a([12, 22, 13, 23, 33, 14, 24, 34, 44, 15, 25, 35, 45, 55, 16, 26, 36, 46, 56, 66, 17, 27, 37, 47, 57, 67, 77, 18, 28, 38, 48, 58, 68, 78, 88, 19, 29, 39, 49, 59, 69, 79, 89, 99]); //#14541
            for (var _2U in $ctx) {
                $ctx.hasOwnProperty(_2U) && (bwipp_code49.$ctx[_2U] = $ctx[_2U]);
            } //#14541
            bwipp_code49.$ctx._14542 = 1; //#14541
        })(); //#14541
    } //#14541
    if (($1.mode == 0) || ($1.mode == 1)) { //#14545
        $1.method = "alpha"; //#14545
        $1.i = 0; //#14545
        $1.j = 0; //#14545
    } //#14545
    if ($1.mode == 2) { //#14546
        $1.method = "numeric"; //#14546
        $1.i = 0; //#14546
        $1.j = 0; //#14546
    } //#14546
    if ($1.mode == 3) { //#14550
        $k[$j++] = $1.cws; //#14548
        $k[$j++] = 0; //#14548
        for (var _2a = 0; _2a <= 43; _2a += 1) { //#14548
            $k[$j++] = _2a; //#14548
            if ($get($1.posval, _2a) != $1.pos) { //#14548
                $j--; //#14548
            } //#14548
        } //#14548
        var _2e = $k[--$j]; //#14548
        var _2f = $k[--$j]; //#14548
        $put($k[--$j], _2f, $f(_2e + 1)); //#14548
        $1.method = "alpha"; //#14549
        $1.i = 0; //#14549
        $1.j = 1; //#14549
    } //#14549
    if (($1.mode == 4) || ($1.mode == 5)) { //#14554
        $put($1.cws, 0, $get($get($1.charvals, $get($1.msg, 0)), 1)); //#14552
        $1.method = "alpha"; //#14553
        $1.i = 1; //#14553
        $1.j = 1; //#14553
    } //#14553
    for (;;) { //#14581
        if ($1.i == $1.msglen) { //#14558
            break; //#14558
        } //#14558
        for (;;) { //#14580
            if ($eq($1.method, "alpha")) { //#14569
                if ($get($1.numericruns, $1.i) >= 5) { //#14565
                    $k[$j++] = $1.ns; //#14562
                    $1.encodealpha(); //#14562
                    $1.method = "numeric"; //#14563
                    break; //#14564
                } //#14564
                $k[$j++] = $get($1.msg, $1.i); //#14566
                $1.encodealpha(); //#14566
                $1.i = $1.i + 1; //#14567
                break; //#14568
            } //#14568
            if ($eq($1.method, "numeric")) { //#14579
                if ($get($1.numericruns, $1.i) < 5) { //#14575
                    $k[$j++] = $1.ns; //#14572
                    $1.encodealpha(); //#14572
                    $1.method = "alpha"; //#14573
                    break; //#14574
                } //#14574
                $k[$j++] = $geti($1.msg, $1.i, $get($1.numericruns, $1.i)); //#14576
                $1.encodenumeric(); //#14576
                $1.i = $f($1.i + $get($1.numericruns, $1.i)); //#14577
                break; //#14578
            } //#14578
        } //#14578
    } //#14578
    $1.cws = $geti($1.cws, 0, $1.j); //#14582
    if (!bwipp_code49.$ctx._14596) { //#14596
        (function() { //#14596
            var $ctx = Object.create($1); //#14596
            $ctx.metrics = $a([$a([2, 9]), $a([3, 16]), $a([4, 23]), $a([5, 30]), $a([6, 37]), $a([7, 42]), $a([8, 49])]); //#14595
            for (var _3Q in $ctx) {
                $ctx.hasOwnProperty(_3Q) && (bwipp_code49.$ctx[_3Q] = $ctx[_3Q]);
            } //#14595
            bwipp_code49.$ctx._14596 = 1; //#14595
        })(); //#14595
    } //#14595
    $1.urows = $1.rows; //#14599
    $1.i = 0; //#14600
    for (;;) { //#14610
        $1.m = $get($1.metrics, $1.i); //#14602
        $1.r = $get($1.m, 0); //#14603
        $1.dcws = $get($1.m, 1); //#14604
        $1.okay = true; //#14605
        if (($1.urows != 0) && ($1.urows != $1.r)) { //#14606
            $1.okay = false; //#14606
        } //#14606
        if ($1.cws.length > $1.dcws) { //#14607
            $1.okay = false; //#14607
        } //#14607
        if ($1.okay) { //#14608
            break; //#14608
        } //#14608
        $1.i = $1.i + 1; //#14609
    } //#14609
    $k[$j++] = Infinity; //#14613
    $aload($1.cws); //#14613
    for (var _3j = 0, _3k = $f($1.dcws - $1.cws.length); _3j < _3k; _3j++) { //#14613
        $k[$j++] = 48; //#14613
    } //#14613
    $1.cws = $a(); //#14613
    $1.ccs = $a($1.r * 8); //#14616
    $1.j = 0; //#14617
    for (var _3q = 0, _3p = $f($1.r - 2); _3q <= _3p; _3q += 1) { //#14624
        $1.i = _3q; //#14619
        $1.cc = $geti($1.cws, $1.j, 7); //#14620
        $puti($1.ccs, $1.i * 8, $1.cc); //#14621
        var _3z = $1.cc; //#14622
        $k[$j++] = $1.ccs; //#14622
        $k[$j++] = ($1.i * 8) + 7; //#14622
        $k[$j++] = 0; //#14622
        for (var _40 = 0, _41 = _3z.length; _40 < _41; _40++) { //#14622
            var _43 = $k[--$j]; //#14622
            $k[$j++] = $f(_43 + $get(_3z, _40)); //#14622
        } //#14622
        var _44 = $k[--$j]; //#14622
        var _45 = $k[--$j]; //#14622
        $put($k[--$j], _45, _44 % 49); //#14622
        $1.j = $1.j + 7; //#14623
    } //#14623
    if ($1.j < $1.dcws) { //#14627
        $puti($1.ccs, $1.ccs.length - 8, $geti($1.cws, $1.j, $f($1.dcws - $1.j))); //#14626
    } //#14626
    $1.cr7 = $f(($f($1.r - 2) * 7) + $1.mode); //#14630
    $put($1.ccs, $1.ccs.length - 2, $1.cr7); //#14631
    if (!bwipp_code49.$ctx._14640) { //#14640
        (function() { //#14640
            var $ctx = Object.create($1); //#14640
            var _4M = $a([1, 9, 31, 26, 2, 12, 17, 23, 37, 18, 22, 6, 27, 44, 15, 43, 39, 11, 13, 5, 41, 33, 36, 8, 4, 32, 3, 19, 40, 25, 29, 10, 24, 30]); //#14636
            $k[$j++] = _4M; //#14637
            $k[$j++] = _4M; //#14637
            $k[$j++] = Infinity; //#14637
            var _4N = $k[--$j]; //#14637
            var _4P = $geti($k[--$j], 0, 32); //#14637
            $k[$j++] = _4N; //#14637
            $k[$j++] = 20; //#14637
            $aload(_4P); //#14637
            $ctx.weightx = $a(); //#14637
            var _4R = $k[--$j]; //#14638
            $k[$j++] = _4R; //#14638
            $k[$j++] = _4R; //#14638
            $k[$j++] = Infinity; //#14638
            var _4S = $k[--$j]; //#14638
            var _4U = $geti($k[--$j], 1, 32); //#14638
            $k[$j++] = _4S; //#14638
            $k[$j++] = 16; //#14638
            $aload(_4U); //#14638
            $ctx.weighty = $a(); //#14638
            $k[$j++] = Infinity; //#14639
            var _4W = $k[--$j]; //#14639
            var _4Y = $geti($k[--$j], 2, 32); //#14639
            $k[$j++] = _4W; //#14639
            $k[$j++] = 38; //#14639
            $aload(_4Y); //#14639
            $ctx.weightz = $a(); //#14639
            for (var _4a in $ctx) {
                $ctx.hasOwnProperty(_4a) && (bwipp_code49.$ctx[_4a] = $ctx[_4a]);
            } //#14639
            bwipp_code49.$ctx._14640 = 1; //#14639
        })(); //#14639
    } //#14639
    $1.calccheck = function() {
        $1.weights = $k[--$j]; //#14642
        $1.score = 0; //#14643
        for (var _4e = 0, _4d = (~~(($f($1.r - 1) * 8) / 2)) - 1; _4e <= _4d; _4e += 1) { //#14648
            $1.i = _4e; //#14645
            $1.score = $f((($f(($get($1.ccs, $1.i * 2) * 49) + $get($1.ccs, ($1.i * 2) + 1))) * $get($1.weights, $1.i + 1)) + $1.score); //#14647
        } //#14647
        $k[$j++] = $1.score; //#14649
    }; //#14649
    $1.lastrow = $geti($1.ccs, $1.ccs.length - 8, 8); //#14651
    if ($1.r >= 7) { //#14658
        $k[$j++] = $1.cr7 * $get($1.weightz, 0); //#14655
        $k[$j++] = $1.weightz; //#14655
        $1.calccheck(); //#14655
        var _4y = $k[--$j]; //#14655
        var _50 = $f($k[--$j] + _4y) % 2401; //#14656
        $k[$j++] = ~~(_50 / 49); //#14656
        $k[$j++] = _50 % 49; //#14656
        $astore($a(2)); //#14656
        $puti($1.lastrow, 0, $k[--$j]); //#14657
    } //#14657
    $1.wr1 = $f(($get($1.lastrow, 0) * 49) + $get($1.lastrow, 1)); //#14659
    $k[$j++] = $1.cr7 * $get($1.weighty, 0); //#14662
    $k[$j++] = $1.weighty; //#14662
    $1.calccheck(); //#14662
    var _5C = $k[--$j]; //#14662
    var _5I = ($f($f($k[--$j] + _5C) + ($1.wr1 * $get($1.weighty, $f(($1.r * 4) - 3))))) % 2401; //#14664
    $1.wr2 = _5I; //#14664
    $k[$j++] = ~~(_5I / 49); //#14665
    $k[$j++] = _5I % 49; //#14665
    $astore($a(2)); //#14665
    $puti($1.lastrow, 2, $k[--$j]); //#14666
    $k[$j++] = $1.cr7 * $get($1.weightx, 0); //#14669
    $k[$j++] = $1.weightx; //#14669
    $1.calccheck(); //#14669
    var _5Q = $k[--$j]; //#14669
    var _5a = ($f(($f($f($k[--$j] + _5Q) + ($1.wr1 * $get($1.weightx, $f(($1.r * 4) - 3))))) + ($1.wr2 * $get($1.weightx, $f(($1.r * 4) - 2))))) % 2401; //#14673
    $k[$j++] = ~~(_5a / 49); //#14673
    $k[$j++] = _5a % 49; //#14673
    $astore($a(2)); //#14673
    $puti($1.lastrow, 4, $k[--$j]); //#14674
    var _5g = $geti($1.ccs, $1.ccs.length - 8, 7); //#14677
    $k[$j++] = 0; //#14677
    for (var _5h = 0, _5i = _5g.length; _5h < _5i; _5h++) { //#14677
        var _5k = $k[--$j]; //#14677
        $k[$j++] = $f(_5k + $get(_5g, _5h)); //#14677
    } //#14677
    $put($1.ccs, $1.ccs.length - 1, $k[--$j] % 49); //#14678
    if (!bwipp_code49.$ctx._15376) { //#15376
        (function() { //#15376
            var $ctx = Object.create($1); //#15376
            $ctx.patterns = $a([$a(["11521132", "25112131", "14212132", "25121221", "14221222", "12412132", "23321221", "12421222", "21521221", "15112222", "15121312", "13312222", "24221311", "13321312", "11512222", "22421311", "11521312", "25112311", "14212312", "23312311", "12412312", "21512311", "16121131", "14321131", "12521131", "15212131", "15221221", "13412131", "13421221", "11612131", "16112221", "16121311", "14312221", "14321311", "12512221", "12521311", "15212311", "13412311", "11612311", "11131135", "31131133", "51131131", "21122134", "41122132", "21131224", "41131222", "11113135", "31113133", "51113131", "11122225", "31122223", "51122221", "11131315", "31131313", "51131311", "21113224", "41113222", "21122314", "41122312", "11113315", "31113313", "51113311", "12131134", "32131132", "21231133", "41231131", "22122133", "42122131", "11222134", "22131223", "42131221", "11231224", "31231222", "12113134", "32113132", "12122224", "32122222", "12131314", "32131312", "21231313", "41231311", "22113223", "42113221", "11213224", "22122313", "42122311", "11222314", "31222312", "12113314", "32113312", "21213313", "41213311", "13131133", "33131131", "22231132", "11331133", "31331131", "23122132", "12222133", "23131222", "12231223", "32231221", "21331222", "13113133", "33113131", "13122223", "33122221", "11313133", "13131313", "33131311", "11322223", "22231312", "11331313", "31331311", "23113222", "12213223", "23122312", "12222313", "32222311", "21322312", "13113313", "33113311", "22213312", "11313313", "31313311", "14131132", "23231131", "12331132", "21431131", "24122131", "13222132", "24131221", "13231222", "11422132", "22331221", "11431222", "14113132", "14122222", "12313132", "14131312", "12322222", "23231311", "12331312", "21431311", "24113221", "13213222", "24122311", "13222312", "11413222", "22322311", "11422312", "14113312", "23213311", "12313312", "21413311", "15131131", "13331131", "14222131", "14231221", "12422131", "12431221", "15113131", "15122221", "13313131", "15131311", "13322221", "11513131", "13331311", "11522221", "14213221", "14222311", "12413221", "12422311", "15113311", "13313311", "11513311", "11141134", "31141132", "21132133", "41132131", "21141223", "41141221", "11123134", "31123132", "11132224", "31132222", "11141314", "31141312", "21114133", "41114131", "21123223", "41123221", "21132313", "41132311", "11114224", "31114222", "11123314", "31123312", "21114313", "41114311", "12141133", "32141131", "21241132", "22132132", "11232133", "22141222", "11241223", "31241221", "12123133", "32123131", "12132223", "32132221", "12141313", "32141311", "21241312", "22114132", "11214133", "22123222", "11223223", "22132312", "11232313", "31232311", "12114223", "32114221", "12123313", "32123311", "21223312", "22114312", "11214313", "31214311", "13141132", "22241131", "11341132", "23132131", "12232132", "23141221", "12241222", "21341221", "13123132", "13132222", "11323132", "13141312", "11332222", "22241311", "11341312", "23114131", "12214132", "23123221", "12223222", "23132311", "12232312", "21332311", "13114222", "13123312", "11314222", "22223311", "11323312", "23114311", "12214312", "21314311", "14141131", "12341131", "13232131", "13241221", "11432131", "14123131", "14132221", "12323131", "14141311", "12332221", "12341311", "13214131", "13223221", "11414131", "13232311", "11423221", "11432311", "14114221", "14123311", "12314221", "12323311", "13214311", "11414311", "11151133", "31151131", "21142132", "21151222", "11133133", "31133131", "11142223", "31142221", "11151313", "31151311", "21124132", "21133222", "21142312", "11115133", "31115131", "11124223", "31124221", "11133313", "31133311", "21115222", "21124312", "12151132", "21251131", "22142131", "11242132", "22151221", "11251222", "12133132", "12142222", "12151312", "21251311", "22124131", "11224132", "22133221", "11233222", "22142311", "11242312", "12115132", "12124222", "12133312", "21233311", "22115221", "11215222", "22124311", "11224312", "13151131", "12242131", "12251221", "13133131", "13142221", "11333131", "13151311", "11342221", "12224131", "12233221", "12242311", "13115131", "13124221", "11315131", "13133311", "11324221", "11333311", "12215221", "12224311", "11161132", "21152131", "21161221", "11143132", "11152222", "11161312", "21134131", "21143221", "21152311", "11125132", "11134222", "11143312", "21116131", "21125221", "21134311", "12161131", "11252131", "12143131", "12152221", "12161311", "11234131", "11243221", "11252311", "12125131", "12134221", "12143311", "11216131", "11225221", "11234311", "11111236", "31111234", "51111232", "21111325", "41111323", "61111321", "11111416", "31111414", "51111412", "31211143", "51211141", "12111235", "32111233", "52111231", "21211234", "41211232", "22111324", "42111322", "11211325", "31211323", "51211321", "12111415", "32111413", "52111411", "21211414", "41211412", "12211144", "32211142", "21311143", "41311141", "13111234", "33111232", "22211233", "42211231", "11311234", "31311232", "23111323", "43111321", "12211324", "32211322", "21311323", "41311321", "13111414", "33111412", "22211413", "42211411", "11311414", "31311412", "13211143", "33211141", "22311142", "11411143", "31411141", "14111233", "34111231", "23211232", "12311233", "32311231", "21411232", "24111322", "13211323", "33211321", "22311322", "11411323", "31411321", "14111413", "34111411", "23211412", "12311413", "32311411", "21411412", "14211142", "23311141", "12411142", "21511141", "15111232", "24211231", "13311232", "22411231", "11511232", "25111321", "14211322", "23311321", "12411322", "21511321", "15111412", "24211411", "13311412", "22411411", "11511412", "15211141", "13411141", "11611141", "16111231", "14311231", "12511231", "15211321", "13411321", "11611321", "16111411", "14311411", "12511411", "21121144", "41121142", "11112145", "31112143", "51112141", "11121235", "31121233", "51121231", "21112234", "41112232", "21121324", "41121322", "11112325", "31112323", "51112321", "11121415", "31121413", "51121411", "21112414", "41112412", "22121143", "42121141", "11221144", "31221142", "12112144", "32112142", "12121234", "32121232", "21221233", "41221231", "22112233", "42112231", "11212234", "22121323", "42121321", "11221324", "31221322", "12112324", "32112322", "12121414", "32121412", "21221413", "41221411", "22112413", "42112411", "11212414", "31212412", "23121142", "12221143", "32221141", "21321142", "13112143", "33112141", "13121233", "33121231", "11312143", "22221232", "11321233", "31321231", "23112232", "12212233", "23121322", "12221323", "32221321", "21321322", "13112323", "33112321", "13121413", "33121411", "11312323", "22221412", "11321413", "31321411", "23112412", "12212413", "32212411", "21312412", "24121141", "13221142", "22321141", "11421142", "14112142", "14121232", "12312142", "23221231", "12321232", "21421231", "24112231", "13212232", "24121321", "13221322", "11412232", "22321321", "11421322", "14112322", "14121412", "12312322", "23221411", "12321412", "21421411", "24112411", "13212412", "22312411", "11412412", "14221141", "12421141", "15112141", "15121231", "13312141", "13321231", "11512141", "11521231", "14212231", "14221321", "12412231", "12421321", "15112321", "15121411", "13312321", "13321411", "11512321", "11521411", "14212411", "12412411", "21131143", "41131141", "11122144", "31122142", "11131234", "31131232", "21113143", "41113141", "21122233", "41122231", "21131323", "41131321", "11113234", "31113232", "11122324", "31122322", "11131414", "31131412", "21113323", "41113321", "21122413", "41122411", "11113414", "31113412", "22131142", "11231143", "31231141", "12122143", "32122141", "12131233", "32131231", "21231232", "22113142", "11213143", "22122232", "11222233", "22131322", "11231323", "31231321", "12113233", "32113231", "12122323", "32122321", "12131413", "32131411", "21231412", "22113322", "11213323", "22122412", "11222413", "31222411", "12113413", "32113411", "21213412", "23131141", "12231142", "21331141", "13122142", "13131232", "11322142", "22231231", "11331232", "23113141", "12213142", "23122231", "12222232", "23131321", "12231322", "21331321", "13113232", "13122322", "11313232", "13131412", "11322322", "22231411", "11331412", "23113321", "12213322", "23122411", "12222412", "21322411", "13113412", "22213411", "11313412", "13231141", "11431141", "14122141", "14131231", "12322141", "12331231", "13213141", "13222231", "11413141", "13231321", "11422231", "11431321", "14113231", "14122321", "12313231", "14131411", "12322321", "12331411", "13213321", "13222411", "11413321", "11422411", "14113411", "12313411", "21141142", "11132143", "31132141", "11141233", "31141231", "21123142", "21132232", "21141322", "11114143", "31114141", "11123233", "31123231", "11132323", "31132321", "11141413", "31141411", "21114232", "21123322", "21132412", "11114323", "31114321", "11123413", "31123411", "22141141", "11241142", "12132142", "12141232", "21241231", "22123141", "11223142", "22132231", "11232232", "22141321", "11241322", "12114142", "12123232", "12132322", "12141412", "21241411", "22114231", "11214232", "22123321", "11223322", "22132411", "11232412", "12114322", "12123412", "21223411", "12241141", "13132141", "13141231", "11332141", "11341231", "12223141", "12232231", "12241321", "13114141", "13123231", "11314141", "13132321", "11323231", "13141411", "11332321", "11341411", "12214231", "12223321", "12232411", "13114321", "13123411", "11314321", "11323411", "21151141", "11142142", "11151232", "21133141", "21142231", "21151321", "11124142", "11133232", "11142322", "11151412", "21115141", "21124231", "21133321", "21142411", "11115232", "11124322", "11133412", "11251141", "12142141", "12151231", "11233141", "11242231", "11251321", "12124141", "12133231", "12142321", "12151411", "11215141", "11224231", "11233321", "11242411", "12115231", "12124321", "12133411", "11152141", "11161231", "11134141", "11143231", "11152321", "11161411", "11116141", "11125231", "11134321", "11143411", "21111244", "41111242", "11111335", "31111333", "51111331", "21111424", "41111422", "11111515", "31111513", "51111511", "21211153", "41211151", "22111243", "42111241", "11211244", "31211242", "12111334", "32111332", "21211333", "41211331", "22111423", "42111421", "11211424", "31211422", "12111514", "32111512", "21211513", "41211511", "22211152", "11311153", "31311151", "23111242", "12211243", "32211241", "21311242", "13111333", "33111331", "22211332", "11311333", "31311331", "23111422", "12211423", "32211421", "21311422", "13111513", "33111511", "22211512", "11311513", "31311511", "23211151", "12311152", "21411151", "24111241", "13211242", "22311241", "11411242", "14111332", "23211331", "12311332", "21411331", "24111421", "13211422", "22311421", "11411422", "14111512", "23211511", "12311512", "21411511", "13311151", "11511151", "14211241", "12411241", "15111331", "13311331", "11511331", "14211421", "12411421", "15111511", "13311511", "11511511", "31121152", "21112153", "41112151", "21121243", "41121241", "11112244", "31112242", "11121334", "31121332", "21112333", "41112331", "21121423", "41121421", "11112424", "31112422", "11121514", "31121512", "21112513", "41112511", "12121153", "32121151", "21221152", "22112152", "11212153", "22121242", "11221243", "31221241", "12112243", "32112241", "12121333", "32121331", "21221332", "22112332", "11212333", "22121422", "11221423", "31221421", "12112423", "32112421", "12121513", "32121511", "21221512", "22112512", "11212513", "31212511", "13121152", "22221151", "11321152", "23112151", "12212152", "23121241", "12221242", "21321241", "13112242", "13121332", "11312242", "22221331", "11321332", "23112331", "12212332", "23121421", "12221422", "21321421", "13112422", "13121512", "11312422", "22221511", "11321512", "23112511", "12212512", "21312511", "14121151", "12321151", "13212151", "13221241", "11412151", "11421241", "14112241", "14121331", "12312241", "12321331", "13212331", "13221421", "11412331", "11421421", "14112421", "14121511", "12312421", "12321511", "13212511", "11412511", "11131153", "31131151", "21122152", "21131242", "11113153", "31113151", "11122243", "31122241", "11131333", "31131331", "21113242", "21122332", "21131422", "11113333", "31113331", "11122423", "31122421", "11131513", "31131511", "21113422", "21122512", "12131152", "21231151", "22122151", "11222152", "22131241", "11231242", "12113152", "12122242", "12131332", "21231331", "22113241", "11213242", "22122331", "11222332", "22131421", "11231422", "12113332", "12122422", "12131512", "21231511", "22113421", "11213422", "22122511", "11222512", "13131151", "11331151", "12222151", "12231241", "13113151", "13122241", "11313151", "13131331", "11322241", "11331331", "12213241", "12222331", "12231421", "13113331", "13122421", "11313331", "13131511", "11322421", "11331511", "12213421", "12222511", "11141152", "21132151", "21141241", "11123152", "11132242", "11141332", "21114151", "21123241", "21132331", "21141421", "11114242", "11123332", "11132422", "11141512", "21114331", "21123421", "21132511", "12141151", "11232151", "11241241", "12123151", "12132241", "12141331", "11214151", "11223241", "11232331", "11241421", "12114241", "12123331", "12132421", "12141511", "11214331", "11223421", "11232511", "11151151", "11133151", "11142241", "11151331", "11115151", "11124241", "11133331", "11142421", "11151511", "11111254", "31111252", "21111343", "41111341", "11111434", "31111432", "21111523", "41111521", "11111614", "31111612", "31211161", "12111253", "32111251", "21211252", "22111342", "11211343", "31211341", "12111433", "32111431", "21211432", "22111522", "11211523", "31211521", "12111613", "32111611", "21211612", "12211162", "21311161", "13111252", "22211251", "11311252", "23111341", "12211342", "21311341", "13111432", "22211431", "11311432", "23111521", "12211522", "21311521", "13111612", "22211611", "11311612", "13211161", "11411161", "14111251", "12311251", "13211341", "11411341", "14111431", "12311431", "13211521", "11411521", "14111611", "12311611", "21121162", "11112163", "31112161", "11121253", "31121251", "21112252", "21121342", "11112343", "31112341", "11121433", "31121431", "21112432", "21121522", "11112523", "31112521", "11121613", "31121611", "22121161", "11221162", "12112162", "12121252", "21221251", "22112251", "11212252", "22121341", "11221342", "12112342", "12121432", "21221431", "22112431", "11212432", "22121521", "11221522", "12112522", "12121612", "21221611", "12221161", "13112161", "13121251", "11312161", "11321251", "32121115", "52121113", "21221116", "41221114", "61221112", "22112116", "42112114", "31212115", "51212113", "13121116", "33121114", "22221115", "42221113", "11321116", "31321114", "51321112", "23112115", "43112113", "12212116", "32212114", "52212112", "21312115", "41312113", "61312111", "14121115", "34121113", "23221114", "43221112", "12321115", "32321113", "52321111", "21421114", "41421112", "24112114", "13212115", "33212113", "22312114", "42312112", "11412115", "31412113", "51412111", "15121114", "24221113", "13321114", "33321112", "22421113", "42421111", "11521114", "31521112", "25112113", "14212114", "34212112", "23312113", "43312111", "12412114", "32412112", "21512113", "41512111", "16121113", "25221112", "14321113", "34321111", "23421112", "12521113", "32521111", "15212113", "24312112", "13412113", "33412111", "22512112", "11612113", "31612111", "31131115", "51131113", "21122116", "41122114", "61122112", "31113115", "51113113", "12131116", "32131114", "52131112", "21231115", "41231113", "61231111", "22122115", "42122113", "11222116", "31222114", "51222112", "12113116", "32113114", "52113112", "21213115", "41213113", "61213111", "13131115", "33131113", "22231114", "42231112", "11331115", "31331113", "51331111", "23122114", "43122112", "12222115", "32222113", "52222111", "21322114", "41322112", "13113115", "33113113", "22213114", "42213112", "11313115", "31313113", "51313111", "14131114", "34131112", "23231113", "43231111", "12331114", "32331112", "21431113", "41431111", "24122113", "13222114", "33222112", "22322113", "42322111", "11422114", "31422112", "14113114", "34113112", "23213113", "43213111", "12313114", "32313112", "21413113", "41413111", "15131113", "24231112", "13331113", "33331111", "22431112", "25122112", "14222113", "34222111", "23322112", "12422113", "32422111", "21522112", "15113113", "24213112", "13313113", "33313111", "22413112", "11513113", "31513111", "16131112", "25231111", "14331112", "23431111", "15222112", "24322111", "13422112", "22522111", "16113112", "25213111", "14313112", "23413111", "12513112", "21613111", "11141116", "31141114", "51141112", "21132115", "41132113", "61132111", "11123116", "31123114", "51123112", "21114115", "41114113", "61114111", "12141115", "32141113", "52141111", "21241114", "41241112", "22132114", "42132112", "11232115", "31232113", "51232111", "12123115", "32123113", "52123111", "21223114", "41223112", "22114114", "42114112", "11214115", "31214113", "51214111", "13141114", "33141112", "22241113", "42241111", "11341114", "31341112", "23132113", "43132111", "12232114", "32232112", "21332113", "41332111", "13123114", "33123112", "22223113", "42223111", "11323114", "31323112", "23114113", "43114111", "12214114", "32214112", "21314113", "41314111", "14141113", "34141111", "23241112", "12341113", "32341111", "24132112", "13232113", "33232111", "22332112", "11432113", "31432111", "14123113", "34123111", "23223112", "12323113", "32323111", "21423112", "24114112", "13214113", "33214111", "22314112", "11414113", "31414111", "15141112", "24241111", "13341112", "25132111", "14232112", "23332111", "12432112", "15123112", "24223111", "13323112", "22423111", "11523112", "25114111", "14214112", "23314111", "12414112", "21514111", "16141111", "14341111", "15232111", "13432111", "16123111", "14323111", "12523111", "15214111", "13414111", "11614111", "11151115", "31151113", "51151111", "21142114", "41142112", "11133115", "31133113", "51133111", "21124114", "41124112", "11115115", "31115113", "51115111", "12151114", "32151112", "21251113", "41251111", "22142113", "42142111", "11242114", "31242112", "12133114", "32133112", "21233113", "41233111", "22124113", "42124111", "11224114", "31224112", "12115114", "32115112", "21215113", "41215111", "13151113", "33151111", "22251112", "23142112", "12242113", "32242111", "21342112", "13133113", "33133111", "22233112", "11333113", "31333111", "23124112", "12224113", "32224111", "21324112", "13115113", "33115111", "22215112", "11315113", "31315111", "14151112", "23251111", "24142111", "13242112", "22342111", "14133112", "23233111", "12333112", "21433111", "24124111", "13224112", "22324111", "11424112", "14115112", "23215111", "12315112", "21415111", "15151111", "14242111", "15133111", "13333111", "14224111", "12424111", "15115111", "13315111", "11515111", "11161114", "31161112", "21152113", "41152111", "11143114", "31143112", "21134113", "41134111", "11125114", "31125112", "21116113", "41116111", "12161113", "32161111", "22152112", "11252113", "31252111", "12143113", "32143111", "21243112", "22134112", "11234113", "31234111", "12125113", "32125111", "21225112", "22116112", "11216113", "31216111", "13161112", "23152111", "12252112", "13143112", "22243111", "11343112", "23134111", "12234112", "21334111", "13125112", "22225111", "11325112", "23116111", "12216112", "21316111", "14161111", "13252111", "14143111", "12343111", "13234111", "11434111", "14125111", "12325111", "13216111", "11416111", "31111216", "51111214", "31211125", "51211123", "32111215", "52111213", "21211216", "41211214", "61211212", "12211126", "32211124", "52211122", "21311125", "41311123", "61311121", "13111216", "33111214", "22211215", "42211213", "11311216", "31311214", "51311212", "13211125", "33211123", "22311124", "42311122", "11411125", "31411123", "51411121", "14111215", "34111213", "23211214", "43211212", "12311215", "32311213", "52311211", "21411214", "41411212", "14211124", "34211122", "23311123", "43311121", "12411124", "32411122", "21511123", "41511121", "15111214", "24211213", "13311214", "33311212", "22411213", "42411211", "11511214", "31511212", "15211123", "24311122", "13411123", "33411121", "22511122", "11611123", "31611121", "16111213", "25211212", "14311213", "34311211", "23411212", "12511213", "32511211", "21611212", "21121126", "41121124", "61121122", "31112125", "51112123", "31121215", "51121213", "21112216", "41112214", "61112212", "22121125", "42121123", "11221126", "31221124", "51221122", "12112126", "32112124", "52112122", "12121216", "32121214", "52121212", "21221215", "41221213", "61221211", "22112215", "42112213", "11212216", "31212214", "51212212", "23121124", "43121122", "12221125", "32221123", "52221121", "21321124", "41321122", "13112125", "33112123", "13121215", "33121213", "11312125", "22221214", "42221212", "11321215", "31321213", "51321211", "23112214", "43112212", "12212215", "32212213", "52212211", "21312214", "41312212", "24121123", "13221124", "33221122", "22321123", "42321121", "11421124", "31421122", "14112124", "34112122", "14121214", "34121212", "12312124", "23221213", "43221211", "12321214", "32321212", "21421213", "41421211", "24112213", "13212214", "33212212", "22312213", "42312211", "11412214", "31412212", "25121122", "14221123", "34221121", "23321122", "12421123", "32421121", "21521122", "15112123", "15121213", "13312123", "24221212", "13321213", "33321211", "11512123", "22421212", "11521213", "31521211", "25112212", "14212213", "34212211", "23312212", "12412213", "32412211", "21512212", "15221122", "24321121", "13421122", "22521121", "16112122", "16121212", "14312122", "25221211", "14321212", "12512122", "23421211", "12521212", "15212212", "24312211", "13412212", "22512211", "11612212", "21131125", "41131123", "61131121", "11122126", "31122124", "51122122", "11131216", "31131214", "51131212", "21113125", "41113123", "61113121", "21122215", "41122213", "61122211", "11113216", "31113214", "51113212", "22131124", "42131122", "11231125", "31231123", "51231121", "12122125", "32122123", "52122121", "12131215", "32131213", "52131211", "21231214", "41231212", "22113124", "42113122", "11213125", "22122214", "42122212", "11222215", "31222213", "51222211", "12113215", "32113213", "52113211", "21213214", "41213212", "23131123", "43131121", "12231124", "32231122", "21331123", "41331121", "13122124", "33122122", "13131214", "33131212", "11322124", "22231213", "42231211", "11331214", "31331212", "23113123", "43113121", "12213124", "23122213", "43122211", "12222214", "32222212", "21322213", "41322211", "13113214", "33113212", "22213213", "42213211", "11313214", "31313212", "24131122", "13231123", "33231121", "22331122", "11431123", "31431121", "14122123", "34122121", "14131213", "34131211", "12322123", "23231212", "12331213", "32331211", "21431212", "24113122", "13213123", "24122212", "13222213", "33222211", "11413123", "22322212", "11422213", "31422211", "14113213", "34113211", "23213212", "12313213", "32313211", "21413212", "25131121", "14231122", "23331121", "12431122", "15122122", "15131212", "13322122", "24231211", "13331212", "11522122", "22431211", "25113121", "14213122", "25122211", "14222212", "12413122", "23322211", "12422212", "21522211", "15113212", "24213211", "13313212", "22413211", "11513212", "15231121", "13431121", "16122121", "16131211", "14322121", "14331211", "12522121", "15213121", "15222211", "13413121", "13422211", "11613121", "16113211", "14313211", "12513211", "21141124", "41141122", "11132125", "31132123", "51132121", "11141215", "31141213", "51141211", "21123124", "41123122", "21132214", "41132212", "11114125", "31114123", "51114121", "11123215", "31123213", "51123211", "21114214", "41114212", "22141123", "42141121", "11241124", "31241122", "12132124", "32132122", "12141214", "32141212", "21241213", "41241211", "22123123", "42123121", "11223124", "22132213", "42132211", "11232214", "31232212", "12114124", "32114122", "12123214", "32123212", "21223213", "41223211", "22114213", "42114211", "11214214", "31214212", "23141122", "12241123", "32241121", "21341122", "13132123", "33132121", "13141213", "33141211", "11332123", "22241212", "11341213", "31341211", "23123122", "12223123", "23132212", "12232213", "32232211", "21332212", "13114123", "33114121", "13123213", "33123211", "11314123", "22223212", "11323213", "31323211", "23114212", "12214213", "32214211", "21314212", "24141121", "13241122", "22341121", "14132122", "14141212", "12332122", "23241211", "12341212", "24123121", "13223122", "24132211", "13232212", "11423122", "22332211", "11432212", "14114122", "14123212", "12314122", "23223211", "12323212", "21423211", "24114211", "13214212", "22314211", "11414212", "14241121", "15132121", "15141211", "13332121", "13341211", "14223121", "14232211", "12423121", "12432211", "15114121", "15123211", "13314121", "13323211", "11514121", "11523211", "14214211", "12414211", "21151123", "41151121", "11142124", "31142122", "11151214", "31151212", "21133123", "41133121", "21142213", "41142211", "11124124", "31124122", "11133214", "31133212", "21115123", "41115121", "21124213", "41124211", "11115214", "31115212", "22151122", "11251123", "31251121", "12142123", "32142121", "12151213", "32151211", "21251212", "22133122", "11233123", "22142212", "11242213", "31242211", "12124123", "32124121", "12133213", "32133211", "21233212", "22115122", "11215123", "22124212", "11224213", "31224211", "12115213", "32115211", "21215212", "23151121", "12251122", "13142122", "13151212", "11342122", "22251211", "23133121", "12233122", "23142211", "12242212", "21342211", "13124122", "13133212", "11324122", "22233211", "11333212", "23115121", "12215122", "23124211", "12224212", "21324211", "13115212", "22215211", "11315212", "13251121", "14142121", "14151211", "12342121", "13233121", "13242211", "11433121", "14124121", "14133211", "12324121", "12333211", "13215121", "13224211", "11415121", "11424211", "14115211", "12315211", "21161122", "11152123", "31152121", "11161213", "31161211", "21143122", "21152212", "11134123", "31134121", "11143213", "31143211", "21125122", "21134212", "11116123", "31116121", "11125213", "31125211", "22161121", "12152122", "12161212", "22143121", "11243122", "22152211", "11252212", "12134122", "12143212", "21243211", "22125121", "11225122", "22134211", "11234212", "12116122", "12125212", "21225211", "13152121", "13161211", "12243121", "12252211", "13134121", "13143211", "11334121", "11343211", "12225121", "12234211", "13116121", "13125211", "11316121", "11325211", "21111226", "41111224", "61111222", "31111315", "51111313", "21211135", "41211133", "61211131", "22111225", "42111223", "11211226", "31211224", "51211222", "12111316", "32111314", "52111312", "21211315", "41211313", "61211311", "22211134", "42211132", "11311135", "31311133", "51311131", "23111224", "43111222", "12211225", "32211223", "52211221", "21311224", "41311222", "13111315", "33111313", "22211314", "42211312", "11311315", "31311313", "51311311", "23211133", "43211131", "12311134", "32311132", "21411133", "41411131", "24111223", "13211224", "33211222", "22311223", "42311221", "11411224", "31411222", "14111314", "34111312", "23211313", "43211311", "12311314", "32311312", "21411313", "41411311", "24211132", "13311133", "33311131", "22411132", "11511133", "31511131", "25111222", "14211223", "34211221", "23311222", "12411223", "32411221", "21511222", "15111313", "24211312", "13311313", "33311311", "22411312", "11511313", "31511311", "25211131", "14311132", "23411131", "12511132", "21611131", "15211222", "24311221", "13411222", "22511221", "11611222", "16111312", "25211311", "14311312", "23411311", "12511312", "21611311", "31121134", "51121132", "21112135", "41112133", "61112131", "21121225", "41121223", "61121221", "11112226", "31112224", "51112222", "11121316", "31121314", "51121312", "21112315", "41112313", "61112311", "12121135", "32121133", "52121131", "21221134", "41221132", "22112134", "42112132", "11212135", "22121224", "42121222", "11221225", "31221223", "51221221", "12112225", "32112223", "52112221", "12121315", "32121313", "52121311", "21221314", "41221312", "22112314", "42112312", "11212315", "31212313", "51212311", "13121134", "33121132", "22221133", "42221131", "11321134", "31321132", "23112133", "43112131", "12212134", "23121223", "43121221", "12221224", "32221222", "21321223", "41321221", "13112224", "33112222", "13121314", "33121312", "11312224", "22221313", "42221311", "11321314", "31321312", "23112313", "43112311", "12212314", "32212312", "21312313", "41312311", "14121133", "34121131", "23221132", "12321133", "32321131", "21421132", "24112132", "13212133", "24121222", "13221223", "33221221", "11412133", "22321222", "11421223", "31421221", "14112223", "34112221", "14121313", "34121311", "12312223", "23221312", "12321313", "32321311", "21421312", "24112312", "13212313", "33212311", "22312312", "11412313", "31412311", "15121132", "24221131", "13321132", "22421131"]), $a(["22121116", "42121114", "31221115", "51221113", "32112115", "52112113", "21212116", "41212114", "61212112", "23121115", "43121113", "12221116", "32221114", "52221112", "21321115", "41321113", "61321111", "13112116", "33112114", "22212115", "42212113", "11312116", "31312114", "51312112", "24121114", "13221115", "33221113", "22321114", "42321112", "11421115", "31421113", "51421111", "14112115", "34112113", "23212114", "43212112", "12312115", "32312113", "52312111", "21412114", "41412112", "25121113", "14221114", "34221112", "23321113", "43321111", "12421114", "32421112", "21521113", "41521111", "15112114", "24212113", "13312114", "33312112", "22412113", "42412111", "11512114", "31512112", "15221113", "24321112", "13421113", "33421111", "22521112", "16112113", "25212112", "14312113", "34312111", "23412112", "12512113", "32512111", "21612112", "21131116", "41131114", "61131112", "31122115", "51122113", "21113116", "41113114", "61113112", "22131115", "42131113", "11231116", "31231114", "51231112", "12122116", "32122114", "52122112", "21222115", "41222113", "61222111", "22113115", "42113113", "11213116", "31213114", "51213112", "23131114", "43131112", "12231115", "32231113", "52231111", "21331114", "41331112", "13122115", "33122113", "22222114", "42222112", "11322115", "31322113", "51322111", "23113114", "43113112", "12213115", "32213113", "52213111", "21313114", "41313112", "24131113", "13231114", "33231112", "22331113", "42331111", "11431114", "31431112", "14122114", "34122112", "23222113", "43222111", "12322114", "32322112", "21422113", "41422111", "24113113", "13213114", "33213112", "22313113", "42313111", "11413114", "31413112", "25131112", "14231113", "34231111", "23331112", "12431113", "32431111", "15122113", "24222112", "13322113", "33322111", "22422112", "11522113", "31522111", "25113112", "14213113", "34213111", "23313112", "12413113", "32413111", "21513112", "15231112", "24331111", "13431112", "16122112", "25222111", "14322112", "23422111", "12522112", "15213112", "24313111", "13413112", "22513111", "11613112", "21141115", "41141113", "61141111", "11132116", "31132114", "51132112", "21123115", "41123113", "61123111", "11114116", "31114114", "51114112", "22141114", "42141112", "11241115", "31241113", "51241111", "12132115", "32132113", "52132111", "21232114", "41232112", "22123114", "42123112", "11223115", "31223113", "51223111", "12114115", "32114113", "52114111", "21214114", "41214112", "23141113", "43141111", "12241114", "32241112", "21341113", "41341111", "13132114", "33132112", "22232113", "42232111", "11332114", "31332112", "23123113", "43123111", "12223114", "32223112", "21323113", "41323111", "13114114", "33114112", "22214113", "42214111", "11314114", "31314112", "24141112", "13241113", "33241111", "22341112", "14132113", "34132111", "23232112", "12332113", "32332111", "21432112", "24123112", "13223113", "33223111", "22323112", "11423113", "31423111", "14114113", "34114111", "23214112", "12314113", "32314111", "21414112", "25141111", "14241112", "23341111", "15132112", "24232111", "13332112", "22432111", "25123111", "14223112", "23323111", "12423112", "21523111", "15114112", "24214111", "13314112", "22414111", "11514112", "15241111", "16132111", "14332111", "15223111", "13423111", "16114111", "14314111", "12514111", "21151114", "41151112", "11142115", "31142113", "51142111", "21133114", "41133112", "11124115", "31124113", "51124111", "21115114", "41115112", "22151113", "42151111", "11251114", "31251112", "12142114", "32142112", "21242113", "41242111", "22133113", "42133111", "11233114", "31233112", "12124114", "32124112", "21224113", "41224111", "22115113", "42115111", "11215114", "31215112", "23151112", "12251113", "32251111", "13142113", "33142111", "22242112", "11342113", "31342111", "23133112", "12233113", "32233111", "21333112", "13124113", "33124111", "22224112", "11324113", "31324111", "23115112", "12215113", "32215111", "21315112", "24151111", "13251112", "14142112", "23242111", "12342112", "24133111", "13233112", "22333111", "11433112", "14124112", "23224111", "12324112", "21424111", "24115111", "13215112", "22315111", "11415112", "14251111", "15142111", "13342111", "14233111", "12433111", "15124111", "13324111", "11524111", "14215111", "12415111", "21161113", "41161111", "11152114", "31152112", "21143113", "41143111", "11134114", "31134112", "21125113", "41125111", "11116114", "31116112", "22161112", "12152113", "32152111", "21252112", "22143112", "11243113", "31243111", "12134113", "32134111", "21234112", "22125112", "11225113", "31225111", "12116113", "32116111", "21216112", "23161111", "13152112", "22252111", "23143111", "12243112", "21343111", "13134112", "22234111", "11334112", "23125111", "12225112", "21325111", "13116112", "22216111", "11316112", "14152111", "13243111", "14134111", "12334111", "13225111", "11425111", "14116111", "12316111", "41111215", "61111213", "21211126", "41211124", "61211122", "22111216", "42111214", "31211215", "51211213", "22211125", "42211123", "11311126", "31311124", "51311122", "23111215", "43111213", "12211216", "32211214", "52211212", "21311215", "41311213", "61311211", "23211124", "43211122", "12311125", "32311123", "52311121", "21411124", "41411122", "24111214", "13211215", "33211213", "22311214", "42311212", "11411215", "31411213", "51411211", "24211123", "13311124", "33311122", "22411123", "42411121", "11511124", "31511122", "25111213", "14211214", "34211212", "23311213", "43311211", "12411214", "32411212", "21511213", "41511211", "25211122", "14311123", "34311121", "23411122", "12511123", "32511121", "21611122", "15211213", "24311212", "13411213", "33411211", "22511212", "11611213", "31611211", "31121125", "51121123", "21112126", "41112124", "61112122", "21121216", "41121214", "61121212", "31112215", "51112213", "12121126", "32121124", "52121122", "21221125", "41221123", "61221121", "22112125", "42112123", "11212126", "22121215", "42121213", "11221216", "31221214", "51221212", "12112216", "32112214", "52112212", "21212215", "41212213", "61212211", "13121125", "33121123", "22221124", "42221122", "11321125", "31321123", "51321121", "23112124", "43112122", "12212125", "23121214", "43121212", "12221215", "32221213", "52221211", "21321214", "41321212", "13112215", "33112213", "22212214", "42212212", "11312215", "31312213", "51312211", "14121124", "34121122", "23221123", "43221121", "12321124", "32321122", "21421123", "41421121", "24112123", "13212124", "24121213", "13221214", "33221212", "11412124", "22321213", "42321211", "11421214", "31421212", "14112214", "34112212", "23212213", "43212211", "12312214", "32312212", "21412213", "41412211", "15121123", "24221122", "13321123", "33321121", "22421122", "11521123", "31521121", "25112122", "14212123", "25121212", "14221213", "34221211", "12412123", "23321212", "12421213", "32421211", "21521212", "15112213", "24212212", "13312213", "33312211", "22412212", "11512213", "31512211", "16121122", "25221121", "14321122", "23421121", "12521122", "15212122", "15221212", "13412122", "24321211", "13421212", "11612122", "22521211", "16112212", "25212211", "14312212", "23412211", "12512212", "21612211", "11131126", "31131124", "51131122", "21122125", "41122123", "61122121", "21131215", "41131213", "61131211", "11113126", "31113124", "51113122", "11122216", "31122214", "51122212", "21113215", "41113213", "61113211", "12131125", "32131123", "52131121", "21231124", "41231122", "22122124", "42122122", "11222125", "22131214", "42131212", "11231215", "31231213", "51231211", "12113125", "32113123", "52113121", "12122215", "32122213", "52122211", "21222214", "41222212", "22113214", "42113212", "11213215", "31213213", "51213211", "13131124", "33131122", "22231123", "42231121", "11331124", "31331122", "23122123", "43122121", "12222124", "23131213", "43131211", "12231214", "32231212", "21331213", "41331211", "13113124", "33113122", "13122214", "33122212", "11313124", "22222213", "42222211", "11322214", "31322212", "23113213", "43113211", "12213214", "32213212", "21313213", "41313211", "14131123", "34131121", "23231122", "12331123", "32331121", "21431122", "24122122", "13222123", "24131212", "13231213", "33231211", "11422123", "22331212", "11431213", "31431211", "14113123", "34113121", "14122213", "34122211", "12313123", "23222212", "12322213", "32322211", "21422212", "24113212", "13213213", "33213211", "22313212", "11413213", "31413211", "15131122", "24231121", "13331122", "22431121", "25122121", "14222122", "25131211", "14231212", "12422122", "23331211", "12431212", "15113122", "15122212", "13313122", "24222211", "13322212", "11513122", "22422211", "11522212", "25113211", "14213212", "23313211", "12413212", "21513211", "16131121", "14331121", "15222121", "15231211", "13422121", "13431211", "16113121", "16122211", "14313121", "14322211", "12513121", "12522211", "15213211", "13413211", "11613211", "11141125", "31141123", "51141121", "21132124", "41132122", "21141214", "41141212", "11123125", "31123123", "51123121", "11132215", "31132213", "51132211", "21114124", "41114122", "21123214", "41123212", "11114215", "31114213", "51114211", "12141124", "32141122", "21241123", "41241121", "22132123", "42132121", "11232124", "22141213", "42141211", "11241214", "31241212", "12123124", "32123122", "12132214", "32132212", "21232213", "41232211", "22114123", "42114121", "11214124", "22123213", "42123211", "11223214", "31223212", "12114214", "32114212", "21214213", "41214211", "13141123", "33141121", "22241122", "11341123", "31341121", "23132122", "12232123", "23141212", "12241213", "32241211", "21341212", "13123123", "33123121", "13132213", "33132211", "11323123", "22232212", "11332213", "31332211", "23114122", "12214123", "23123212", "12223213", "32223211", "21323212", "13114213", "33114211", "22214212", "11314213", "31314211", "14141122", "23241121", "12341122", "24132121", "13232122", "24141211", "13241212", "11432122", "22341211", "14123122", "14132212", "12323122", "23232211", "12332212", "21432211", "24114121", "13214122", "24123211", "13223212", "11414122", "22323211", "11423212", "14114212", "23214211", "12314212", "21414211", "15141121", "13341121", "14232121", "14241211", "12432121", "15123121", "15132211", "13323121", "13332211", "11523121", "14214121", "14223211", "12414121", "12423211", "15114211", "13314211", "11514211", "11151124", "31151122", "21142123", "41142121", "21151213", "41151211", "11133124", "31133122", "11142214", "31142212", "21124123", "41124121", "21133213", "41133211", "11115124", "31115122", "11124214", "31124212", "21115213", "41115211", "12151123", "32151121", "21251122", "22142122", "11242123", "22151212", "11251213", "31251211", "12133123", "32133121", "12142213", "32142211", "21242212", "22124122", "11224123", "22133212", "11233213", "31233211", "12115123", "32115121", "12124213", "32124211", "21224212", "22115212", "11215213", "31215211", "13151122", "22251121", "23142121", "12242122", "23151211", "12251212", "13133122", "13142212", "11333122", "22242211", "11342212", "23124121", "12224122", "23133211", "12233212", "21333211", "13115122", "13124212", "11315122", "22224211", "11324212", "23115211", "12215212", "21315211", "14151121", "13242121", "13251211", "14133121", "14142211", "12333121", "12342211", "13224121", "13233211", "11424121", "11433211", "14115121", "14124211", "12315121", "12324211", "13215211", "11415211", "11161123", "31161121", "21152122", "21161212", "11143123", "31143121", "11152213", "31152211", "21134122", "21143212", "11125123", "31125121", "11134213", "31134211", "21116122", "21125212", "12161122", "22152121", "11252122", "22161211", "12143122", "12152212", "21252211", "22134121", "11234122", "22143211", "11243212", "12125122", "12134212", "21234211", "22116121", "11216122", "22125211", "11225212", "13161121", "12252121", "13143121", "13152211", "11343121", "12234121", "12243211", "13125121", "13134211", "11325121", "11334211", "12216121", "12225211", "31111225", "51111223", "21111316", "41111314", "61111312", "31211134", "51211132", "12111226", "32111224", "52111222", "21211225", "41211223", "61211221", "22111315", "42111313", "11211316", "31211314", "51211312", "12211135", "32211133", "52211131", "21311134", "41311132", "13111225", "33111223", "22211224", "42211222", "11311225", "31311223", "51311221", "23111314", "43111312", "12211315", "32211313", "52211311", "21311314", "41311312", "13211134", "33211132", "22311133", "42311131", "11411134", "31411132", "14111224", "34111222", "23211223", "43211221", "12311224", "32311222", "21411223", "41411221", "24111313", "13211314", "33211312", "22311313", "42311311", "11411314", "31411312", "14211133", "34211131", "23311132", "12411133", "32411131", "21511132", "15111223", "24211222", "13311223", "33311221", "22411222", "11511223", "31511221", "25111312", "14211313", "34211311", "23311312", "12411313", "32411311", "21511312", "15211132", "24311131", "13411132", "22511131", "11611132", "16111222", "25211221", "14311222", "23411221", "12511222", "21611221", "15211312", "24311311", "13411312", "22511311", "11611312", "21121135", "41121133", "61121131", "11112136", "31112134", "51112132", "11121226", "31121224", "51121222", "21112225", "41112223", "61112221", "21121315", "41121313", "61121311", "11112316", "31112314", "51112312", "22121134", "42121132", "11221135", "31221133", "51221131", "12112135", "32112133", "52112131", "12121225", "32121223", "52121221", "21221224", "41221222", "22112224", "42112222", "11212225", "22121314", "42121312", "11221315", "31221313", "51221311", "12112315", "32112313", "52112311", "21212314", "41212312", "23121133", "43121131", "12221134", "32221132", "21321133", "41321131", "13112134", "33112132", "13121224", "33121222", "11312134", "22221223", "42221221", "11321224", "31321222", "23112223", "43112221", "12212224", "23121313", "43121311", "12221314", "32221312", "21321313", "41321311", "13112314", "33112312", "22212313", "42212311", "11312314", "31312312", "24121132", "13221133", "33221131", "22321132", "11421133", "31421131", "14112133", "34112131", "14121223", "34121221", "12312133", "23221222", "12321223", "32321221", "21421222", "24112222", "13212223", "24121312", "13221313", "33221311", "11412223", "22321312", "11421313", "31421311", "14112313", "34112311", "23212312", "12312313", "32312311", "21412312", "25121131", "14221132", "23321131", "12421132", "21521131", "15112132", "15121222", "13312132", "24221221", "13321222", "11512132", "22421221", "11521222", "25112221", "14212222", "25121311", "14221312", "12412222", "23321311", "12421312", "21521311", "15112312", "24212311", "13312312", "22412311", "11512312", "15221131", "13421131", "16112131", "16121221", "14312131", "14321221", "12512131", "12521221", "15212221", "15221311", "13412221", "13421311", "11612221", "16112311", "14312311", "12512311", "21131134", "41131132", "11122135", "31122133", "51122131", "11131225", "31131223", "51131221", "21113134", "41113132", "21122224", "41122222", "21131314", "41131312", "11113225", "31113223", "51113221", "11122315", "31122313", "51122311", "21113314", "41113312", "22131133", "42131131", "11231134", "31231132", "12122134", "32122132", "12131224", "32131222", "21231223", "41231221", "22113133", "42113131", "11213134", "22122223", "42122221", "11222224", "22131313", "42131311", "11231314", "31231312", "12113224", "32113222", "12122314", "32122312", "21222313", "41222311", "22113313", "42113311", "11213314", "31213312", "23131132", "12231133", "32231131", "21331132", "13122133", "33122131", "13131223", "33131221", "11322133", "22231222", "11331223", "31331221", "23113132", "12213133", "23122222", "12222223", "23131312", "12231313", "32231311", "21331312", "13113223", "33113221", "13122313", "33122311", "11313223", "22222312", "11322313", "31322311", "23113312", "12213313", "32213311", "21313312", "24131131", "13231132", "22331131", "11431132", "14122132", "14131222", "12322132", "23231221", "12331222", "21431221", "24113131", "13213132", "24122221", "13222222", "24131311", "11413132", "13231312", "11422222", "22331311", "11431312", "14113222", "14122312", "12313222", "23222311", "12322312", "21422311", "24113311", "13213312", "22313311", "11413312", "14231131", "12431131", "15122131", "15131221", "13322131", "13331221", "11522131", "14213131", "14222221", "12413131", "14231311", "12422221", "12431311", "15113221", "15122311", "13313221", "13322311", "11513221", "11522311", "14213311", "12413311", "21141133", "41141131", "11132134", "31132132", "11141224", "31141222", "21123133", "41123131", "21132223", "41132221", "21141313", "41141311", "11114134", "31114132", "11123224", "31123222", "11132314", "31132312", "21114223", "41114221", "21123313", "41123311", "11114314", "31114312", "22141132", "11241133", "31241131", "12132133", "32132131", "12141223", "32141221", "21241222", "22123132", "11223133", "22132222", "11232223", "22141312", "11241313", "31241311", "12114133", "32114131", "12123223", "32123221", "12132313", "32132311", "21232312", "22114222", "11214223", "22123312", "11223313", "31223311", "12114313", "32114311", "21214312", "23141131", "12241132", "21341131", "13132132", "13141222", "11332132", "22241221", "11341222", "23123131", "12223132", "23132221", "12232222", "23141311", "12241312", "21341311", "13114132", "13123222", "11314132", "13132312", "11323222", "22232311", "11332312", "23114221", "12214222", "23123311", "12223312", "21323311", "13114312", "22214311", "11314312", "13241131", "14132131", "14141221", "12332131", "12341221", "13223131", "13232221", "11423131", "13241311", "11432221", "14114131", "14123221", "12314131", "14132311", "12323221", "12332311", "13214221", "13223311", "11414221", "11423311", "14114311", "12314311", "21151132", "11142133", "31142131", "11151223", "31151221", "21133132", "21142222", "21151312", "11124133", "31124131", "11133223", "31133221", "11142313", "31142311", "21115132", "21124222", "21133312", "11115223", "31115221", "11124313", "31124311", "22151131", "11251132", "12142132", "12151222", "21251221", "22133131", "11233132", "22142221", "11242222", "22151311", "11251312", "12124132", "12133222", "12142312", "21242311", "22115131", "11215132", "22124221", "11224222", "22133311", "11233312", "12115222", "12124312", "21224311", "12251131", "13142131", "13151221", "11342131", "12233131", "12242221", "12251311", "13124131", "13133221", "11324131", "13142311", "11333221", "11342311", "12215131", "12224221", "12233311", "13115221", "13124311", "11315221", "11324311", "21161131", "11152132", "11161222", "21143131", "21152221", "21161311", "11134132", "11143222", "11152312", "21125131", "21134221", "21143311", "11116132", "11125222", "11134312", "12152131", "12161221", "11243131", "11252221", "12134131", "12143221", "12152311", "11225131", "11234221", "11243311", "12116131", "12125221", "12134311", "21111235", "41111233", "61111231", "11111326", "31111324", "51111322", "21111415", "41111413", "61111411", "21211144", "41211142", "22111234", "42111232", "11211235", "31211233", "51211231", "12111325", "32111323", "52111321", "21211324", "41211322", "22111414", "42111412", "11211415", "31211413", "51211411", "22211143", "42211141", "11311144", "31311142", "23111233", "43111231", "12211234", "32211232", "21311233", "41311231", "13111324", "33111322", "22211323", "42211321", "11311324", "31311322", "23111413", "43111411", "12211414", "32211412", "21311413", "41311411", "23211142", "12311143", "32311141", "21411142", "24111232", "13211233", "33211231", "22311232", "11411233", "31411231", "14111323", "34111321", "23211322", "12311323", "32311321", "21411322", "24111412", "13211413", "33211411", "22311412", "11411413", "31411411", "24211141", "13311142", "22411141", "11511142", "25111231", "14211232", "23311231", "12411232", "21511231", "15111322", "24211321", "13311322", "22411321", "11511322", "25111411", "14211412", "23311411", "12411412", "21511411", "14311141", "12511141", "15211231", "13411231", "11611231", "16111321", "14311321", "12511321", "15211411", "13411411", "11611411", "31121143", "51121141", "21112144", "41112142", "21121234", "41121232", "11112235", "31112233", "51112231", "11121325", "31121323", "51121321", "21112324", "41112322", "21121414", "41121412", "11112415", "31112413", "51112411", "12121144", "32121142", "21221143", "41221141", "22112143", "42112141", "11212144", "22121233", "42121231", "11221234", "31221232", "12112234", "32112232", "12121324", "32121322", "21221323", "41221321", "22112323", "42112321", "11212324", "22121413", "42121411", "11221414", "31221412", "12112414", "32112412", "21212413", "41212411", "13121143", "33121141", "22221142", "11321143", "31321141", "23112142", "12212143", "23121232", "12221233", "32221231", "21321232", "13112233", "33112231", "13121323", "33121321", "11312233", "22221322", "11321323", "31321321", "23112322", "12212323", "23121412", "12221413", "32221411", "21321412", "13112413", "33112411", "22212412", "11312413", "31312411", "14121142", "23221141", "12321142", "21421141", "24112141", "13212142", "24121231", "13221232", "11412142", "22321231", "11421232", "14112232", "14121322", "12312232", "23221321", "12321322", "21421321", "24112321", "13212322", "24121411", "13221412", "11412322", "22321411", "11421412", "14112412", "23212411", "12312412", "21412411", "15121141", "13321141", "11521141", "14212141", "14221231", "12412141", "12421231", "15112231", "15121321", "13312231", "13321321", "11512231", "11521321", "14212321", "14221411", "12412321", "12421411", "15112411", "13312411", "11512411", "11131144", "31131142", "21122143", "41122141", "21131233", "41131231", "11113144", "31113142", "11122234", "31122232", "11131324", "31131322", "21113233", "41113231", "21122323", "41122321", "21131413", "41131411", "11113324", "31113322", "11122414", "31122412", "21113413", "41113411", "12131143", "32131141", "21231142", "22122142", "11222143", "22131232", "11231233", "31231231", "12113143", "32113141", "12122233", "32122231", "12131323", "32131321", "21231322", "22113232", "11213233", "22122322", "11222323", "22131412", "11231413", "31231411", "12113323", "32113321", "12122413", "32122411", "21222412", "22113412", "11213413", "31213411", "13131142", "22231141", "11331142", "23122141", "12222142", "23131231", "12231232", "21331231", "13113142", "13122232", "11313142", "13131322", "11322232", "22231321", "11331322", "23113231", "12213232", "23122321", "12222322", "23131411", "12231412", "21331411", "13113322", "13122412", "11313322", "22222411", "11322412", "23113411", "12213412", "21313411", "14131141", "12331141", "13222141", "13231231", "11422141", "11431231", "14113141", "14122231", "12313141", "14131321", "12322231", "12331321", "13213231", "13222321", "11413231", "13231411", "11422321", "11431411", "14113321", "14122411", "12313321", "12322411", "13213411", "11413411", "11141143", "31141141", "21132142", "21141232", "11123143", "31123141", "11132233", "31132231", "11141323", "31141321", "21114142", "21123232", "21132322", "21141412", "11114233", "31114231", "11123323", "31123321", "11132413", "31132411", "21114322", "21123412", "12141142", "21241141", "22132141", "11232142", "22141231", "11241232", "12123142", "12132232", "12141322", "21241321", "22114141", "11214142", "22123231", "11223232", "22132321", "11232322", "22141411", "11241412", "12114232", "12123322", "12132412", "21232411", "22114321", "11214322", "22123411", "11223412", "13141141", "11341141", "12232141", "12241231", "13123141", "13132231", "11323141", "13141321", "11332231", "11341321", "12214141", "12223231", "12232321", "12241411", "13114231", "13123321", "11314231", "13132411", "11323321", "11332411", "12214321", "12223411", "11151142", "21142141", "21151231", "11133142", "11142232", "11151322", "21124141", "21133231", "21142321", "21151411", "11115142", "11124232", "11133322", "11142412", "21115231", "21124321", "21133411", "12151141", "11242141", "11251231", "12133141", "12142231", "12151321", "11224141", "11233231", "11242321", "11251411", "12115141", "12124231", "12133321", "12142411", "11215231", "11224321", "11233411", "11161141", "11143141", "11152231", "11161321", "11125141", "11134231", "11143321", "11152411", "11111245", "31111243", "51111241", "21111334", "41111332", "11111425", "31111423", "51111421", "21111514", "41111512", "31211152", "12111244", "32111242", "21211243", "41211241", "22111333", "42111331", "11211334", "31211332", "12111424", "32111422", "21211423", "41211421", "22111513", "42111511", "11211514", "31211512", "12211153", "32211151", "21311152", "13111243", "33111241", "22211242", "11311243", "31311241", "23111332", "12211333", "32211331", "21311332", "13111423", "33111421", "22211422", "11311423", "31311421", "23111512", "12211513", "32211511", "21311512", "13211152", "22311151", "11411152", "14111242", "23211241", "12311242", "21411241", "24111331", "13211332", "22311331", "11411332", "14111422", "23211421", "12311422", "21411421", "24111511", "13211512", "22311511", "11411512", "14211151", "12411151", "15111241", "13311241", "11511241", "14211331", "12411331", "15111421", "13311421", "11511421", "14211511", "12411511", "21121153", "41121151", "11112154", "31112152", "11121244", "31121242", "21112243", "41112241", "21121333", "41121331", "11112334", "31112332", "11121424", "31121422", "21112423", "41112421", "21121513", "41121511", "11112514", "31112512", "22121152", "11221153", "31221151", "12112153", "32112151", "12121243", "32121241", "21221242", "22112242", "11212243", "22121332", "11221333", "31221331", "12112333", "32112331", "12121423", "32121421", "21221422", "22112422", "11212423", "22121512", "11221513", "31221511", "12112513", "32112511", "21212512", "23121151", "12221152", "21321151", "13112152", "13121242", "11312152", "22221241", "11321242", "23112241", "12212242", "23121331", "12221332", "21321331", "13112332", "13121422", "11312332", "22221421", "11321422", "23112421", "12212422", "23121511", "12221512", "21321511", "13112512", "22212511", "11312512", "13221151", "11421151", "14112151", "14121241", "12312151", "12321241", "13212241", "13221331", "11412241", "11421331", "14112331", "14121421", "12312331", "12321421", "13212421", "13221511", "11412421", "11421511", "14112511", "12312511", "21131152", "11122153", "31122151", "11131243", "31131241", "21113152", "21122242", "21131332", "11113243", "31113241", "11122333", "31122331", "11131423", "31131421", "21113332", "21122422", "21131512", "11113423", "31113421", "11122513", "31122511", "22131151", "11231152", "12122152", "12131242", "21231241", "22113151", "11213152", "22122241", "11222242", "22131331", "11231332", "12113242", "12122332", "12131422", "21231421", "22113331", "11213332", "22122421", "11222422", "22131511", "11231512", "12113422", "12122512", "21222511", "12231151", "13122151", "13131241", "11322151", "11331241", "12213151", "12222241", "12231331", "13113241", "13122331", "11313241", "13131421", "11322331", "11331421", "12213331", "12222421", "12231511", "13113421", "13122511", "11313421", "11322511", "21141151", "11132152", "11141242", "21123151", "21132241", "21141331", "11114152", "11123242", "11132332", "11141422", "21114241", "21123331", "21132421", "21141511", "11114332", "11123422", "11132512", "11241151", "12132151", "12141241", "11223151", "11232241", "11241331", "12114151", "12123241", "12132331", "12141421", "11214241", "11223331", "11232421", "11241511", "12114331", "12123421", "12132511", "11142151", "11151241", "11124151", "11133241", "11142331", "11151421", "11115241", "11124331", "11133421", "11142511", "21111253", "41111251", "11111344", "31111342", "21111433", "41111431", "11111524", "31111522", "21111613", "41111611", "21211162", "22111252", "11211253", "31211251", "12111343", "32111341", "21211342", "22111432", "11211433", "31211431", "12111523", "32111521", "21211522", "22111612", "11211613", "31211611", "22211161", "11311162", "23111251", "12211252", "21311251", "13111342", "22211341", "11311342", "23111431", "12211432", "21311431", "13111522", "22211521", "11311522", "23111611", "12211612", "21311611", "12311161", "13211251", "11411251", "14111341", "12311341", "13211431", "11411431", "14111521", "12311521", "13211611", "11411611", "31121161", "21112162", "21121252", "11112253", "31112251", "11121343", "31121341", "21112342", "21121432", "11112433", "31112431", "11121523", "31121521", "21112522", "21121612", "12121162", "21221161", "22112161", "11212162", "22121251", "11221252", "12112252", "12121342", "21221341", "22112341", "11212342", "22121431", "11221432", "12112432", "12121522", "21221521", "22112521", "11212522", "22121611", "11221612", "13121161", "11321161", "12212161", "12221251", "13112251", "13121341", "11312251", "11321341", "12212341", "12221431", "13112431", "13121521", "11312431", "11321521", "12212521", "12221611", "11131162", "21122161", "21131251", "11113162"])]); //#15371
            $ctx.parity = $a(["1001", "0101", "1100", "0011", "1010", "0110", "1111", "0000"]); //#15375
            for (var _5s in $ctx) {
                $ctx.hasOwnProperty(_5s) && (bwipp_code49.$ctx[_5s] = $ctx[_5s]);
            } //#15375
            bwipp_code49.$ctx._15376 = 1; //#15375
        })(); //#15375
    } //#15375
    $1.rowbits = $a($1.r); //#15379
    for (var _5x = 0, _5w = $f($1.r - 1); _5x <= _5w; _5x += 1) { //#15399
        $1.i = _5x; //#15381
        $k[$j++] = 'p'; //#15382
        if ($1.i != $f($1.r - 1)) { //#15382
            $k[$j++] = $get($1.parity, $1.i); //#15382
        } else { //#15382
            $k[$j++] = "0000"; //#15382
        } //#15382
        var _63 = $k[--$j]; //#15382
        $1[$k[--$j]] = _63; //#15382
        $1.ccrow = $geti($1.ccs, $1.i * 8, 8); //#15383
        $k[$j++] = Infinity; //#15385
        for (var _68 = 0; _68 <= 7; _68 += 2) { //#15385
            $aload($geti($1.ccrow, _68, 2)); //#15385
            var _6B = $k[--$j]; //#15385
            var _6C = $k[--$j]; //#15385
            $k[$j++] = $f(_6B + (_6C * 49)); //#15385
        } //#15385
        $1.scrow = $a(); //#15385
        $k[$j++] = Infinity; //#15393
        $k[$j++] = 10; //#15392
        $k[$j++] = 1; //#15392
        $k[$j++] = 1; //#15392
        for (var _6E = 0; _6E <= 3; _6E += 1) { //#15392
            $1.j = _6E; //#15390
            $forall($get($get($1.patterns, $f($get($1.p, $1.j) - 48)), $get($1.scrow, $1.j)), function() { //#15391
                var _6O = $k[--$j]; //#15391
                $k[$j++] = $f(_6O - 48); //#15391
            }); //#15391
        } //#15391
        $k[$j++] = 4; //#15393
        $k[$j++] = 1; //#15393
        $1.sbs = $a(); //#15393
        $k[$j++] = Infinity; //#15395
        var _6Q = $1.sbs; //#15396
        $k[$j++] = 1; //#15396
        for (var _6R = 0, _6S = _6Q.length; _6R < _6S; _6R++) { //#15396
            var _6U = $k[--$j]; //#15396
            var _6V = (_6U == 0) ? 1 : 0; //#15396
            $k[$j++] = _6U; //#15396
            for (var _6W = 0, _6X = $get(_6Q, _6R); _6W < _6X; _6W++) { //#15396
                $k[$j++] = _6V //#15396
            } //#15396
        } //#15396
        $astore($a($counttomark() - 1)); //#15397
        var _6a = $k[--$j]; //#15397
        var _6b = $k[--$j]; //#15397
        $k[$j++] = _6a; //#15397
        $k[$j++] = _6b; //#15397
        $j--; //#15397
        var _6c = $k[--$j]; //#15397
        var _6d = $k[--$j]; //#15397
        $k[$j++] = _6c; //#15397
        $k[$j++] = _6d; //#15397
        $j--; //#15397
        $put($1.rowbits, $1.i, $k[--$j]); //#15398
    } //#15398
    $k[$j++] = Infinity; //#15410
    for (var _6i = 0, _6j = 81 * $1.sepheight; _6i < _6j; _6i++) { //#15403
        $k[$j++] = 1; //#15403
    } //#15403
    for (var _6m = 0, _6l = $f($1.r - 2); _6m <= _6l; _6m += 1) { //#15408
        $1.i = _6m; //#15405
        for (var _6o = 0, _6p = $1.rowheight; _6o < _6p; _6o++) { //#15406
            $aload($get($1.rowbits, $1.i)); //#15406
        } //#15406
        for (var _6u = 0, _6v = $1.sepheight; _6u < _6v; _6u++) { //#15407
            for (var _6w = 0, _6x = 10; _6w < _6x; _6w++) { //#15407
                $k[$j++] = 0; //#15407
            } //#15407
            for (var _6y = 0, _6z = 70; _6y < _6z; _6y++) { //#15407
                $k[$j++] = 1; //#15407
            } //#15407
            $k[$j++] = 0; //#15407
        } //#15407
    } //#15407
    for (var _71 = 0, _72 = $1.rowheight; _71 < _72; _71++) { //#15409
        $aload($get($1.rowbits, $f($1.r - 1))); //#15409
    } //#15409
    for (var _77 = 0, _78 = 81 * $1.sepheight; _77 < _78; _77++) { //#15410
        $k[$j++] = 1; //#15410
    } //#15410
    $1.pixs = $a(); //#15410
    var _7E = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", 81],
        ["pixy", ~~($1.pixs.length / 81)],
        ["height", (~~($1.pixs.length / 81)) / 72],
        ["width", 81 / 72],
        ["opt", $1.options]
    ]); //#15421
    $k[$j++] = _7E; //#15424
    if (!$1.dontdraw) { //#15424
        bwipp_renmatrix(); //#15424
    } //#15424
}

function bwipp_flattermarken() {
    var $1 = Object.create(bwipp_flattermarken.$ctx || (bwipp_flattermarken.$ctx = {})); //#15720
    $1.dontdraw = false; //#15723
    $1.includetext = false; //#15724
    $1.textfont = "OCR-B"; //#15725
    $1.textsize = 10; //#15726
    $1.textyoffset = -8; //#15727
    $1.height = 0.3; //#15728
    $k[$j++] = $1; //#15730
    bwipp_processoptions(); //#15730
    $1.options = $k[--$j]; //#15730
    $1.barcode = $k[--$j]; //#15731
    $forall($1.barcode, function() { //#15740
        var _3 = $k[--$j]; //#15737
        if ((_3 < 48) || (_3 > 57)) { //#15739
            $k[$j++] = 'bwipp.flattermarkenBadCharacter#15738'; //#15738
            $k[$j++] = "Flattermarken must contain only digits"; //#15738
            bwipp_raiseerror(); //#15738
        } //#15738
    }); //#15738
    if (!bwipp_flattermarken.$ctx._15751) { //#15751
        (function() { //#15751
            var $ctx = Object.create($1); //#15751
            $ctx.encs = $a(["0018", "0117", "0216", "0315", "0414", "0513", "0612", "0711", "0810", "0900"]); //#15747
            $ctx.barchars = "1234567890"; //#15750
            for (var _5 in $ctx) {
                $ctx.hasOwnProperty(_5) && (bwipp_flattermarken.$ctx[_5] = $ctx[_5]);
            } //#15750
            bwipp_flattermarken.$ctx._15751 = 1; //#15750
        })(); //#15750
    } //#15750
    $1.barlen = $1.barcode.length; //#15753
    $1.sbs = $s($1.barlen * 4); //#15755
    $1.txt = $a($1.barlen); //#15756
    for (var _D = 0, _C = $1.barlen - 1; _D <= _C; _D += 1) { //#15768
        $1.i = _D; //#15759
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#15761
        $j--; //#15762
        $1.indx = $k[--$j].length; //#15763
        $j -= 2; //#15764
        $1.enc = $get($1.encs, $1.indx); //#15765
        $puti($1.sbs, $1.i * 4, $1.enc); //#15766
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $1.i * 9, $1.textyoffset, $1.textfont, $1.textsize])); //#15767
    } //#15767
    $k[$j++] = Infinity; //#15777
    $k[$j++] = Infinity; //#15773
    var _Z = $1.sbs; //#15773
    for (var _a = 0, _b = _Z.length; _a < _b; _a++) { //#15773
        $k[$j++] = $get(_Z, _a) - 48; //#15773
    } //#15773
    var _d = $a(); //#15773
    $k[$j++] = Infinity; //#15774
    for (var _f = 0, _g = ~~(($1.sbs.length + 1) / 2); _f < _g; _f++) { //#15774
        $k[$j++] = $1.height; //#15774
    } //#15774
    var _i = $a(); //#15774
    $k[$j++] = Infinity; //#15775
    for (var _k = 0, _l = ~~(($1.sbs.length + 1) / 2); _k < _l; _k++) { //#15775
        $k[$j++] = 0; //#15775
    } //#15775
    var _m = $a(); //#15775
    $k[$j++] = 'ren'; //#15777
    $k[$j++] = bwipp_renlinear; //#15777
    $k[$j++] = 'sbs'; //#15777
    $k[$j++] = _d; //#15777
    $k[$j++] = 'bhs'; //#15777
    $k[$j++] = _i; //#15777
    $k[$j++] = 'bbs'; //#15777
    $k[$j++] = _m; //#15777
    $k[$j++] = 'txt'; //#15777
    $k[$j++] = $1.txt; //#15777
    $k[$j++] = 'opt'; //#15777
    $k[$j++] = $1.options; //#15777
    var _p = $d(); //#15777
    $k[$j++] = _p; //#15780
    if (!$1.dontdraw) { //#15780
        bwipp_renlinear(); //#15780
    } //#15780
}

function bwipp_raw() {
    var $1 = Object.create(bwipp_raw.$ctx || (bwipp_raw.$ctx = {})); //#15812
    $1.dontdraw = false; //#15815
    $1.height = 1; //#15816
    $k[$j++] = $1; //#15818
    bwipp_processoptions(); //#15818
    $1.options = $k[--$j]; //#15818
    $1.barcode = $k[--$j]; //#15819
    $forall($1.barcode, function() { //#15826
        var _3 = $k[--$j]; //#15823
        if ((_3 < 49) || (_3 > 57)) { //#15825
            $k[$j++] = 'bwipp.rawBadCharacter#15824'; //#15824
            $k[$j++] = "Raw must contain only digits 1 to 9"; //#15824
            bwipp_raiseerror(); //#15824
        } //#15824
    }); //#15824
    $k[$j++] = Infinity; //#15834
    $k[$j++] = Infinity; //#15831
    $forall($1.barcode, function() { //#15831
        var _5 = $k[--$j]; //#15831
        $k[$j++] = $f(_5 - 48); //#15831
    }); //#15831
    var _6 = $a(); //#15831
    $k[$j++] = Infinity; //#15832
    for (var _8 = 0, _9 = ~~(($1.barcode.length + 1) / 2); _8 < _9; _8++) { //#15832
        $k[$j++] = $1.height; //#15832
    } //#15832
    var _B = $a(); //#15832
    $k[$j++] = Infinity; //#15833
    for (var _D = 0, _E = ~~(($1.barcode.length + 1) / 2); _D < _E; _D++) { //#15833
        $k[$j++] = 0; //#15833
    } //#15833
    var _F = $a(); //#15833
    $k[$j++] = 'ren'; //#15834
    $k[$j++] = bwipp_renlinear; //#15834
    $k[$j++] = 'sbs'; //#15834
    $k[$j++] = _6; //#15834
    $k[$j++] = 'bhs'; //#15834
    $k[$j++] = _B; //#15834
    $k[$j++] = 'bbs'; //#15834
    $k[$j++] = _F; //#15834
    $k[$j++] = 'opt'; //#15834
    $k[$j++] = $1.options; //#15834
    var _H = $d(); //#15834
    $k[$j++] = _H; //#15837
    if (!$1.dontdraw) { //#15837
        bwipp_renlinear(); //#15837
    } //#15837
}

function bwipp_daft() {
    var $1 = Object.create(bwipp_daft.$ctx || (bwipp_daft.$ctx = {})); //#15867
    $1.dontdraw = false; //#15870
    $1.height = 0.175; //#15871
    $k[$j++] = $1; //#15873
    bwipp_processoptions(); //#15873
    $1.options = $k[--$j]; //#15873
    $1.barcode = $k[--$j]; //#15874
    $forall($1.barcode, function() { //#15880
        var _3 = $k[--$j]; //#15877
        if ((_3 != 68) && ((_3 != 65) && ((_3 != 70) && (_3 != 84)))) { //#15879
            $k[$j++] = 'bwipp.daftBadCharacter#15878'; //#15878
            $k[$j++] = "DAFT must contain only characters D, A, F and T"; //#15878
            bwipp_raiseerror(); //#15878
        } //#15878
    }); //#15878
    $1.barlen = $1.barcode.length; //#15882
    $1.bbs = $a($1.barlen); //#15884
    $1.bhs = $a($1.barlen); //#15885
    for (var _B = 0, _A = $1.barlen - 1; _B <= _A; _B += 1) { //#15905
        $1.i = _B; //#15887
        $1.enc = $geti($1.barcode, $1.i, 1); //#15888
        if ($eq($1.enc, "D")) { //#15892
            $put($1.bbs, $1.i, (0 * $1.height) / 8); //#15890
            $put($1.bhs, $1.i, (5 * $1.height) / 8); //#15891
        } //#15891
        if ($eq($1.enc, "A")) { //#15896
            $put($1.bbs, $1.i, (3 * $1.height) / 8); //#15894
            $put($1.bhs, $1.i, (5 * $1.height) / 8); //#15895
        } //#15895
        if ($eq($1.enc, "F")) { //#15900
            $put($1.bbs, $1.i, (0 * $1.height) / 8); //#15898
            $put($1.bhs, $1.i, (8 * $1.height) / 8); //#15899
        } //#15899
        if ($eq($1.enc, "T")) { //#15904
            $put($1.bbs, $1.i, (3 * $1.height) / 8); //#15902
            $put($1.bhs, $1.i, (2 * $1.height) / 8); //#15903
        } //#15903
    } //#15903
    $k[$j++] = Infinity; //#15913
    var _h = $1.bbs; //#15910
    var _i = $1.bhs; //#15911
    $k[$j++] = Infinity; //#15912
    for (var _k = 0, _l = $1.bhs.length - 1; _k < _l; _k++) { //#15912
        $k[$j++] = 1.44; //#15912
        $k[$j++] = 1.872; //#15912
    } //#15912
    $k[$j++] = 1.44; //#15912
    var _m = $a(); //#15912
    $k[$j++] = 'ren'; //#15913
    $k[$j++] = bwipp_renlinear; //#15913
    $k[$j++] = 'bbs'; //#15913
    $k[$j++] = _h; //#15913
    $k[$j++] = 'bhs'; //#15913
    $k[$j++] = _i; //#15913
    $k[$j++] = 'sbs'; //#15913
    $k[$j++] = _m; //#15913
    $k[$j++] = 'opt'; //#15913
    $k[$j++] = $1.options; //#15913
    var _o = $d(); //#15913
    $k[$j++] = _o; //#15916
    if (!$1.dontdraw) { //#15916
        bwipp_renlinear(); //#15916
    } //#15916
}

function bwipp_symbol() {
    var $1 = Object.create(bwipp_symbol.$ctx || (bwipp_symbol.$ctx = {})); //#15946
    $1.dontdraw = false; //#15949
    $k[$j++] = $1; //#15951
    bwipp_processoptions(); //#15951
    $1.options = $k[--$j]; //#15951
    $1.barcode = $k[--$j]; //#15952
    var _H = new Map([
        ["fima", function() {
            $1.sbs = $a([2.25, 2.25, 2.25, 11.25, 2.25, 11.25, 2.25, 2.25, 2.25]); //#15956
            $1.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625]); //#15957
            $1.bbs = $a([0, 0, 0, 0, 0]); //#15958
        }],
        ["fimb", function() {
            $1.sbs = $a([2.25, 6.75, 2.25, 2.25, 2.25, 6.25, 2.25, 2.25, 2.25, 6.75, 2.25]); //#15961
            $1.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625, 0.625]); //#15962
            $1.bbs = $a([0, 0, 0, 0, 0, 0]); //#15963
        }],
        ["fimc", function() {
            $1.sbs = $a([2.25, 2.25, 2.25, 6.75, 2.25, 6.75, 2.25, 6.75, 2.25, 2.25, 2.25]); //#15966
            $1.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625, 0.625]); //#15967
            $1.bbs = $a([0, 0, 0, 0, 0, 0]); //#15968
        }],
        ["fimd", function() {
            $1.sbs = $a([2.25, 2.25, 2.25, 2.25, 2.25, 6.75, 2.25, 6.75, 2.25, 2.25, 2.25, 2.25, 2.25]); //#15971
            $1.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625, 0.625, 0.625]); //#15972
            $1.bbs = $a([0, 0, 0, 0, 0, 0, 0]); //#15973
        }],
        ["fime", function() {
            $1.sbs = $a([2.25, 6.75, 2.25, 15.75, 2.25, 6.75, 2.25]); //#15976
            $1.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625, 0.625, 0.625]); //#15977
            $1.bbs = $a([0, 0, 0, 0, 0, 0, 0]); //#15978
        }]
    ]); //#15978
    $1.symbols = _H; //#15980
    var _K = $get($1.symbols, $1.barcode) !== undefined; //#15983
    if (!_K) { //#15985
        $k[$j++] = 'bwipp.symbolUnknownSymbol#15984'; //#15984
        $k[$j++] = "Unknown symbol name provided"; //#15984
        bwipp_raiseerror(); //#15984
    } //#15984
    if ($get($1.symbols, $1.barcode)() === true) {
        return true;
    } //#15987
    var _S = new Map([
        ["ren", bwipp_renlinear],
        ["sbs", $1.sbs],
        ["bhs", $1.bhs],
        ["bbs", $1.bbs],
        ["opt", $1.options]
    ]); //#15995
    $k[$j++] = _S; //#15998
    if (!$1.dontdraw) { //#15998
        bwipp_renlinear(); //#15998
    } //#15998
}

function bwipp_pdf417() {
    var $1 = Object.create(bwipp_pdf417.$ctx || (bwipp_pdf417.$ctx = {})); //#16031
    $1.dontdraw = false; //#16034
    $1.compact = false; //#16035
    $1.eclevel = -1; //#16036
    $1.columns = 0; //#16037
    $1.rows = 0; //#16038
    $1.rowmult = 3; //#16039
    $1.encoding = "auto"; //#16040
    $1.ccc = false; //#16041
    $1.raw = false; //#16042
    $1.parse = false; //#16043
    $1.parsefnc = false; //#16044
    $k[$j++] = $1; //#16046
    bwipp_processoptions(); //#16046
    $1.options = $k[--$j]; //#16046
    var _1 = $k[--$j]; //#16047
    $1.barcode = _1; //#16047
    if (!bwipp_pdf417.$ctx._16140) { //#16140
        (function() { //#16140
            var $ctx = Object.create($1); //#16140
            $ctx.T = 0; //#16053
            $ctx.N = 1; //#16053
            $ctx.B = 2; //#16053
            $ctx.A = 0; //#16054
            $ctx.L = 1; //#16054
            $ctx.M = 2; //#16054
            $ctx.P = 3; //#16054
            $ctx.tl = -1; //#16057
            $ctx.nl = -2; //#16057
            $ctx.bl = -3; //#16057
            $ctx.bl6 = -4; //#16057
            $ctx.bs = -5; //#16057
            $ctx.al = -6; //#16060
            $ctx.ll = -7; //#16060
            $ctx.ml = -8; //#16060
            $ctx.pl = -9; //#16060
            $ctx.as = -10; //#16060
            $ctx.ps = -11; //#16060
            $ctx.charmaps = $a([$a(["A", "a", "0", ";"]), $a(["B", "b", "1", "<"]), $a(["C", "c", "2", ">"]), $a(["D", "d", "3", "@"]), $a(["E", "e", "4", "["]), $a(["F", "f", "5", 92]), $a(["G", "g", "6", "]"]), $a(["H", "h", "7", "_"]), $a(["I", "i", "8", "`"]), $a(["J", "j", "9", "~"]), $a(["K", "k", "&", "!"]), $a(["L", "l", 13, 13]), $a(["M", "m", 9, 9]), $a(["N", "n", ",", ","]), $a(["O", "o", ":", ":"]), $a(["P", "p", "#", 10]), $a(["Q", "q", "-", "-"]), $a(["R", "r", ".", "."]), $a(["S", "s", "$", "$"]), $a(["T", "t", "/", "/"]), $a(["U", "u", "+", "\""]), $a(["V", "v", "%", "|"]), $a(["W", "w", "*", "*"]), $a(["X", "x", "=", 40]), $a(["Y", "y", "^", 41]), $a(["Z", "z", $ctx.pl, "?"]), $a([" ", " ", " ", "{"]), $a([$ctx.ll, $ctx.as, $ctx.ll, "}"]), $a([$ctx.ml, $ctx.ml, $ctx.al, "'"]), $a([$ctx.ps, $ctx.ps, $ctx.ps, $ctx.al])]); //#16095
            $ctx.charvals = $a([new Map, new Map, new Map, new Map]); //#16098
            $ctx.alltext = new Map; //#16099
            for (var _l = 0, _k = $ctx.charmaps.length - 1; _l <= _k; _l += 1) { //#16109
                $ctx.i = _l; //#16101
                $ctx.encs = $get($ctx.charmaps, $ctx.i); //#16102
                for (var _p = 0; _p <= 3; _p += 1) { //#16108
                    $ctx.j = _p; //#16104
                    var _s = $get($ctx.encs, $ctx.j); //#16105
                    $k[$j++] = _s; //#16105
                    if ($eq($type(_s), 'stringtype')) { //#16105
                        var _v = $get($k[--$j], 0); //#16105
                        $k[$j++] = _v; //#16105
                    } //#16105
                    var _w = $k[--$j]; //#16106
                    $put($get($ctx.charvals, $ctx.j), _w, $ctx.i); //#16106
                    $put($ctx.alltext, _w, -1); //#16107
                } //#16107
            } //#16107
            $ctx.e = 10000; //#16111
            var _16 = $a([$a([0, 1, 1, 2]), $a([2, 0, 1, 2]), $a([1, 1, 0, 1]), $a([1, 2, 2, 0])]); //#16118
            $ctx.latlen = _16; //#16119
            $ctx.latseq = $a([$a([$a([]), $a([$ctx.ll]), $a([$ctx.ml]), $a([$ctx.ml, $ctx.pl])]), $a([$a([$ctx.ml, $ctx.al]), $a([]), $a([$ctx.ml]), $a([$ctx.ml, $ctx.pl])]), $a([$a([$ctx.al]), $a([$ctx.ll]), $a([]), $a([$ctx.pl])]), $a([$a([$ctx.al]), $a([$ctx.al, $ctx.ll]), $a([$ctx.al, $ctx.ml]), $a([])])]); //#16127
            $ctx.shftlen = $a([$a([$ctx.e, $ctx.e, $ctx.e, 1]), $a([1, $ctx.e, $ctx.e, 1]), $a([$ctx.e, $ctx.e, $ctx.e, 1]), $a([$ctx.e, $ctx.e, $ctx.e, $ctx.e])]); //#16135
            $k[$j++] = Infinity; //#16138
            $k[$j++] = $ctx.tl; //#16138
            $k[$j++] = 900; //#16138
            $k[$j++] = $ctx.bl; //#16138
            $k[$j++] = 901; //#16138
            $k[$j++] = $ctx.bl6; //#16138
            $k[$j++] = 924; //#16138
            $k[$j++] = $ctx.nl; //#16138
            $k[$j++] = 902; //#16138
            $k[$j++] = $ctx.bs; //#16138
            $k[$j++] = 913; //#16138
            $ctx.latchcws = $d(); //#16139
            for (var _26 in $ctx) {
                $ctx.hasOwnProperty(_26) && (bwipp_pdf417.$ctx[_26] = $ctx[_26]);
            } //#16139
            bwipp_pdf417.$ctx._16140 = 1; //#16139
        })(); //#16139
    } //#16139
    if ($1.raw) { //#16142
        $1.encoding = "raw"; //#16142
    } //#16142
    if ($eq($1.encoding, "raw")) { //#16156
        $1.datcws = $a($1.barcode.length); //#16146
        $1.i = 0; //#16147
        $1.j = 0; //#16147
        for (;;) { //#16154
            if ($1.i == $1.barcode.length) { //#16149
                break; //#16149
            } //#16149
            $1.cw = $cvi($geti($1.barcode, $1.i + 1, 3)); //#16150
            $put($1.datcws, $1.j, $1.cw); //#16151
            $1.i = $1.i + 4; //#16152
            $1.j = $1.j + 1; //#16153
        } //#16153
        $1.datcws = $geti($1.datcws, 0, $1.j); //#16155
    } //#16155
    if ($1.ccc) { //#16158
        $1.encoding = "ccc"; //#16158
    } //#16158
    $1.encb = function() {
        $1.in = $k[--$j]; //#16161
        $1.inlen = $1.in.length; //#16162
        $1.out = $a(((~~($1.inlen / 6)) * 5) + ($1.inlen % 6)); //#16163
        for (var _2W = 0, _2V = (~~($1.inlen / 6)) - 1; _2W <= _2V; _2W += 1) { //#16186
            $1.k = _2W; //#16165
            $k[$j++] = Infinity; //#16166
            $aload($geti($1.in, $1.k * 6, 3)); //#16166
            $1.msbs = $a(); //#16166
            $k[$j++] = Infinity; //#16169
            $aload($1.msbs); //#16168
            var _2c = $k[--$j]; //#16168
            var _2d = $k[--$j]; //#16168
            var _2e = $k[--$j]; //#16168
            $k[$j++] = $f(($f(_2c + (_2d * 256))) + (_2e * 65536)); //#16169
            for (var _2f = 0, _2g = 3; _2f < _2g; _2f++) { //#16169
                var _2h = $k[--$j]; //#16169
                $k[$j++] = _2h % 900; //#16169
                $k[$j++] = ~~(_2h / 900); //#16169
            } //#16169
            $1.mscs = $a(); //#16169
            $k[$j++] = Infinity; //#16171
            $aload($geti($1.in, ($1.k * 6) + 3, 3)); //#16171
            $1.lsbs = $a(); //#16171
            $k[$j++] = Infinity; //#16174
            $aload($1.lsbs); //#16173
            var _2o = $k[--$j]; //#16173
            var _2p = $k[--$j]; //#16173
            var _2q = $k[--$j]; //#16173
            $k[$j++] = $f(($f(_2o + (_2p * 256))) + (_2q * 65536)); //#16174
            for (var _2r = 0, _2s = 3; _2r < _2s; _2r++) { //#16174
                var _2t = $k[--$j]; //#16174
                $k[$j++] = _2t % 900; //#16174
                $k[$j++] = ~~(_2t / 900); //#16174
            } //#16174
            $1.lscs = $a(); //#16174
            var _2w = $get($1.lscs, 0); //#16176
            var _2y = $get($1.mscs, 0); //#16176
            $put($1.out, ($1.k * 5) + 4, ($f(_2w + (_2y * 316))) % 900); //#16177
            var _32 = $get($1.lscs, 1); //#16178
            var _34 = $get($1.mscs, 0); //#16178
            var _36 = $get($1.mscs, 1); //#16178
            $put($1.out, ($1.k * 5) + 3, ($f(($f(($f((~~(($f(_2w + (_2y * 316))) / 900)) + _32)) + (_34 * 641))) + (_36 * 316))) % 900); //#16179
            var _3A = $get($1.lscs, 2); //#16180
            var _3C = $get($1.mscs, 0); //#16180
            var _3E = $get($1.mscs, 1); //#16180
            var _3G = $get($1.mscs, 2); //#16180
            $put($1.out, ($1.k * 5) + 2, ($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_2w + (_2y * 316))) / 900)) + _32)) + (_34 * 641))) + (_36 * 316))) / 900)) + _3A)) + (_3C * 20))) + (_3E * 641))) + (_3G * 316))) % 900); //#16181
            var _3K = $get($1.lscs, 3); //#16182
            var _3M = $get($1.mscs, 1); //#16182
            var _3O = $get($1.mscs, 2); //#16182
            $put($1.out, ($1.k * 5) + 1, ($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_2w + (_2y * 316))) / 900)) + _32)) + (_34 * 641))) + (_36 * 316))) / 900)) + _3A)) + (_3C * 20))) + (_3E * 641))) + (_3G * 316))) / 900)) + _3K)) + (_3M * 20))) + (_3O * 641))) % 900); //#16183
            $put($1.out, $1.k * 5, ($f((~~(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_2w + (_2y * 316))) / 900)) + _32)) + (_34 * 641))) + (_36 * 316))) / 900)) + _3A)) + (_3C * 20))) + (_3E * 641))) + (_3G * 316))) / 900)) + _3K)) + (_3M * 20))) + (_3O * 641))) / 900)) + ($get($1.mscs, 2) * 20))) % 900); //#16185
        } //#16185
        $1.rem = $1.inlen % 6; //#16187
        if ($1.rem != 0) { //#16192
            $k[$j++] = $1.out; //#16190
            $k[$j++] = $1.out.length - $1.rem; //#16190
            $k[$j++] = Infinity; //#16190
            $aload($geti($1.in, $1.inlen - $1.rem, $1.rem)); //#16190
            var _3f = $a(); //#16190
            var _3g = $k[--$j]; //#16191
            $puti($k[--$j], _3g, _3f); //#16191
        } //#16191
        $k[$j++] = $1.out; //#16193
    }; //#16193
    if ($eq($1.encoding, "byte") || $eq($1.encoding, "ccc")) { //#16202
        $1.barlen = $1.barcode.length; //#16197
        $1.datcws = $a((((~~($1.barlen / 6)) * 5) + ($1.barlen % 6)) + 1); //#16198
        var _3r = (($1.barlen % 6) == 0) ? 924 : 901; //#16199
        $put($1.datcws, 0, _3r); //#16199
        $k[$j++] = $1.datcws; //#16200
        $k[$j++] = 1; //#16200
        $k[$j++] = Infinity; //#16200
        $forall($1.barcode); //#16200
        var _3u = $a(); //#16200
        $k[$j++] = _3u; //#16200
        $1.encb(); //#16200
        var _3v = $k[--$j]; //#16200
        var _3w = $k[--$j]; //#16200
        $puti($k[--$j], _3w, _3v); //#16200
        if ($eq($1.encoding, "ccc")) { //#16201
            $k[$j++] = Infinity; //#16201
            $k[$j++] = 920; //#16201
            $aload($1.datcws); //#16201
            $1.datcws = $a(); //#16201
        } //#16201
    } //#16201
    if ($eq($1.encoding, "auto")) { //#16553
        var _44 = new Map([
            ["parse", $1.parse],
            ["parsefnc", $1.parsefnc],
            ["eci", true]
        ]); //#16210
        $1.fncvals = _44; //#16212
        $k[$j++] = 'msg'; //#16213
        $k[$j++] = $1.barcode; //#16213
        $k[$j++] = $1.fncvals; //#16213
        bwipp_parseinput(); //#16213
        var _47 = $k[--$j]; //#16213
        $1[$k[--$j]] = _47; //#16213
        $1.msglen = $1.msg.length; //#16214
        $k[$j++] = Infinity; //#16217
        for (var _4B = 0, _4C = $1.msglen; _4B < _4C; _4B++) { //#16217
            $k[$j++] = 0; //#16217
        } //#16217
        $k[$j++] = 0; //#16217
        $1.numdigits = $a(); //#16217
        $k[$j++] = Infinity; //#16218
        for (var _4F = 0, _4G = $1.msglen; _4F < _4G; _4F++) { //#16218
            $k[$j++] = 0; //#16218
        } //#16218
        $k[$j++] = 0; //#16218
        $1.numtext = $a(); //#16218
        $k[$j++] = Infinity; //#16219
        for (var _4J = 0, _4K = $1.msglen; _4J < _4K; _4J++) { //#16219
            $k[$j++] = 0; //#16219
        } //#16219
        $k[$j++] = 0; //#16219
        $1.numbytes = $a(); //#16219
        $k[$j++] = Infinity; //#16220
        for (var _4N = 0, _4O = $1.msglen; _4N < _4O; _4N++) { //#16220
            $k[$j++] = 0; //#16220
        } //#16220
        $k[$j++] = 0; //#16220
        $1.iseci = $a(); //#16220
        for (var _4R = $1.msglen - 1; _4R >= 0; _4R -= 1) { //#16233
            $1.i = _4R; //#16222
            var _4U = $get($1.msg, $1.i); //#16223
            if ((_4U >= 48) && (_4U <= 57)) { //#16225
                $put($1.numdigits, $1.i, $f($get($1.numdigits, $1.i + 1) + 1)); //#16224
            } //#16224
            var _4e = $get($1.alltext, $get($1.msg, $1.i)) !== undefined; //#16226
            if (_4e && ($get($1.numdigits, $1.i) < 13)) { //#16228
                $put($1.numtext, $1.i, $f($get($1.numtext, $1.i + 1) + 1)); //#16227
            } //#16227
            if ((($get($1.msg, $1.i) >= 0) && ($get($1.numtext, $1.i) < 5)) && ($get($1.numdigits, $1.i) < 13)) { //#16231
                $put($1.numbytes, $1.i, $f($get($1.numbytes, $1.i + 1) + 1)); //#16230
            } //#16230
            $put($1.iseci, $1.i, $get($1.msg, $1.i) <= -1000000); //#16232
        } //#16232
        $1.numdigits = $geti($1.numdigits, 0, $1.msglen); //#16234
        $1.numtext = $geti($1.numtext, 0, $1.msglen); //#16235
        $1.numbytes = $geti($1.numbytes, 0, $1.msglen); //#16236
        $1.seq = $a([]); //#16238
        $1.seqlen = 0; //#16238
        $1.state = $1.T; //#16238
        $1.p = 0; //#16238
        for (;;) { //#16292
            if ($1.p == $1.msglen) { //#16239
                break; //#16239
            } //#16239
            if ($get($1.iseci, $1.p)) { //#16290
                $1.eci = $get($1.msg, $1.p); //#16241
                $k[$j++] = Infinity; //#16244
                $aload($1.seq); //#16243
                $k[$j++] = $a([$1.eci]); //#16244
                $1.seq = $a(); //#16244
                $1.p = $1.p + 1; //#16246
                $k[$j++] = 'seqlen'; //#16247
                $k[$j++] = $1.seqlen; //#16247
                if ($1.eci <= -1810900) { //#16247
                    $k[$j++] = 2; //#16247
                } else { //#16247
                    var _5X = ($1.eci <= -1000900) ? 3 : 2; //#16247
                    $k[$j++] = _5X; //#16247
                } //#16247
                var _5Y = $k[--$j]; //#16247
                var _5Z = $k[--$j]; //#16247
                $1[$k[--$j]] = $f(_5Z + _5Y); //#16247
            } else { //#16290
                $1.n = $get($1.numdigits, $1.p); //#16249
                if (($1.n >= 13) || (($1.n == $1.msglen) && ($1.n >= 8))) { //#16290
                    $k[$j++] = Infinity; //#16254
                    $aload($1.seq); //#16252
                    $k[$j++] = $1.nl; //#16254
                    $k[$j++] = Infinity; //#16254
                    $aload($geti($1.msg, $1.p, $1.n)); //#16254
                    var _5o = $a(); //#16254
                    $k[$j++] = _5o; //#16254
                    $1.seq = $a(); //#16254
                    $1.state = $1.N; //#16256
                    $1.p = $f($1.p + $1.n); //#16257
                    $1.seqlen = $f(($1.seqlen + 1) + $1.n); //#16258
                } else { //#16290
                    $1.t = $get($1.numtext, $1.p); //#16260
                    if ($1.t >= 5) { //#16290
                        $k[$j++] = Infinity; //#16267
                        $aload($1.seq); //#16263
                        if ($1.state != $1.T) { //#16266
                            $k[$j++] = $1.tl; //#16265
                        } //#16265
                        $k[$j++] = Infinity; //#16267
                        $aload($geti($1.msg, $1.p, $1.t)); //#16267
                        var _67 = $a(); //#16267
                        $k[$j++] = _67; //#16267
                        $1.seq = $a(); //#16267
                        $1.state = $1.T; //#16269
                        $1.p = $f($1.p + $1.t); //#16270
                        $1.seqlen = $f($f($1.seqlen + 1) + $1.t); //#16271
                    } else { //#16290
                        $1.b = $get($1.numbytes, $1.p); //#16273
                        if (($1.b == 1) && ($1.state == $1.T)) { //#16290
                            $k[$j++] = Infinity; //#16278
                            $aload($1.seq); //#16276
                            $k[$j++] = $1.bs; //#16278
                            $k[$j++] = $a([$get($1.msg, $1.p)]); //#16278
                            $1.seq = $a(); //#16278
                            $1.p = $f($1.p + $1.b); //#16280
                            $1.seqlen = $f($1.seqlen + 2); //#16281
                        } else { //#16290
                            $k[$j++] = Infinity; //#16286
                            $aload($1.seq); //#16284
                            var _6W = (($1.b % 6) != 0) ? $1.bl : $1.bl6; //#16285
                            $k[$j++] = _6W; //#16286
                            $k[$j++] = Infinity; //#16286
                            $aload($geti($1.msg, $1.p, $1.b)); //#16286
                            var _6b = $a(); //#16286
                            $k[$j++] = _6b; //#16286
                            $1.seq = $a(); //#16286
                            $1.state = $1.B; //#16288
                            $1.p = $f($1.p + $1.b); //#16289
                            $1.seqlen = $f($f($1.seqlen + 1) + $1.b); //#16290
                        } //#16290
                    } //#16290
                } //#16290
            } //#16290
        } //#16290
        $1.enca = function() {
            var _6m = $get($get($1.charvals, $1.A), $k[--$j]); //#16295
            $k[$j++] = _6m; //#16295
        }; //#16295
        $1.encl = function() {
            var _6r = $get($get($1.charvals, $1.L), $k[--$j]); //#16296
            $k[$j++] = _6r; //#16296
        }; //#16296
        $1.encm = function() {
            var _6w = $get($get($1.charvals, $1.M), $k[--$j]); //#16297
            $k[$j++] = _6w; //#16297
        }; //#16297
        $1.encp = function() {
            var _71 = $get($get($1.charvals, $1.P), $k[--$j]); //#16298
            $k[$j++] = _71; //#16298
        }; //#16298
        $1.textencfuncs = $a(['enca', 'encl', 'encm', 'encp']); //#16299
        $1.addtotext = function() {
            $put($1.text, $1.l, $k[--$j]); //#16302
            $1.l = $1.l + 1; //#16303
        }; //#16303
        $1.enct = function() {
            $1.in = $k[--$j]; //#16307
            $1.curlen = $a([$1.e, $1.e, $1.e, $1.e]); //#16309
            $put($1.curlen, $1.submode, 0); //#16310
            $1.curseq = $a([$a([]), $a([]), $a([]), $a([])]); //#16311
            $forall($1.in, function() { //#16381
                $1.char = $k[--$j]; //#16316
                for (;;) { //#16337
                    $1.imp = false; //#16320
                    var _7Q = $a([$1.A, $1.L, $1.M, $1.P]); //#16321
                    for (var _7R = 0, _7S = _7Q.length; _7R < _7S; _7R++) { //#16335
                        $1.x = $get(_7Q, _7R); //#16322
                        var _7Y = $a([$1.A, $1.L, $1.M, $1.P]); //#16323
                        for (var _7Z = 0, _7a = _7Y.length; _7Z < _7a; _7Z++) { //#16334
                            $1.y = $get(_7Y, _7Z); //#16324
                            $1.cost = $f($get($1.curlen, $1.x) + $get($get($1.latlen, $1.x), $1.y)); //#16325
                            if ($1.cost < $get($1.curlen, $1.y)) { //#16333
                                $put($1.curlen, $1.y, $1.cost); //#16327
                                $k[$j++] = $1.curseq; //#16330
                                $k[$j++] = $1.y; //#16330
                                $k[$j++] = Infinity; //#16330
                                $aload($get($1.curseq, $1.x)); //#16329
                                $aload($get($get($1.latseq, $1.x), $1.y)); //#16330
                                var _81 = $a(); //#16330
                                var _82 = $k[--$j]; //#16331
                                $put($k[--$j], _82, _81); //#16331
                                $1.imp = true; //#16332
                            } //#16332
                        } //#16332
                    } //#16332
                    if (!$1.imp) { //#16336
                        break; //#16336
                    } //#16336
                } //#16336
                $1.nxtlen = $a([$1.e, $1.e, $1.e, $1.e]); //#16340
                $1.nxtseq = $a(4); //#16341
                var _8F = $a([$1.A, $1.L, $1.M, $1.P]); //#16343
                for (var _8G = 0, _8H = _8F.length; _8G < _8H; _8G++) { //#16376
                    $1.x = $get(_8F, _8G); //#16344
                    for (;;) { //#16374
                        var _8N = $get($get($1.charvals, $1.x), $1.char) !== undefined; //#16348
                        if (!_8N) { //#16348
                            break; //#16348
                        } //#16348
                        $1.cost = $f($get($1.curlen, $1.x) + 1); //#16351
                        if ($1.cost < $get($1.nxtlen, $1.x)) { //#16355
                            $put($1.nxtlen, $1.x, $1.cost); //#16353
                            $k[$j++] = $1.nxtseq; //#16354
                            $k[$j++] = $1.x; //#16354
                            $k[$j++] = Infinity; //#16354
                            $aload($get($1.curseq, $1.x)); //#16354
                            $k[$j++] = $1.char; //#16354
                            var _8e = $a(); //#16354
                            var _8f = $k[--$j]; //#16354
                            $put($k[--$j], _8f, _8e); //#16354
                        } //#16354
                        var _8l = $a([$1.A, $1.L, $1.M, $1.P]); //#16358
                        for (var _8m = 0, _8n = _8l.length; _8m < _8n; _8m++) { //#16371
                            $1.y = $get(_8l, _8m); //#16359
                            if ($ne($1.x, $1.y)) { //#16370
                                $1.cost = $f($f($get($1.curlen, $1.y) + $get($get($1.shftlen, $1.y), $1.x)) + 1); //#16361
                                if ($1.cost < $get($1.nxtlen, $1.y)) { //#16369
                                    $put($1.nxtlen, $1.y, $1.cost); //#16363
                                    $k[$j++] = $1.nxtseq; //#16367
                                    $k[$j++] = $1.y; //#16367
                                    $k[$j++] = Infinity; //#16367
                                    $aload($get($1.curseq, $1.y)); //#16365
                                    var _9D = ($1.x == $1.A) ? $1.as : $1.ps; //#16366
                                    $k[$j++] = _9D; //#16367
                                    $k[$j++] = $1.char; //#16367
                                    var _9F = $a(); //#16367
                                    var _9G = $k[--$j]; //#16368
                                    $put($k[--$j], _9G, _9F); //#16368
                                } //#16368
                            } //#16368
                        } //#16368
                        break; //#16373
                    } //#16373
                } //#16373
                $1.curlen = $1.nxtlen; //#16378
                $1.curseq = $1.nxtseq; //#16379
            }); //#16379
            $1.minseq = $1.e; //#16384
            var _9P = $a([$1.A, $1.L, $1.M, $1.P]); //#16385
            for (var _9Q = 0, _9R = _9P.length; _9Q < _9R; _9Q++) { //#16391
                $1.k = $get(_9P, _9Q); //#16386
                if ($get($1.curlen, $1.k) < $1.minseq) { //#16390
                    $1.minseq = $get($1.curlen, $1.k); //#16388
                    $1.txtseq = $get($1.curseq, $1.k); //#16389
                } //#16389
            } //#16389
            $1.text = $a($1.minseq); //#16394
            $1.k = 0; //#16395
            $1.l = 0; //#16395
            for (;;) { //#16415
                if ($1.k >= $1.txtseq.length) { //#16396
                    break; //#16396
                } //#16396
                $1.char = $get($1.txtseq, $1.k); //#16398
                $k[$j++] = $1.char; //#16401
                if ($1[$get($1.textencfuncs, $1.submode)]() === true) {
                    break;
                } //#16401
                $1.addtotext(); //#16401
                $1.k = $1.k + 1; //#16402
                if (($1.char == $1.as) || ($1.char == $1.ps)) { //#16408
                    $k[$j++] = $get($1.txtseq, $1.k); //#16406
                    if ($1.char == $1.as) { //#16406
                        $1.enca(); //#16406
                    } else { //#16406
                        $1.encp(); //#16406
                    } //#16406
                    $1.addtotext(); //#16406
                    $1.k = $1.k + 1; //#16407
                } //#16407
                if ($1.char == $1.al) { //#16411
                    $1.submode = $1.A; //#16411
                } //#16411
                if ($1.char == $1.ll) { //#16412
                    $1.submode = $1.L; //#16412
                } //#16412
                if ($1.char == $1.ml) { //#16413
                    $1.submode = $1.M; //#16413
                } //#16413
                if ($1.char == $1.pl) { //#16414
                    $1.submode = $1.P; //#16414
                } //#16414
            } //#16414
            if (($1.text.length % 2) == 1) { //#16462
                if ($1.submode == $1.P) { //#16458
                    $k[$j++] = 'pad'; //#16419
                    $k[$j++] = $1.al; //#16419
                    $1.encp(); //#16419
                    var _AG = $k[--$j]; //#16419
                    $1[$k[--$j]] = _AG; //#16419
                    $1.submode = $1.A; //#16420
                } else { //#16458
                    $1.nextecitext = false; //#16423
                    for (var _AM = $1.i + 1, _AL = $1.seq.length - 1; _AM <= _AL; _AM += 1) { //#16430
                        $1.ti = _AM; //#16426
                        if ($ne($type($get($1.seq, $1.ti)), 'arraytype')) { //#16427
                            $1.nextecitext = false; //#16427
                            break; //#16427
                        } //#16427
                        if ($get($get($1.seq, $1.ti), 0) > -1000000) { //#16428
                            break; //#16428
                        } //#16428
                        $1.nextecitext = true; //#16429
                    } //#16429
                    if ($1.nextecitext) { //#16458
                        if ($1.submode == $1.A) { //#16455
                            var _Af = $get($get($1.charvals, $1.L), $get($get($1.seq, $1.ti), 0)) !== undefined; //#16433
                            if (_Af) { //#16438
                                $k[$j++] = 'pad'; //#16434
                                $k[$j++] = $1.ll; //#16434
                                $1.enca(); //#16434
                                var _Ah = $k[--$j]; //#16434
                                $1[$k[--$j]] = _Ah; //#16434
                                $1.submode = $1.L; //#16435
                            } else { //#16438
                                $k[$j++] = 'pad'; //#16437
                                $k[$j++] = $1.ml; //#16437
                                $1.enca(); //#16437
                                var _Al = $k[--$j]; //#16437
                                $1[$k[--$j]] = _Al; //#16437
                                $1.submode = $1.M; //#16438
                            } //#16438
                        } else { //#16455
                            if ($1.submode == $1.M) { //#16455
                                var _Ax = $get($get($1.charvals, $1.L), $get($get($1.seq, $1.ti), 0)) !== undefined; //#16442
                                if (_Ax) { //#16451
                                    $k[$j++] = 'pad'; //#16443
                                    $k[$j++] = $1.ll; //#16443
                                    $1.encm(); //#16443
                                    var _Az = $k[--$j]; //#16443
                                    $1[$k[--$j]] = _Az; //#16443
                                    $1.submode = $1.L; //#16444
                                } else { //#16451
                                    var _B9 = $get($get($1.charvals, $1.P), $get($get($1.seq, $1.ti), 0)) !== undefined; //#16446
                                    if (_B9) { //#16451
                                        $k[$j++] = 'pad'; //#16447
                                        $k[$j++] = $1.pl; //#16447
                                        $1.encm(); //#16447
                                        var _BB = $k[--$j]; //#16447
                                        $1[$k[--$j]] = _BB; //#16447
                                        $1.submode = $1.P; //#16448
                                    } else { //#16451
                                        $k[$j++] = 'pad'; //#16450
                                        $k[$j++] = $1.al; //#16450
                                        $1.encm(); //#16450
                                        var _BF = $k[--$j]; //#16450
                                        $1[$k[--$j]] = _BF; //#16450
                                        $1.submode = $1.A; //#16451
                                    } //#16451
                                } //#16451
                            } else { //#16455
                                $k[$j++] = 'pad'; //#16454
                                $k[$j++] = $1.ml; //#16454
                                $1.encl(); //#16454
                                var _BJ = $k[--$j]; //#16454
                                $1[$k[--$j]] = _BJ; //#16454
                                $1.submode = $1.M; //#16455
                            } //#16455
                        } //#16455
                    } else { //#16458
                        $k[$j++] = 'pad'; //#16458
                        $k[$j++] = $1.ps; //#16458
                        if ($1[$get($1.textencfuncs, $1.submode)]() === true) {
                            return true;
                        } //#16458
                        var _BR = $k[--$j]; //#16458
                        $1[$k[--$j]] = _BR; //#16458
                    } //#16458
                } //#16458
                $k[$j++] = Infinity; //#16461
                $aload($1.text); //#16461
                $k[$j++] = $1.pad; //#16461
                $1.text = $a(); //#16461
            } //#16461
            $1.out = $a(~~($1.text.length / 2)); //#16464
            for (var _Ba = 0, _BZ = $1.out.length - 1; _Ba <= _BZ; _Ba += 1) { //#16468
                $1.k = _Ba; //#16466
                $put($1.out, $1.k, $f(($get($1.text, $1.k * 2) * 30) + $get($1.text, ($1.k * 2) + 1))); //#16467
            } //#16467
            $k[$j++] = $1.out; //#16470
        }; //#16470
        $1.encn = function() {
            $1.in = $k[--$j]; //#16475
            $1.out = $a([]); //#16476
            for (var _Bo = 0, _Bn = $1.in.length - 1; _Bo <= _Bn; _Bo += 44) { //#16504
                $1.k = _Bo; //#16478
                $k[$j++] = Infinity; //#16481
                var _Bt = $1.in.length - $1.k; //#16480
                $k[$j++] = 1; //#16480
                $k[$j++] = $1.in; //#16480
                $k[$j++] = $1.k; //#16480
                $k[$j++] = _Bt; //#16480
                if (_Bt > 44) { //#16480
                    $j--; //#16480
                    $k[$j++] = 44; //#16480
                } //#16480
                var _Bu = $k[--$j]; //#16480
                var _Bv = $k[--$j]; //#16480
                var _Bx = $geti($k[--$j], _Bv, _Bu); //#16480
                for (var _By = 0, _Bz = _Bx.length; _By < _Bz; _By++) { //#16481
                    $k[$j++] = $f($get(_Bx, _By) - 48); //#16481
                } //#16481
                $1.gmod = $a(); //#16481
                $1.cwn = $a([]); //#16483
                for (;;) { //#16502
                    $1.dv = 900; //#16484
                    $1.gmul = $a([]); //#16485
                    $1.val = 0; //#16485
                    for (;;) { //#16497
                        if ($1.gmod.length == 0) { //#16486
                            break; //#16486
                        } //#16486
                        $1.val = $f(($1.val * 10) + $get($1.gmod, 0)); //#16487
                        $1.gmod = $geti($1.gmod, 1, $1.gmod.length - 1); //#16488
                        if ($1.val < $1.dv) { //#16494
                            if ($1.gmul.length != 0) { //#16492
                                $k[$j++] = Infinity; //#16491
                                $aload($1.gmul); //#16491
                                $k[$j++] = 0; //#16491
                                $1.gmul = $a(); //#16491
                            } //#16491
                        } else { //#16494
                            $k[$j++] = Infinity; //#16494
                            $aload($1.gmul); //#16494
                            $k[$j++] = ~~($1.val / $1.dv); //#16494
                            $1.gmul = $a(); //#16494
                        } //#16494
                        $1.val = $1.val % $1.dv; //#16496
                    } //#16496
                    $1.dv = $1.val; //#16498
                    $k[$j++] = Infinity; //#16499
                    $k[$j++] = $1.dv; //#16499
                    $aload($1.cwn); //#16499
                    $1.cwn = $a(); //#16499
                    $1.gmod = $1.gmul; //#16500
                    if ($1.gmul.length == 0) { //#16501
                        break; //#16501
                    } //#16501
                } //#16501
                $k[$j++] = Infinity; //#16503
                $aload($1.out); //#16503
                $aload($1.cwn); //#16503
                $1.out = $a(); //#16503
            } //#16503
            $k[$j++] = $1.out; //#16505
        }; //#16505
        $1.ence = function() {
            var _CY = $f((-$get($k[--$j], 0)) - 1000000); //#16510
            $k[$j++] = _CY; //#16518
            if (_CY <= 899) { //#16517
                var _CZ = $k[--$j]; //#16511
                $k[$j++] = 927; //#16511
                $k[$j++] = _CZ; //#16511
                $astore($a(2)); //#16511
            } else { //#16517
                var _Cb = $k[--$j]; //#16512
                $k[$j++] = _Cb; //#16518
                if (_Cb <= 810899) { //#16517
                    var _Cc = $k[--$j]; //#16513
                    $k[$j++] = 926; //#16513
                    $k[$j++] = (~~(_Cc / 900)) - 1; //#16513
                    $k[$j++] = _Cc % 900; //#16513
                    $astore($a(3)); //#16513
                } else { //#16517
                    var _Ce = $k[--$j]; //#16514
                    $k[$j++] = _Ce; //#16518
                    if (_Ce <= 811799) { //#16517
                        var _Cf = $k[--$j]; //#16515
                        $k[$j++] = 925; //#16515
                        $k[$j++] = $f(_Cf - 810900); //#16515
                        $astore($a(2)); //#16515
                    } else { //#16517
                        $k[$j++] = 'bwipp.pdf417badECI#16517'; //#16517
                        $k[$j++] = "PDF417 supports ECIs 000000 to 811799"; //#16517
                        bwipp_raiseerror(); //#16517
                    } //#16517
                } //#16517
            } //#16517
        }; //#16517
        $1.encfuncs = $a(['enct', 'encn', 'encb']); //#16521
        $1.addtocws = function() {
            var _Ci = $k[--$j]; //#16524
            $puti($1.datcws, $1.j, _Ci); //#16524
            $1.j = _Ci.length + $1.j; //#16525
        }; //#16525
        $1.state = $1.T; //#16529
        $1.submode = $1.A; //#16529
        $1.datcws = $a($1.seqlen); //#16530
        $1.i = 0; //#16531
        $1.j = 0; //#16531
        for (;;) { //#16551
            if ($1.i >= $1.seq.length) { //#16532
                break; //#16532
            } //#16532
            $1.chars = $get($1.seq, $1.i); //#16533
            if ($eq($type($1.chars), 'arraytype')) { //#16547
                if ($get($1.chars, 0) <= -1000000) { //#16538
                    $k[$j++] = $1.chars; //#16536
                    $1.ence(); //#16536
                    $1.addtocws(); //#16536
                } else { //#16538
                    $k[$j++] = $1.chars; //#16538
                    if ($1[$get($1.encfuncs, $1.state)]() === true) {
                        break;
                    } //#16538
                    $1.addtocws(); //#16538
                } //#16538
            } else { //#16547
                $k[$j++] = $a([$get($1.latchcws, $1.chars)]); //#16541
                $1.addtocws(); //#16541
                if ($1.chars == $1.tl) { //#16542
                    $1.state = $1.T; //#16542
                    $1.submode = $1.A; //#16542
                } //#16542
                if ($1.chars == $1.nl) { //#16543
                    $1.state = $1.N; //#16543
                } //#16543
                if (($1.chars == $1.bl) || ($1.chars == $1.bl6)) { //#16544
                    $1.state = $1.B; //#16544
                } //#16544
                if ($1.chars == $1.bs) { //#16548
                    $1.i = $1.i + 1; //#16546
                    $k[$j++] = $get($1.seq, $1.i); //#16547
                    $1.encb(); //#16547
                    $1.addtocws(); //#16547
                } //#16547
            } //#16547
            $1.i = $1.i + 1; //#16550
        } //#16550
        $1.datcws = $geti($1.datcws, 0, $1.j); //#16552
    } //#16552
    $1.m = $1.datcws.length; //#16556
    if ($1.eclevel == -1) { //#16562
        if ($1.m <= 40) { //#16558
            $1.eclevel = 2; //#16558
        } //#16558
        if (($1.m >= 41) && ($1.m <= 160)) { //#16559
            $1.eclevel = 3; //#16559
        } //#16559
        if (($1.m >= 161) && ($1.m <= 320)) { //#16560
            $1.eclevel = 4; //#16560
        } //#16560
        if ($1.m >= 321) { //#16561
            $1.eclevel = 5; //#16561
        } //#16561
    } //#16561
    $1.maxeclevel = (~~((Math.log((928 - 1) - $1.m)) / Math.log(2))) - 1; //#16565
    if ($1.eclevel > $1.maxeclevel) { //#16566
        $1.eclevel = $1.maxeclevel; //#16566
    } //#16566
    $1.k = ~~Math.pow(2, $1.eclevel + 1); //#16567
    if ($1.columns == 0) { //#16570
        $1.columns = ~~(Math.round(Math.sqrt(($1.m + $1.k) / 3))); //#16570
    } //#16570
    $k[$j++] = 'c'; //#16571
    if ($1.columns >= 1) { //#16571
        $k[$j++] = $1.columns; //#16571
    } else { //#16571
        $k[$j++] = 1; //#16571
    } //#16571
    var _Dn = $k[--$j]; //#16571
    $1[$k[--$j]] = _Dn; //#16571
    $1.r = ~~(Math.ceil((($1.m + $1.k) + 1) / $1.columns)); //#16574
    if (($1.r < $1.rows) && ($1.rows <= 90)) { //#16575
        $1.r = $1.rows; //#16575
    } //#16575
    if ($1.r < 3) { //#16576
        $1.r = 3; //#16576
    } //#16576
    if ($1.r > 90) { //#16581
        $k[$j++] = 'bwipp.pdf417insufficientCapacity#16580'; //#16580
        $k[$j++] = "Insufficient capacity in the symbol"; //#16580
        bwipp_raiseerror(); //#16580
    } //#16580
    var _Dy = $1.c; //#16584
    var _Dz = $1.r; //#16584
    var _E0 = $1.m; //#16584
    var _E1 = 8; //#16584
    var _E2 = (~~((Math.log($f(($f((_Dy * _Dz) - 1)) - _E0))) / Math.log(2))) - 1; //#16584
    if (((~~((Math.log($f(($f((_Dy * _Dz) - 1)) - _E0))) / Math.log(2))) - 1) > 8) { //#16584
        var _ = _E1; //#16584
        _E1 = _E2; //#16584
        _E2 = _; //#16584
    } //#16584
    $1.maxeclevel = _E2; //#16584
    if ($1.maxeclevel > $1.eclevel) { //#16588
        $1.eclevel = $1.maxeclevel; //#16586
        $1.k = ~~Math.pow(2, $1.eclevel + 1); //#16587
    } //#16587
    $1.n = $f(($1.c * $1.r) - $1.k); //#16591
    $1.cws = $a($f(($1.c * $1.r) + 1)); //#16592
    $put($1.cws, 0, $1.n); //#16593
    $puti($1.cws, 1, $1.datcws); //#16594
    $k[$j++] = $1.cws; //#16595
    $k[$j++] = $1.m + 1; //#16595
    $k[$j++] = Infinity; //#16595
    for (var _EL = 0, _EM = $f($f($1.n - $1.m) - 1); _EL < _EM; _EL++) { //#16595
        $k[$j++] = 900; //#16595
    } //#16595
    var _EN = $a(); //#16595
    var _EO = $k[--$j]; //#16595
    $puti($k[--$j], _EO, _EN); //#16595
    $k[$j++] = $1.cws; //#16596
    $k[$j++] = $1.n; //#16596
    $k[$j++] = Infinity; //#16596
    for (var _ET = 0, _EU = $1.k; _ET < _EU; _ET++) { //#16596
        $k[$j++] = 0; //#16596
    } //#16596
    $k[$j++] = 0; //#16596
    var _EV = $a(); //#16596
    var _EW = $k[--$j]; //#16596
    $puti($k[--$j], _EW, _EV); //#16596
    $k[$j++] = Infinity; //#16599
    $k[$j++] = 1; //#16599
    for (var _EY = 0, _EZ = 928; _EY < _EZ; _EY++) { //#16599
        var _Ea = $k[--$j]; //#16599
        $k[$j++] = _Ea; //#16599
        $k[$j++] = (_Ea * 3) % 929; //#16599
    } //#16599
    $1.rsalog = $a(); //#16599
    $1.rslog = $a(929); //#16600
    for (var _Ed = 1; _Ed <= 928; _Ed += 1) { //#16601
        $put($1.rslog, $get($1.rsalog, _Ed), _Ed); //#16601
    } //#16601
    $1.rsprod = function() {
        var _Eh = $k[--$j]; //#16605
        var _Ei = $k[--$j]; //#16605
        $k[$j++] = _Ei; //#16609
        $k[$j++] = _Eh; //#16609
        if ((_Eh != 0) && (_Ei != 0)) { //#16608
            var _El = $get($1.rslog, $k[--$j]); //#16606
            var _Eq = $get($1.rsalog, $f(_El + $get($1.rslog, $k[--$j])) % 928); //#16606
            $k[$j++] = _Eq; //#16606
        } else { //#16608
            $j -= 2; //#16608
            $k[$j++] = 0; //#16608
        } //#16608
    }; //#16608
    $k[$j++] = Infinity; //#16613
    $k[$j++] = 1; //#16613
    for (var _Es = 0, _Et = $1.k; _Es < _Et; _Es++) { //#16613
        $k[$j++] = 0; //#16613
    } //#16613
    $1.coeffs = $a(); //#16613
    for (var _Ex = 1, _Ew = $1.k; _Ex <= _Ew; _Ex += 1) { //#16622
        $1.i = _Ex; //#16615
        $put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); //#16616
        for (var _F4 = $1.i - 1; _F4 >= 1; _F4 -= 1) { //#16620
            $1.j = _F4; //#16618
            $k[$j++] = $1.coeffs; //#16619
            $k[$j++] = $1.j; //#16619
            $k[$j++] = $get($1.coeffs, $1.j - 1); //#16619
            $k[$j++] = $get($1.coeffs, $1.j); //#16619
            $k[$j++] = $get($1.rsalog, $1.i); //#16619
            $1.rsprod(); //#16619
            var _FG = $k[--$j]; //#16619
            var _FH = $k[--$j]; //#16619
            var _FI = $k[--$j]; //#16619
            $put($k[--$j], _FI, $f(_FH + _FG) % 929); //#16619
        } //#16619
        $k[$j++] = $1.coeffs; //#16621
        $k[$j++] = 0; //#16621
        $k[$j++] = $get($1.coeffs, 0); //#16621
        $k[$j++] = $get($1.rsalog, $1.i); //#16621
        $1.rsprod(); //#16621
        var _FQ = $k[--$j]; //#16621
        var _FR = $k[--$j]; //#16621
        $put($k[--$j], _FR, _FQ); //#16621
    } //#16621
    $1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); //#16623
    for (var _FX = $1.coeffs.length - 1; _FX >= 0; _FX -= 2) { //#16624
        var _FY = $1.coeffs; //#16624
        $put(_FY, _FX, $f(929 - $get(_FY, _FX))); //#16624
    } //#16624
    for (var _Fc = 0, _Fb = $f($1.n - 1); _Fc <= _Fb; _Fc += 1) { //#16633
        $1.t = $f($get($1.cws, _Fc) + $get($1.cws, $1.n)) % 929; //#16628
        for (var _Fk = 0, _Fj = $1.k - 1; _Fk <= _Fj; _Fk += 1) { //#16632
            $1.j = _Fk; //#16630
            $put($1.cws, $f($1.n + $1.j), ($f($get($1.cws, $f($f($1.n + $1.j) + 1)) + ($f(929 - (($1.t * $get($1.coeffs, ($1.k - $1.j) - 1)) % 929))))) % 929); //#16631
        } //#16631
    } //#16631
    for (var _G1 = $1.n, _G0 = $f($1.n + $1.k); _G1 <= _G0; _G1 += 1) { //#16634
        $put($1.cws, _G1, $f(929 - $get($1.cws, _G1)) % 929); //#16634
    } //#16634
    $1.cws = $geti($1.cws, 0, $1.cws.length - 1); //#16637
    var _G9 = $get($1.options, 'debugcws') !== undefined; //#16639
    if (_G9) { //#16639
        $k[$j++] = 'bwipp.debugcws#16639'; //#16639
        $k[$j++] = $1.cws; //#16639
        bwipp_raiseerror(); //#16639
    } //#16639
    if (!bwipp_pdf417.$ctx._16883) { //#16883
        (function() { //#16883
            var $ctx = Object.create($1); //#16883
            $ctx.clusters = $a([$a([120256, 125680, 128380, 120032, 125560, 128318, 108736, 119920, 108640, 86080, 108592, 86048, 110016, 120560, 125820, 109792, 120440, 125758, 88256, 109680, 88160, 89536, 110320, 120700, 89312, 110200, 120638, 89200, 110140, 89840, 110460, 89720, 110398, 89980, 128506, 119520, 125304, 128190, 107712, 119408, 125244, 107616, 119352, 84032, 107568, 119324, 84000, 107544, 83984, 108256, 119672, 125374, 85184, 108144, 119612, 85088, 108088, 119582, 85040, 108060, 85728, 108408, 119742, 85616, 108348, 85560, 108318, 85880, 108478, 85820, 85790, 107200, 119152, 125116, 107104, 119096, 125086, 83008, 107056, 119068, 82976, 107032, 82960, 82952, 83648, 107376, 119228, 83552, 107320, 119198, 83504, 107292, 83480, 83468, 83824, 107452, 83768, 107422, 83740, 83900, 106848, 118968, 125022, 82496, 106800, 118940, 82464, 106776, 118926, 82448, 106764, 82440, 106758, 82784, 106936, 119006, 82736, 106908, 82712, 106894, 82700, 82694, 106974, 82830, 82240, 106672, 118876, 82208, 106648, 118862, 82192, 106636, 82184, 106630, 82180, 82352, 82328, 82316, 82080, 118830, 106572, 106566, 82050, 117472, 124280, 127678, 103616, 117360, 124220, 103520, 117304, 124190, 75840, 103472, 75808, 104160, 117624, 124350, 76992, 104048, 117564, 76896, 103992, 76848, 76824, 77536, 104312, 117694, 77424, 104252, 77368, 77340, 77688, 104382, 77628, 77758, 121536, 126320, 128700, 121440, 126264, 128670, 111680, 121392, 126236, 111648, 121368, 126222, 111632, 121356, 103104, 117104, 124092, 112320, 103008, 117048, 124062, 112224, 121656, 126366, 93248, 74784, 102936, 117006, 93216, 112152, 93200, 75456, 103280, 117180, 93888, 75360, 103224, 117150, 93792, 112440, 121758, 93744, 75288, 93720, 75632, 103356, 94064, 75576, 103326, 94008, 112542, 93980, 75708, 94140, 75678, 94110, 121184, 126136, 128606, 111168, 121136, 126108, 111136, 121112, 126094, 111120, 121100, 111112, 111108, 102752, 116920, 123998, 111456, 102704, 116892, 91712, 74272, 121244, 116878, 91680, 74256, 102668, 91664, 111372, 102662, 74244, 74592, 102840, 116958, 92000, 74544, 102812, 91952, 111516, 102798, 91928, 74508, 74502, 74680, 102878, 92088, 74652, 92060, 74638, 92046, 92126, 110912, 121008, 126044, 110880, 120984, 126030, 110864, 120972, 110856, 120966, 110852, 110850, 74048, 102576, 116828, 90944, 74016, 102552, 116814, 90912, 111000, 121038, 90896, 73992, 102534, 90888, 110982, 90884, 74160, 102620, 91056, 74136, 102606, 91032, 111054, 91020, 74118, 91014, 91100, 91086, 110752, 120920, 125998, 110736, 120908, 110728, 120902, 110724, 110722, 73888, 102488, 116782, 90528, 73872, 102476, 90512, 110796, 102470, 90504, 73860, 90500, 73858, 73944, 90584, 90572, 90566, 120876, 120870, 110658, 102444, 73800, 90312, 90308, 90306, 101056, 116080, 123580, 100960, 116024, 70720, 100912, 115996, 70688, 100888, 70672, 70664, 71360, 101232, 116156, 71264, 101176, 116126, 71216, 101148, 71192, 71180, 71536, 101308, 71480, 101278, 71452, 71612, 71582, 118112, 124600, 127838, 105024, 118064, 124572, 104992, 118040, 124558, 104976, 118028, 104968, 118022, 100704, 115896, 123486, 105312, 100656, 115868, 79424, 70176, 118172, 115854, 79392, 105240, 100620, 79376, 70152, 79368, 70496, 100792, 115934, 79712, 70448, 118238, 79664, 105372, 100750, 79640, 70412, 79628, 70584, 100830, 79800, 70556, 79772, 70542, 70622, 79838, 122176, 126640, 128860, 122144, 126616, 128846, 122128, 126604, 122120, 126598, 122116, 104768, 117936, 124508, 113472, 104736, 126684, 124494, 113440, 122264, 126670, 113424, 104712, 117894, 113416, 122246, 104706, 69952, 100528, 115804, 78656, 69920, 100504, 115790, 96064, 78624, 104856, 117966, 96032, 113560, 122318, 100486, 96016, 78600, 104838, 96008, 69890, 70064, 100572, 78768, 70040, 100558, 96176, 78744, 104910, 96152, 113614, 70022, 78726, 70108, 78812, 70094, 96220, 78798, 122016, 126552, 128814, 122000, 126540, 121992, 126534, 121988, 121986, 104608, 117848, 124462, 113056, 104592, 126574, 113040, 122060, 117830, 113032, 104580, 113028, 104578, 113026, 69792, 100440, 115758, 78240, 69776, 100428, 95136, 78224, 104652, 100422, 95120, 113100, 69764, 95112, 78212, 69762, 78210, 69848, 100462, 78296, 69836, 95192, 78284, 69830, 95180, 78278, 69870, 95214, 121936, 126508, 121928, 126502, 121924, 121922, 104528, 117804, 112848, 104520, 117798, 112840, 121958, 112836, 104514, 112834, 69712, 100396, 78032, 69704, 100390, 94672, 78024, 104550, 94664, 112870, 69698, 94660, 78018, 94658, 78060, 94700, 94694, 126486, 121890, 117782, 104484, 104482, 69672, 77928, 94440, 69666, 77922, 99680, 68160, 99632, 68128, 99608, 115342, 68112, 99596, 68104, 99590, 68448, 99768, 115422, 68400, 99740, 68376, 99726, 68364, 68358, 68536, 99806, 68508, 68494, 68574, 101696, 116400, 123740, 101664, 116376, 101648, 116364, 101640, 116358, 101636, 67904, 99504, 115292, 72512, 67872, 116444, 115278, 72480, 101784, 116430, 72464, 67848, 99462, 72456, 101766, 67842, 68016, 99548, 72624, 67992, 99534, 72600, 101838, 72588, 67974, 68060, 72668, 68046, 72654, 118432, 124760, 127918, 118416, 124748, 118408, 124742, 118404, 118402, 101536, 116312, 105888, 101520, 116300, 105872, 118476, 116294, 105864, 101508, 105860, 101506, 105858, 67744, 99416, 72096, 67728, 116334, 80800, 72080, 101580, 99398, 80784, 105932, 67716, 80776, 72068, 67714, 72066, 67800, 99438, 72152, 67788, 80856, 72140, 67782, 80844, 72134, 67822, 72174, 80878, 126800, 128940, 126792, 128934, 126788, 126786, 118352, 124716, 122576, 126828, 124710, 122568, 126822, 122564, 118338, 122562, 101456, 116268, 105680, 101448, 116262, 114128, 105672, 118374, 114120, 122598, 101442, 114116, 105666, 114114, 67664, 99372, 71888, 67656, 99366, 80336, 71880, 101478, 97232, 80328, 105702, 67650, 97224, 114150, 71874, 97220, 67692, 71916, 67686, 80364, 71910, 97260, 80358, 97254, 126760, 128918, 126756, 126754, 118312, 124694, 122472, 126774, 122468, 118306, 122466, 101416, 116246, 105576, 101412, 113896, 105572, 101410, 113892, 105570, 113890, 67624, 99350, 71784, 101430, 80104, 71780, 67618, 96744, 80100, 71778, 96740, 80098, 96738, 71798, 96758, 126738, 122420, 122418, 105524, 113780, 113778, 71732, 79988, 96500, 96498, 66880, 66848, 98968, 66832, 66824, 66820, 66992, 66968, 66956, 66950, 67036, 67022, 100000, 99984, 115532, 99976, 115526, 99972, 99970, 66720, 98904, 69024, 100056, 98892, 69008, 100044, 69000, 100038, 68996, 66690, 68994, 66776, 98926, 69080, 100078, 69068, 66758, 69062, 66798, 69102, 116560, 116552, 116548, 116546, 99920, 102096, 116588, 115494, 102088, 116582, 102084, 99906, 102082, 66640, 68816, 66632, 98854, 73168, 68808, 66628, 73160, 68804, 66626, 73156, 68802, 66668, 68844, 66662, 73196, 68838, 73190, 124840, 124836, 124834, 116520, 118632, 124854, 118628, 116514, 118626, 99880, 115478, 101992, 116534, 106216, 101988, 99874, 106212, 101986, 106210, 66600, 98838, 68712, 99894, 72936, 68708, 66594, 81384, 72932, 68706, 81380, 72930, 66614, 68726, 72950, 81398, 128980, 128978, 124820, 126900, 124818, 126898, 116500, 118580, 116498, 122740, 118578, 122738, 99860, 101940, 99858, 106100, 101938, 114420]), $a([128352, 129720, 125504, 128304, 129692, 125472, 128280, 129678, 125456, 128268, 125448, 128262, 125444, 125792, 128440, 129758, 120384, 125744, 128412, 120352, 125720, 128398, 120336, 125708, 120328, 125702, 120324, 120672, 125880, 128478, 110144, 120624, 125852, 110112, 120600, 125838, 110096, 120588, 110088, 120582, 110084, 110432, 120760, 125918, 89664, 110384, 120732, 89632, 110360, 120718, 89616, 110348, 89608, 110342, 89952, 110520, 120798, 89904, 110492, 89880, 110478, 89868, 90040, 110558, 90012, 89998, 125248, 128176, 129628, 125216, 128152, 129614, 125200, 128140, 125192, 128134, 125188, 125186, 119616, 125360, 128220, 119584, 125336, 128206, 119568, 125324, 119560, 125318, 119556, 119554, 108352, 119728, 125404, 108320, 119704, 125390, 108304, 119692, 108296, 119686, 108292, 108290, 85824, 108464, 119772, 85792, 108440, 119758, 85776, 108428, 85768, 108422, 85764, 85936, 108508, 85912, 108494, 85900, 85894, 85980, 85966, 125088, 128088, 129582, 125072, 128076, 125064, 128070, 125060, 125058, 119200, 125144, 128110, 119184, 125132, 119176, 125126, 119172, 119170, 107424, 119256, 125166, 107408, 119244, 107400, 119238, 107396, 107394, 83872, 107480, 119278, 83856, 107468, 83848, 107462, 83844, 83842, 83928, 107502, 83916, 83910, 83950, 125008, 128044, 125000, 128038, 124996, 124994, 118992, 125036, 118984, 125030, 118980, 118978, 106960, 119020, 106952, 119014, 106948, 106946, 82896, 106988, 82888, 106982, 82884, 82882, 82924, 82918, 124968, 128022, 124964, 124962, 118888, 124982, 118884, 118882, 106728, 118902, 106724, 106722, 82408, 106742, 82404, 82402, 124948, 124946, 118836, 118834, 106612, 106610, 124224, 127664, 129372, 124192, 127640, 129358, 124176, 127628, 124168, 127622, 124164, 124162, 117568, 124336, 127708, 117536, 124312, 127694, 117520, 124300, 117512, 124294, 117508, 117506, 104256, 117680, 124380, 104224, 117656, 124366, 104208, 117644, 104200, 117638, 104196, 104194, 77632, 104368, 117724, 77600, 104344, 117710, 77584, 104332, 77576, 104326, 77572, 77744, 104412, 77720, 104398, 77708, 77702, 77788, 77774, 128672, 129880, 93168, 128656, 129868, 92664, 128648, 129862, 92412, 128644, 128642, 124064, 127576, 129326, 126368, 124048, 129902, 126352, 128716, 127558, 126344, 124036, 126340, 124034, 126338, 117152, 124120, 127598, 121760, 117136, 124108, 121744, 126412, 124102, 121736, 117124, 121732, 117122, 121730, 103328, 117208, 124142, 112544, 103312, 117196, 112528, 121804, 117190, 112520, 103300, 112516, 103298, 112514, 75680, 103384, 117230, 94112, 75664, 103372, 94096, 112588, 103366, 94088, 75652, 94084, 75650, 75736, 103406, 94168, 75724, 94156, 75718, 94150, 75758, 128592, 129836, 91640, 128584, 129830, 91388, 128580, 91262, 128578, 123984, 127532, 126160, 123976, 127526, 126152, 128614, 126148, 123970, 126146, 116944, 124012, 121296, 116936, 124006, 121288, 126182, 121284, 116930, 121282, 102864, 116972, 111568, 102856, 116966, 111560, 121318, 111556, 102850, 111554, 74704, 102892, 92112, 74696, 102886, 92104, 111590, 92100, 74690, 92098, 74732, 92140, 74726, 92134, 128552, 129814, 90876, 128548, 90750, 128546, 123944, 127510, 126056, 128566, 126052, 123938, 126050, 116840, 123958, 121064, 116836, 121060, 116834, 121058, 102632, 116854, 111080, 121078, 111076, 102626, 111074, 74216, 102646, 91112, 74212, 91108, 74210, 91106, 74230, 91126, 128532, 90494, 128530, 123924, 126004, 123922, 126002, 116788, 120948, 116786, 120946, 102516, 110836, 102514, 110834, 73972, 90612, 73970, 90610, 128522, 123914, 125978, 116762, 120890, 102458, 110714, 123552, 127320, 129198, 123536, 127308, 123528, 127302, 123524, 123522, 116128, 123608, 127342, 116112, 123596, 116104, 123590, 116100, 116098, 101280, 116184, 123630, 101264, 116172, 101256, 116166, 101252, 101250, 71584, 101336, 116206, 71568, 101324, 71560, 101318, 71556, 71554, 71640, 101358, 71628, 71622, 71662, 127824, 129452, 79352, 127816, 129446, 79100, 127812, 78974, 127810, 123472, 127276, 124624, 123464, 127270, 124616, 127846, 124612, 123458, 124610, 115920, 123500, 118224, 115912, 123494, 118216, 124646, 118212, 115906, 118210, 100816, 115948, 105424, 100808, 115942, 105416, 118246, 105412, 100802, 105410, 70608, 100844, 79824, 70600, 100838, 79816, 105446, 79812, 70594, 79810, 70636, 79852, 70630, 79846, 129960, 95728, 113404, 129956, 95480, 113278, 129954, 95356, 95294, 127784, 129430, 78588, 128872, 129974, 95996, 78462, 128868, 127778, 95870, 128866, 123432, 127254, 124520, 123428, 126696, 128886, 123426, 126692, 124514, 126690, 115816, 123446, 117992, 115812, 122344, 117988, 115810, 122340, 117986, 122338, 100584, 115830, 104936, 100580, 113640, 104932, 100578, 113636, 104930, 113634, 70120, 100598, 78824, 70116, 96232, 78820, 70114, 96228, 78818, 96226, 70134, 78838, 129940, 94968, 113022, 129938, 94844, 94782, 127764, 78206, 128820, 127762, 95102, 128818, 123412, 124468, 123410, 126580, 124466, 126578, 115764, 117876, 115762, 122100, 117874, 122098, 100468, 104692, 100466, 113140, 104690, 113138, 69876, 78324, 69874, 95220, 78322, 95218, 129930, 94588, 94526, 127754, 128794, 123402, 124442, 126522, 115738, 117818, 121978, 100410, 104570, 112890, 69754, 78074, 94714, 94398, 123216, 127148, 123208, 127142, 123204, 123202, 115408, 123244, 115400, 123238, 115396, 115394, 99792, 115436, 99784, 115430, 99780, 99778, 68560, 99820, 68552, 99814, 68548, 68546, 68588, 68582, 127400, 129238, 72444, 127396, 72318, 127394, 123176, 127126, 123752, 123172, 123748, 123170, 123746, 115304, 123190, 116456, 115300, 116452, 115298, 116450, 99560, 115318, 101864, 99556, 101860, 99554, 101858, 68072, 99574, 72680, 68068, 72676, 68066, 72674, 68086, 72694, 129492, 80632, 105854, 129490, 80508, 80446, 127380, 72062, 127924, 127378, 80766, 127922, 123156, 123700, 123154, 124788, 123698, 124786, 115252, 116340, 115250, 118516, 116338, 118514, 99444, 101620, 99442, 105972, 101618, 105970, 67828, 72180, 67826, 80884, 72178, 80882, 97008, 114044, 96888, 113982, 96828, 96798, 129482, 80252, 130010, 97148, 80190, 97086, 127370, 127898, 128954, 123146, 123674, 124730, 126842, 115226, 116282, 118394, 122618, 99386, 101498, 105722, 114170, 67706, 71930, 80378, 96632, 113854, 96572, 96542, 80062, 96702, 96444, 96414, 96350, 123048, 123044, 123042, 115048, 123062, 115044, 115042, 99048, 115062, 99044, 99042, 67048, 99062, 67044, 67042, 67062, 127188, 68990, 127186, 123028, 123316, 123026, 123314, 114996, 115572, 114994, 115570, 98932, 100084, 98930, 100082, 66804, 69108, 66802, 69106, 129258, 73084, 73022, 127178, 127450, 123018, 123290, 123834, 114970, 115514, 116602, 98874, 99962, 102138, 66682, 68858, 73210, 81272, 106174, 81212, 81182, 72894, 81342, 97648, 114364, 97592, 114334, 97564, 97550, 81084, 97724, 81054, 97694, 97464, 114270, 97436, 97422, 80990, 97502, 97372, 97358, 97326, 114868, 114866, 98676, 98674, 66292, 66290, 123098, 114842, 115130, 98618, 99194, 66170, 67322, 69310, 73404, 73374, 81592, 106334, 81564, 81550, 73310, 81630, 97968, 114524, 97944, 114510, 97932, 97926, 81500, 98012, 81486, 97998, 97880, 114478, 97868, 97862, 81454, 97902, 97836, 97830, 69470, 73564, 73550, 81752, 106414, 81740, 81734, 73518, 81774, 81708, 81702]), $a([109536, 120312, 86976, 109040, 120060, 86496, 108792, 119934, 86256, 108668, 86136, 129744, 89056, 110072, 129736, 88560, 109820, 129732, 88312, 109694, 129730, 88188, 128464, 129772, 89592, 128456, 129766, 89340, 128452, 89214, 128450, 125904, 128492, 125896, 128486, 125892, 125890, 120784, 125932, 120776, 125926, 120772, 120770, 110544, 120812, 110536, 120806, 110532, 84928, 108016, 119548, 84448, 107768, 119422, 84208, 107644, 84088, 107582, 84028, 129640, 85488, 108284, 129636, 85240, 108158, 129634, 85116, 85054, 128232, 129654, 85756, 128228, 85630, 128226, 125416, 128246, 125412, 125410, 119784, 125430, 119780, 119778, 108520, 119798, 108516, 108514, 83424, 107256, 119166, 83184, 107132, 83064, 107070, 83004, 82974, 129588, 83704, 107390, 129586, 83580, 83518, 128116, 83838, 128114, 125172, 125170, 119284, 119282, 107508, 107506, 82672, 106876, 82552, 106814, 82492, 82462, 129562, 82812, 82750, 128058, 125050, 119034, 82296, 106686, 82236, 82206, 82366, 82108, 82078, 76736, 103920, 117500, 76256, 103672, 117374, 76016, 103548, 75896, 103486, 75836, 129384, 77296, 104188, 129380, 77048, 104062, 129378, 76924, 76862, 127720, 129398, 77564, 127716, 77438, 127714, 124392, 127734, 124388, 124386, 117736, 124406, 117732, 117730, 104424, 117750, 104420, 104418, 112096, 121592, 126334, 92608, 111856, 121468, 92384, 111736, 121406, 92272, 111676, 92216, 111646, 92188, 75232, 103160, 117118, 93664, 74992, 103036, 93424, 112252, 102974, 93304, 74812, 93244, 74782, 93214, 129332, 75512, 103294, 129908, 129330, 93944, 75388, 129906, 93820, 75326, 93758, 127604, 75646, 128756, 127602, 94078, 128754, 124148, 126452, 124146, 126450, 117236, 121844, 117234, 121842, 103412, 103410, 91584, 111344, 121212, 91360, 111224, 121150, 91248, 111164, 91192, 111134, 91164, 91150, 74480, 102780, 91888, 74360, 102718, 91768, 111422, 91708, 74270, 91678, 129306, 74620, 129850, 92028, 74558, 91966, 127546, 128634, 124026, 126202, 116986, 121338, 102906, 90848, 110968, 121022, 90736, 110908, 90680, 110878, 90652, 90638, 74104, 102590, 91000, 74044, 90940, 74014, 90910, 74174, 91070, 90480, 110780, 90424, 110750, 90396, 90382, 73916, 90556, 73886, 90526, 90296, 110686, 90268, 90254, 73822, 90334, 90204, 90190, 71136, 101112, 116094, 70896, 100988, 70776, 100926, 70716, 70686, 129204, 71416, 101246, 129202, 71292, 71230, 127348, 71550, 127346, 123636, 123634, 116212, 116210, 101364, 101362, 79296, 105200, 118140, 79072, 105080, 118078, 78960, 105020, 78904, 104990, 78876, 78862, 70384, 100732, 79600, 70264, 100670, 79480, 105278, 79420, 70174, 79390, 129178, 70524, 129466, 79740, 70462, 79678, 127290, 127866, 123514, 124666, 115962, 118266, 100858, 113376, 122232, 126654, 95424, 113264, 122172, 95328, 113208, 122142, 95280, 113180, 95256, 113166, 95244, 78560, 104824, 117950, 95968, 78448, 104764, 95856, 113468, 104734, 95800, 78364, 95772, 78350, 95758, 70008, 100542, 78712, 69948, 96120, 78652, 69918, 96060, 78622, 96030, 70078, 78782, 96190, 94912, 113008, 122044, 94816, 112952, 122014, 94768, 112924, 94744, 112910, 94732, 94726, 78192, 104636, 95088, 78136, 104606, 95032, 113054, 95004, 78094, 94990, 69820, 78268, 69790, 95164, 78238, 95134, 94560, 112824, 121950, 94512, 112796, 94488, 112782, 94476, 94470, 78008, 104542, 94648, 77980, 94620, 77966, 94606, 69726, 78046, 94686, 94384, 112732, 94360, 112718, 94348, 94342, 77916, 94428, 77902, 94414, 94296, 112686, 94284, 94278, 77870, 94318, 94252, 94246, 68336, 99708, 68216, 99646, 68156, 68126, 68476, 68414, 127162, 123258, 115450, 99834, 72416, 101752, 116414, 72304, 101692, 72248, 101662, 72220, 72206, 67960, 99518, 72568, 67900, 72508, 67870, 72478, 68030, 72638, 80576, 105840, 118460, 80480, 105784, 118430, 80432, 105756, 80408, 105742, 80396, 80390, 72048, 101564, 80752, 71992, 101534, 80696, 71964, 80668, 71950, 80654, 67772, 72124, 67742, 80828, 72094, 80798, 114016, 122552, 126814, 96832, 113968, 122524, 96800, 113944, 122510, 96784, 113932, 96776, 113926, 96772, 80224, 105656, 118366, 97120, 80176, 105628, 97072, 114076, 105614, 97048, 80140, 97036, 80134, 97030, 71864, 101470, 80312, 71836, 97208, 80284, 71822, 97180, 80270, 97166, 67678, 71902, 80350, 97246, 96576, 113840, 122460, 96544, 113816, 122446, 96528, 113804, 96520, 113798, 96516, 96514, 80048, 105564, 96688, 80024, 105550, 96664, 113870, 96652, 80006, 96646, 71772, 80092, 71758, 96732, 80078, 96718, 96416, 113752, 122414, 96400, 113740, 96392, 113734, 96388, 96386, 79960, 105518, 96472, 79948, 96460, 79942, 96454, 71726, 79982, 96494, 96336, 113708, 96328, 113702, 96324, 96322, 79916, 96364, 79910, 96358, 96296, 113686, 96292, 96290, 79894, 96310, 66936, 99006, 66876, 66846, 67006, 68976, 100028, 68920, 99998, 68892, 68878, 66748, 69052, 66718, 69022, 73056, 102072, 116574, 73008, 102044, 72984, 102030, 72972, 72966, 68792, 99934, 73144, 68764, 73116, 68750, 73102, 66654, 68830, 73182, 81216, 106160, 118620, 81184, 106136, 118606, 81168, 106124, 81160, 106118, 81156, 81154, 72880, 101980, 81328, 72856, 101966, 81304, 106190, 81292, 72838, 81286, 68700, 72924, 68686, 81372, 72910, 81358, 114336, 122712, 126894, 114320, 122700, 114312, 122694, 114308, 114306, 81056, 106072, 118574, 97696, 81040, 106060, 97680, 114380, 106054, 97672, 81028, 97668, 81026, 97666, 72792, 101934, 81112, 72780, 97752, 81100, 72774, 97740, 81094, 97734, 68654, 72814, 81134, 97774, 114256, 122668, 114248, 122662, 114244, 114242, 80976, 106028, 97488, 80968, 106022, 97480, 114278, 97476, 80962, 97474, 72748, 81004, 72742, 97516, 80998, 97510, 114216, 122646, 114212, 114210, 80936, 106006, 97384, 80932, 97380, 80930, 97378, 72726, 80950, 97398, 114196, 114194, 80916, 97332, 80914, 97330, 66236, 66206, 67256, 99166, 67228, 67214, 66142, 67294, 69296, 100188, 69272, 100174, 69260, 69254, 67164, 69340, 67150, 69326, 73376, 102232, 116654, 73360, 102220, 73352, 102214, 73348, 73346, 69208, 100142, 73432, 102254, 73420, 69190, 73414, 67118, 69230, 73454, 106320, 118700, 106312, 118694, 106308, 106306, 73296, 102188, 81616, 106348, 102182, 81608, 73284, 81604, 73282, 81602, 69164, 73324, 69158, 81644, 73318, 81638, 122792, 126934, 122788, 122786, 106280, 118678, 114536, 106276, 114532, 106274, 114530, 73256, 102166, 81512, 73252, 98024, 81508, 73250, 98020, 81506, 98018, 69142, 73270, 81526, 98038, 122772, 122770, 106260, 114484, 106258, 114482, 73236, 81460, 73234, 97908, 81458, 97906, 122762, 106250, 114458, 73226, 81434, 97850, 66396, 66382, 67416, 99246, 67404, 67398, 66350, 67438, 69456, 100268, 69448, 100262, 69444, 69442, 67372, 69484, 67366, 69478, 102312, 116694, 102308, 102306, 69416, 100246, 73576, 102326, 73572, 69410, 73570, 67350, 69430, 73590, 118740, 118738, 102292, 106420, 102290, 106418, 69396, 73524, 69394, 81780, 73522, 81778, 118730, 102282, 106394, 69386, 73498, 81722, 66476, 66470, 67496, 99286, 67492, 67490, 66454, 67510, 100308, 100306, 67476, 69556, 67474, 69554, 116714])]); //#16882
            for (var _GF in $ctx) {
                $ctx.hasOwnProperty(_GF) && (bwipp_pdf417.$ctx[_GF] = $ctx[_GF]);
            } //#16882
            bwipp_pdf417.$ctx._16883 = 1; //#16882
        })(); //#16882
    } //#16882
    $1.cwtobits = function() {
        var _GI = $get($1.clusters, $k[--$j]); //#16887
        $1.v = $get(_GI, $k[--$j]); //#16887
        $k[$j++] = Infinity; //#16888
        for (var _GL = 0, _GM = 17; _GL < _GM; _GL++) { //#16888
            $k[$j++] = 0; //#16888
        } //#16888
        var _GP = $cvrs($s(17), $1.v, 2); //#16888
        for (var _GQ = 0, _GR = _GP.length; _GQ < _GR; _GQ++) { //#16888
            $k[$j++] = $get(_GP, _GQ) - 48; //#16888
        } //#16888
        var _GT = $a(); //#16888
        $k[$j++] = $geti(_GT, _GT.length - 17, 17); //#16889
    }; //#16889
    if ($1.compact) { //#16896
        $1.rwid = $f(($f(($f((17 * $1.c) + 17)) + 17)) + 1); //#16894
    } else { //#16896
        $1.rwid = $f(($f(($f(($f((17 * $1.c) + 17)) + 17)) + 17)) + 18); //#16896
    } //#16896
    $1.pixs = $a($1.rwid * $1.r); //#16898
    for (var _Gd = 0, _Gc = $1.r - 1; _Gd <= _Gc; _Gd += 1) { //#16928
        $1.i = _Gd; //#16901
        if (($1.i % 3) == 0) { //#16906
            $1.lcw = ((~~($1.i / 3)) * 30) + (~~(($1.r - 1) / 3)); //#16904
            $1.rcw = $f(($f(((~~($1.i / 3)) * 30) + $1.c)) - 1); //#16905
        } //#16905
        if (($1.i % 3) == 1) { //#16910
            $1.lcw = (((~~($1.i / 3)) * 30) + ($1.eclevel * 3)) + (($1.r - 1) % 3); //#16908
            $1.rcw = ((~~($1.i / 3)) * 30) + (~~(($1.r - 1) / 3)); //#16909
        } //#16909
        if (($1.i % 3) == 2) { //#16914
            $1.lcw = $f(($f(((~~($1.i / 3)) * 30) + $1.c)) - 1); //#16912
            $1.rcw = (((~~($1.i / 3)) * 30) + ($1.eclevel * 3)) + (($1.r - 1) % 3); //#16913
        } //#16913
        $k[$j++] = $1.pixs; //#16924
        $k[$j++] = $1.rwid * $1.i; //#16924
        $k[$j++] = Infinity; //#16924
        $k[$j++] = 1; //#16918
        $k[$j++] = 1; //#16918
        $k[$j++] = 1; //#16918
        $k[$j++] = 1; //#16918
        $k[$j++] = 1; //#16918
        $k[$j++] = 1; //#16918
        $k[$j++] = 1; //#16918
        $k[$j++] = 1; //#16918
        $k[$j++] = 0; //#16918
        $k[$j++] = 1; //#16918
        $k[$j++] = 0; //#16918
        $k[$j++] = 1; //#16918
        $k[$j++] = 0; //#16918
        $k[$j++] = 1; //#16918
        $k[$j++] = 0; //#16918
        $k[$j++] = 0; //#16918
        $k[$j++] = 0; //#16918
        $k[$j++] = $1.lcw; //#16918
        $k[$j++] = $1.i % 3; //#16918
        $1.cwtobits(); //#16918
        $forall($k[--$j]); //#16918
        var _H5 = $geti($1.cws, $1.c * $1.i, $1.c); //#16919
        for (var _H6 = 0, _H7 = _H5.length; _H6 < _H7; _H6++) { //#16919
            $k[$j++] = $get(_H5, _H6); //#16919
            $k[$j++] = $1.i % 3; //#16919
            $1.cwtobits(); //#16919
            $forall($k[--$j]); //#16919
        } //#16919
        if ($1.compact) { //#16924
            $k[$j++] = 1; //#16921
        } else { //#16924
            $k[$j++] = $1.rcw; //#16923
            $k[$j++] = $1.i % 3; //#16923
            $1.cwtobits(); //#16923
            $forall($k[--$j]); //#16923
            $k[$j++] = 1; //#16924
            $k[$j++] = 1; //#16924
            $k[$j++] = 1; //#16924
            $k[$j++] = 1; //#16924
            $k[$j++] = 1; //#16924
            $k[$j++] = 1; //#16924
            $k[$j++] = 1; //#16924
            $k[$j++] = 0; //#16924
            $k[$j++] = 1; //#16924
            $k[$j++] = 0; //#16924
            $k[$j++] = 0; //#16924
            $k[$j++] = 0; //#16924
            $k[$j++] = 1; //#16924
            $k[$j++] = 0; //#16924
            $k[$j++] = 1; //#16924
            $k[$j++] = 0; //#16924
            $k[$j++] = 0; //#16924
            $k[$j++] = 1; //#16924
        } //#16924
        var _HF = $a(); //#16924
        var _HG = $k[--$j]; //#16926
        $puti($k[--$j], _HG, _HF); //#16926
    } //#16926
    var _HP = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", $1.rwid],
        ["pixy", $1.r],
        ["height", ($1.r / 72) * $1.rowmult],
        ["width", $1.rwid / 72],
        ["opt", $1.options]
    ]); //#16938
    $k[$j++] = _HP; //#16941
    if (!$1.dontdraw) { //#16941
        bwipp_renmatrix(); //#16941
    } //#16941
}

function bwipp_pdf417compact() {
    var $1 = Object.create(bwipp_pdf417compact.$ctx || (bwipp_pdf417compact.$ctx = {})); //#16974
    $1.dontdraw = false; //#16977
    $k[$j++] = $1; //#16979
    bwipp_processoptions(); //#16979
    $1.options = $k[--$j]; //#16979
    $1.barcode = $k[--$j]; //#16980
    $put($1.options, "dontdraw", true); //#16983
    $put($1.options, "compact", true); //#16984
    $k[$j++] = 'args'; //#16986
    $k[$j++] = $1.barcode; //#16986
    $k[$j++] = $1.options; //#16986
    bwipp_pdf417(); //#16986
    var _6 = $k[--$j]; //#16986
    $1[$k[--$j]] = _6; //#16986
    $put($1.args, "opt", $1.options); //#16988
    $k[$j++] = $1.args; //#16991
    if (!$1.dontdraw) { //#16991
        bwipp_renmatrix(); //#16991
    } //#16991
}

function bwipp_micropdf417() {
    var $1 = Object.create(bwipp_micropdf417.$ctx || (bwipp_micropdf417.$ctx = {})); //#17024
    $1.dontdraw = false; //#17027
    $1.version = "unset"; //#17028
    $1.columns = 0; //#17029
    $1.rows = 0; //#17030
    $1.rowmult = 2; //#17031
    $1.encoding = "auto"; //#17032
    $1.cca = false; //#17033
    $1.ccb = false; //#17034
    $1.raw = false; //#17035
    $1.parse = false; //#17036
    $1.parsefnc = false; //#17037
    $k[$j++] = $1; //#17039
    bwipp_processoptions(); //#17039
    $1.options = $k[--$j]; //#17039
    $1.barcode = $k[--$j]; //#17040
    if ($ne($1.version, "unset")) { //#17046
        $search($1.version, "x"); //#17043
        $j--; //#17044
        $1.columns = $cvi($k[--$j]); //#17044
        $j--; //#17045
        $1.rows = $cvi($k[--$j]); //#17045
    } //#17045
    if (!bwipp_micropdf417.$ctx._17135) { //#17135
        (function() { //#17135
            var $ctx = Object.create($1); //#17135
            $ctx.T = 0; //#17052
            $ctx.N = 1; //#17052
            $ctx.B = 2; //#17052
            $ctx.A = 0; //#17053
            $ctx.L = 1; //#17053
            $ctx.M = 2; //#17053
            $ctx.P = 3; //#17053
            $ctx.tl = -1; //#17056
            $ctx.nl = -2; //#17056
            $ctx.bl = -3; //#17056
            $ctx.bl6 = -4; //#17056
            $ctx.bs = -5; //#17056
            $ctx.al = -6; //#17059
            $ctx.ll = -7; //#17059
            $ctx.ml = -8; //#17059
            $ctx.pl = -9; //#17059
            $ctx.as = -10; //#17059
            $ctx.ps = -11; //#17059
            $ctx.charmaps = $a([$a(["A", "a", "0", ";"]), $a(["B", "b", "1", "<"]), $a(["C", "c", "2", ">"]), $a(["D", "d", "3", "@"]), $a(["E", "e", "4", "["]), $a(["F", "f", "5", 92]), $a(["G", "g", "6", "]"]), $a(["H", "h", "7", "_"]), $a(["I", "i", "8", "`"]), $a(["J", "j", "9", "~"]), $a(["K", "k", "&", "!"]), $a(["L", "l", 13, 13]), $a(["M", "m", 9, 9]), $a(["N", "n", ",", ","]), $a(["O", "o", ":", ":"]), $a(["P", "p", "#", 10]), $a(["Q", "q", "-", "-"]), $a(["R", "r", ".", "."]), $a(["S", "s", "$", "$"]), $a(["T", "t", "/", "/"]), $a(["U", "u", "+", "\""]), $a(["V", "v", "%", "|"]), $a(["W", "w", "*", "*"]), $a(["X", "x", "=", 40]), $a(["Y", "y", "^", 41]), $a(["Z", "z", $ctx.pl, "?"]), $a([" ", " ", " ", "{"]), $a([$ctx.ll, $ctx.as, $ctx.ll, "}"]), $a([$ctx.ml, $ctx.ml, $ctx.al, "'"]), $a([$ctx.ps, $ctx.ps, $ctx.ps, $ctx.al])]); //#17094
            $ctx.charvals = $a([new Map, new Map, new Map, new Map]); //#17097
            $ctx.alltext = new Map; //#17098
            for (var _p = 0, _o = $ctx.charmaps.length - 1; _p <= _o; _p += 1) { //#17108
                $ctx.i = _p; //#17100
                $ctx.encs = $get($ctx.charmaps, $ctx.i); //#17101
                for (var _t = 0; _t <= 3; _t += 1) { //#17107
                    $ctx.j = _t; //#17103
                    var _w = $get($ctx.encs, $ctx.j); //#17104
                    $k[$j++] = _w; //#17104
                    if ($eq($type(_w), 'stringtype')) { //#17104
                        var _z = $get($k[--$j], 0); //#17104
                        $k[$j++] = _z; //#17104
                    } //#17104
                    var _10 = $k[--$j]; //#17105
                    $put($get($ctx.charvals, $ctx.j), _10, $ctx.i); //#17105
                    $put($ctx.alltext, _10, -1); //#17106
                } //#17106
            } //#17106
            $ctx.e = 10000; //#17110
            var _17 = $a([2, 0, 1, 2]); //#17115
            $ctx.latlen = $a([$a([0, 1, 1, 2]), _17, $a([1, 1, 0, 1]), $a([1, 2, 2, 0])]); //#17118
            $ctx.latseq = $a([$a([$a([]), $a([$ctx.ll]), $a([$ctx.ml]), $a([$ctx.ml, $ctx.pl])]), $a([$a([$ctx.ml, $ctx.al]), $a([]), $a([$ctx.ml]), $a([$ctx.ml, $ctx.pl])]), $a([$a([$ctx.al]), $a([$ctx.ll]), $a([]), $a([$ctx.pl])]), $a([$a([$ctx.al]), $a([$ctx.al, $ctx.ll]), $a([$ctx.al, $ctx.ml]), $a([])])]); //#17126
            $ctx.shftlen = $a([$a([$ctx.e, $ctx.e, $ctx.e, 1]), $a([1, $ctx.e, $ctx.e, 1]), $a([$ctx.e, $ctx.e, $ctx.e, 1]), $a([$ctx.e, $ctx.e, $ctx.e, $ctx.e])]); //#17134
            for (var _24 in $ctx) {
                $ctx.hasOwnProperty(_24) && (bwipp_micropdf417.$ctx[_24] = $ctx[_24]);
            } //#17134
            bwipp_micropdf417.$ctx._17135 = 1; //#17134
        })(); //#17134
    } //#17134
    if ($1.raw) { //#17137
        $1.encoding = "raw"; //#17137
    } //#17137
    if ($1.cca) { //#17138
        $1.encoding = "cca"; //#17138
    } //#17138
    if ($eq($1.encoding, "raw") || $eq($1.encoding, "cca")) { //#17152
        $1.datcws = $a($1.barcode.length); //#17142
        $1.i = 0; //#17143
        $1.j = 0; //#17143
        for (;;) { //#17150
            if ($1.i == $1.barcode.length) { //#17145
                break; //#17145
            } //#17145
            $1.cw = $cvi($geti($1.barcode, $1.i + 1, 3)); //#17146
            $put($1.datcws, $1.j, $1.cw); //#17147
            $1.i = $1.i + 4; //#17148
            $1.j = $1.j + 1; //#17149
        } //#17149
        $1.datcws = $geti($1.datcws, 0, $1.j); //#17151
    } //#17151
    if ($1.ccb) { //#17154
        $1.encoding = "ccb"; //#17154
    } //#17154
    $1.encb = function() {
        $1.in = $k[--$j]; //#17157
        $1.inlen = $1.in.length; //#17158
        $1.out = $a(((~~($1.inlen / 6)) * 5) + ($1.inlen % 6)); //#17159
        for (var _2W = 0, _2V = (~~($1.inlen / 6)) - 1; _2W <= _2V; _2W += 1) { //#17182
            $1.k = _2W; //#17161
            $k[$j++] = Infinity; //#17162
            $aload($geti($1.in, $1.k * 6, 3)); //#17162
            $1.msbs = $a(); //#17162
            $k[$j++] = Infinity; //#17165
            $aload($1.msbs); //#17164
            var _2c = $k[--$j]; //#17164
            var _2d = $k[--$j]; //#17164
            var _2e = $k[--$j]; //#17164
            $k[$j++] = $f(($f(_2c + (_2d * 256))) + (_2e * 65536)); //#17165
            for (var _2f = 0, _2g = 3; _2f < _2g; _2f++) { //#17165
                var _2h = $k[--$j]; //#17165
                $k[$j++] = _2h % 900; //#17165
                $k[$j++] = ~~(_2h / 900); //#17165
            } //#17165
            $1.mscs = $a(); //#17165
            $k[$j++] = Infinity; //#17167
            $aload($geti($1.in, ($1.k * 6) + 3, 3)); //#17167
            $1.lsbs = $a(); //#17167
            $k[$j++] = Infinity; //#17170
            $aload($1.lsbs); //#17169
            var _2o = $k[--$j]; //#17169
            var _2p = $k[--$j]; //#17169
            var _2q = $k[--$j]; //#17169
            $k[$j++] = $f(($f(_2o + (_2p * 256))) + (_2q * 65536)); //#17170
            for (var _2r = 0, _2s = 3; _2r < _2s; _2r++) { //#17170
                var _2t = $k[--$j]; //#17170
                $k[$j++] = _2t % 900; //#17170
                $k[$j++] = ~~(_2t / 900); //#17170
            } //#17170
            $1.lscs = $a(); //#17170
            var _2w = $get($1.lscs, 0); //#17172
            var _2y = $get($1.mscs, 0); //#17172
            $put($1.out, ($1.k * 5) + 4, ($f(_2w + (_2y * 316))) % 900); //#17173
            var _32 = $get($1.lscs, 1); //#17174
            var _34 = $get($1.mscs, 0); //#17174
            var _36 = $get($1.mscs, 1); //#17174
            $put($1.out, ($1.k * 5) + 3, ($f(($f(($f((~~(($f(_2w + (_2y * 316))) / 900)) + _32)) + (_34 * 641))) + (_36 * 316))) % 900); //#17175
            var _3A = $get($1.lscs, 2); //#17176
            var _3C = $get($1.mscs, 0); //#17176
            var _3E = $get($1.mscs, 1); //#17176
            var _3G = $get($1.mscs, 2); //#17176
            $put($1.out, ($1.k * 5) + 2, ($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_2w + (_2y * 316))) / 900)) + _32)) + (_34 * 641))) + (_36 * 316))) / 900)) + _3A)) + (_3C * 20))) + (_3E * 641))) + (_3G * 316))) % 900); //#17177
            var _3K = $get($1.lscs, 3); //#17178
            var _3M = $get($1.mscs, 1); //#17178
            var _3O = $get($1.mscs, 2); //#17178
            $put($1.out, ($1.k * 5) + 1, ($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_2w + (_2y * 316))) / 900)) + _32)) + (_34 * 641))) + (_36 * 316))) / 900)) + _3A)) + (_3C * 20))) + (_3E * 641))) + (_3G * 316))) / 900)) + _3K)) + (_3M * 20))) + (_3O * 641))) % 900); //#17179
            $put($1.out, $1.k * 5, ($f((~~(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_2w + (_2y * 316))) / 900)) + _32)) + (_34 * 641))) + (_36 * 316))) / 900)) + _3A)) + (_3C * 20))) + (_3E * 641))) + (_3G * 316))) / 900)) + _3K)) + (_3M * 20))) + (_3O * 641))) / 900)) + ($get($1.mscs, 2) * 20))) % 900); //#17181
        } //#17181
        $1.rem = $1.inlen % 6; //#17183
        if ($1.rem != 0) { //#17188
            $k[$j++] = $1.out; //#17186
            $k[$j++] = $1.out.length - $1.rem; //#17186
            $k[$j++] = Infinity; //#17186
            $aload($geti($1.in, $1.inlen - $1.rem, $1.rem)); //#17186
            var _3f = $a(); //#17186
            var _3g = $k[--$j]; //#17187
            $puti($k[--$j], _3g, _3f); //#17187
        } //#17187
        $k[$j++] = $1.out; //#17189
    }; //#17189
    if ($eq($1.encoding, "byte") || $eq($1.encoding, "ccb")) { //#17198
        $1.barlen = $1.barcode.length; //#17193
        $1.datcws = $a((((~~($1.barlen / 6)) * 5) + ($1.barlen % 6)) + 1); //#17194
        var _3r = (($1.barlen % 6) == 0) ? 924 : 901; //#17195
        $put($1.datcws, 0, _3r); //#17195
        $k[$j++] = $1.datcws; //#17196
        $k[$j++] = 1; //#17196
        $k[$j++] = Infinity; //#17196
        $forall($1.barcode); //#17196
        var _3u = $a(); //#17196
        $k[$j++] = _3u; //#17196
        $1.encb(); //#17196
        var _3v = $k[--$j]; //#17196
        var _3w = $k[--$j]; //#17196
        $puti($k[--$j], _3w, _3v); //#17196
        if ($eq($1.encoding, "ccb")) { //#17197
            $k[$j++] = Infinity; //#17197
            $k[$j++] = 920; //#17197
            $aload($1.datcws); //#17197
            $1.datcws = $a(); //#17197
        } //#17197
    } //#17197
    if ($eq($1.encoding, "auto")) { //#17554
        var _44 = new Map([
            ["parse", $1.parse],
            ["parsefnc", $1.parsefnc],
            ["eci", true]
        ]); //#17206
        $1.fncvals = _44; //#17208
        $k[$j++] = 'msg'; //#17209
        $k[$j++] = $1.barcode; //#17209
        $k[$j++] = $1.fncvals; //#17209
        bwipp_parseinput(); //#17209
        var _47 = $k[--$j]; //#17209
        $1[$k[--$j]] = _47; //#17209
        $1.msglen = $1.msg.length; //#17210
        $k[$j++] = Infinity; //#17213
        for (var _4B = 0, _4C = $1.msglen; _4B < _4C; _4B++) { //#17213
            $k[$j++] = 0; //#17213
        } //#17213
        $k[$j++] = 0; //#17213
        $1.numdigits = $a(); //#17213
        $k[$j++] = Infinity; //#17214
        for (var _4F = 0, _4G = $1.msglen; _4F < _4G; _4F++) { //#17214
            $k[$j++] = 0; //#17214
        } //#17214
        $k[$j++] = 0; //#17214
        $1.numtext = $a(); //#17214
        $k[$j++] = Infinity; //#17215
        for (var _4J = 0, _4K = $1.msglen; _4J < _4K; _4J++) { //#17215
            $k[$j++] = 0; //#17215
        } //#17215
        $k[$j++] = 0; //#17215
        $1.numbytes = $a(); //#17215
        $k[$j++] = Infinity; //#17216
        for (var _4N = 0, _4O = $1.msglen; _4N < _4O; _4N++) { //#17216
            $k[$j++] = 0; //#17216
        } //#17216
        $1.iseci = $a(); //#17216
        for (var _4R = $1.msglen - 1; _4R >= 0; _4R -= 1) { //#17229
            $1.i = _4R; //#17218
            var _4U = $get($1.msg, $1.i); //#17219
            if ((_4U >= 48) && (_4U <= 57)) { //#17221
                $put($1.numdigits, $1.i, $f($get($1.numdigits, $1.i + 1) + 1)); //#17220
            } //#17220
            var _4e = $get($1.alltext, $get($1.msg, $1.i)) !== undefined; //#17222
            if (_4e && ($get($1.numdigits, $1.i) < 13)) { //#17224
                $put($1.numtext, $1.i, $f($get($1.numtext, $1.i + 1) + 1)); //#17223
            } //#17223
            if ((($get($1.msg, $1.i) >= 0) && ($get($1.numtext, $1.i) < 5)) && ($get($1.numdigits, $1.i) < 13)) { //#17227
                $put($1.numbytes, $1.i, $f($get($1.numbytes, $1.i + 1) + 1)); //#17226
            } //#17226
            $put($1.iseci, $1.i, $get($1.msg, $1.i) <= -1000000); //#17228
        } //#17228
        $1.numdigits = $geti($1.numdigits, 0, $1.msglen); //#17230
        $1.numtext = $geti($1.numtext, 0, $1.msglen); //#17231
        $1.numbytes = $geti($1.numbytes, 0, $1.msglen); //#17232
        $1.seq = $a([]); //#17234
        $1.seqlen = 0; //#17234
        $1.state = $1.B; //#17234
        $1.p = 0; //#17234
        for (;;) { //#17288
            if ($1.p == $1.msglen) { //#17235
                break; //#17235
            } //#17235
            if ($get($1.iseci, $1.p)) { //#17286
                $1.eci = $get($1.msg, $1.p); //#17237
                $k[$j++] = Infinity; //#17240
                $aload($1.seq); //#17239
                $k[$j++] = $a([$1.eci]); //#17240
                $1.seq = $a(); //#17240
                $1.p = $1.p + 1; //#17242
                $k[$j++] = 'seqlen'; //#17243
                $k[$j++] = $1.seqlen; //#17243
                if ($1.eci <= -1810900) { //#17243
                    $k[$j++] = 2; //#17243
                } else { //#17243
                    var _5X = ($1.eci <= -1000900) ? 3 : 2; //#17243
                    $k[$j++] = _5X; //#17243
                } //#17243
                var _5Y = $k[--$j]; //#17243
                var _5Z = $k[--$j]; //#17243
                $1[$k[--$j]] = $f(_5Z + _5Y); //#17243
            } else { //#17286
                $1.n = $get($1.numdigits, $1.p); //#17245
                if (($1.n >= 13) || (($1.n == $1.msglen) && ($1.n >= 8))) { //#17286
                    $k[$j++] = Infinity; //#17250
                    $aload($1.seq); //#17248
                    $k[$j++] = $1.nl; //#17250
                    $k[$j++] = Infinity; //#17250
                    $aload($geti($1.msg, $1.p, $1.n)); //#17250
                    var _5o = $a(); //#17250
                    $k[$j++] = _5o; //#17250
                    $1.seq = $a(); //#17250
                    $1.state = $1.N; //#17252
                    $1.p = $f($1.p + $1.n); //#17253
                    $1.seqlen = $f(($1.seqlen + 1) + $1.n); //#17254
                } else { //#17286
                    $1.t = $get($1.numtext, $1.p); //#17256
                    if ($1.t >= 5) { //#17286
                        $k[$j++] = Infinity; //#17263
                        $aload($1.seq); //#17259
                        if ($1.state != $1.T) { //#17262
                            $k[$j++] = $1.tl; //#17261
                        } //#17261
                        $k[$j++] = Infinity; //#17263
                        $aload($geti($1.msg, $1.p, $1.t)); //#17263
                        var _67 = $a(); //#17263
                        $k[$j++] = _67; //#17263
                        $1.seq = $a(); //#17263
                        $1.state = $1.T; //#17265
                        $1.p = $f($1.p + $1.t); //#17266
                        $1.seqlen = $f($f($1.seqlen + 1) + $1.t); //#17267
                    } else { //#17286
                        $1.b = $get($1.numbytes, $1.p); //#17269
                        if (($1.b == 1) && ($1.state == $1.T)) { //#17286
                            $k[$j++] = Infinity; //#17274
                            $aload($1.seq); //#17272
                            $k[$j++] = $1.bs; //#17274
                            $k[$j++] = $a([$get($1.msg, $1.p)]); //#17274
                            $1.seq = $a(); //#17274
                            $1.p = $f($1.p + $1.b); //#17276
                            $1.seqlen = $f($1.seqlen + 2); //#17277
                        } else { //#17286
                            $k[$j++] = Infinity; //#17282
                            $aload($1.seq); //#17280
                            var _6W = (($1.b % 6) != 0) ? $1.bl : $1.bl6; //#17281
                            $k[$j++] = _6W; //#17282
                            $k[$j++] = Infinity; //#17282
                            $aload($geti($1.msg, $1.p, $1.b)); //#17282
                            var _6b = $a(); //#17282
                            $k[$j++] = _6b; //#17282
                            $1.seq = $a(); //#17282
                            $1.state = $1.B; //#17284
                            $1.p = $f($1.p + $1.b); //#17285
                            $1.seqlen = $f($f($1.seqlen + 1) + $1.b); //#17286
                        } //#17286
                    } //#17286
                } //#17286
            } //#17286
        } //#17286
        $k[$j++] = Infinity; //#17291
        $k[$j++] = $1.tl; //#17291
        $k[$j++] = 900; //#17291
        $k[$j++] = $1.bl; //#17291
        $k[$j++] = 901; //#17291
        $k[$j++] = $1.bl6; //#17291
        $k[$j++] = 924; //#17291
        $k[$j++] = $1.nl; //#17291
        $k[$j++] = 902; //#17291
        $k[$j++] = $1.bs; //#17291
        $k[$j++] = 913; //#17291
        $1.latchcws = $d(); //#17292
        $1.enca = function() {
            var _6s = $get($get($1.charvals, $1.A), $k[--$j]); //#17295
            $k[$j++] = _6s; //#17295
        }; //#17295
        $1.encl = function() {
            var _6x = $get($get($1.charvals, $1.L), $k[--$j]); //#17296
            $k[$j++] = _6x; //#17296
        }; //#17296
        $1.encm = function() {
            var _72 = $get($get($1.charvals, $1.M), $k[--$j]); //#17297
            $k[$j++] = _72; //#17297
        }; //#17297
        $1.encp = function() {
            var _77 = $get($get($1.charvals, $1.P), $k[--$j]); //#17298
            $k[$j++] = _77; //#17298
        }; //#17298
        $1.textencfuncs = $a(['enca', 'encl', 'encm', 'encp']); //#17299
        $1.addtotext = function() {
            $put($1.text, $1.l, $k[--$j]); //#17302
            $1.l = $1.l + 1; //#17303
        }; //#17303
        $1.enct = function() {
            $1.in = $k[--$j]; //#17308
            $1.curlen = $a([$1.e, $1.e, $1.e, $1.e]); //#17310
            $put($1.curlen, $1.submode, 0); //#17311
            $1.curseq = $a([$a([]), $a([]), $a([]), $a([])]); //#17312
            $forall($1.in, function() { //#17382
                $1.char = $k[--$j]; //#17317
                for (;;) { //#17338
                    $1.imp = false; //#17321
                    var _7W = $a([$1.A, $1.L, $1.M, $1.P]); //#17322
                    for (var _7X = 0, _7Y = _7W.length; _7X < _7Y; _7X++) { //#17336
                        $1.x = $get(_7W, _7X); //#17323
                        var _7e = $a([$1.A, $1.L, $1.M, $1.P]); //#17324
                        for (var _7f = 0, _7g = _7e.length; _7f < _7g; _7f++) { //#17335
                            $1.y = $get(_7e, _7f); //#17325
                            $1.cost = $f($get($1.curlen, $1.x) + $get($get($1.latlen, $1.x), $1.y)); //#17326
                            if ($1.cost < $get($1.curlen, $1.y)) { //#17334
                                $put($1.curlen, $1.y, $1.cost); //#17328
                                $k[$j++] = $1.curseq; //#17331
                                $k[$j++] = $1.y; //#17331
                                $k[$j++] = Infinity; //#17331
                                $aload($get($1.curseq, $1.x)); //#17330
                                $aload($get($get($1.latseq, $1.x), $1.y)); //#17331
                                var _87 = $a(); //#17331
                                var _88 = $k[--$j]; //#17332
                                $put($k[--$j], _88, _87); //#17332
                                $1.imp = true; //#17333
                            } //#17333
                        } //#17333
                    } //#17333
                    if (!$1.imp) { //#17337
                        break; //#17337
                    } //#17337
                } //#17337
                $1.nxtlen = $a([$1.e, $1.e, $1.e, $1.e]); //#17341
                $1.nxtseq = $a(4); //#17342
                var _8L = $a([$1.A, $1.L, $1.M, $1.P]); //#17344
                for (var _8M = 0, _8N = _8L.length; _8M < _8N; _8M++) { //#17377
                    $1.x = $get(_8L, _8M); //#17345
                    for (;;) { //#17375
                        var _8T = $get($get($1.charvals, $1.x), $1.char) !== undefined; //#17349
                        if (!_8T) { //#17349
                            break; //#17349
                        } //#17349
                        $1.cost = $f($get($1.curlen, $1.x) + 1); //#17352
                        if ($1.cost < $get($1.nxtlen, $1.x)) { //#17356
                            $put($1.nxtlen, $1.x, $1.cost); //#17354
                            $k[$j++] = $1.nxtseq; //#17355
                            $k[$j++] = $1.x; //#17355
                            $k[$j++] = Infinity; //#17355
                            $aload($get($1.curseq, $1.x)); //#17355
                            $k[$j++] = $1.char; //#17355
                            var _8k = $a(); //#17355
                            var _8l = $k[--$j]; //#17355
                            $put($k[--$j], _8l, _8k); //#17355
                        } //#17355
                        var _8r = $a([$1.A, $1.L, $1.M, $1.P]); //#17359
                        for (var _8s = 0, _8t = _8r.length; _8s < _8t; _8s++) { //#17372
                            $1.y = $get(_8r, _8s); //#17360
                            if ($ne($1.x, $1.y)) { //#17371
                                $1.cost = $f($f($get($1.curlen, $1.y) + $get($get($1.shftlen, $1.y), $1.x)) + 1); //#17362
                                if ($1.cost < $get($1.nxtlen, $1.y)) { //#17370
                                    $put($1.nxtlen, $1.y, $1.cost); //#17364
                                    $k[$j++] = $1.nxtseq; //#17368
                                    $k[$j++] = $1.y; //#17368
                                    $k[$j++] = Infinity; //#17368
                                    $aload($get($1.curseq, $1.y)); //#17366
                                    var _9J = ($1.x == $1.A) ? $1.as : $1.ps; //#17367
                                    $k[$j++] = _9J; //#17368
                                    $k[$j++] = $1.char; //#17368
                                    var _9L = $a(); //#17368
                                    var _9M = $k[--$j]; //#17369
                                    $put($k[--$j], _9M, _9L); //#17369
                                } //#17369
                            } //#17369
                        } //#17369
                        break; //#17374
                    } //#17374
                } //#17374
                $1.curlen = $1.nxtlen; //#17379
                $1.curseq = $1.nxtseq; //#17380
            }); //#17380
            $1.minseq = $1.e; //#17385
            var _9V = $a([$1.A, $1.L, $1.M, $1.P]); //#17386
            for (var _9W = 0, _9X = _9V.length; _9W < _9X; _9W++) { //#17392
                $1.k = $get(_9V, _9W); //#17387
                if ($get($1.curlen, $1.k) < $1.minseq) { //#17391
                    $1.minseq = $get($1.curlen, $1.k); //#17389
                    $1.txtseq = $get($1.curseq, $1.k); //#17390
                } //#17390
            } //#17390
            $1.text = $a($1.minseq); //#17395
            $1.k = 0; //#17396
            $1.l = 0; //#17396
            for (;;) { //#17416
                if ($1.k >= $1.txtseq.length) { //#17397
                    break; //#17397
                } //#17397
                $1.char = $get($1.txtseq, $1.k); //#17399
                $k[$j++] = $1.char; //#17402
                if ($1[$get($1.textencfuncs, $1.submode)]() === true) {
                    break;
                } //#17402
                $1.addtotext(); //#17402
                $1.k = $1.k + 1; //#17403
                if (($1.char == $1.as) || ($1.char == $1.ps)) { //#17409
                    $k[$j++] = $get($1.txtseq, $1.k); //#17407
                    if ($1.char == $1.as) { //#17407
                        $1.enca(); //#17407
                    } else { //#17407
                        $1.encp(); //#17407
                    } //#17407
                    $1.addtotext(); //#17407
                    $1.k = $1.k + 1; //#17408
                } //#17408
                if ($1.char == $1.al) { //#17412
                    $1.submode = $1.A; //#17412
                } //#17412
                if ($1.char == $1.ll) { //#17413
                    $1.submode = $1.L; //#17413
                } //#17413
                if ($1.char == $1.ml) { //#17414
                    $1.submode = $1.M; //#17414
                } //#17414
                if ($1.char == $1.pl) { //#17415
                    $1.submode = $1.P; //#17415
                } //#17415
            } //#17415
            if (($1.text.length % 2) == 1) { //#17463
                if ($1.submode == $1.P) { //#17459
                    $k[$j++] = 'pad'; //#17420
                    $k[$j++] = $1.al; //#17420
                    $1.encp(); //#17420
                    var _AM = $k[--$j]; //#17420
                    $1[$k[--$j]] = _AM; //#17420
                    $1.submode = $1.A; //#17421
                } else { //#17459
                    $1.nextecitext = false; //#17424
                    for (var _AS = $1.i + 1, _AR = $1.seq.length - 1; _AS <= _AR; _AS += 1) { //#17431
                        $1.ti = _AS; //#17427
                        if ($ne($type($get($1.seq, $1.ti)), 'arraytype')) { //#17428
                            $1.nextecitext = false; //#17428
                            break; //#17428
                        } //#17428
                        if ($get($get($1.seq, $1.ti), 0) > -1000000) { //#17429
                            break; //#17429
                        } //#17429
                        $1.nextecitext = true; //#17430
                    } //#17430
                    if ($1.nextecitext) { //#17459
                        if ($1.submode == $1.A) { //#17456
                            var _Al = $get($get($1.charvals, $1.L), $get($get($1.seq, $1.ti), 0)) !== undefined; //#17434
                            if (_Al) { //#17439
                                $k[$j++] = 'pad'; //#17435
                                $k[$j++] = $1.ll; //#17435
                                $1.enca(); //#17435
                                var _An = $k[--$j]; //#17435
                                $1[$k[--$j]] = _An; //#17435
                                $1.submode = $1.L; //#17436
                            } else { //#17439
                                $k[$j++] = 'pad'; //#17438
                                $k[$j++] = $1.ml; //#17438
                                $1.enca(); //#17438
                                var _Ar = $k[--$j]; //#17438
                                $1[$k[--$j]] = _Ar; //#17438
                                $1.submode = $1.M; //#17439
                            } //#17439
                        } else { //#17456
                            if ($1.submode == $1.M) { //#17456
                                var _B3 = $get($get($1.charvals, $1.L), $get($get($1.seq, $1.ti), 0)) !== undefined; //#17443
                                if (_B3) { //#17452
                                    $k[$j++] = 'pad'; //#17444
                                    $k[$j++] = $1.ll; //#17444
                                    $1.encm(); //#17444
                                    var _B5 = $k[--$j]; //#17444
                                    $1[$k[--$j]] = _B5; //#17444
                                    $1.submode = $1.L; //#17445
                                } else { //#17452
                                    var _BF = $get($get($1.charvals, $1.P), $get($get($1.seq, $1.ti), 0)) !== undefined; //#17447
                                    if (_BF) { //#17452
                                        $k[$j++] = 'pad'; //#17448
                                        $k[$j++] = $1.pl; //#17448
                                        $1.encm(); //#17448
                                        var _BH = $k[--$j]; //#17448
                                        $1[$k[--$j]] = _BH; //#17448
                                        $1.submode = $1.P; //#17449
                                    } else { //#17452
                                        $k[$j++] = 'pad'; //#17451
                                        $k[$j++] = $1.al; //#17451
                                        $1.encm(); //#17451
                                        var _BL = $k[--$j]; //#17451
                                        $1[$k[--$j]] = _BL; //#17451
                                        $1.submode = $1.A; //#17452
                                    } //#17452
                                } //#17452
                            } else { //#17456
                                $k[$j++] = 'pad'; //#17455
                                $k[$j++] = $1.ml; //#17455
                                $1.encl(); //#17455
                                var _BP = $k[--$j]; //#17455
                                $1[$k[--$j]] = _BP; //#17455
                                $1.submode = $1.M; //#17456
                            } //#17456
                        } //#17456
                    } else { //#17459
                        $k[$j++] = 'pad'; //#17459
                        $k[$j++] = $1.ps; //#17459
                        if ($1[$get($1.textencfuncs, $1.submode)]() === true) {
                            return true;
                        } //#17459
                        var _BX = $k[--$j]; //#17459
                        $1[$k[--$j]] = _BX; //#17459
                    } //#17459
                } //#17459
                $k[$j++] = Infinity; //#17462
                $aload($1.text); //#17462
                $k[$j++] = $1.pad; //#17462
                $1.text = $a(); //#17462
            } //#17462
            $1.out = $a(~~($1.text.length / 2)); //#17465
            for (var _Bg = 0, _Bf = $1.out.length - 1; _Bg <= _Bf; _Bg += 1) { //#17469
                $1.k = _Bg; //#17467
                $put($1.out, $1.k, $f(($get($1.text, $1.k * 2) * 30) + $get($1.text, ($1.k * 2) + 1))); //#17468
            } //#17468
            $k[$j++] = $1.out; //#17471
        }; //#17471
        $1.encn = function() {
            $1.in = $k[--$j]; //#17476
            $1.out = $a([]); //#17477
            for (var _Bu = 0, _Bt = $1.in.length - 1; _Bu <= _Bt; _Bu += 44) { //#17505
                $1.k = _Bu; //#17479
                $k[$j++] = Infinity; //#17482
                var _Bz = $1.in.length - $1.k; //#17481
                $k[$j++] = 1; //#17481
                $k[$j++] = $1.in; //#17481
                $k[$j++] = $1.k; //#17481
                $k[$j++] = _Bz; //#17481
                if (_Bz > 44) { //#17481
                    $j--; //#17481
                    $k[$j++] = 44; //#17481
                } //#17481
                var _C0 = $k[--$j]; //#17481
                var _C1 = $k[--$j]; //#17481
                var _C3 = $geti($k[--$j], _C1, _C0); //#17481
                for (var _C4 = 0, _C5 = _C3.length; _C4 < _C5; _C4++) { //#17482
                    $k[$j++] = $f($get(_C3, _C4) - 48); //#17482
                } //#17482
                $1.gmod = $a(); //#17482
                $1.cwn = $a([]); //#17484
                for (;;) { //#17503
                    $1.dv = 900; //#17485
                    $1.gmul = $a([]); //#17486
                    $1.val = 0; //#17486
                    for (;;) { //#17498
                        if ($1.gmod.length == 0) { //#17487
                            break; //#17487
                        } //#17487
                        $1.val = $f(($1.val * 10) + $get($1.gmod, 0)); //#17488
                        $1.gmod = $geti($1.gmod, 1, $1.gmod.length - 1); //#17489
                        if ($1.val < $1.dv) { //#17495
                            if ($1.gmul.length != 0) { //#17493
                                $k[$j++] = Infinity; //#17492
                                $aload($1.gmul); //#17492
                                $k[$j++] = 0; //#17492
                                $1.gmul = $a(); //#17492
                            } //#17492
                        } else { //#17495
                            $k[$j++] = Infinity; //#17495
                            $aload($1.gmul); //#17495
                            $k[$j++] = ~~($1.val / $1.dv); //#17495
                            $1.gmul = $a(); //#17495
                        } //#17495
                        $1.val = $1.val % $1.dv; //#17497
                    } //#17497
                    $1.dv = $1.val; //#17499
                    $k[$j++] = Infinity; //#17500
                    $k[$j++] = $1.dv; //#17500
                    $aload($1.cwn); //#17500
                    $1.cwn = $a(); //#17500
                    $1.gmod = $1.gmul; //#17501
                    if ($1.gmul.length == 0) { //#17502
                        break; //#17502
                    } //#17502
                } //#17502
                $k[$j++] = Infinity; //#17504
                $aload($1.out); //#17504
                $aload($1.cwn); //#17504
                $1.out = $a(); //#17504
            } //#17504
            $k[$j++] = $1.out; //#17506
        }; //#17506
        $1.ence = function() {
            var _Ce = $f((-$get($k[--$j], 0)) - 1000000); //#17511
            $k[$j++] = _Ce; //#17519
            if (_Ce <= 899) { //#17518
                var _Cf = $k[--$j]; //#17512
                $k[$j++] = 927; //#17512
                $k[$j++] = _Cf; //#17512
                $astore($a(2)); //#17512
            } else { //#17518
                var _Ch = $k[--$j]; //#17513
                $k[$j++] = _Ch; //#17519
                if (_Ch <= 810899) { //#17518
                    var _Ci = $k[--$j]; //#17514
                    $k[$j++] = 926; //#17514
                    $k[$j++] = (~~(_Ci / 900)) - 1; //#17514
                    $k[$j++] = _Ci % 900; //#17514
                    $astore($a(3)); //#17514
                } else { //#17518
                    var _Ck = $k[--$j]; //#17515
                    $k[$j++] = _Ck; //#17519
                    if (_Ck <= 811799) { //#17518
                        var _Cl = $k[--$j]; //#17516
                        $k[$j++] = 925; //#17516
                        $k[$j++] = $f(_Cl - 810900); //#17516
                        $astore($a(2)); //#17516
                    } else { //#17518
                        $k[$j++] = 'bwipp.pdf417badECI#17518'; //#17518
                        $k[$j++] = "PDF417 supports ECIs 000000 to 811799"; //#17518
                        bwipp_raiseerror(); //#17518
                    } //#17518
                } //#17518
            } //#17518
        }; //#17518
        $1.encfuncs = $a(['enct', 'encn', 'encb']); //#17522
        $1.addtocws = function() {
            var _Co = $k[--$j]; //#17525
            $puti($1.datcws, $1.j, _Co); //#17525
            $1.j = _Co.length + $1.j; //#17526
        }; //#17526
        $1.datcws = $a($1.seqlen); //#17531
        $1.i = 0; //#17532
        $1.j = 0; //#17532
        for (;;) { //#17552
            if ($1.i >= $1.seq.length) { //#17533
                break; //#17533
            } //#17533
            $1.chars = $get($1.seq, $1.i); //#17534
            if ($eq($type($1.chars), 'arraytype')) { //#17548
                if ($get($1.chars, 0) <= -1000000) { //#17539
                    $k[$j++] = $1.chars; //#17537
                    $1.ence(); //#17537
                    $1.addtocws(); //#17537
                } else { //#17539
                    $k[$j++] = $1.chars; //#17539
                    if ($1[$get($1.encfuncs, $1.state)]() === true) {
                        break;
                    } //#17539
                    $1.addtocws(); //#17539
                } //#17539
            } else { //#17548
                $k[$j++] = $a([$get($1.latchcws, $1.chars)]); //#17542
                $1.addtocws(); //#17542
                if ($1.chars == $1.tl) { //#17543
                    $1.state = $1.T; //#17543
                    $1.submode = $1.A; //#17543
                } //#17543
                if ($1.chars == $1.nl) { //#17544
                    $1.state = $1.N; //#17544
                } //#17544
                if (($1.chars == $1.bl) || ($1.chars == $1.bl6)) { //#17545
                    $1.state = $1.B; //#17545
                } //#17545
                if ($1.chars == $1.bs) { //#17549
                    $1.i = $1.i + 1; //#17547
                    $k[$j++] = $get($1.seq, $1.i); //#17548
                    $1.encb(); //#17548
                    $1.addtocws(); //#17548
                } //#17548
            } //#17548
            $1.i = $1.i + 1; //#17551
        } //#17551
        $1.datcws = $geti($1.datcws, 0, $1.j); //#17553
    } //#17553
    if (!bwipp_micropdf417.$ctx._17617) { //#17617
        (function() { //#17617
            var $ctx = Object.create($1); //#17617
            $ctx.ccametrics = $a([$a([2, 5, 4, 39, 0, 19]), $a([2, 6, 4, 1, 0, 33]), $a([2, 7, 5, 32, 0, 12]), $a([2, 8, 5, 8, 0, 40]), $a([2, 9, 6, 14, 0, 46]), $a([2, 10, 6, 43, 0, 23]), $a([2, 12, 7, 20, 0, 52]), $a([3, 4, 4, 11, 43, 23]), $a([3, 5, 5, 1, 33, 13]), $a([3, 6, 6, 5, 37, 17]), $a([3, 7, 7, 15, 47, 27]), $a([3, 8, 7, 21, 1, 33]), $a([4, 3, 4, 40, 20, 52]), $a([4, 4, 5, 43, 23, 3]), $a([4, 5, 6, 46, 26, 6]), $a([4, 6, 7, 34, 14, 46]), $a([4, 7, 8, 29, 9, 41])]); //#17577
            $ctx.nonccametrics = $a([$a([1, 11, 7, 1, 0, 9]), $a([1, 14, 7, 8, 0, 8]), $a([1, 17, 7, 36, 0, 36]), $a([1, 20, 8, 19, 0, 19]), $a([1, 24, 8, 9, 0, 17]), $a([1, 28, 8, 25, 0, 33]), $a([2, 8, 8, 1, 0, 1]), $a([2, 11, 9, 1, 0, 9]), $a([2, 14, 9, 8, 0, 8]), $a([2, 17, 10, 36, 0, 36]), $a([2, 20, 11, 19, 0, 19]), $a([2, 23, 13, 9, 0, 17]), $a([2, 26, 15, 27, 0, 35]), $a([3, 6, 12, 1, 1, 1]), $a([3, 8, 14, 7, 7, 7]), $a([3, 10, 16, 15, 15, 15]), $a([3, 12, 18, 25, 25, 25]), $a([3, 15, 21, 37, 37, 37]), $a([3, 20, 26, 1, 17, 33]), $a([3, 26, 32, 1, 9, 17]), $a([3, 32, 38, 21, 29, 37]), $a([3, 38, 44, 15, 31, 47]), $a([3, 44, 50, 1, 25, 49]), $a([4, 4, 8, 47, 19, 43]), $a([4, 6, 12, 1, 1, 1]), $a([4, 8, 14, 7, 7, 7]), $a([4, 10, 16, 15, 15, 15]), $a([4, 12, 18, 25, 25, 25]), $a([4, 15, 21, 37, 37, 37]), $a([4, 20, 26, 1, 17, 33]), $a([4, 26, 32, 1, 9, 17]), $a([4, 32, 38, 21, 29, 37]), $a([4, 38, 44, 15, 31, 47]), $a([4, 44, 50, 1, 25, 49])]); //#17616
            for (var _EQ in $ctx) {
                $ctx.hasOwnProperty(_EQ) && (bwipp_micropdf417.$ctx[_EQ] = $ctx[_EQ]);
            } //#17616
            bwipp_micropdf417.$ctx._17617 = 1; //#17616
        })(); //#17616
    } //#17616
    $k[$j++] = 'metrics'; //#17619
    if ($1.cca) { //#17619
        $k[$j++] = $1.ccametrics; //#17619
    } else { //#17619
        $k[$j++] = $1.nonccametrics; //#17619
    } //#17619
    var _EU = $k[--$j]; //#17619
    $1[$k[--$j]] = _EU; //#17619
    $1.urows = $1.rows; //#17622
    $1.ucols = $1.columns; //#17623
    $1.i = 0; //#17624
    for (;;) { //#17640
        $1.m = $get($1.metrics, $1.i); //#17626
        $1.c = $get($1.m, 0); //#17627
        $1.r = $get($1.m, 1); //#17628
        $1.k = $get($1.m, 2); //#17629
        $1.rapl = $get($1.m, 3); //#17630
        $1.rapc = $get($1.m, 4); //#17631
        $1.rapr = $get($1.m, 5); //#17632
        $1.ncws = $f(($1.r * $1.c) - $1.k); //#17633
        $1.okay = true; //#17634
        if ($1.datcws.length > $1.ncws) { //#17635
            $1.okay = false; //#17635
        } //#17635
        if (($1.urows != 0) && ($1.urows != $1.r)) { //#17636
            $1.okay = false; //#17636
        } //#17636
        if (($1.ucols != 0) && ($1.ucols != $1.c)) { //#17637
            $1.okay = false; //#17637
        } //#17637
        if ($1.okay) { //#17638
            break; //#17638
        } //#17638
        $1.i = $1.i + 1; //#17639
    } //#17639
    $1.m = $1.datcws.length; //#17641
    $1.n = $f(($1.c * $1.r) - $1.k); //#17644
    $1.cws = $a($f(($1.c * $1.r) + 1)); //#17645
    $puti($1.cws, 0, $1.datcws); //#17646
    $k[$j++] = $1.cws; //#17647
    $k[$j++] = $1.m; //#17647
    $k[$j++] = Infinity; //#17647
    for (var _FD = 0, _FE = $f($1.n - $1.m); _FD < _FE; _FD++) { //#17647
        $k[$j++] = 900; //#17647
    } //#17647
    var _FF = $a(); //#17647
    var _FG = $k[--$j]; //#17647
    $puti($k[--$j], _FG, _FF); //#17647
    $k[$j++] = $1.cws; //#17648
    $k[$j++] = $1.n; //#17648
    $k[$j++] = Infinity; //#17648
    for (var _FL = 0, _FM = $1.k; _FL < _FM; _FL++) { //#17648
        $k[$j++] = 0; //#17648
    } //#17648
    $k[$j++] = 0; //#17648
    var _FN = $a(); //#17648
    var _FO = $k[--$j]; //#17648
    $puti($k[--$j], _FO, _FN); //#17648
    if (!bwipp_micropdf417.$ctx._17655) { //#17655
        (function() { //#17655
            var $ctx = Object.create($1); //#17655
            $k[$j++] = Infinity; //#17652
            $k[$j++] = 1; //#17652
            for (var _FQ = 0, _FR = 928; _FQ < _FR; _FQ++) { //#17652
                var _FS = $k[--$j]; //#17652
                $k[$j++] = _FS; //#17652
                $k[$j++] = (_FS * 3) % 929; //#17652
            } //#17652
            $ctx.rsalog = $a(); //#17652
            $ctx.rslog = $a(929); //#17653
            for (var _FV = 1; _FV <= 928; _FV += 1) { //#17654
                $put($ctx.rslog, $get($ctx.rsalog, _FV), _FV); //#17654
            } //#17654
            for (var _FZ in $ctx) {
                $ctx.hasOwnProperty(_FZ) && (bwipp_micropdf417.$ctx[_FZ] = $ctx[_FZ]);
            } //#17654
            bwipp_micropdf417.$ctx._17655 = 1; //#17654
        })(); //#17654
    } //#17654
    $1.rsprod = function() {
        var _Fa = $k[--$j]; //#17659
        var _Fb = $k[--$j]; //#17659
        $k[$j++] = _Fb; //#17663
        $k[$j++] = _Fa; //#17663
        if ((_Fa != 0) && (_Fb != 0)) { //#17662
            var _Fe = $get($1.rslog, $k[--$j]); //#17660
            var _Fj = $get($1.rsalog, $f(_Fe + $get($1.rslog, $k[--$j])) % 928); //#17660
            $k[$j++] = _Fj; //#17660
        } else { //#17662
            $j -= 2; //#17662
            $k[$j++] = 0; //#17662
        } //#17662
    }; //#17662
    $k[$j++] = Infinity; //#17667
    $k[$j++] = 1; //#17667
    for (var _Fl = 0, _Fm = $1.k; _Fl < _Fm; _Fl++) { //#17667
        $k[$j++] = 0; //#17667
    } //#17667
    $1.coeffs = $a(); //#17667
    for (var _Fq = 1, _Fp = $1.k; _Fq <= _Fp; _Fq += 1) { //#17676
        $1.i = _Fq; //#17669
        $put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); //#17670
        for (var _Fx = $1.i - 1; _Fx >= 1; _Fx -= 1) { //#17674
            $1.j = _Fx; //#17672
            $k[$j++] = $1.coeffs; //#17673
            $k[$j++] = $1.j; //#17673
            $k[$j++] = $get($1.coeffs, $1.j - 1); //#17673
            $k[$j++] = $get($1.coeffs, $1.j); //#17673
            $k[$j++] = $get($1.rsalog, $1.i); //#17673
            $1.rsprod(); //#17673
            var _G9 = $k[--$j]; //#17673
            var _GA = $k[--$j]; //#17673
            var _GB = $k[--$j]; //#17673
            $put($k[--$j], _GB, $f(_GA + _G9) % 929); //#17673
        } //#17673
        $k[$j++] = $1.coeffs; //#17675
        $k[$j++] = 0; //#17675
        $k[$j++] = $get($1.coeffs, 0); //#17675
        $k[$j++] = $get($1.rsalog, $1.i); //#17675
        $1.rsprod(); //#17675
        var _GJ = $k[--$j]; //#17675
        var _GK = $k[--$j]; //#17675
        $put($k[--$j], _GK, _GJ); //#17675
    } //#17675
    $1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); //#17677
    for (var _GQ = $1.coeffs.length - 1; _GQ >= 0; _GQ -= 2) { //#17678
        var _GR = $1.coeffs; //#17678
        $put(_GR, _GQ, $f(929 - $get(_GR, _GQ))); //#17678
    } //#17678
    for (var _GV = 0, _GU = $f($1.n - 1); _GV <= _GU; _GV += 1) { //#17687
        $1.t = $f($get($1.cws, _GV) + $get($1.cws, $1.n)) % 929; //#17682
        for (var _Gd = 0, _Gc = $f($1.k - 1); _Gd <= _Gc; _Gd += 1) { //#17686
            $1.j = _Gd; //#17684
            $put($1.cws, $f($1.n + $1.j), ($f($get($1.cws, $f($f($1.n + $1.j) + 1)) + ($f(929 - (($1.t * $get($1.coeffs, $f($f($1.k - $1.j) - 1))) % 929))))) % 929); //#17685
        } //#17685
    } //#17685
    for (var _Gu = $1.n, _Gt = $f($1.n + $1.k); _Gu <= _Gt; _Gu += 1) { //#17688
        $put($1.cws, _Gu, $f(929 - $get($1.cws, _Gu)) % 929); //#17688
    } //#17688
    $1.cws = $geti($1.cws, 0, $1.cws.length - 1); //#17691
    var _H2 = $get($1.options, 'debugcws') !== undefined; //#17693
    if (_H2) { //#17693
        $k[$j++] = 'bwipp.debugcws#17693'; //#17693
        $k[$j++] = $1.cws; //#17693
        bwipp_raiseerror(); //#17693
    } //#17693
    if (!bwipp_micropdf417.$ctx._17952) { //#17952
        (function() { //#17952
            var $ctx = Object.create($1); //#17952
            $ctx.clusters = $a([$a([120256, 125680, 128380, 120032, 125560, 128318, 108736, 119920, 108640, 86080, 108592, 86048, 110016, 120560, 125820, 109792, 120440, 125758, 88256, 109680, 88160, 89536, 110320, 120700, 89312, 110200, 120638, 89200, 110140, 89840, 110460, 89720, 110398, 89980, 128506, 119520, 125304, 128190, 107712, 119408, 125244, 107616, 119352, 84032, 107568, 119324, 84000, 107544, 83984, 108256, 119672, 125374, 85184, 108144, 119612, 85088, 108088, 119582, 85040, 108060, 85728, 108408, 119742, 85616, 108348, 85560, 108318, 85880, 108478, 85820, 85790, 107200, 119152, 125116, 107104, 119096, 125086, 83008, 107056, 119068, 82976, 107032, 82960, 82952, 83648, 107376, 119228, 83552, 107320, 119198, 83504, 107292, 83480, 83468, 83824, 107452, 83768, 107422, 83740, 83900, 106848, 118968, 125022, 82496, 106800, 118940, 82464, 106776, 118926, 82448, 106764, 82440, 106758, 82784, 106936, 119006, 82736, 106908, 82712, 106894, 82700, 82694, 106974, 82830, 82240, 106672, 118876, 82208, 106648, 118862, 82192, 106636, 82184, 106630, 82180, 82352, 82328, 82316, 82080, 118830, 106572, 106566, 82050, 117472, 124280, 127678, 103616, 117360, 124220, 103520, 117304, 124190, 75840, 103472, 75808, 104160, 117624, 124350, 76992, 104048, 117564, 76896, 103992, 76848, 76824, 77536, 104312, 117694, 77424, 104252, 77368, 77340, 77688, 104382, 77628, 77758, 121536, 126320, 128700, 121440, 126264, 128670, 111680, 121392, 126236, 111648, 121368, 126222, 111632, 121356, 103104, 117104, 124092, 112320, 103008, 117048, 124062, 112224, 121656, 126366, 93248, 74784, 102936, 117006, 93216, 112152, 93200, 75456, 103280, 117180, 93888, 75360, 103224, 117150, 93792, 112440, 121758, 93744, 75288, 93720, 75632, 103356, 94064, 75576, 103326, 94008, 112542, 93980, 75708, 94140, 75678, 94110, 121184, 126136, 128606, 111168, 121136, 126108, 111136, 121112, 126094, 111120, 121100, 111112, 111108, 102752, 116920, 123998, 111456, 102704, 116892, 91712, 74272, 121244, 116878, 91680, 74256, 102668, 91664, 111372, 102662, 74244, 74592, 102840, 116958, 92000, 74544, 102812, 91952, 111516, 102798, 91928, 74508, 74502, 74680, 102878, 92088, 74652, 92060, 74638, 92046, 92126, 110912, 121008, 126044, 110880, 120984, 126030, 110864, 120972, 110856, 120966, 110852, 110850, 74048, 102576, 116828, 90944, 74016, 102552, 116814, 90912, 111000, 121038, 90896, 73992, 102534, 90888, 110982, 90884, 74160, 102620, 91056, 74136, 102606, 91032, 111054, 91020, 74118, 91014, 91100, 91086, 110752, 120920, 125998, 110736, 120908, 110728, 120902, 110724, 110722, 73888, 102488, 116782, 90528, 73872, 102476, 90512, 110796, 102470, 90504, 73860, 90500, 73858, 73944, 90584, 90572, 90566, 120876, 120870, 110658, 102444, 73800, 90312, 90308, 90306, 101056, 116080, 123580, 100960, 116024, 70720, 100912, 115996, 70688, 100888, 70672, 70664, 71360, 101232, 116156, 71264, 101176, 116126, 71216, 101148, 71192, 71180, 71536, 101308, 71480, 101278, 71452, 71612, 71582, 118112, 124600, 127838, 105024, 118064, 124572, 104992, 118040, 124558, 104976, 118028, 104968, 118022, 100704, 115896, 123486, 105312, 100656, 115868, 79424, 70176, 118172, 115854, 79392, 105240, 100620, 79376, 70152, 79368, 70496, 100792, 115934, 79712, 70448, 118238, 79664, 105372, 100750, 79640, 70412, 79628, 70584, 100830, 79800, 70556, 79772, 70542, 70622, 79838, 122176, 126640, 128860, 122144, 126616, 128846, 122128, 126604, 122120, 126598, 122116, 104768, 117936, 124508, 113472, 104736, 126684, 124494, 113440, 122264, 126670, 113424, 104712, 117894, 113416, 122246, 104706, 69952, 100528, 115804, 78656, 69920, 100504, 115790, 96064, 78624, 104856, 117966, 96032, 113560, 122318, 100486, 96016, 78600, 104838, 96008, 69890, 70064, 100572, 78768, 70040, 100558, 96176, 78744, 104910, 96152, 113614, 70022, 78726, 70108, 78812, 70094, 96220, 78798, 122016, 126552, 128814, 122000, 126540, 121992, 126534, 121988, 121986, 104608, 117848, 124462, 113056, 104592, 126574, 113040, 122060, 117830, 113032, 104580, 113028, 104578, 113026, 69792, 100440, 115758, 78240, 69776, 100428, 95136, 78224, 104652, 100422, 95120, 113100, 69764, 95112, 78212, 69762, 78210, 69848, 100462, 78296, 69836, 95192, 78284, 69830, 95180, 78278, 69870, 95214, 121936, 126508, 121928, 126502, 121924, 121922, 104528, 117804, 112848, 104520, 117798, 112840, 121958, 112836, 104514, 112834, 69712, 100396, 78032, 69704, 100390, 94672, 78024, 104550, 94664, 112870, 69698, 94660, 78018, 94658, 78060, 94700, 94694, 126486, 121890, 117782, 104484, 104482, 69672, 77928, 94440, 69666, 77922, 99680, 68160, 99632, 68128, 99608, 115342, 68112, 99596, 68104, 99590, 68448, 99768, 115422, 68400, 99740, 68376, 99726, 68364, 68358, 68536, 99806, 68508, 68494, 68574, 101696, 116400, 123740, 101664, 116376, 101648, 116364, 101640, 116358, 101636, 67904, 99504, 115292, 72512, 67872, 116444, 115278, 72480, 101784, 116430, 72464, 67848, 99462, 72456, 101766, 67842, 68016, 99548, 72624, 67992, 99534, 72600, 101838, 72588, 67974, 68060, 72668, 68046, 72654, 118432, 124760, 127918, 118416, 124748, 118408, 124742, 118404, 118402, 101536, 116312, 105888, 101520, 116300, 105872, 118476, 116294, 105864, 101508, 105860, 101506, 105858, 67744, 99416, 72096, 67728, 116334, 80800, 72080, 101580, 99398, 80784, 105932, 67716, 80776, 72068, 67714, 72066, 67800, 99438, 72152, 67788, 80856, 72140, 67782, 80844, 72134, 67822, 72174, 80878, 126800, 128940, 126792, 128934, 126788, 126786, 118352, 124716, 122576, 126828, 124710, 122568, 126822, 122564, 118338, 122562, 101456, 116268, 105680, 101448, 116262, 114128, 105672, 118374, 114120, 122598, 101442, 114116, 105666, 114114, 67664, 99372, 71888, 67656, 99366, 80336, 71880, 101478, 97232, 80328, 105702, 67650, 97224, 114150, 71874, 97220, 67692, 71916, 67686, 80364, 71910, 97260, 80358, 97254, 126760, 128918, 126756, 126754, 118312, 124694, 122472, 126774, 122468, 118306, 122466, 101416, 116246, 105576, 101412, 113896, 105572, 101410, 113892, 105570, 113890, 67624, 99350, 71784, 101430, 80104, 71780, 67618, 96744, 80100, 71778, 96740, 80098, 96738, 71798, 96758, 126738, 122420, 122418, 105524, 113780, 113778, 71732, 79988, 96500, 96498, 66880, 66848, 98968, 66832, 66824, 66820, 66992, 66968, 66956, 66950, 67036, 67022, 100000, 99984, 115532, 99976, 115526, 99972, 99970, 66720, 98904, 69024, 100056, 98892, 69008, 100044, 69000, 100038, 68996, 66690, 68994, 66776, 98926, 69080, 100078, 69068, 66758, 69062, 66798, 69102, 116560, 116552, 116548, 116546, 99920, 102096, 116588, 115494, 102088, 116582, 102084, 99906, 102082, 66640, 68816, 66632, 98854, 73168, 68808, 66628, 73160, 68804, 66626, 73156, 68802, 66668, 68844, 66662, 73196, 68838, 73190, 124840, 124836, 124834, 116520, 118632, 124854, 118628, 116514, 118626, 99880, 115478, 101992, 116534, 106216, 101988, 99874, 106212, 101986, 106210, 66600, 98838, 68712, 99894, 72936, 68708, 66594, 81384, 72932, 68706, 81380, 72930, 66614, 68726, 72950, 81398, 128980, 128978, 124820, 126900, 124818, 126898, 116500, 118580, 116498, 122740, 118578, 122738, 99860, 101940, 99858, 106100, 101938, 114420]), $a([128352, 129720, 125504, 128304, 129692, 125472, 128280, 129678, 125456, 128268, 125448, 128262, 125444, 125792, 128440, 129758, 120384, 125744, 128412, 120352, 125720, 128398, 120336, 125708, 120328, 125702, 120324, 120672, 125880, 128478, 110144, 120624, 125852, 110112, 120600, 125838, 110096, 120588, 110088, 120582, 110084, 110432, 120760, 125918, 89664, 110384, 120732, 89632, 110360, 120718, 89616, 110348, 89608, 110342, 89952, 110520, 120798, 89904, 110492, 89880, 110478, 89868, 90040, 110558, 90012, 89998, 125248, 128176, 129628, 125216, 128152, 129614, 125200, 128140, 125192, 128134, 125188, 125186, 119616, 125360, 128220, 119584, 125336, 128206, 119568, 125324, 119560, 125318, 119556, 119554, 108352, 119728, 125404, 108320, 119704, 125390, 108304, 119692, 108296, 119686, 108292, 108290, 85824, 108464, 119772, 85792, 108440, 119758, 85776, 108428, 85768, 108422, 85764, 85936, 108508, 85912, 108494, 85900, 85894, 85980, 85966, 125088, 128088, 129582, 125072, 128076, 125064, 128070, 125060, 125058, 119200, 125144, 128110, 119184, 125132, 119176, 125126, 119172, 119170, 107424, 119256, 125166, 107408, 119244, 107400, 119238, 107396, 107394, 83872, 107480, 119278, 83856, 107468, 83848, 107462, 83844, 83842, 83928, 107502, 83916, 83910, 83950, 125008, 128044, 125000, 128038, 124996, 124994, 118992, 125036, 118984, 125030, 118980, 118978, 106960, 119020, 106952, 119014, 106948, 106946, 82896, 106988, 82888, 106982, 82884, 82882, 82924, 82918, 124968, 128022, 124964, 124962, 118888, 124982, 118884, 118882, 106728, 118902, 106724, 106722, 82408, 106742, 82404, 82402, 124948, 124946, 118836, 118834, 106612, 106610, 124224, 127664, 129372, 124192, 127640, 129358, 124176, 127628, 124168, 127622, 124164, 124162, 117568, 124336, 127708, 117536, 124312, 127694, 117520, 124300, 117512, 124294, 117508, 117506, 104256, 117680, 124380, 104224, 117656, 124366, 104208, 117644, 104200, 117638, 104196, 104194, 77632, 104368, 117724, 77600, 104344, 117710, 77584, 104332, 77576, 104326, 77572, 77744, 104412, 77720, 104398, 77708, 77702, 77788, 77774, 128672, 129880, 93168, 128656, 129868, 92664, 128648, 129862, 92412, 128644, 128642, 124064, 127576, 129326, 126368, 124048, 129902, 126352, 128716, 127558, 126344, 124036, 126340, 124034, 126338, 117152, 124120, 127598, 121760, 117136, 124108, 121744, 126412, 124102, 121736, 117124, 121732, 117122, 121730, 103328, 117208, 124142, 112544, 103312, 117196, 112528, 121804, 117190, 112520, 103300, 112516, 103298, 112514, 75680, 103384, 117230, 94112, 75664, 103372, 94096, 112588, 103366, 94088, 75652, 94084, 75650, 75736, 103406, 94168, 75724, 94156, 75718, 94150, 75758, 128592, 129836, 91640, 128584, 129830, 91388, 128580, 91262, 128578, 123984, 127532, 126160, 123976, 127526, 126152, 128614, 126148, 123970, 126146, 116944, 124012, 121296, 116936, 124006, 121288, 126182, 121284, 116930, 121282, 102864, 116972, 111568, 102856, 116966, 111560, 121318, 111556, 102850, 111554, 74704, 102892, 92112, 74696, 102886, 92104, 111590, 92100, 74690, 92098, 74732, 92140, 74726, 92134, 128552, 129814, 90876, 128548, 90750, 128546, 123944, 127510, 126056, 128566, 126052, 123938, 126050, 116840, 123958, 121064, 116836, 121060, 116834, 121058, 102632, 116854, 111080, 121078, 111076, 102626, 111074, 74216, 102646, 91112, 74212, 91108, 74210, 91106, 74230, 91126, 128532, 90494, 128530, 123924, 126004, 123922, 126002, 116788, 120948, 116786, 120946, 102516, 110836, 102514, 110834, 73972, 90612, 73970, 90610, 128522, 123914, 125978, 116762, 120890, 102458, 110714, 123552, 127320, 129198, 123536, 127308, 123528, 127302, 123524, 123522, 116128, 123608, 127342, 116112, 123596, 116104, 123590, 116100, 116098, 101280, 116184, 123630, 101264, 116172, 101256, 116166, 101252, 101250, 71584, 101336, 116206, 71568, 101324, 71560, 101318, 71556, 71554, 71640, 101358, 71628, 71622, 71662, 127824, 129452, 79352, 127816, 129446, 79100, 127812, 78974, 127810, 123472, 127276, 124624, 123464, 127270, 124616, 127846, 124612, 123458, 124610, 115920, 123500, 118224, 115912, 123494, 118216, 124646, 118212, 115906, 118210, 100816, 115948, 105424, 100808, 115942, 105416, 118246, 105412, 100802, 105410, 70608, 100844, 79824, 70600, 100838, 79816, 105446, 79812, 70594, 79810, 70636, 79852, 70630, 79846, 129960, 95728, 113404, 129956, 95480, 113278, 129954, 95356, 95294, 127784, 129430, 78588, 128872, 129974, 95996, 78462, 128868, 127778, 95870, 128866, 123432, 127254, 124520, 123428, 126696, 128886, 123426, 126692, 124514, 126690, 115816, 123446, 117992, 115812, 122344, 117988, 115810, 122340, 117986, 122338, 100584, 115830, 104936, 100580, 113640, 104932, 100578, 113636, 104930, 113634, 70120, 100598, 78824, 70116, 96232, 78820, 70114, 96228, 78818, 96226, 70134, 78838, 129940, 94968, 113022, 129938, 94844, 94782, 127764, 78206, 128820, 127762, 95102, 128818, 123412, 124468, 123410, 126580, 124466, 126578, 115764, 117876, 115762, 122100, 117874, 122098, 100468, 104692, 100466, 113140, 104690, 113138, 69876, 78324, 69874, 95220, 78322, 95218, 129930, 94588, 94526, 127754, 128794, 123402, 124442, 126522, 115738, 117818, 121978, 100410, 104570, 112890, 69754, 78074, 94714, 94398, 123216, 127148, 123208, 127142, 123204, 123202, 115408, 123244, 115400, 123238, 115396, 115394, 99792, 115436, 99784, 115430, 99780, 99778, 68560, 99820, 68552, 99814, 68548, 68546, 68588, 68582, 127400, 129238, 72444, 127396, 72318, 127394, 123176, 127126, 123752, 123172, 123748, 123170, 123746, 115304, 123190, 116456, 115300, 116452, 115298, 116450, 99560, 115318, 101864, 99556, 101860, 99554, 101858, 68072, 99574, 72680, 68068, 72676, 68066, 72674, 68086, 72694, 129492, 80632, 105854, 129490, 80508, 80446, 127380, 72062, 127924, 127378, 80766, 127922, 123156, 123700, 123154, 124788, 123698, 124786, 115252, 116340, 115250, 118516, 116338, 118514, 99444, 101620, 99442, 105972, 101618, 105970, 67828, 72180, 67826, 80884, 72178, 80882, 97008, 114044, 96888, 113982, 96828, 96798, 129482, 80252, 130010, 97148, 80190, 97086, 127370, 127898, 128954, 123146, 123674, 124730, 126842, 115226, 116282, 118394, 122618, 99386, 101498, 105722, 114170, 67706, 71930, 80378, 96632, 113854, 96572, 96542, 80062, 96702, 96444, 96414, 96350, 123048, 123044, 123042, 115048, 123062, 115044, 115042, 99048, 115062, 99044, 99042, 67048, 99062, 67044, 67042, 67062, 127188, 68990, 127186, 123028, 123316, 123026, 123314, 114996, 115572, 114994, 115570, 98932, 100084, 98930, 100082, 66804, 69108, 66802, 69106, 129258, 73084, 73022, 127178, 127450, 123018, 123290, 123834, 114970, 115514, 116602, 98874, 99962, 102138, 66682, 68858, 73210, 81272, 106174, 81212, 81182, 72894, 81342, 97648, 114364, 97592, 114334, 97564, 97550, 81084, 97724, 81054, 97694, 97464, 114270, 97436, 97422, 80990, 97502, 97372, 97358, 97326, 114868, 114866, 98676, 98674, 66292, 66290, 123098, 114842, 115130, 98618, 99194, 66170, 67322, 69310, 73404, 73374, 81592, 106334, 81564, 81550, 73310, 81630, 97968, 114524, 97944, 114510, 97932, 97926, 81500, 98012, 81486, 97998, 97880, 114478, 97868, 97862, 81454, 97902, 97836, 97830, 69470, 73564, 73550, 81752, 106414, 81740, 81734, 73518, 81774, 81708, 81702]), $a([109536, 120312, 86976, 109040, 120060, 86496, 108792, 119934, 86256, 108668, 86136, 129744, 89056, 110072, 129736, 88560, 109820, 129732, 88312, 109694, 129730, 88188, 128464, 129772, 89592, 128456, 129766, 89340, 128452, 89214, 128450, 125904, 128492, 125896, 128486, 125892, 125890, 120784, 125932, 120776, 125926, 120772, 120770, 110544, 120812, 110536, 120806, 110532, 84928, 108016, 119548, 84448, 107768, 119422, 84208, 107644, 84088, 107582, 84028, 129640, 85488, 108284, 129636, 85240, 108158, 129634, 85116, 85054, 128232, 129654, 85756, 128228, 85630, 128226, 125416, 128246, 125412, 125410, 119784, 125430, 119780, 119778, 108520, 119798, 108516, 108514, 83424, 107256, 119166, 83184, 107132, 83064, 107070, 83004, 82974, 129588, 83704, 107390, 129586, 83580, 83518, 128116, 83838, 128114, 125172, 125170, 119284, 119282, 107508, 107506, 82672, 106876, 82552, 106814, 82492, 82462, 129562, 82812, 82750, 128058, 125050, 119034, 82296, 106686, 82236, 82206, 82366, 82108, 82078, 76736, 103920, 117500, 76256, 103672, 117374, 76016, 103548, 75896, 103486, 75836, 129384, 77296, 104188, 129380, 77048, 104062, 129378, 76924, 76862, 127720, 129398, 77564, 127716, 77438, 127714, 124392, 127734, 124388, 124386, 117736, 124406, 117732, 117730, 104424, 117750, 104420, 104418, 112096, 121592, 126334, 92608, 111856, 121468, 92384, 111736, 121406, 92272, 111676, 92216, 111646, 92188, 75232, 103160, 117118, 93664, 74992, 103036, 93424, 112252, 102974, 93304, 74812, 93244, 74782, 93214, 129332, 75512, 103294, 129908, 129330, 93944, 75388, 129906, 93820, 75326, 93758, 127604, 75646, 128756, 127602, 94078, 128754, 124148, 126452, 124146, 126450, 117236, 121844, 117234, 121842, 103412, 103410, 91584, 111344, 121212, 91360, 111224, 121150, 91248, 111164, 91192, 111134, 91164, 91150, 74480, 102780, 91888, 74360, 102718, 91768, 111422, 91708, 74270, 91678, 129306, 74620, 129850, 92028, 74558, 91966, 127546, 128634, 124026, 126202, 116986, 121338, 102906, 90848, 110968, 121022, 90736, 110908, 90680, 110878, 90652, 90638, 74104, 102590, 91000, 74044, 90940, 74014, 90910, 74174, 91070, 90480, 110780, 90424, 110750, 90396, 90382, 73916, 90556, 73886, 90526, 90296, 110686, 90268, 90254, 73822, 90334, 90204, 90190, 71136, 101112, 116094, 70896, 100988, 70776, 100926, 70716, 70686, 129204, 71416, 101246, 129202, 71292, 71230, 127348, 71550, 127346, 123636, 123634, 116212, 116210, 101364, 101362, 79296, 105200, 118140, 79072, 105080, 118078, 78960, 105020, 78904, 104990, 78876, 78862, 70384, 100732, 79600, 70264, 100670, 79480, 105278, 79420, 70174, 79390, 129178, 70524, 129466, 79740, 70462, 79678, 127290, 127866, 123514, 124666, 115962, 118266, 100858, 113376, 122232, 126654, 95424, 113264, 122172, 95328, 113208, 122142, 95280, 113180, 95256, 113166, 95244, 78560, 104824, 117950, 95968, 78448, 104764, 95856, 113468, 104734, 95800, 78364, 95772, 78350, 95758, 70008, 100542, 78712, 69948, 96120, 78652, 69918, 96060, 78622, 96030, 70078, 78782, 96190, 94912, 113008, 122044, 94816, 112952, 122014, 94768, 112924, 94744, 112910, 94732, 94726, 78192, 104636, 95088, 78136, 104606, 95032, 113054, 95004, 78094, 94990, 69820, 78268, 69790, 95164, 78238, 95134, 94560, 112824, 121950, 94512, 112796, 94488, 112782, 94476, 94470, 78008, 104542, 94648, 77980, 94620, 77966, 94606, 69726, 78046, 94686, 94384, 112732, 94360, 112718, 94348, 94342, 77916, 94428, 77902, 94414, 94296, 112686, 94284, 94278, 77870, 94318, 94252, 94246, 68336, 99708, 68216, 99646, 68156, 68126, 68476, 68414, 127162, 123258, 115450, 99834, 72416, 101752, 116414, 72304, 101692, 72248, 101662, 72220, 72206, 67960, 99518, 72568, 67900, 72508, 67870, 72478, 68030, 72638, 80576, 105840, 118460, 80480, 105784, 118430, 80432, 105756, 80408, 105742, 80396, 80390, 72048, 101564, 80752, 71992, 101534, 80696, 71964, 80668, 71950, 80654, 67772, 72124, 67742, 80828, 72094, 80798, 114016, 122552, 126814, 96832, 113968, 122524, 96800, 113944, 122510, 96784, 113932, 96776, 113926, 96772, 80224, 105656, 118366, 97120, 80176, 105628, 97072, 114076, 105614, 97048, 80140, 97036, 80134, 97030, 71864, 101470, 80312, 71836, 97208, 80284, 71822, 97180, 80270, 97166, 67678, 71902, 80350, 97246, 96576, 113840, 122460, 96544, 113816, 122446, 96528, 113804, 96520, 113798, 96516, 96514, 80048, 105564, 96688, 80024, 105550, 96664, 113870, 96652, 80006, 96646, 71772, 80092, 71758, 96732, 80078, 96718, 96416, 113752, 122414, 96400, 113740, 96392, 113734, 96388, 96386, 79960, 105518, 96472, 79948, 96460, 79942, 96454, 71726, 79982, 96494, 96336, 113708, 96328, 113702, 96324, 96322, 79916, 96364, 79910, 96358, 96296, 113686, 96292, 96290, 79894, 96310, 66936, 99006, 66876, 66846, 67006, 68976, 100028, 68920, 99998, 68892, 68878, 66748, 69052, 66718, 69022, 73056, 102072, 116574, 73008, 102044, 72984, 102030, 72972, 72966, 68792, 99934, 73144, 68764, 73116, 68750, 73102, 66654, 68830, 73182, 81216, 106160, 118620, 81184, 106136, 118606, 81168, 106124, 81160, 106118, 81156, 81154, 72880, 101980, 81328, 72856, 101966, 81304, 106190, 81292, 72838, 81286, 68700, 72924, 68686, 81372, 72910, 81358, 114336, 122712, 126894, 114320, 122700, 114312, 122694, 114308, 114306, 81056, 106072, 118574, 97696, 81040, 106060, 97680, 114380, 106054, 97672, 81028, 97668, 81026, 97666, 72792, 101934, 81112, 72780, 97752, 81100, 72774, 97740, 81094, 97734, 68654, 72814, 81134, 97774, 114256, 122668, 114248, 122662, 114244, 114242, 80976, 106028, 97488, 80968, 106022, 97480, 114278, 97476, 80962, 97474, 72748, 81004, 72742, 97516, 80998, 97510, 114216, 122646, 114212, 114210, 80936, 106006, 97384, 80932, 97380, 80930, 97378, 72726, 80950, 97398, 114196, 114194, 80916, 97332, 80914, 97330, 66236, 66206, 67256, 99166, 67228, 67214, 66142, 67294, 69296, 100188, 69272, 100174, 69260, 69254, 67164, 69340, 67150, 69326, 73376, 102232, 116654, 73360, 102220, 73352, 102214, 73348, 73346, 69208, 100142, 73432, 102254, 73420, 69190, 73414, 67118, 69230, 73454, 106320, 118700, 106312, 118694, 106308, 106306, 73296, 102188, 81616, 106348, 102182, 81608, 73284, 81604, 73282, 81602, 69164, 73324, 69158, 81644, 73318, 81638, 122792, 126934, 122788, 122786, 106280, 118678, 114536, 106276, 114532, 106274, 114530, 73256, 102166, 81512, 73252, 98024, 81508, 73250, 98020, 81506, 98018, 69142, 73270, 81526, 98038, 122772, 122770, 106260, 114484, 106258, 114482, 73236, 81460, 73234, 97908, 81458, 97906, 122762, 106250, 114458, 73226, 81434, 97850, 66396, 66382, 67416, 99246, 67404, 67398, 66350, 67438, 69456, 100268, 69448, 100262, 69444, 69442, 67372, 69484, 67366, 69478, 102312, 116694, 102308, 102306, 69416, 100246, 73576, 102326, 73572, 69410, 73570, 67350, 69430, 73590, 118740, 118738, 102292, 106420, 102290, 106418, 69396, 73524, 69394, 81780, 73522, 81778, 118730, 102282, 106394, 69386, 73498, 81722, 66476, 66470, 67496, 99286, 67492, 67490, 66454, 67510, 100308, 100306, 67476, 69556, 67474, 69554, 116714])]); //#17936
            $ctx.raps = $a([$a([802, 930, 946, 818, 882, 890, 826, 954, 922, 986, 970, 906, 778, 794, 786, 914, 978, 982, 980, 916, 948, 932, 934, 942, 940, 936, 808, 812, 814, 806, 822, 950, 918, 790, 788, 820, 884, 868, 870, 878, 876, 872, 840, 856, 860, 862, 846, 844, 836, 838, 834, 866]), $a([718, 590, 622, 558, 550, 566, 534, 530, 538, 570, 562, 546, 610, 626, 634, 762, 754, 758, 630, 628, 612, 614, 582, 578, 706, 738, 742, 740, 748, 620, 556, 552, 616, 744, 712, 716, 708, 710, 646, 654, 652, 668, 664, 696, 688, 656, 720, 592, 600, 604, 732, 734])]); //#17951
            for (var _HB in $ctx) {
                $ctx.hasOwnProperty(_HB) && (bwipp_micropdf417.$ctx[_HB] = $ctx[_HB]);
            } //#17951
            bwipp_micropdf417.$ctx._17952 = 1; //#17951
        })(); //#17951
    } //#17951
    $1.cwtobits = function() {
        var _HE = $get($1.clusters, $k[--$j]); //#17956
        $1.v = $get(_HE, $k[--$j]); //#17956
        $k[$j++] = Infinity; //#17957
        for (var _HH = 0, _HI = 17; _HH < _HI; _HH++) { //#17957
            $k[$j++] = 0; //#17957
        } //#17957
        var _HL = $cvrs($s(17), $1.v, 2); //#17957
        for (var _HM = 0, _HN = _HL.length; _HM < _HN; _HM++) { //#17957
            $k[$j++] = $get(_HL, _HM) - 48; //#17957
        } //#17957
        var _HP = $a(); //#17957
        $k[$j++] = $geti(_HP, _HP.length - 17, 17); //#17958
    }; //#17958
    $1.raptobits = function() {
        var _HT = $get($1.raps, $k[--$j]); //#17963
        $1.v = $get(_HT, $k[--$j]); //#17963
        $k[$j++] = Infinity; //#17964
        for (var _HW = 0, _HX = 10; _HW < _HX; _HW++) { //#17964
            $k[$j++] = 0; //#17964
        } //#17964
        var _Ha = $cvrs($s(10), $1.v, 2); //#17964
        for (var _Hb = 0, _Hc = _Ha.length; _Hb < _Hc; _Hb++) { //#17964
            $k[$j++] = $get(_Ha, _Hb) - 48; //#17964
        } //#17964
        var _He = $a(); //#17964
        $k[$j++] = $geti(_He, _He.length - 10, 10); //#17965
    }; //#17965
    $1.rwid = $get($a([38, 55, 82, 99]), $f($1.c - 1)); //#17969
    if (($1.c == 3) && $1.cca) { //#17970
        $1.rwid = 72; //#17970
    } //#17970
    $1.pixs = $a($1.rwid * $1.r); //#17971
    for (var _Hq = 0, _Hp = $f($1.r - 1); _Hq <= _Hp; _Hq += 1) { //#18009
        $1.i = _Hq; //#17974
        $1.clst = ($f($f($1.i + $1.rapl) - 1)) % 3; //#17975
        $k[$j++] = $1.pixs; //#18007
        $k[$j++] = $1.rwid * $1.i; //#18007
        $k[$j++] = Infinity; //#18007
        if ($1.c == 1) { //#17981
            $k[$j++] = ($f($f($1.i + $1.rapl) - 1)) % 52; //#17978
            $k[$j++] = 0; //#17978
            $1.raptobits(); //#17978
            $aload($k[--$j]); //#17978
            $k[$j++] = $get($1.cws, $1.i); //#17979
            $k[$j++] = $1.clst; //#17979
            $1.cwtobits(); //#17979
            $aload($k[--$j]); //#17979
            $k[$j++] = ($f($f($1.i + $1.rapr) - 1)) % 52; //#17980
            $k[$j++] = 0; //#17980
            $1.raptobits(); //#17980
            $aload($k[--$j]); //#17980
        } //#17980
        if ($1.c == 2) { //#17987
            $k[$j++] = ($f($f($1.i + $1.rapl) - 1)) % 52; //#17983
            $k[$j++] = 0; //#17983
            $1.raptobits(); //#17983
            $aload($k[--$j]); //#17983
            $k[$j++] = $get($1.cws, $1.i * 2); //#17984
            $k[$j++] = $1.clst; //#17984
            $1.cwtobits(); //#17984
            $aload($k[--$j]); //#17984
            $k[$j++] = $get($1.cws, ($1.i * 2) + 1); //#17985
            $k[$j++] = $1.clst; //#17985
            $1.cwtobits(); //#17985
            $aload($k[--$j]); //#17985
            $k[$j++] = ($f($f($1.i + $1.rapr) - 1)) % 52; //#17986
            $k[$j++] = 0; //#17986
            $1.raptobits(); //#17986
            $aload($k[--$j]); //#17986
        } //#17986
        if ($1.c == 3) { //#17997
            if (!$1.cca) { //#17991
                $k[$j++] = ($f($f($1.i + $1.rapl) - 1)) % 52; //#17990
                $k[$j++] = 0; //#17990
                $1.raptobits(); //#17990
                $aload($k[--$j]); //#17990
            } //#17990
            $k[$j++] = $get($1.cws, $1.i * 3); //#17992
            $k[$j++] = $1.clst; //#17992
            $1.cwtobits(); //#17992
            $aload($k[--$j]); //#17992
            $k[$j++] = ($f($f($1.i + $1.rapc) - 1)) % 52; //#17993
            $k[$j++] = 1; //#17993
            $1.raptobits(); //#17993
            $aload($k[--$j]); //#17993
            $k[$j++] = $get($1.cws, ($1.i * 3) + 1); //#17994
            $k[$j++] = $1.clst; //#17994
            $1.cwtobits(); //#17994
            $aload($k[--$j]); //#17994
            $k[$j++] = $get($1.cws, ($1.i * 3) + 2); //#17995
            $k[$j++] = $1.clst; //#17995
            $1.cwtobits(); //#17995
            $aload($k[--$j]); //#17995
            $k[$j++] = ($f($f($1.i + $1.rapr) - 1)) % 52; //#17996
            $k[$j++] = 0; //#17996
            $1.raptobits(); //#17996
            $aload($k[--$j]); //#17996
        } //#17996
        if ($1.c == 4) { //#18006
            $k[$j++] = ($f($f($1.i + $1.rapl) - 1)) % 52; //#17999
            $k[$j++] = 0; //#17999
            $1.raptobits(); //#17999
            $aload($k[--$j]); //#17999
            $k[$j++] = $get($1.cws, $1.i * 4); //#18000
            $k[$j++] = $1.clst; //#18000
            $1.cwtobits(); //#18000
            $aload($k[--$j]); //#18000
            $k[$j++] = $get($1.cws, ($1.i * 4) + 1); //#18001
            $k[$j++] = $1.clst; //#18001
            $1.cwtobits(); //#18001
            $aload($k[--$j]); //#18001
            $k[$j++] = ($f($f($1.i + $1.rapc) - 1)) % 52; //#18002
            $k[$j++] = 1; //#18002
            $1.raptobits(); //#18002
            $aload($k[--$j]); //#18002
            $k[$j++] = $get($1.cws, ($1.i * 4) + 2); //#18003
            $k[$j++] = $1.clst; //#18003
            $1.cwtobits(); //#18003
            $aload($k[--$j]); //#18003
            $k[$j++] = $get($1.cws, ($1.i * 4) + 3); //#18004
            $k[$j++] = $1.clst; //#18004
            $1.cwtobits(); //#18004
            $aload($k[--$j]); //#18004
            $k[$j++] = ($f($f($1.i + $1.rapr) - 1)) % 52; //#18005
            $k[$j++] = 0; //#18005
            $1.raptobits(); //#18005
            $aload($k[--$j]); //#18005
        } //#18005
        $k[$j++] = 1; //#18007
        var _JJ = $a(); //#18007
        var _JK = $k[--$j]; //#18008
        $puti($k[--$j], _JK, _JJ); //#18008
    } //#18008
    var _JT = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", $1.rwid],
        ["pixy", $1.r],
        ["height", ($1.r / 72) * $1.rowmult],
        ["width", $1.rwid / 72],
        ["opt", $1.options]
    ]); //#18019
    $k[$j++] = _JT; //#18022
    if (!$1.dontdraw) { //#18022
        bwipp_renmatrix(); //#18022
    } //#18022
}

function bwipp_datamatrix() {
    var $1 = Object.create(bwipp_datamatrix.$ctx || (bwipp_datamatrix.$ctx = {})); //#18057
    $1.dontdraw = false; //#18060
    $1.columns = 0; //#18061
    $1.rows = 0; //#18062
    $1.format = "unset"; //#18063
    $1.version = "unset"; //#18064
    $1.parse = false; //#18065
    $1.parsefnc = false; //#18066
    $1.encoding = "auto"; //#18067
    $1.c40headerlength = -1; //#18068
    $1.raw = false; //#18069
    $1.dmre = false; //#18070
    $1.dindmre = false; //#18071
    $1.isodmre = false; //#18072
    $k[$j++] = $1; //#18074
    bwipp_processoptions(); //#18074
    $1.options = $k[--$j]; //#18074
    $1.barcode = $k[--$j]; //#18075
    $1.isodmre = $1.dmre; //#18077
    if ($eq($1.format, "unset") && $eq($1.version, "unset")) { //#18081
        $k[$j++] = 'format'; //#18080
        if ($1.isodmre || $1.dindmre) { //#18080
            $k[$j++] = "rectangle"; //#18080
        } else { //#18080
            $k[$j++] = "square"; //#18080
        } //#18080
        var _7 = $k[--$j]; //#18080
        $1[$k[--$j]] = _7; //#18080
    } //#18080
    if ($ne($1.version, "unset")) { //#18087
        $search($1.version, "x"); //#18084
        $j--; //#18085
        $1.rows = $cvi($k[--$j]); //#18085
        $j--; //#18086
        $1.columns = $cvi($k[--$j]); //#18086
    } //#18086
    $k[$j++] = Infinity; //#18147
    $k[$j++] = $a([10, 10, 1, 1, 5, 1]); //#18123
    $k[$j++] = $a([12, 12, 1, 1, 7, 1]); //#18123
    $k[$j++] = $a([14, 14, 1, 1, 10, 1]); //#18123
    $k[$j++] = $a([16, 16, 1, 1, 12, 1]); //#18123
    $k[$j++] = $a([18, 18, 1, 1, 14, 1]); //#18123
    $k[$j++] = $a([20, 20, 1, 1, 18, 1]); //#18123
    $k[$j++] = $a([22, 22, 1, 1, 20, 1]); //#18123
    $k[$j++] = $a([24, 24, 1, 1, 24, 1]); //#18123
    $k[$j++] = $a([26, 26, 1, 1, 28, 1]); //#18123
    $k[$j++] = $a([32, 32, 2, 2, 36, 1]); //#18123
    $k[$j++] = $a([36, 36, 2, 2, 42, 1]); //#18123
    $k[$j++] = $a([40, 40, 2, 2, 48, 1]); //#18123
    $k[$j++] = $a([44, 44, 2, 2, 56, 1]); //#18123
    $k[$j++] = $a([48, 48, 2, 2, 68, 1]); //#18123
    $k[$j++] = $a([52, 52, 2, 2, 84, 2]); //#18123
    $k[$j++] = $a([64, 64, 4, 4, 112, 2]); //#18123
    $k[$j++] = $a([72, 72, 4, 4, 144, 4]); //#18123
    $k[$j++] = $a([80, 80, 4, 4, 192, 4]); //#18123
    $k[$j++] = $a([88, 88, 4, 4, 224, 4]); //#18123
    $k[$j++] = $a([96, 96, 4, 4, 272, 4]); //#18123
    $k[$j++] = $a([104, 104, 4, 4, 336, 6]); //#18123
    $k[$j++] = $a([120, 120, 6, 6, 408, 6]); //#18123
    $k[$j++] = $a([132, 132, 6, 6, 496, 8]); //#18123
    $k[$j++] = $a([144, 144, 6, 6, 620, 10]); //#18123
    $k[$j++] = $a([8, 18, 1, 1, 7, 1]); //#18123
    $k[$j++] = $a([8, 32, 1, 2, 11, 1]); //#18123
    if ($1.dindmre || $1.isodmre) { //#18123
        $k[$j++] = $a([8, 48, 1, 2, 15, 1]); //#18123
    } //#18123
    if ($1.dindmre || $1.isodmre) { //#18124
        $k[$j++] = $a([8, 64, 1, 4, 18, 1]); //#18124
    } //#18124
    if ($1.isodmre) { //#18125
        $k[$j++] = $a([8, 80, 1, 4, 22, 1]); //#18125
    } //#18125
    if ($1.isodmre) { //#18126
        $k[$j++] = $a([8, 96, 1, 4, 28, 1]); //#18126
    } //#18126
    if ($1.isodmre) { //#18127
        $k[$j++] = $a([8, 120, 1, 6, 32, 1]); //#18127
    } //#18127
    if ($1.isodmre) { //#18128
        $k[$j++] = $a([8, 144, 1, 6, 36, 1]); //#18128
    } //#18128
    $k[$j++] = $a([12, 26, 1, 1, 14, 1]); //#18131
    $k[$j++] = $a([12, 36, 1, 2, 18, 1]); //#18131
    if ($1.dindmre || $1.isodmre) { //#18131
        $k[$j++] = $a([12, 64, 1, 4, 27, 1]); //#18131
    } //#18131
    if ($1.isodmre) { //#18132
        $k[$j++] = $a([12, 88, 1, 4, 36, 1]); //#18132
    } //#18132
    $k[$j++] = $a([16, 36, 1, 2, 24, 1]); //#18135
    $k[$j++] = $a([16, 48, 1, 2, 28, 1]); //#18135
    if ($1.dindmre || $1.isodmre) { //#18135
        $k[$j++] = $a([16, 64, 1, 4, 36, 1]); //#18135
    } //#18135
    if ($1.isodmre) { //#18136
        $k[$j++] = $a([20, 36, 1, 2, 28, 1]); //#18136
    } //#18136
    if ($1.isodmre) { //#18137
        $k[$j++] = $a([20, 44, 1, 2, 34, 1]); //#18137
    } //#18137
    if ($1.isodmre) { //#18138
        $k[$j++] = $a([20, 64, 1, 4, 42, 1]); //#18138
    } //#18138
    if ($1.isodmre) { //#18139
        $k[$j++] = $a([22, 48, 1, 2, 38, 1]); //#18139
    } //#18139
    if ($1.dindmre) { //#18140
        $k[$j++] = $a([24, 32, 1, 2, 28, 1]); //#18140
    } //#18140
    if ($1.dindmre) { //#18141
        $k[$j++] = $a([24, 36, 1, 2, 33, 1]); //#18141
    } //#18141
    if ($1.dindmre || $1.isodmre) { //#18142
        $k[$j++] = $a([24, 48, 1, 2, 41, 1]); //#18142
    } //#18142
    if ($1.dindmre || $1.isodmre) { //#18143
        $k[$j++] = $a([24, 64, 1, 4, 46, 1]); //#18143
    } //#18143
    if ($1.dindmre) { //#18144
        $k[$j++] = $a([26, 32, 1, 2, 32, 1]); //#18144
    } //#18144
    if ($1.dindmre || $1.isodmre) { //#18145
        $k[$j++] = $a([26, 40, 1, 2, 38, 1]); //#18145
    } //#18145
    if ($1.dindmre || $1.isodmre) { //#18146
        $k[$j++] = $a([26, 48, 1, 2, 42, 1]); //#18146
    } //#18146
    if ($1.dindmre || $1.isodmre) { //#18147
        $k[$j++] = $a([26, 64, 1, 4, 50, 1]); //#18147
    } //#18147
    $1.metrics = $a(); //#18147
    $1.urows = $1.rows; //#18151
    $1.ucols = $1.columns; //#18152
    $1.fullcws = $a([]); //#18153
    var _1a = $1.metrics; //#18154
    for (var _1b = 0, _1c = _1a.length; _1b < _1c; _1b++) { //#18171
        $1.m = $get(_1a, _1b); //#18155
        $1.rows = $get($1.m, 0); //#18156
        $1.cols = $get($1.m, 1); //#18157
        $1.regh = $get($1.m, 2); //#18158
        $1.regv = $get($1.m, 3); //#18159
        $1.rscw = $get($1.m, 4); //#18160
        $1.rsbl = $get($1.m, 5); //#18161
        $1.mrows = $f($1.rows - (2 * $1.regh)); //#18162
        $1.mcols = $f($1.cols - (2 * $1.regv)); //#18163
        $1.ncws = $f((~~(($1.mrows * $1.mcols) / 8)) - $1.rscw); //#18164
        $1.okay = true; //#18165
        if (($1.urows != 0) && ($1.urows != $1.rows)) { //#18166
            $1.okay = false; //#18166
        } //#18166
        if (($1.ucols != 0) && ($1.ucols != $1.cols)) { //#18167
            $1.okay = false; //#18167
        } //#18167
        if ($eq($1.format, "square") && $ne($1.rows, $1.cols)) { //#18168
            $1.okay = false; //#18168
        } //#18168
        if ($eq($1.format, "rectangle") && $eq($1.rows, $1.cols)) { //#18169
            $1.okay = false; //#18169
        } //#18169
        if ($1.okay) { //#18170
            $k[$j++] = Infinity; //#18170
            $aload($1.fullcws); //#18170
            $k[$j++] = $1.ncws; //#18170
            $1.fullcws = $a(); //#18170
        } //#18170
    } //#18170
    $k[$j++] = Infinity; //#18172
    for (var _2D = 0, _2E = 1558; _2D < _2E; _2D++) { //#18172
        $k[$j++] = 10000; //#18172
    } //#18172
    $1.numremcws = $a(); //#18172
    var _2G = $1.fullcws; //#18173
    for (var _2H = 0, _2I = _2G.length; _2H < _2I; _2H++) { //#18173
        $put($1.numremcws, $f($get(_2G, _2H) - 1), 1); //#18173
    } //#18173
    for (var _2L = 1556; _2L >= 0; _2L -= 1) { //#18179
        $1.i = _2L; //#18175
        if ($get($1.numremcws, $1.i) != 1) { //#18178
            $put($1.numremcws, $1.i, $f($get($1.numremcws, $1.i + 1) + 1)); //#18177
        } //#18177
    } //#18177
    if (!bwipp_datamatrix.$ctx._18292) { //#18292
        (function() { //#18292
            var $ctx = Object.create($1); //#18292
            $ctx.fnc1 = -1; //#18183
            $ctx.prog = -2; //#18183
            $ctx.m05 = -3; //#18183
            $ctx.m06 = -4; //#18183
            $ctx.lC = -5; //#18184
            $ctx.lB = -6; //#18184
            $ctx.lX = -7; //#18184
            $ctx.lT = -8; //#18184
            $ctx.lE = -9; //#18184
            $ctx.unl = -10; //#18184
            $ctx.sapp = -11; //#18185
            $ctx.usft = -12; //#18185
            $ctx.sft1 = -13; //#18185
            $ctx.sft2 = -14; //#18185
            $ctx.sft3 = -15; //#18185
            $ctx.eci = -16; //#18185
            $ctx.pad = -17; //#18185
            $ctx.unlcw = 254; //#18186
            $k[$j++] = Infinity; //#18195
            for (var _2U = 0; _2U <= 128; _2U += 1) { //#18189
                $k[$j++] = _2U; //#18189
                $k[$j++] = _2U + 1; //#18189
            } //#18189
            $k[$j++] = $ctx.pad; //#18194
            $k[$j++] = 129; //#18194
            for (var _2W = 0; _2W <= 99; _2W += 1) { //#18194
                var _2Y = $cvrs($s(2), _2W, 10); //#18192
                var _2a = $strcpy($s(2), "00"); //#18192
                $puti(_2a, 2 - _2Y.length, _2Y); //#18192
                $k[$j++] = _2a; //#18193
                $k[$j++] = _2W + 130; //#18193
            } //#18193
            var _2n = $a([$ctx.lC, $ctx.lB, $ctx.fnc1, $ctx.sapp, $ctx.prog, $ctx.usft, $ctx.m05, $ctx.m06, $ctx.lX, $ctx.lT, $ctx.lE, $ctx.eci]); //#18195
            $k[$j++] = 229; //#18195
            for (var _2o = 0, _2p = _2n.length; _2o < _2p; _2o++) { //#18195
                var _2s = $f($k[--$j] + 1); //#18195
                $k[$j++] = $get(_2n, _2o); //#18195
                $k[$j++] = _2s; //#18195
                $k[$j++] = _2s; //#18195
            } //#18195
            $j--; //#18195
            $ctx.Avals = $d(); //#18196
            $k[$j++] = Infinity; //#18198
            var _2u = $ctx.Avals; //#18198
            for (var _2z = _2u.size, _2y = _2u.keys(), _2x = 0; _2x < _2z; _2x++) { //#18198
                var _2v = _2y.next().value; //#18198
                $k[$j++] = _2v; //#18198
                $k[$j++] = _2u.get(_2v); //#18198
                $k[$j++] = Infinity; //#18198
                var _30 = $k[--$j]; //#18198
                var _31 = $k[--$j]; //#18198
                $k[$j++] = _30; //#18198
                $k[$j++] = _31; //#18198
                var _32 = $a(); //#18198
                $k[$j++] = _32; //#18198
            } //#18198
            $ctx.Avals = $d(); //#18199
            $k[$j++] = Infinity; //#18207
            $k[$j++] = $ctx.sft1; //#18206
            $k[$j++] = 0; //#18206
            $k[$j++] = $ctx.sft2; //#18206
            $k[$j++] = 1; //#18206
            $k[$j++] = $ctx.sft3; //#18206
            $k[$j++] = 2; //#18206
            $k[$j++] = 32; //#18206
            $k[$j++] = 3; //#18206
            for (var _37 = 48; _37 <= 57; _37 += 1) { //#18206
                $k[$j++] = _37; //#18206
                $k[$j++] = _37 - 44; //#18206
            } //#18206
            for (var _38 = 65; _38 <= 90; _38 += 1) { //#18207
                $k[$j++] = _38; //#18207
                $k[$j++] = _38 - 51; //#18207
            } //#18207
            $ctx.CNvals = $d(); //#18208
            $k[$j++] = Infinity; //#18209
            for (var _3A = 0; _3A <= 31; _3A += 1) { //#18209
                $k[$j++] = _3A; //#18209
                $k[$j++] = _3A; //#18209
            } //#18209
            $ctx.C1vals = $d(); //#18209
            $k[$j++] = Infinity; //#18215
            for (var _3C = 33; _3C <= 47; _3C += 1) { //#18211
                $k[$j++] = _3C; //#18211
                $k[$j++] = _3C - 33; //#18211
            } //#18211
            for (var _3D = 58; _3D <= 64; _3D += 1) { //#18212
                $k[$j++] = _3D; //#18212
                $k[$j++] = _3D - 43; //#18212
            } //#18212
            for (var _3E = 91; _3E <= 95; _3E += 1) { //#18213
                $k[$j++] = _3E; //#18213
                $k[$j++] = _3E - 69; //#18213
            } //#18213
            $k[$j++] = $ctx.fnc1; //#18215
            $k[$j++] = 27; //#18215
            $k[$j++] = $ctx.usft; //#18215
            $k[$j++] = 30; //#18215
            $ctx.C2vals = $d(); //#18216
            $k[$j++] = Infinity; //#18217
            for (var _3I = 96; _3I <= 127; _3I += 1) { //#18217
                $k[$j++] = _3I; //#18217
                $k[$j++] = _3I - 96; //#18217
            } //#18217
            $ctx.C3vals = $d(); //#18217
            $k[$j++] = Infinity; //#18222
            var _3K = $ctx.CNvals; //#18219
            for (var _3P = _3K.size, _3O = _3K.keys(), _3N = 0; _3N < _3P; _3N++) { //#18219
                var _3L = _3O.next().value; //#18219
                $k[$j++] = _3L; //#18219
                $k[$j++] = _3K.get(_3L); //#18219
                $k[$j++] = Infinity; //#18219
                var _3Q = $k[--$j]; //#18219
                var _3R = $k[--$j]; //#18219
                $k[$j++] = _3Q; //#18219
                $k[$j++] = _3R; //#18219
                var _3S = $a(); //#18219
                $k[$j++] = _3S; //#18219
            } //#18219
            var _3T = $ctx.C1vals; //#18220
            for (var _3Y = _3T.size, _3X = _3T.keys(), _3W = 0; _3W < _3Y; _3W++) { //#18220
                var _3U = _3X.next().value; //#18220
                $k[$j++] = _3U; //#18220
                $k[$j++] = _3T.get(_3U); //#18220
                $k[$j++] = Infinity; //#18220
                var _3Z = $k[--$j]; //#18220
                var _3a = $k[--$j]; //#18220
                $k[$j++] = _3Z; //#18220
                $k[$j++] = $get($ctx.CNvals, $ctx.sft1); //#18220
                $k[$j++] = _3a; //#18220
                var _3e = $a(); //#18220
                $k[$j++] = _3e; //#18220
            } //#18220
            var _3f = $ctx.C2vals; //#18221
            for (var _3k = _3f.size, _3j = _3f.keys(), _3i = 0; _3i < _3k; _3i++) { //#18221
                var _3g = _3j.next().value; //#18221
                $k[$j++] = _3g; //#18221
                $k[$j++] = _3f.get(_3g); //#18221
                $k[$j++] = Infinity; //#18221
                var _3l = $k[--$j]; //#18221
                var _3m = $k[--$j]; //#18221
                $k[$j++] = _3l; //#18221
                $k[$j++] = $get($ctx.CNvals, $ctx.sft2); //#18221
                $k[$j++] = _3m; //#18221
                var _3q = $a(); //#18221
                $k[$j++] = _3q; //#18221
            } //#18221
            var _3r = $ctx.C3vals; //#18222
            for (var _3w = _3r.size, _3v = _3r.keys(), _3u = 0; _3u < _3w; _3u++) { //#18222
                var _3s = _3v.next().value; //#18222
                $k[$j++] = _3s; //#18222
                $k[$j++] = _3r.get(_3s); //#18222
                $k[$j++] = Infinity; //#18222
                var _3x = $k[--$j]; //#18222
                var _3y = $k[--$j]; //#18222
                $k[$j++] = _3x; //#18222
                $k[$j++] = $get($ctx.CNvals, $ctx.sft3); //#18222
                $k[$j++] = _3y; //#18222
                var _42 = $a(); //#18222
                $k[$j++] = _42; //#18222
            } //#18222
            $ctx.Cvals = $d(); //#18223
            $k[$j++] = Infinity; //#18231
            $k[$j++] = $ctx.sft1; //#18230
            $k[$j++] = 0; //#18230
            $k[$j++] = $ctx.sft2; //#18230
            $k[$j++] = 1; //#18230
            $k[$j++] = $ctx.sft3; //#18230
            $k[$j++] = 2; //#18230
            $k[$j++] = 32; //#18230
            $k[$j++] = 3; //#18230
            for (var _47 = 48; _47 <= 57; _47 += 1) { //#18230
                $k[$j++] = _47; //#18230
                $k[$j++] = _47 - 44; //#18230
            } //#18230
            for (var _48 = 97; _48 <= 122; _48 += 1) { //#18231
                $k[$j++] = _48; //#18231
                $k[$j++] = _48 - 83; //#18231
            } //#18231
            $ctx.TNvals = $d(); //#18232
            $k[$j++] = Infinity; //#18233
            for (var _4A = 0; _4A <= 31; _4A += 1) { //#18233
                $k[$j++] = _4A; //#18233
                $k[$j++] = _4A; //#18233
            } //#18233
            $ctx.T1vals = $d(); //#18233
            $k[$j++] = Infinity; //#18239
            for (var _4C = 33; _4C <= 47; _4C += 1) { //#18235
                $k[$j++] = _4C; //#18235
                $k[$j++] = _4C - 33; //#18235
            } //#18235
            for (var _4D = 58; _4D <= 64; _4D += 1) { //#18236
                $k[$j++] = _4D; //#18236
                $k[$j++] = _4D - 43; //#18236
            } //#18236
            for (var _4E = 91; _4E <= 95; _4E += 1) { //#18237
                $k[$j++] = _4E; //#18237
                $k[$j++] = _4E - 69; //#18237
            } //#18237
            $k[$j++] = $ctx.fnc1; //#18239
            $k[$j++] = 27; //#18239
            $k[$j++] = $ctx.usft; //#18239
            $k[$j++] = 30; //#18239
            $ctx.T2vals = $d(); //#18240
            $k[$j++] = Infinity; //#18244
            $k[$j++] = 96; //#18243
            $k[$j++] = 0; //#18243
            for (var _4I = 65; _4I <= 90; _4I += 1) { //#18243
                $k[$j++] = _4I; //#18243
                $k[$j++] = _4I - 64; //#18243
            } //#18243
            for (var _4J = 123; _4J <= 127; _4J += 1) { //#18244
                $k[$j++] = _4J; //#18244
                $k[$j++] = _4J - 96; //#18244
            } //#18244
            $ctx.T3vals = $d(); //#18245
            $k[$j++] = Infinity; //#18250
            var _4L = $ctx.TNvals; //#18247
            for (var _4Q = _4L.size, _4P = _4L.keys(), _4O = 0; _4O < _4Q; _4O++) { //#18247
                var _4M = _4P.next().value; //#18247
                $k[$j++] = _4M; //#18247
                $k[$j++] = _4L.get(_4M); //#18247
                $k[$j++] = Infinity; //#18247
                var _4R = $k[--$j]; //#18247
                var _4S = $k[--$j]; //#18247
                $k[$j++] = _4R; //#18247
                $k[$j++] = _4S; //#18247
                var _4T = $a(); //#18247
                $k[$j++] = _4T; //#18247
            } //#18247
            var _4U = $ctx.T1vals; //#18248
            for (var _4Z = _4U.size, _4Y = _4U.keys(), _4X = 0; _4X < _4Z; _4X++) { //#18248
                var _4V = _4Y.next().value; //#18248
                $k[$j++] = _4V; //#18248
                $k[$j++] = _4U.get(_4V); //#18248
                $k[$j++] = Infinity; //#18248
                var _4a = $k[--$j]; //#18248
                var _4b = $k[--$j]; //#18248
                $k[$j++] = _4a; //#18248
                $k[$j++] = $get($ctx.TNvals, $ctx.sft1); //#18248
                $k[$j++] = _4b; //#18248
                var _4f = $a(); //#18248
                $k[$j++] = _4f; //#18248
            } //#18248
            var _4g = $ctx.T2vals; //#18249
            for (var _4l = _4g.size, _4k = _4g.keys(), _4j = 0; _4j < _4l; _4j++) { //#18249
                var _4h = _4k.next().value; //#18249
                $k[$j++] = _4h; //#18249
                $k[$j++] = _4g.get(_4h); //#18249
                $k[$j++] = Infinity; //#18249
                var _4m = $k[--$j]; //#18249
                var _4n = $k[--$j]; //#18249
                $k[$j++] = _4m; //#18249
                $k[$j++] = $get($ctx.TNvals, $ctx.sft2); //#18249
                $k[$j++] = _4n; //#18249
                var _4r = $a(); //#18249
                $k[$j++] = _4r; //#18249
            } //#18249
            var _4s = $ctx.T3vals; //#18250
            for (var _4x = _4s.size, _4w = _4s.keys(), _4v = 0; _4v < _4x; _4v++) { //#18250
                var _4t = _4w.next().value; //#18250
                $k[$j++] = _4t; //#18250
                $k[$j++] = _4s.get(_4t); //#18250
                $k[$j++] = Infinity; //#18250
                var _4y = $k[--$j]; //#18250
                var _4z = $k[--$j]; //#18250
                $k[$j++] = _4y; //#18250
                $k[$j++] = $get($ctx.TNvals, $ctx.sft3); //#18250
                $k[$j++] = _4z; //#18250
                var _53 = $a(); //#18250
                $k[$j++] = _53; //#18250
            } //#18250
            $ctx.Tvals = $d(); //#18251
            for (var _55 = 128; _55 <= 255; _55 += 1) { //#18259
                $ctx.i = _55; //#18255
                $k[$j++] = $ctx.Avals; //#18256
                $k[$j++] = $ctx.i; //#18256
                $k[$j++] = Infinity; //#18256
                $aload($get($ctx.Avals, $ctx.usft)); //#18256
                $aload($get($ctx.Avals, $ctx.i - 128)); //#18256
                var _5E = $a(); //#18256
                var _5F = $k[--$j]; //#18256
                $put($k[--$j], _5F, _5E); //#18256
                $k[$j++] = $ctx.Cvals; //#18257
                $k[$j++] = $ctx.i; //#18257
                $k[$j++] = Infinity; //#18257
                $aload($get($ctx.Cvals, $ctx.usft)); //#18257
                $aload($get($ctx.Cvals, $ctx.i - 128)); //#18257
                var _5P = $a(); //#18257
                var _5Q = $k[--$j]; //#18257
                $put($k[--$j], _5Q, _5P); //#18257
                $k[$j++] = $ctx.Tvals; //#18258
                $k[$j++] = $ctx.i; //#18258
                $k[$j++] = Infinity; //#18258
                $aload($get($ctx.Tvals, $ctx.usft)); //#18258
                $aload($get($ctx.Tvals, $ctx.i - 128)); //#18258
                var _5a = $a(); //#18258
                var _5b = $k[--$j]; //#18258
                $put($k[--$j], _5b, _5a); //#18258
            } //#18258
            $k[$j++] = Infinity; //#18267
            $k[$j++] = 13; //#18266
            $k[$j++] = 0; //#18266
            $k[$j++] = 42; //#18266
            $k[$j++] = 1; //#18266
            $k[$j++] = 62; //#18266
            $k[$j++] = 2; //#18266
            $k[$j++] = 32; //#18266
            $k[$j++] = 3; //#18266
            for (var _5d = 48; _5d <= 57; _5d += 1) { //#18266
                $k[$j++] = _5d; //#18266
                $k[$j++] = _5d - 44; //#18266
            } //#18266
            for (var _5e = 65; _5e <= 90; _5e += 1) { //#18267
                $k[$j++] = _5e; //#18267
                $k[$j++] = _5e - 51; //#18267
            } //#18267
            $ctx.Xvals = $d(); //#18268
            $k[$j++] = Infinity; //#18270
            var _5g = $ctx.Xvals; //#18270
            for (var _5l = _5g.size, _5k = _5g.keys(), _5j = 0; _5j < _5l; _5j++) { //#18270
                var _5h = _5k.next().value; //#18270
                $k[$j++] = _5h; //#18270
                $k[$j++] = _5g.get(_5h); //#18270
                $k[$j++] = Infinity; //#18270
                var _5m = $k[--$j]; //#18270
                var _5n = $k[--$j]; //#18270
                $k[$j++] = _5m; //#18270
                $k[$j++] = _5n; //#18270
                var _5o = $a(); //#18270
                $k[$j++] = _5o; //#18270
            } //#18270
            $ctx.Xvals = $d(); //#18271
            $k[$j++] = Infinity; //#18276
            for (var _5q = 64; _5q <= 94; _5q += 1) { //#18274
                $k[$j++] = _5q; //#18274
                $k[$j++] = _5q - 64; //#18274
            } //#18274
            $k[$j++] = $ctx.unl; //#18276
            $k[$j++] = 31; //#18276
            for (var _5s = 32; _5s <= 63; _5s += 1) { //#18276
                $k[$j++] = _5s; //#18276
                $k[$j++] = _5s; //#18276
            } //#18276
            $ctx.Evals = $d(); //#18277
            $k[$j++] = Infinity; //#18279
            var _5u = $ctx.Evals; //#18279
            for (var _5z = _5u.size, _5y = _5u.keys(), _5x = 0; _5x < _5z; _5x++) { //#18279
                var _5v = _5y.next().value; //#18279
                $k[$j++] = _5v; //#18279
                $k[$j++] = _5u.get(_5v); //#18279
                $k[$j++] = Infinity; //#18279
                var _60 = $k[--$j]; //#18279
                var _61 = $k[--$j]; //#18279
                $k[$j++] = _60; //#18279
                $k[$j++] = _61; //#18279
                var _62 = $a(); //#18279
                $k[$j++] = _62; //#18279
            } //#18279
            $ctx.Evals = $d(); //#18280
            $k[$j++] = Infinity; //#18283
            for (var _64 = 0; _64 <= 255; _64 += 1) { //#18283
                $k[$j++] = _64; //#18283
                $k[$j++] = _64; //#18283
            } //#18283
            $ctx.Bvals = $d(); //#18284
            $k[$j++] = Infinity; //#18286
            var _66 = $ctx.Bvals; //#18286
            for (var _6B = _66.size, _6A = _66.keys(), _69 = 0; _69 < _6B; _69++) { //#18286
                var _67 = _6A.next().value; //#18286
                $k[$j++] = _67; //#18286
                $k[$j++] = _66.get(_67); //#18286
                $k[$j++] = Infinity; //#18286
                var _6C = $k[--$j]; //#18286
                var _6D = $k[--$j]; //#18286
                $k[$j++] = _6C; //#18286
                $k[$j++] = _6D; //#18286
                var _6E = $a(); //#18286
                $k[$j++] = _6E; //#18286
            } //#18286
            $ctx.Bvals = $d(); //#18287
            $ctx.encvals = $a([$ctx.Avals, $ctx.Cvals, $ctx.Tvals, $ctx.Xvals, $ctx.Evals, $ctx.Bvals]); //#18289
            $ctx.A = 0; //#18291
            $ctx.C = 1; //#18291
            $ctx.T = 2; //#18291
            $ctx.X = 3; //#18291
            $ctx.E = 4; //#18291
            $ctx.B = 5; //#18291
            for (var _6N in $ctx) {
                $ctx.hasOwnProperty(_6N) && (bwipp_datamatrix.$ctx[_6N] = $ctx[_6N]);
            } //#18291
            bwipp_datamatrix.$ctx._18292 = 1; //#18291
        })(); //#18291
    } //#18291
    if ($1.raw) { //#18294
        $1.encoding = "raw"; //#18294
    } //#18294
    if ($eq($1.encoding, "raw")) { //#18307
        $1.cws = $a($1.barcode.length); //#18297
        $1.i = 0; //#18298
        $1.j = 0; //#18298
        for (;;) { //#18305
            if ($1.i == $1.barcode.length) { //#18300
                break; //#18300
            } //#18300
            $1.cw = $cvi($geti($1.barcode, $1.i + 1, 3)); //#18301
            $put($1.cws, $1.j, $1.cw); //#18302
            $1.i = $1.i + 4; //#18303
            $1.j = $1.j + 1; //#18304
        } //#18304
        $1.cws = $geti($1.cws, 0, $1.j); //#18306
    } //#18306
    if ($eq($1.encoding, "auto")) { //#18700
        var _6k = new Map([
            ["parse", $1.parse],
            ["parsefnc", $1.parsefnc],
            ["eci", true],
            ["FNC1", $1.fnc1],
            ["PROG", $1.prog]
        ]); //#18317
        $1.fncvals = _6k; //#18320
        $k[$j++] = 'msg'; //#18321
        $k[$j++] = $1.barcode; //#18321
        $k[$j++] = $1.fncvals; //#18321
        bwipp_parseinput(); //#18321
        var _6n = $k[--$j]; //#18321
        $1[$k[--$j]] = _6n; //#18321
        $1.msglen = $1.msg.length; //#18322
        if ($1.msglen >= 9) { //#18340
            $aload($geti($1.msg, 0, 7)); //#18326
            var _6t = $k[--$j]; //#18327
            var _6u = $k[--$j]; //#18327
            $k[$j++] = _6t == 29; //#18327
            $k[$j++] = _6u; //#18327
            $j--; //#18327
            var _6v = $k[--$j]; //#18327
            var _6w = $k[--$j]; //#18327
            var _6x = $k[--$j]; //#18327
            var _6y = $k[--$j]; //#18328
            var _6z = $k[--$j]; //#18328
            var _70 = $k[--$j]; //#18328
            if (((((_6v && (_6w == 48)) && (_6x == 30)) && (_6y == 62)) && (_6z == 41)) && (_70 == 91)) { //#18339
                $aload($geti($1.msg, $1.msglen - 2, 2)); //#18329
                var _74 = $k[--$j]; //#18330
                var _75 = $k[--$j]; //#18330
                if ((_74 == 4) && (_75 == 30)) { //#18338
                    if ($get($1.msg, 5) == 53) { //#18335
                        $k[$j++] = Infinity; //#18332
                        $k[$j++] = $1.m05; //#18332
                        $aload($geti($1.msg, 7, $1.msg.length - 9)); //#18332
                        $1.msg = $a(); //#18332
                    } else { //#18335
                        if ($get($1.msg, 5) == 54) { //#18336
                            $k[$j++] = Infinity; //#18335
                            $k[$j++] = $1.m06; //#18335
                            $aload($geti($1.msg, 7, $1.msg.length - 9)); //#18335
                            $1.msg = $a(); //#18335
                        } //#18335
                    } //#18335
                } //#18335
            } //#18335
        } //#18335
        $1.msglen = $1.msg.length; //#18341
        $k[$j++] = Infinity; //#18343
        for (var _7M = 0, _7N = $1.msglen; _7M < _7N; _7M++) { //#18343
            $k[$j++] = 0; //#18343
        } //#18343
        $k[$j++] = 0; //#18343
        $1.numD = $a(); //#18343
        $k[$j++] = Infinity; //#18344
        for (var _7Q = 0, _7R = $1.msglen; _7Q < _7R; _7Q++) { //#18344
            $k[$j++] = 0; //#18344
        } //#18344
        $k[$j++] = 9999; //#18344
        $1.nextXterm = $a(); //#18344
        $k[$j++] = Infinity; //#18345
        for (var _7U = 0, _7V = $1.msglen; _7U < _7V; _7U++) { //#18345
            $k[$j++] = 0; //#18345
        } //#18345
        $k[$j++] = 9999; //#18345
        $1.nextNonX = $a(); //#18345
        $k[$j++] = Infinity; //#18346
        for (var _7Y = 0, _7Z = $1.msglen; _7Y < _7Z; _7Y++) { //#18346
            $k[$j++] = false; //#18346
        } //#18346
        $k[$j++] = false; //#18346
        $1.isECI = $a(); //#18346
        for (var _7c = $1.msglen - 1; _7c >= 0; _7c -= 1) { //#18364
            $1.i = _7c; //#18348
            $1.barchar = $get($1.msg, $1.i); //#18349
            if (($1.barchar >= 48) && ($1.barchar <= 57)) { //#18352
                $put($1.numD, $1.i, $f($get($1.numD, $1.i + 1) + 1)); //#18351
            } //#18351
            if ((($1.barchar == 13) || ($1.barchar == 42)) || ($1.barchar == 62)) { //#18356
                $put($1.nextXterm, $1.i, 0); //#18354
            } else { //#18356
                $put($1.nextXterm, $1.i, $f($get($1.nextXterm, $1.i + 1) + 1)); //#18356
            } //#18356
            var _7z = $get($1.Xvals, $1.barchar) !== undefined; //#18358
            if (!_7z) { //#18361
                $put($1.nextNonX, $1.i, 0); //#18359
            } else { //#18361
                $put($1.nextNonX, $1.i, $f($get($1.nextNonX, $1.i + 1) + 1)); //#18361
            } //#18361
            $put($1.isECI, $1.i, $1.barchar <= -1000000); //#18363
        } //#18363
        $k[$j++] = Infinity; //#18365
        var _8A = $1.nextXterm; //#18365
        for (var _8B = 0, _8C = _8A.length; _8B < _8C; _8B++) { //#18365
            var _8D = $get(_8A, _8B); //#18365
            $k[$j++] = _8D; //#18365
            if (_8D > 10000) { //#18365
                $j--; //#18365
                $k[$j++] = 10000; //#18365
            } //#18365
        } //#18365
        $1.nextXterm = $a(); //#18365
        $k[$j++] = Infinity; //#18366
        var _8F = $1.nextNonX; //#18366
        for (var _8G = 0, _8H = _8F.length; _8G < _8H; _8G++) { //#18366
            var _8I = $get(_8F, _8G); //#18366
            $k[$j++] = _8I; //#18366
            if (_8I > 10000) { //#18366
                $j--; //#18366
                $k[$j++] = 10000; //#18366
            } //#18366
        } //#18366
        $1.nextNonX = $a(); //#18366
        $1.isD = function() {
            $k[$j++] = ($1.char >= 48) && ($1.char <= 57); //#18368
        }; //#18368
        $1.isC = function() {
            var _8O = $get($1.CNvals, $1.char) !== undefined; //#18369
            $k[$j++] = _8O; //#18369
        }; //#18369
        $1.isT = function() {
            var _8R = $get($1.TNvals, $1.char) !== undefined; //#18370
            $k[$j++] = _8R; //#18370
        }; //#18370
        $1.isX = function() {
            var _8U = $get($1.Xvals, $1.char) !== undefined; //#18371
            $k[$j++] = _8U; //#18371
        }; //#18371
        $1.isE = function() {
            var _8X = $get($1.Evals, $1.char) !== undefined; //#18372
            $k[$j++] = _8X; //#18372
        }; //#18372
        $1.isEA = function() {
            $k[$j++] = $1.char > 127; //#18373
        }; //#18373
        $1.isFN = function() {
            $k[$j++] = $1.char < 0; //#18374
        }; //#18374
        $1.XtermFirst = function() {
            var _8a = $k[--$j]; //#18375
            $k[$j++] = $lt($get($1.nextXterm, _8a), $get($1.nextNonX, _8a)); //#18375
        }; //#18375
        $1.lookup = function() {
            $1.ac = 1; //#18379
            $1.cc = 2; //#18379
            $1.tc = 2; //#18379
            $1.xc = 2; //#18379
            $1.ec = 2; //#18379
            $1.bc = 2.25; //#18379
            if ($1.mode == $1.A) { //#18380
                $1.ac = 0; //#18380
                $1.cc = 1; //#18380
                $1.tc = 1; //#18380
                $1.xc = 1; //#18380
                $1.ec = 1; //#18380
                $1.bc = 1.25; //#18380
            } //#18380
            if ($1.mode == $1.C) { //#18381
                $1.cc = 0; //#18381
            } //#18381
            if ($1.mode == $1.T) { //#18382
                $1.tc = 0; //#18382
            } //#18382
            if ($1.mode == $1.X) { //#18383
                $1.xc = 0; //#18383
            } //#18383
            if ($1.mode == $1.E) { //#18384
                $1.ec = 0; //#18384
            } //#18384
            if ($1.mode == $1.B) { //#18385
                $1.bc = 0; //#18385
            } //#18385
            for (var _8r = 0, _8s = 1; _8r < _8s; _8r++) { //#18420
                if ($get($1.isECI, $1.i)) { //#18387
                    $k[$j++] = $1.A; //#18387
                    break; //#18387
                } //#18387
                if (($1.c40headerlength != -1) && ($1.i < $1.c40headerlength)) { //#18388
                    $k[$j++] = $1.C; //#18388
                    break; //#18388
                } //#18388
                $1.k = 0; //#18389
                for (;;) { //#18419
                    if (($1.i + $1.k) == $1.msglen) { //#18398
                        var _94 = $a(['ac', 'cc', 'tc', 'xc', 'ec', 'bc']); //#18391
                        for (var _95 = 0, _96 = _94.length; _95 < _96; _95++) { //#18391
                            var _97 = $get(_94, _95); //#18391
                            $1[_97] = Math.ceil($1[_97]); //#18391
                        } //#18391
                        var _9E = $a([$1.cc, $1.tc, $1.xc, $1.ec, $1.bc]); //#18392
                        $k[$j++] = true; //#18392
                        for (var _9F = 0, _9G = _9E.length; _9F < _9G; _9F++) { //#18392
                            var _9J = $k[--$j]; //#18392
                            $k[$j++] = _9J && ($1.ac <= $get(_9E, _9F)); //#18392
                        } //#18392
                        if ($k[--$j]) { //#18392
                            $k[$j++] = $1.A; //#18392
                            break; //#18392
                        } //#18392
                        var _9R = $a([$1.ac, $1.cc, $1.tc, $1.xc, $1.ec]); //#18393
                        $k[$j++] = true; //#18393
                        for (var _9S = 0, _9T = _9R.length; _9S < _9T; _9S++) { //#18393
                            var _9W = $k[--$j]; //#18393
                            $k[$j++] = _9W && ($1.bc < $get(_9R, _9S)); //#18393
                        } //#18393
                        if ($k[--$j]) { //#18393
                            $k[$j++] = $1.B; //#18393
                            break; //#18393
                        } //#18393
                        var _9e = $a([$1.ac, $1.cc, $1.tc, $1.xc, $1.bc]); //#18394
                        $k[$j++] = true; //#18394
                        for (var _9f = 0, _9g = _9e.length; _9f < _9g; _9f++) { //#18394
                            var _9j = $k[--$j]; //#18394
                            $k[$j++] = _9j && ($1.ec < $get(_9e, _9f)); //#18394
                        } //#18394
                        if ($k[--$j]) { //#18394
                            $k[$j++] = $1.E; //#18394
                            break; //#18394
                        } //#18394
                        var _9r = $a([$1.ac, $1.cc, $1.xc, $1.ec, $1.bc]); //#18395
                        $k[$j++] = true; //#18395
                        for (var _9s = 0, _9t = _9r.length; _9s < _9t; _9s++) { //#18395
                            var _9w = $k[--$j]; //#18395
                            $k[$j++] = _9w && ($1.tc < $get(_9r, _9s)); //#18395
                        } //#18395
                        if ($k[--$j]) { //#18395
                            $k[$j++] = $1.T; //#18395
                            break; //#18395
                        } //#18395
                        var _A4 = $a([$1.ac, $1.cc, $1.tc, $1.ec, $1.bc]); //#18396
                        $k[$j++] = true; //#18396
                        for (var _A5 = 0, _A6 = _A4.length; _A5 < _A6; _A5++) { //#18396
                            var _A9 = $k[--$j]; //#18396
                            $k[$j++] = _A9 && ($1.xc < $get(_A4, _A5)); //#18396
                        } //#18396
                        if ($k[--$j]) { //#18396
                            $k[$j++] = $1.X; //#18396
                            break; //#18396
                        } //#18396
                        $k[$j++] = $1.C; //#18397
                        break; //#18397
                    } //#18397
                    $1.char = $get($1.msg, $1.i + $1.k); //#18399
                    $k[$j++] = 'ac'; //#18400
                    $k[$j++] = $1.ac; //#18400
                    $1.isD(); //#18400
                    if ($k[--$j]) { //#18400
                        var _AJ = $k[--$j]; //#18400
                        $k[$j++] = $f(_AJ + (1 / 2)); //#18400
                    } else { //#18400
                        $1.isEA(); //#18400
                        if ($k[--$j]) { //#18400
                            var _AL = $k[--$j]; //#18400
                            $k[$j++] = Math.ceil(_AL) + 2; //#18400
                        } else { //#18400
                            var _AM = $k[--$j]; //#18400
                            $k[$j++] = Math.ceil(_AM) + 1; //#18400
                        } //#18400
                    } //#18400
                    var _AN = $k[--$j]; //#18400
                    $1[$k[--$j]] = _AN; //#18400
                    $k[$j++] = 'cc'; //#18401
                    $k[$j++] = $1.cc; //#18401
                    $1.isC(); //#18401
                    if ($k[--$j]) { //#18401
                        var _AR = $k[--$j]; //#18401
                        $k[$j++] = $f(_AR + 0.6666667); //#18401
                    } else { //#18401
                        $1.isEA(); //#18401
                        if ($k[--$j]) { //#18401
                            var _AT = $k[--$j]; //#18401
                            $k[$j++] = $f(_AT + 2.6666667); //#18401
                        } else { //#18401
                            var _AU = $k[--$j]; //#18401
                            $k[$j++] = $f(_AU + 1.3333334); //#18401
                        } //#18401
                    } //#18401
                    var _AV = $k[--$j]; //#18401
                    $1[$k[--$j]] = _AV; //#18401
                    $k[$j++] = 'tc'; //#18402
                    $k[$j++] = $1.tc; //#18402
                    $1.isT(); //#18402
                    if ($k[--$j]) { //#18402
                        var _AZ = $k[--$j]; //#18402
                        $k[$j++] = $f(_AZ + 0.6666667); //#18402
                    } else { //#18402
                        $1.isEA(); //#18402
                        if ($k[--$j]) { //#18402
                            var _Ab = $k[--$j]; //#18402
                            $k[$j++] = $f(_Ab + 2.6666667); //#18402
                        } else { //#18402
                            var _Ac = $k[--$j]; //#18402
                            $k[$j++] = $f(_Ac + 1.3333334); //#18402
                        } //#18402
                    } //#18402
                    var _Ad = $k[--$j]; //#18402
                    $1[$k[--$j]] = _Ad; //#18402
                    $k[$j++] = 'xc'; //#18403
                    $k[$j++] = $1.xc; //#18403
                    $1.isX(); //#18403
                    if ($k[--$j]) { //#18403
                        var _Ah = $k[--$j]; //#18403
                        $k[$j++] = $f(_Ah + 0.6666667); //#18403
                    } else { //#18403
                        $1.isEA(); //#18403
                        if ($k[--$j]) { //#18403
                            var _Aj = $k[--$j]; //#18403
                            $k[$j++] = $f(_Aj + 4.3333334); //#18403
                        } else { //#18403
                            var _Ak = $k[--$j]; //#18403
                            $k[$j++] = $f(_Ak + 3.3333334); //#18403
                        } //#18403
                    } //#18403
                    var _Al = $k[--$j]; //#18403
                    $1[$k[--$j]] = _Al; //#18403
                    $k[$j++] = 'ec'; //#18404
                    $k[$j++] = $1.ec; //#18404
                    $1.isE(); //#18404
                    if ($k[--$j]) { //#18404
                        var _Ap = $k[--$j]; //#18404
                        $k[$j++] = $f(_Ap + (3 / 4)); //#18404
                    } else { //#18404
                        $1.isEA(); //#18404
                        if ($k[--$j]) { //#18404
                            var _Ar = $k[--$j]; //#18404
                            $k[$j++] = $f(_Ar + (17 / 4)); //#18404
                        } else { //#18404
                            var _As = $k[--$j]; //#18404
                            $k[$j++] = $f(_As + (13 / 4)); //#18404
                        } //#18404
                    } //#18404
                    var _At = $k[--$j]; //#18404
                    $1[$k[--$j]] = _At; //#18404
                    $k[$j++] = 'bc'; //#18405
                    $k[$j++] = $1.bc; //#18405
                    $1.isFN(); //#18405
                    if ($k[--$j]) { //#18405
                        var _Ax = $k[--$j]; //#18405
                        $k[$j++] = $f(_Ax + 4); //#18405
                    } else { //#18405
                        var _Ay = $k[--$j]; //#18405
                        $k[$j++] = $f(_Ay + 1); //#18405
                    } //#18405
                    var _Az = $k[--$j]; //#18405
                    $1[$k[--$j]] = _Az; //#18405
                    if ($1.k >= 4) { //#18417
                        var _B7 = $a([$1.cc, $1.tc, $1.xc, $1.ec, $1.bc]); //#18407
                        $k[$j++] = true; //#18407
                        for (var _B8 = 0, _B9 = _B7.length; _B8 < _B9; _B8++) { //#18407
                            var _BC = $k[--$j]; //#18407
                            $k[$j++] = _BC && (($1.ac + 1) <= $get(_B7, _B8)); //#18407
                        } //#18407
                        if ($k[--$j]) { //#18407
                            $k[$j++] = $1.A; //#18407
                            break; //#18407
                        } //#18407
                        if (($1.bc + 1) <= $1.ac) { //#18408
                            $k[$j++] = $1.B; //#18408
                            break; //#18408
                        } //#18408
                        var _BM = $a([$1.cc, $1.tc, $1.xc, $1.ec]); //#18409
                        $k[$j++] = true; //#18409
                        for (var _BN = 0, _BO = _BM.length; _BN < _BO; _BN++) { //#18409
                            var _BR = $k[--$j]; //#18409
                            $k[$j++] = _BR && (($1.bc + 1) < $get(_BM, _BN)); //#18409
                        } //#18409
                        if ($k[--$j]) { //#18409
                            $k[$j++] = $1.B; //#18409
                            break; //#18409
                        } //#18409
                        var _BZ = $a([$1.ac, $1.cc, $1.tc, $1.xc, $1.bc]); //#18410
                        $k[$j++] = true; //#18410
                        for (var _Ba = 0, _Bb = _BZ.length; _Ba < _Bb; _Ba++) { //#18410
                            var _Be = $k[--$j]; //#18410
                            $k[$j++] = _Be && (($1.ec + 1) < $get(_BZ, _Ba)); //#18410
                        } //#18410
                        if ($k[--$j]) { //#18410
                            $k[$j++] = $1.E; //#18410
                            break; //#18410
                        } //#18410
                        var _Bm = $a([$1.ac, $1.cc, $1.xc, $1.ec, $1.bc]); //#18411
                        $k[$j++] = true; //#18411
                        for (var _Bn = 0, _Bo = _Bm.length; _Bn < _Bo; _Bn++) { //#18411
                            var _Br = $k[--$j]; //#18411
                            $k[$j++] = _Br && (($1.tc + 1) < $get(_Bm, _Bn)); //#18411
                        } //#18411
                        if ($k[--$j]) { //#18411
                            $k[$j++] = $1.T; //#18411
                            break; //#18411
                        } //#18411
                        var _Bz = $a([$1.ac, $1.cc, $1.tc, $1.ec, $1.bc]); //#18412
                        $k[$j++] = true; //#18412
                        for (var _C0 = 0, _C1 = _Bz.length; _C0 < _C1; _C0++) { //#18412
                            var _C4 = $k[--$j]; //#18412
                            $k[$j++] = _C4 && (($1.xc + 1) < $get(_Bz, _C0)); //#18412
                        } //#18412
                        if ($k[--$j]) { //#18412
                            $k[$j++] = $1.X; //#18412
                            break; //#18412
                        } //#18412
                        var _CB = $a([$1.ac, $1.tc, $1.ec, $1.bc]); //#18413
                        $k[$j++] = true; //#18413
                        for (var _CC = 0, _CD = _CB.length; _CC < _CD; _CC++) { //#18413
                            var _CG = $k[--$j]; //#18413
                            $k[$j++] = _CG && (($1.cc + 1) < $get(_CB, _CC)); //#18413
                        } //#18413
                        if ($k[--$j]) { //#18416
                            if ($1.cc < $1.xc) { //#18414
                                $k[$j++] = $1.C; //#18414
                                break; //#18414
                            } //#18414
                            if ($1.cc == $1.xc) { //#18415
                                $k[$j++] = ($1.i + $1.k) + 1; //#18415
                                $1.XtermFirst(); //#18415
                                if ($k[--$j]) { //#18415
                                    $k[$j++] = $1.X; //#18415
                                    break; //#18415
                                } else { //#18415
                                    $k[$j++] = $1.C; //#18415
                                    break; //#18415
                                } //#18415
                            } //#18415
                        } //#18415
                    } //#18415
                    $1.k = $1.k + 1; //#18418
                } //#18418
            } //#18418
        }; //#18418
        $1.addtocws = function() {
            var _CT = $k[--$j]; //#18424
            $puti($1.cws, $1.j, _CT); //#18424
            $1.j = _CT.length + $1.j; //#18425
        }; //#18425
        $1.ECItocws = function() {
            var _CY = $f((-$k[--$j]) - 1000000); //#18430
            $k[$j++] = _CY; //#18444
            if (_CY <= 126) { //#18443
                var _CZ = $k[--$j]; //#18431
                $k[$j++] = $f(_CZ + 1); //#18432
                $astore($a(1)); //#18432
            } else { //#18443
                var _Cb = $k[--$j]; //#18433
                $k[$j++] = _Cb; //#18444
                if (_Cb <= 16382) { //#18443
                    var _Cd = $f($k[--$j] - 127); //#18435
                    $k[$j++] = (~~(_Cd / 254)) + 128; //#18437
                    $k[$j++] = $f((_Cd % 254) + 1); //#18437
                    $astore($a(2)); //#18437
                } else { //#18443
                    var _Cg = $f($k[--$j] - 16383); //#18440
                    $k[$j++] = (~~(_Cg / 64516)) + 192; //#18443
                    $k[$j++] = ((~~(_Cg / 254)) % 254) + 1; //#18443
                    $k[$j++] = $f((_Cg % 254) + 1); //#18443
                    $astore($a(3)); //#18443
                } //#18443
            } //#18443
        }; //#18443
        $1.encA = function() {
            for (var _Ci = 0, _Cj = 1; _Ci < _Cj; _Ci++) { //#18469
                if ($get($1.isECI, $1.i)) { //#18454
                    $k[$j++] = $get($1.Avals, $1.eci); //#18450
                    $1.addtocws(); //#18450
                    $k[$j++] = $get($1.msg, $1.i); //#18451
                    $1.ECItocws(); //#18451
                    $1.addtocws(); //#18451
                    $1.i = $1.i + 1; //#18452
                    break; //#18453
                } //#18453
                if ($get($1.numD, $1.i) >= 2) { //#18459
                    var _Cx = $s(2); //#18456
                    $put(_Cx, 0, $get($1.msg, $1.i)); //#18456
                    $put(_Cx, 1, $get($1.msg, $1.i + 1)); //#18456
                    $k[$j++] = $get($1.Avals, _Cx); //#18456
                    $1.addtocws(); //#18456
                    $1.i = $1.i + 2; //#18457
                    break; //#18458
                } //#18458
                $k[$j++] = 'newmode'; //#18460
                $1.lookup(); //#18460
                var _D7 = $k[--$j]; //#18460
                $1[$k[--$j]] = _D7; //#18460
                if ($1.newmode != $1.mode) { //#18465
                    $k[$j++] = $get($1.Avals, $get($a([-1, $1.lC, $1.lT, $1.lX, $1.lE, $1.lB]), $1.newmode)); //#18462
                    $1.addtocws(); //#18462
                    $1.mode = $1.newmode; //#18463
                    break; //#18464
                } //#18464
                $k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); //#18466
                $1.addtocws(); //#18466
                $1.i = $1.i + 1; //#18467
                break; //#18468
            } //#18468
        }; //#18468
        $1.CTXvalstocws = function() {
            $1.in = $k[--$j]; //#18473
            $k[$j++] = Infinity; //#18474
            for (var _DV = 0, _DU = $1.in.length - 1; _DV <= _DU; _DV += 3) { //#18478
                var _DX = $geti($1.in, _DV, 3); //#18476
                $k[$j++] = 0; //#18476
                for (var _DY = 0, _DZ = _DX.length; _DY < _DZ; _DY++) { //#18476
                    var _Db = $k[--$j]; //#18476
                    $k[$j++] = $f(_Db + $get(_DX, _DY)) * 40; //#18476
                } //#18476
                var _Dd = (~~($k[--$j] / 40)) + 1; //#18477
                $k[$j++] = ~~(_Dd / 256); //#18477
                $k[$j++] = _Dd % 256; //#18477
            } //#18477
            $astore($a($counttomark())); //#18479
            var _Dg = $k[--$j]; //#18479
            var _Dh = $k[--$j]; //#18479
            $k[$j++] = _Dg; //#18479
            $k[$j++] = _Dh; //#18479
            $j--; //#18479
        }; //#18479
        $1.encCTX = function() {
            $1.p = 0; //#18483
            $1.ctxvals = $a(2500); //#18484
            $1.done = false; //#18485
            for (;;) { //#18564
                if ($1.i == $1.msglen) { //#18489
                    break; //#18489
                } //#18489
                var _Dr = $get($get($1.encvals, $1.mode), $get($1.msg, $1.i)) !== undefined; //#18490
                if (!_Dr) { //#18490
                    break; //#18490
                } //#18490
                if (($1.p % 3) == 0) { //#18559
                    if ($1.p > 0) { //#18504
                        $k[$j++] = 'newmode'; //#18493
                        $1.lookup(); //#18493
                        var _Du = $k[--$j]; //#18493
                        $1[$k[--$j]] = _Du; //#18493
                        if ($ne($1.newmode, $1.mode)) { //#18503
                            $k[$j++] = $geti($1.ctxvals, 0, $1.p); //#18495
                            $1.CTXvalstocws(); //#18495
                            $1.addtocws(); //#18495
                            $k[$j++] = $a([$1.unlcw]); //#18496
                            $1.addtocws(); //#18496
                            if ($1.newmode != $1.A) { //#18499
                                $k[$j++] = $get($1.Avals, $get($a([-1, $1.lC, $1.lT, $1.lX, $1.lE, $1.lB]), $1.newmode)); //#18498
                                $1.addtocws(); //#18498
                            } //#18498
                            $1.mode = $1.newmode; //#18500
                            $1.done = true; //#18501
                            break; //#18502
                        } //#18502
                    } //#18502
                    if (($1.msglen - $1.i) <= 3) { //#18558
                        $1.remcws = $get($1.numremcws, $1.j + ((~~($1.p / 3)) * 2)); //#18506
                        $k[$j++] = Infinity; //#18512
                        var _EQ = $geti($1.msg, $1.i, $1.msglen - $1.i); //#18508
                        for (var _ER = 0, _ES = _EQ.length; _ER < _ES; _ER++) { //#18514
                            var _ET = $get(_EQ, _ER); //#18514
                            var _EX = $get($get($1.encvals, $1.mode), _ET) !== undefined; //#18509
                            $k[$j++] = _ET; //#18513
                            if (_EX) { //#18512
                                $aload($get($get($1.encvals, $1.mode), $k[--$j])); //#18510
                            } else { //#18512
                                $j--; //#18512
                                $k[$j++] = -1; //#18512
                                $k[$j++] = -1; //#18512
                                $k[$j++] = -1; //#18512
                                $k[$j++] = -1; //#18512
                            } //#18512
                        } //#18512
                        $1.remvals = $a(); //#18512
                        if (($1.remcws == 2) && ($1.remvals.length == 3)) { //#18526
                            $k[$j++] = Infinity; //#18520
                            $aload($geti($1.ctxvals, 0, $1.p)); //#18519
                            $aload($1.remvals); //#18520
                            var _Ek = $a(); //#18520
                            $k[$j++] = _Ek; //#18521
                            $1.CTXvalstocws(); //#18521
                            $1.addtocws(); //#18521
                            $1.mode = $1.A; //#18522
                            $1.i = $1.msglen; //#18523
                            $1.done = true; //#18524
                            break; //#18525
                        } //#18525
                        if ((($1.remcws == 2) && ($1.remvals.length == 2)) && ($1.mode != $1.X)) { //#18538
                            $k[$j++] = Infinity; //#18532
                            $aload($geti($1.ctxvals, 0, $1.p)); //#18530
                            $aload($1.remvals); //#18531
                            $aload($get($get($1.encvals, $1.mode), $1.sft1)); //#18532
                            var _F0 = $a(); //#18532
                            $k[$j++] = _F0; //#18533
                            $1.CTXvalstocws(); //#18533
                            $1.addtocws(); //#18533
                            $1.mode = $1.A; //#18534
                            $1.i = $1.msglen; //#18535
                            $1.done = true; //#18536
                            break; //#18537
                        } //#18537
                        if (($1.remcws == 2) && ($1.remvals.length == 1)) { //#18548
                            $k[$j++] = $geti($1.ctxvals, 0, $1.p); //#18541
                            $1.CTXvalstocws(); //#18541
                            $1.addtocws(); //#18541
                            $k[$j++] = $a([$1.unlcw]); //#18542
                            $1.addtocws(); //#18542
                            $k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); //#18543
                            $1.addtocws(); //#18543
                            $1.mode = $1.A; //#18544
                            $1.i = $1.msglen; //#18545
                            $1.done = true; //#18546
                            break; //#18547
                        } //#18547
                        if (($1.remcws == 1) && ($1.remvals.length == 1)) { //#18557
                            $k[$j++] = $geti($1.ctxvals, 0, $1.p); //#18551
                            $1.CTXvalstocws(); //#18551
                            $1.addtocws(); //#18551
                            $k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); //#18552
                            $1.addtocws(); //#18552
                            $1.mode = $1.A; //#18553
                            $1.i = $1.msglen; //#18554
                            $1.done = true; //#18555
                            break; //#18556
                        } //#18556
                    } //#18556
                } //#18556
                var _FZ = $get($get($1.encvals, $1.mode), $get($1.msg, $1.i)); //#18560
                $puti($1.ctxvals, $1.p, _FZ); //#18561
                $1.p = _FZ.length + $1.p; //#18562
                $1.i = $1.i + 1; //#18563
            } //#18563
            if (!$1.done) { //#18588
                for (;;) { //#18572
                    if (($1.p % 3) == 0) { //#18569
                        break; //#18569
                    } //#18569
                    $1.i = $1.i - 1; //#18570
                    $1.p = $1.p - $get($get($1.encvals, $1.mode), $get($1.msg, $1.i)).length; //#18571
                } //#18571
                $k[$j++] = Infinity; //#18574
                $aload($geti($1.ctxvals, 0, $1.p)); //#18574
                var _Fs = $a(); //#18574
                $k[$j++] = _Fs; //#18575
                $1.CTXvalstocws(); //#18575
                $1.addtocws(); //#18575
                $k[$j++] = $a([$1.unlcw]); //#18576
                $1.addtocws(); //#18576
                $1.mode = $1.A; //#18577
                if (($1.i != $1.msglen) && $nt($get($1.isECI, $1.i))) { //#18587
                    if ($get($1.numD, $1.i) >= 2) { //#18585
                        var _G4 = $s(2); //#18581
                        $put(_G4, 0, $get($1.msg, $1.i)); //#18581
                        $put(_G4, 1, $get($1.msg, $1.i + 1)); //#18581
                        $k[$j++] = $get($1.Avals, _G4); //#18581
                        $1.addtocws(); //#18581
                        $1.i = $1.i + 2; //#18582
                    } else { //#18585
                        $k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); //#18584
                        $1.addtocws(); //#18584
                        $1.i = $1.i + 1; //#18585
                    } //#18585
                } //#18585
            } //#18585
        }; //#18585
        $1.Evalstocws = function() {
            $1.in = $k[--$j]; //#18593
            $1.inlen = $1.in.length; //#18594
            $1.outlen = ~~(Math.ceil(($1.in.length / 4) * 3)); //#18595
            $k[$j++] = Infinity; //#18596
            $aload($1.in); //#18596
            $k[$j++] = 0; //#18596
            $k[$j++] = 0; //#18596
            $k[$j++] = 0; //#18596
            $1.in = $a(); //#18596
            $k[$j++] = Infinity; //#18597
            for (var _GR = 0, _GQ = $1.inlen - 1; _GR <= _GQ; _GR += 4) { //#18603
                var _GT = $geti($1.in, _GR, 4); //#18599
                $k[$j++] = 0; //#18599
                for (var _GU = 0, _GV = _GT.length; _GU < _GV; _GU++) { //#18599
                    var _GX = $k[--$j]; //#18599
                    $k[$j++] = $or(_GX, $get(_GT, _GU)) << 6; //#18599
                } //#18599
                var _GZ = $k[--$j] >>> 6; //#18600
                $k[$j++] = (_GZ >>> 16) & 255; //#18602
                $k[$j++] = (_GZ >>> 8) & 255; //#18602
                $k[$j++] = _GZ & 255; //#18602
            } //#18602
            $astore($a($counttomark())); //#18604
            var _Gc = $k[--$j]; //#18604
            var _Gd = $k[--$j]; //#18604
            $k[$j++] = _Gc; //#18604
            $k[$j++] = _Gd; //#18604
            $j--; //#18604
            var _Gg = $geti($k[--$j], 0, $1.outlen); //#18605
            $k[$j++] = _Gg; //#18605
        }; //#18605
        $1.encE = function() {
            $1.p = 0; //#18609
            $1.edifactvals = $a(2100); //#18610
            for (;;) { //#18639
                if ($1.i == $1.msglen) { //#18614
                    break; //#18614
                } //#18614
                var _Go = $get($1.Evals, $get($1.msg, $1.i)) !== undefined; //#18615
                if (!_Go) { //#18615
                    break; //#18615
                } //#18615
                if (($1.p % 4) == 0) { //#18634
                    if (($1.msglen - $1.i) <= 2) { //#18632
                        $1.remcws = $get($1.numremcws, $1.j + ((~~($1.p / 4)) * 3)); //#18618
                        $k[$j++] = Infinity; //#18621
                        var _H0 = $geti($1.msg, $1.i, $1.msglen - $1.i); //#18620
                        for (var _H1 = 0, _H2 = _H0.length; _H1 < _H2; _H1++) { //#18622
                            $aload($get($1.Avals, $get(_H0, _H1))); //#18621
                        } //#18621
                        $1.remvals = $a(); //#18621
                        if ((($1.remcws == 1) || ($1.remcws == 2)) && ($1.remvals.length <= $1.remcws)) { //#18631
                            $k[$j++] = $geti($1.edifactvals, 0, $1.p); //#18626
                            $1.Evalstocws(); //#18626
                            $1.addtocws(); //#18626
                            $k[$j++] = $1.remvals; //#18627
                            $1.addtocws(); //#18627
                            $1.mode = $1.A; //#18628
                            $1.i = $1.msglen; //#18629
                            break; //#18630
                        } //#18630
                    } //#18630
                    $1.lookup(); //#18633
                    if ($k[--$j] != $1.mode) { //#18633
                        break; //#18633
                    } //#18633
                } //#18633
                var _HN = $get($1.Evals, $get($1.msg, $1.i)); //#18635
                $puti($1.edifactvals, $1.p, _HN); //#18636
                $1.p = _HN.length + $1.p; //#18637
                $1.i = $1.i + 1; //#18638
            } //#18638
            if ($1.mode != $1.A) { //#18661
                $1.remcws = $f($get($1.numremcws, ($1.j + ((~~($1.p / 4)) * 3)) - 1) - 1); //#18643
                if (((($1.p % 4) != 0) || ($1.i != $1.msglen)) || ($1.remcws >= 3)) { //#18648
                    var _He = $get($1.Evals, $1.unl); //#18645
                    $puti($1.edifactvals, $1.p, _He); //#18646
                    $1.p = _He.length + $1.p; //#18647
                } //#18647
                $k[$j++] = $geti($1.edifactvals, 0, $1.p); //#18649
                $1.Evalstocws(); //#18649
                $1.addtocws(); //#18649
                $1.mode = $1.A; //#18650
                if (($1.i != $1.msglen) && $nt($get($1.isECI, $1.i))) { //#18660
                    if ($get($1.numD, $1.i) >= 2) { //#18658
                        var _Hu = $s(2); //#18654
                        $put(_Hu, 0, $get($1.msg, $1.i)); //#18654
                        $put(_Hu, 1, $get($1.msg, $1.i + 1)); //#18654
                        $k[$j++] = $get($1.Avals, _Hu); //#18654
                        $1.addtocws(); //#18654
                        $1.i = $1.i + 2; //#18655
                    } else { //#18658
                        $k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); //#18657
                        $1.addtocws(); //#18657
                        $1.i = $1.i + 1; //#18658
                    } //#18658
                } //#18658
            } //#18658
        }; //#18658
        $1.encB = function() {
            $1.p = 0; //#18666
            $1.bvals = $a(1558); //#18666
            for (;;) { //#18672
                if ($1.i == $1.msglen) { //#18667
                    break; //#18667
                } //#18667
                $1.lookup(); //#18668
                if ($k[--$j] != $1.mode) { //#18668
                    break; //#18668
                } //#18668
                $put($1.bvals, $1.p, $get($1.msg, $1.i)); //#18669
                $1.p = $1.p + 1; //#18670
                $1.i = $1.i + 1; //#18671
            } //#18671
            $1.remcws = $f($get($1.numremcws, $1.j + $1.p) - 1); //#18673
            $k[$j++] = Infinity; //#18680
            if (($1.remcws == 0) && ($1.i == $1.msglen)) { //#18678
                $k[$j++] = 0; //#18676
            } else { //#18678
                if ($1.p < 250) { //#18678
                    $k[$j++] = $1.p; //#18678
                } else { //#18678
                    $k[$j++] = (~~($1.p / 250)) + 249; //#18678
                    $k[$j++] = $1.p % 250; //#18678
                } //#18678
            } //#18678
            $aload($geti($1.bvals, 0, $1.p)); //#18680
            $1.bvals = $a(); //#18680
            for (var _Id = 0, _Ic = $1.bvals.length - 1; _Id <= _Ic; _Id += 1) { //#18687
                $1.p = _Id; //#18683
                var _Ij = $f(((((($1.j + $1.p) + 1) * 149) % 255) + 1) + $get($1.bvals, $1.p)); //#18685
                $k[$j++] = _Ij; //#18685
                if (_Ij >= 256) { //#18685
                    var _Ik = $k[--$j]; //#18685
                    $k[$j++] = $f(_Ik - 256); //#18685
                } //#18685
                $put($1.bvals, $1.p, $k[--$j]); //#18686
            } //#18686
            $k[$j++] = $1.bvals; //#18688
            $1.addtocws(); //#18688
            $1.mode = $1.A; //#18689
        }; //#18689
        $1.cws = $a(1558); //#18693
        $1.mode = $1.A; //#18694
        $1.i = 0; //#18694
        $1.j = 0; //#18694
        for (;;) { //#18697
            if ($1.i >= $1.msglen) { //#18695
                break; //#18695
            } //#18695
            if ($1[$get($a(['encA', 'encCTX', 'encCTX', 'encCTX', 'encE', 'encB']), $1.mode)]() === true) {
                break;
            } //#18696
        } //#18696
        $1.cws = $geti($1.cws, 0, $1.j); //#18698
    } //#18698
    $1.datlen = $1.cws.length; //#18703
    $1.remcws = $f($get($1.numremcws, $1.j - 1) - 1); //#18704
    if ($1.remcws > 0) { //#18713
        $k[$j++] = Infinity; //#18706
        $aload($1.cws); //#18706
        for (var _J8 = 0, _J9 = $1.remcws; _J8 < _J9; _J8++) { //#18706
            $k[$j++] = 129; //#18706
        } //#18706
        $1.cws = $a(); //#18706
        for (var _JF = $1.datlen + 1, _JE = $f($f($1.datlen + $1.remcws) - 1); _JF <= _JE; _JF += 1) { //#18712
            $1.i = _JF; //#18708
            var _JH = (((($1.i + 1) * 149) % 253) + 1) + 129; //#18710
            $k[$j++] = _JH; //#18710
            if (_JH > 254) { //#18710
                var _JI = $k[--$j]; //#18710
                $k[$j++] = $f(_JI - 254); //#18710
            } //#18710
            $put($1.cws, $1.i, $k[--$j]); //#18711
        } //#18711
    } //#18711
    var _JN = $get($1.options, 'debugcws') !== undefined; //#18715
    if (_JN) { //#18715
        $k[$j++] = 'bwipp.debugcws#18715'; //#18715
        $k[$j++] = $1.cws; //#18715
        bwipp_raiseerror(); //#18715
    } //#18715
    $1.i = 0; //#18718
    for (;;) { //#18739
        $1.m = $get($1.metrics, $1.i); //#18719
        $1.rows = $get($1.m, 0); //#18720
        $1.cols = $get($1.m, 1); //#18721
        $1.regh = $get($1.m, 2); //#18722
        $1.regv = $get($1.m, 3); //#18723
        $1.rscw = $get($1.m, 4); //#18724
        $1.rsbl = $get($1.m, 5); //#18725
        $1.mrows = $f($1.rows - (2 * $1.regh)); //#18726
        $1.mcols = $f($1.cols - (2 * $1.regv)); //#18727
        $1.rrows = ~~($1.mrows / $1.regh); //#18728
        $1.rcols = ~~($1.mcols / $1.regv); //#18729
        $1.ncws = $f((~~(($1.mrows * $1.mcols) / 8)) - $1.rscw); //#18730
        $1.okay = true; //#18731
        if ($1.cws.length != $1.ncws) { //#18732
            $1.okay = false; //#18732
        } //#18732
        if (($1.urows != 0) && ($1.urows != $1.rows)) { //#18733
            $1.okay = false; //#18733
        } //#18733
        if (($1.ucols != 0) && ($1.ucols != $1.cols)) { //#18734
            $1.okay = false; //#18734
        } //#18734
        if ($eq($1.format, "square") && $ne($1.rows, $1.cols)) { //#18735
            $1.okay = false; //#18735
        } //#18735
        if ($eq($1.format, "rectangle") && $eq($1.rows, $1.cols)) { //#18736
            $1.okay = false; //#18736
        } //#18736
        if ($1.okay) { //#18737
            break; //#18737
        } //#18737
        $1.i = $1.i + 1; //#18738
    } //#18738
    $1.cwbs = $a($1.rsbl); //#18742
    $1.ecbs = $a($1.rsbl); //#18743
    for (var _KB = 0, _KA = $f($1.rsbl - 1); _KB <= _KA; _KB += 1) { //#18758
        $1.i = _KB; //#18745
        if ($1.cws.length != 1558) { //#18749
            $1.cwbsize = ~~($1.cws.length / $1.rsbl); //#18747
        } else { //#18749
            if ($1.i <= 7) { //#18749
                $1.cwbsize = 156; //#18749
            } else { //#18749
                $1.cwbsize = 155; //#18749
            } //#18749
        } //#18749
        $1.cwb = $a($1.cwbsize); //#18751
        for (var _KK = 0, _KJ = $1.cwbsize - 1; _KK <= _KJ; _KK += 1) { //#18755
            $1.j = _KK; //#18753
            $put($1.cwb, $1.j, $get($1.cws, $f(($1.j * $1.rsbl) + $1.i))); //#18754
        } //#18754
        $put($1.cwbs, $1.i, $1.cwb); //#18756
        $k[$j++] = $1.ecbs; //#18757
        $k[$j++] = $1.i; //#18757
        $k[$j++] = Infinity; //#18757
        for (var _KZ = 0, _Ka = ~~($1.rscw / $1.rsbl); _KZ < _Ka; _KZ++) { //#18757
            $k[$j++] = 0; //#18757
        } //#18757
        var _Kb = $a(); //#18757
        var _Kc = $k[--$j]; //#18757
        $put($k[--$j], _Kc, _Kb); //#18757
    } //#18757
    if (!bwipp_datamatrix.$ctx._18765) { //#18765
        (function() { //#18765
            var $ctx = Object.create($1); //#18765
            $k[$j++] = Infinity; //#18762
            $k[$j++] = 1; //#18762
            for (var _Ke = 0, _Kf = 255; _Ke < _Kf; _Ke++) { //#18762
                var _Kg = $k[--$j]; //#18762
                var _Kh = _Kg * 2; //#18762
                $k[$j++] = _Kg; //#18762
                $k[$j++] = _Kh; //#18762
                if (_Kh >= 256) { //#18762
                    var _Ki = $k[--$j]; //#18762
                    $k[$j++] = _Ki ^ 301; //#18762
                } //#18762
            } //#18762
            $ctx.rsalog = $a(); //#18762
            $ctx.rslog = $a(256); //#18763
            for (var _Kl = 1; _Kl <= 255; _Kl += 1) { //#18764
                $put($ctx.rslog, $get($ctx.rsalog, _Kl), _Kl); //#18764
            } //#18764
            for (var _Kp in $ctx) {
                $ctx.hasOwnProperty(_Kp) && (bwipp_datamatrix.$ctx[_Kp] = $ctx[_Kp]);
            } //#18764
            bwipp_datamatrix.$ctx._18765 = 1; //#18764
        })(); //#18764
    } //#18764
    $1.rsprod = function() {
        var _Kq = $k[--$j]; //#18769
        var _Kr = $k[--$j]; //#18769
        $k[$j++] = _Kr; //#18773
        $k[$j++] = _Kq; //#18773
        if ((_Kq != 0) && (_Kr != 0)) { //#18772
            var _Ku = $get($1.rslog, $k[--$j]); //#18770
            var _Kz = $get($1.rsalog, $f(_Ku + $get($1.rslog, $k[--$j])) % 255); //#18770
            $k[$j++] = _Kz; //#18770
        } else { //#18772
            $j -= 2; //#18772
            $k[$j++] = 0; //#18772
        } //#18772
    }; //#18772
    $k[$j++] = Infinity; //#18777
    $k[$j++] = 1; //#18777
    for (var _L2 = 0, _L3 = ~~($1.rscw / $1.rsbl); _L2 < _L3; _L2++) { //#18777
        $k[$j++] = 0; //#18777
    } //#18777
    $1.coeffs = $a(); //#18777
    for (var _L8 = 1, _L7 = ~~($1.rscw / $1.rsbl); _L8 <= _L7; _L8 += 1) { //#18786
        $1.i = _L8; //#18779
        $put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); //#18780
        for (var _LF = $1.i - 1; _LF >= 1; _LF -= 1) { //#18784
            $1.j = _LF; //#18782
            $k[$j++] = $1.coeffs; //#18783
            $k[$j++] = $1.j; //#18783
            $k[$j++] = $get($1.coeffs, $1.j - 1); //#18783
            $k[$j++] = $get($1.coeffs, $1.j); //#18783
            $k[$j++] = $get($1.rsalog, $1.i); //#18783
            $1.rsprod(); //#18783
            var _LR = $k[--$j]; //#18783
            var _LS = $k[--$j]; //#18783
            var _LT = $k[--$j]; //#18783
            $put($k[--$j], _LT, $xo(_LS, _LR)); //#18783
        } //#18783
        $k[$j++] = $1.coeffs; //#18785
        $k[$j++] = 0; //#18785
        $k[$j++] = $get($1.coeffs, 0); //#18785
        $k[$j++] = $get($1.rsalog, $1.i); //#18785
        $1.rsprod(); //#18785
        var _Lb = $k[--$j]; //#18785
        var _Lc = $k[--$j]; //#18785
        $put($k[--$j], _Lc, _Lb); //#18785
    } //#18785
    $1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); //#18787
    for (var _Lj = 0, _Li = $1.cwbs.length - 1; _Lj <= _Li; _Lj += 1) { //#18803
        $1.i = _Lj; //#18791
        $1.cwb = $get($1.cwbs, $1.i); //#18792
        $1.ecb = $get($1.ecbs, $1.i); //#18793
        for (var _Ls = 0, _Lr = $1.cwb.length - 1; _Ls <= _Lr; _Ls += 1) { //#18802
            $1.t = $xo($get($1.cwb, _Ls), $get($1.ecb, 0)); //#18795
            for (var _Ly = $1.ecb.length - 1; _Ly >= 0; _Ly -= 1) { //#18801
                $1.j = _Ly; //#18797
                $1.p = ($1.ecb.length - $1.j) - 1; //#18798
                $k[$j++] = $1.ecb; //#18799
                $k[$j++] = $1.p; //#18799
                $k[$j++] = $1.t; //#18799
                $k[$j++] = $get($1.coeffs, $1.j); //#18799
                $1.rsprod(); //#18799
                var _M7 = $k[--$j]; //#18799
                var _M8 = $k[--$j]; //#18799
                $put($k[--$j], _M8, _M7); //#18799
                if ($1.j > 0) { //#18800
                    $put($1.ecb, $1.p, $xo($get($1.ecb, $1.p + 1), $get($1.ecb, $1.p))); //#18800
                } //#18800
            } //#18800
        } //#18800
    } //#18800
    if ($1.ncws == 1558) { //#18808
        $k[$j++] = Infinity; //#18807
        var _ML = $geti($1.ecbs, 8, 2); //#18807
        for (var _MM = 0, _MN = _ML.length; _MM < _MN; _MM++) { //#18807
            $k[$j++] = $get(_ML, _MM); //#18807
        } //#18807
        var _MQ = $geti($1.ecbs, 0, 8); //#18807
        for (var _MR = 0, _MS = _MQ.length; _MR < _MS; _MR++) { //#18807
            $k[$j++] = $get(_MQ, _MR); //#18807
        } //#18807
        $1.ecbs = $a(); //#18807
    } //#18807
    $k[$j++] = Infinity; //#18811
    var _MV = $1.cws; //#18811
    for (var _MW = 0, _MX = _MV.length; _MW < _MX; _MW++) { //#18811
        $k[$j++] = $get(_MV, _MW); //#18811
    } //#18811
    for (var _Ma = 0, _Mb = $1.rscw; _Ma < _Mb; _Ma++) { //#18811
        $k[$j++] = 0; //#18811
    } //#18811
    $1.cws = $a(); //#18811
    for (var _Mf = 0, _Me = $f($1.rscw - 1); _Mf <= _Me; _Mf += 1) { //#18815
        $1.i = _Mf; //#18813
        $put($1.cws, $f($1.ncws + $1.i), $get($get($1.ecbs, $1.i % $1.rsbl), ~~($1.i / $1.rsbl))); //#18814
    } //#18814
    $1.module = function() {
        var _Mq = $k[--$j]; //#18820
        var _Mr = $k[--$j]; //#18820
        var _Ms = $k[--$j]; //#18820
        var _Mv = $strcpy($s(8), "00000000"); //#18821
        var _Mx = $cvrs($s(8), $k[--$j], 2); //#18821
        $puti(_Mv, 8 - _Mx.length, _Mx); //#18822
        $k[$j++] = _Ms; //#18823
        $k[$j++] = _Mr; //#18823
        $k[$j++] = _Mq; //#18823
        $k[$j++] = _Mv; //#18823
        for (var _My = 7; _My >= 0; _My -= 1) { //#18823
            var _Mz = $k[--$j]; //#18823
            $k[$j++] = $f($get(_Mz, _My) - 48); //#18823
            $k[$j++] = _Mz; //#18823
        } //#18823
        $j--; //#18823
        var _N1 = $k[--$j]; //#18824
        var _N2 = $k[--$j]; //#18824
        var _N3 = $k[--$j]; //#18824
        var _N4 = $k[--$j]; //#18824
        var _N5 = $k[--$j]; //#18824
        var _N6 = $k[--$j]; //#18824
        var _N7 = $k[--$j]; //#18824
        var _N8 = $k[--$j]; //#18824
        var _N9 = $k[--$j]; //#18824
        var _NA = $k[--$j]; //#18824
        var _NB = $k[--$j]; //#18824
        $k[$j++] = _N8; //#18841
        $k[$j++] = _N7; //#18841
        $k[$j++] = _N6; //#18841
        $k[$j++] = _N5; //#18841
        $k[$j++] = _N4; //#18841
        $k[$j++] = _N3; //#18841
        $k[$j++] = _N2; //#18841
        $k[$j++] = _N1; //#18841
        $k[$j++] = _NB; //#18841
        $k[$j++] = _NA; //#18841
        $forall(_N9, function() { //#18841
            if ($k[--$j]() === true) {
                return true;
            } //#18827
            var _ND = $k[--$j]; //#18828
            var _NE = $k[--$j]; //#18828
            $k[$j++] = _NE; //#18831
            $k[$j++] = _ND; //#18831
            if (_NE < 0) { //#18831
                var _NF = $k[--$j]; //#18829
                var _NG = $k[--$j]; //#18829
                $k[$j++] = $f(_NG + $1.mrows); //#18830
                $k[$j++] = $f(_NF + ($f(4 - ($f($1.mrows + 4) % 8)))); //#18830
            } //#18830
            var _NJ = $k[--$j]; //#18832
            $k[$j++] = _NJ; //#18835
            if (_NJ < 0) { //#18835
                var _NL = $k[--$j]; //#18833
                var _NM = $k[--$j]; //#18833
                $k[$j++] = $f(_NM + ($f(4 - ($f($1.mcols + 4) % 8)))); //#18834
                $k[$j++] = $f(_NL + $1.mcols); //#18834
            } //#18834
            var _NO = $k[--$j]; //#18836
            var _NP = $k[--$j]; //#18836
            $k[$j++] = _NP; //#18838
            $k[$j++] = _NO; //#18838
            if (_NP >= $1.mrows) { //#18838
                var _NR = $k[--$j]; //#18837
                var _NS = $k[--$j]; //#18837
                $k[$j++] = $f(_NS - $1.mrows); //#18837
                $k[$j++] = _NR; //#18837
            } //#18837
            var _NU = $k[--$j]; //#18839
            var _NV = $k[--$j]; //#18839
            var _NY = $k[--$j]; //#18840
            var _NZ = $k[--$j]; //#18840
            $put($1.mmat, $f(_NU + (_NV * $1.mcols)), $k[--$j]); //#18840
            $k[$j++] = _NZ; //#18840
            $k[$j++] = _NY; //#18840
        }); //#18840
    }; //#18840
    var _Nr = $a([function() {
        var _Nb = $k[--$j]; //#18846
        var _Nc = $k[--$j]; //#18846
        $k[$j++] = _Nc; //#18846
        $k[$j++] = _Nb; //#18846
        $k[$j++] = $f(_Nc - 2); //#18846
        $k[$j++] = $f(_Nb - 2); //#18846
    }, function() {
        var _Nd = $k[--$j]; //#18846
        var _Ne = $k[--$j]; //#18846
        $k[$j++] = _Ne; //#18846
        $k[$j++] = _Nd; //#18846
        $k[$j++] = $f(_Ne - 2); //#18846
        $k[$j++] = $f(_Nd - 1); //#18846
    }, function() {
        var _Nf = $k[--$j]; //#18847
        var _Ng = $k[--$j]; //#18847
        $k[$j++] = _Ng; //#18847
        $k[$j++] = _Nf; //#18847
        $k[$j++] = $f(_Ng - 1); //#18847
        $k[$j++] = $f(_Nf - 2); //#18847
    }, function() {
        var _Nh = $k[--$j]; //#18847
        var _Ni = $k[--$j]; //#18847
        $k[$j++] = _Ni; //#18847
        $k[$j++] = _Nh; //#18847
        $k[$j++] = $f(_Ni - 1); //#18847
        $k[$j++] = $f(_Nh - 1); //#18847
    }, function() {
        var _Nj = $k[--$j]; //#18848
        var _Nk = $k[--$j]; //#18848
        $k[$j++] = _Nk; //#18848
        $k[$j++] = _Nj; //#18848
        $k[$j++] = $f(_Nk - 1); //#18848
        $k[$j++] = _Nj; //#18848
    }, function() {
        var _Nl = $k[--$j]; //#18848
        var _Nm = $k[--$j]; //#18848
        $k[$j++] = _Nm; //#18848
        $k[$j++] = _Nl; //#18848
        $k[$j++] = _Nm; //#18848
        $k[$j++] = $f(_Nl - 2); //#18848
    }, function() {
        var _Nn = $k[--$j]; //#18849
        var _No = $k[--$j]; //#18849
        $k[$j++] = _No; //#18849
        $k[$j++] = _Nn; //#18849
        $k[$j++] = _No; //#18849
        $k[$j++] = $f(_Nn - 1); //#18849
    }, function() {
        var _Np = $k[--$j]; //#18849
        var _Nq = $k[--$j]; //#18849
        $k[$j++] = _Nq; //#18849
        $k[$j++] = _Np; //#18849
        $k[$j++] = _Nq; //#18849
        $k[$j++] = _Np; //#18849
    }]); //#18849
    $1.dmn = _Nr; //#18850
    var _O0 = $a([function() {
        $k[$j++] = $f($1.mrows - 1); //#18853
        $k[$j++] = 0; //#18853
    }, function() {
        $k[$j++] = $f($1.mrows - 1); //#18853
        $k[$j++] = 1; //#18853
    }, function() {
        $k[$j++] = $f($1.mrows - 1); //#18854
        $k[$j++] = 2; //#18854
    }, function() {
        $k[$j++] = 0; //#18854
        $k[$j++] = $f($1.mcols - 2); //#18854
    }, function() {
        $k[$j++] = 0; //#18855
        $k[$j++] = $f($1.mcols - 1); //#18855
    }, function() {
        $k[$j++] = 1; //#18855
        $k[$j++] = $f($1.mcols - 1); //#18855
    }, function() {
        $k[$j++] = 2; //#18856
        $k[$j++] = $f($1.mcols - 1); //#18856
    }, function() {
        $k[$j++] = 3; //#18856
        $k[$j++] = $f($1.mcols - 1); //#18856
    }]); //#18856
    $1.dmc1 = _O0; //#18857
    var _O9 = $a([function() {
        $k[$j++] = $f($1.mrows - 3); //#18860
        $k[$j++] = 0; //#18860
    }, function() {
        $k[$j++] = $f($1.mrows - 2); //#18860
        $k[$j++] = 0; //#18860
    }, function() {
        $k[$j++] = $f($1.mrows - 1); //#18861
        $k[$j++] = 0; //#18861
    }, function() {
        $k[$j++] = 0; //#18861
        $k[$j++] = $f($1.mcols - 4); //#18861
    }, function() {
        $k[$j++] = 0; //#18862
        $k[$j++] = $f($1.mcols - 3); //#18862
    }, function() {
        $k[$j++] = 0; //#18862
        $k[$j++] = $f($1.mcols - 2); //#18862
    }, function() {
        $k[$j++] = 0; //#18863
        $k[$j++] = $f($1.mcols - 1); //#18863
    }, function() {
        $k[$j++] = 1; //#18863
        $k[$j++] = $f($1.mcols - 1); //#18863
    }]); //#18863
    $1.dmc2 = _O9; //#18864
    var _OI = $a([function() {
        $k[$j++] = $f($1.mrows - 3); //#18867
        $k[$j++] = 0; //#18867
    }, function() {
        $k[$j++] = $f($1.mrows - 2); //#18867
        $k[$j++] = 0; //#18867
    }, function() {
        $k[$j++] = $f($1.mrows - 1); //#18868
        $k[$j++] = 0; //#18868
    }, function() {
        $k[$j++] = 0; //#18868
        $k[$j++] = $f($1.mcols - 2); //#18868
    }, function() {
        $k[$j++] = 0; //#18869
        $k[$j++] = $f($1.mcols - 1); //#18869
    }, function() {
        $k[$j++] = 1; //#18869
        $k[$j++] = $f($1.mcols - 1); //#18869
    }, function() {
        $k[$j++] = 2; //#18870
        $k[$j++] = $f($1.mcols - 1); //#18870
    }, function() {
        $k[$j++] = 3; //#18870
        $k[$j++] = $f($1.mcols - 1); //#18870
    }]); //#18870
    $1.dmc3 = _OI; //#18871
    var _OS = $a([function() {
        $k[$j++] = $f($1.mrows - 1); //#18874
        $k[$j++] = 0; //#18874
    }, function() {
        $k[$j++] = $f($1.mrows - 1); //#18874
        $k[$j++] = $f($1.mcols - 1); //#18874
    }, function() {
        $k[$j++] = 0; //#18875
        $k[$j++] = $f($1.mcols - 3); //#18875
    }, function() {
        $k[$j++] = 0; //#18875
        $k[$j++] = $f($1.mcols - 2); //#18875
    }, function() {
        $k[$j++] = 0; //#18876
        $k[$j++] = $f($1.mcols - 1); //#18876
    }, function() {
        $k[$j++] = 1; //#18876
        $k[$j++] = $f($1.mcols - 3); //#18876
    }, function() {
        $k[$j++] = 1; //#18877
        $k[$j++] = $f($1.mcols - 2); //#18877
    }, function() {
        $k[$j++] = 1; //#18877
        $k[$j++] = $f($1.mcols - 1); //#18877
    }]); //#18877
    $1.dmc4 = _OS; //#18878
    $k[$j++] = Infinity; //#18880
    for (var _OV = 0, _OW = $1.mrows * $1.mcols; _OV < _OW; _OV++) { //#18880
        $k[$j++] = -1; //#18880
    } //#18880
    $1.mmat = $a(); //#18880
    for (var _OZ = $1.cws.length - 1; _OZ >= 0; _OZ -= 1) { //#18881
        $k[$j++] = $get($1.cws, _OZ); //#18881
    } //#18881
    $k[$j++] = 4; //#18921
    $k[$j++] = 0; //#18921
    for (;;) { //#18921
        var _Oc = $k[--$j]; //#18884
        var _Od = $k[--$j]; //#18884
        $k[$j++] = _Od; //#18886
        $k[$j++] = _Oc; //#18886
        if ((_Oc == 0) && (_Od == $1.mrows)) { //#18886
            $k[$j++] = $1.dmc1; //#18885
            $1.module(); //#18885
        } //#18885
        var _Og = $k[--$j]; //#18887
        var _Oh = $k[--$j]; //#18887
        $k[$j++] = _Oh; //#18889
        $k[$j++] = _Og; //#18889
        if (((_Og == 0) && (_Oh == $f($1.mrows - 2))) && (($1.mcols % 4) != 0)) { //#18889
            $k[$j++] = $1.dmc2; //#18888
            $1.module(); //#18888
        } //#18888
        var _Ol = $k[--$j]; //#18890
        var _Om = $k[--$j]; //#18890
        $k[$j++] = _Om; //#18892
        $k[$j++] = _Ol; //#18892
        if (((_Ol == 0) && (_Om == $f($1.mrows - 2))) && (($1.mcols % 8) == 4)) { //#18892
            $k[$j++] = $1.dmc3; //#18891
            $1.module(); //#18891
        } //#18891
        var _Oq = $k[--$j]; //#18893
        var _Or = $k[--$j]; //#18893
        $k[$j++] = _Or; //#18895
        $k[$j++] = _Oq; //#18895
        if (((_Oq == 2) && (_Or == $f($1.mrows + 4))) && (($1.mcols % 8) == 0)) { //#18895
            $k[$j++] = $1.dmc4; //#18894
            $1.module(); //#18894
        } //#18894
        for (;;) { //#18905
            var _Ov = $k[--$j]; //#18898
            var _Ow = $k[--$j]; //#18898
            $k[$j++] = _Ow; //#18902
            $k[$j++] = _Ov; //#18902
            if ((_Ov >= 0) && (_Ow < $1.mrows)) { //#18902
                var _Oy = $k[--$j]; //#18899
                var _Oz = $k[--$j]; //#18899
                $k[$j++] = _Oz; //#18901
                $k[$j++] = _Oy; //#18901
                if ($get($1.mmat, $f(_Oy + (_Oz * $1.mcols))) == -1) { //#18901
                    $k[$j++] = $1.dmn; //#18900
                    $1.module(); //#18900
                } //#18900
            } //#18900
            var _P4 = $k[--$j]; //#18903
            var _P5 = $k[--$j]; //#18903
            $k[$j++] = $f(_P5 - 2); //#18904
            $k[$j++] = $f(_P4 + 2); //#18904
            if (!(($f(_P4 + 2) < $1.mcols) && ($f(_P5 - 2) >= 0))) { //#18904
                break; //#18904
            } //#18904
        } //#18904
        var _P7 = $k[--$j]; //#18906
        var _P8 = $k[--$j]; //#18906
        $k[$j++] = $f(_P8 + 1); //#18916
        $k[$j++] = $f(_P7 + 3); //#18916
        for (;;) { //#18916
            var _P9 = $k[--$j]; //#18909
            var _PA = $k[--$j]; //#18909
            $k[$j++] = _PA; //#18913
            $k[$j++] = _P9; //#18913
            if ((_P9 < $1.mcols) && (_PA >= 0)) { //#18913
                var _PC = $k[--$j]; //#18910
                var _PD = $k[--$j]; //#18910
                $k[$j++] = _PD; //#18912
                $k[$j++] = _PC; //#18912
                if ($get($1.mmat, $f(_PC + (_PD * $1.mcols))) == -1) { //#18912
                    $k[$j++] = $1.dmn; //#18911
                    $1.module(); //#18911
                } //#18911
            } //#18911
            var _PI = $k[--$j]; //#18914
            var _PJ = $k[--$j]; //#18914
            $k[$j++] = $f(_PJ + 2); //#18915
            $k[$j++] = $f(_PI - 2); //#18915
            if (!(($f(_PI - 2) >= 0) && ($f(_PJ + 2) < $1.mrows))) { //#18915
                break; //#18915
            } //#18915
        } //#18915
        var _PL = $k[--$j]; //#18917
        var _PM = $k[--$j]; //#18917
        $k[$j++] = $f(_PM + 3); //#18919
        $k[$j++] = $f(_PL + 1); //#18919
        if (!(($f(_PL + 1) < $1.mcols) || ($f(_PM + 3) < $1.mrows))) { //#18919
            $j -= 2; //#18919
            break; //#18919
        } //#18919
    } //#18919
    if ($get($1.mmat, $f(($1.mrows * $1.mcols) - 1)) == -1) { //#18927
        $puti($1.mmat, $f(($1.mrows * $f($1.mcols - 1)) - 2), $a([1, 0])); //#18925
        $puti($1.mmat, $f(($1.mrows * $1.mcols) - 2), $a([0, 1])); //#18926
    } //#18926
    $1.pixs = $a($1.rows * $1.cols); //#18930
    $1.cwpos = 0; //#18931
    for (var _Pg = 0, _Pf = $f($1.rows - 1); _Pg <= _Pf; _Pg += 1) { //#18947
        $1.i = _Pg; //#18933
        if (($1.i % ($1.rrows + 2)) == 0) { //#18934
            $k[$j++] = $1.pixs; //#18934
            $k[$j++] = $1.i * $1.cols; //#18934
            $k[$j++] = Infinity; //#18934
            for (var _Pn = 0, _Po = ~~($1.cols / 2); _Pn < _Po; _Pn++) { //#18934
                $k[$j++] = 1; //#18934
                $k[$j++] = 0; //#18934
            } //#18934
            var _Pp = $a(); //#18934
            var _Pq = $k[--$j]; //#18934
            $puti($k[--$j], _Pq, _Pp); //#18934
        } //#18934
        if (($1.i % ($1.rrows + 2)) == ($1.rrows + 1)) { //#18935
            $k[$j++] = $1.pixs; //#18935
            $k[$j++] = $1.i * $1.cols; //#18935
            $k[$j++] = Infinity; //#18935
            for (var _Pz = 0, _Q0 = $1.cols; _Pz < _Q0; _Pz++) { //#18935
                $k[$j++] = 1; //#18935
            } //#18935
            var _Q1 = $a(); //#18935
            var _Q2 = $k[--$j]; //#18935
            $puti($k[--$j], _Q2, _Q1); //#18935
        } //#18935
        if ((($1.i % ($1.rrows + 2)) != 0) && (($1.i % ($1.rrows + 2)) != ($1.rrows + 1))) { //#18946
            for (var _QB = 0, _QA = $f($1.cols - 1); _QB <= _QA; _QB += 1) { //#18945
                $1.j = _QB; //#18938
                if (($1.j % ($1.rcols + 2)) == 0) { //#18939
                    $put($1.pixs, $f(($1.i * $1.cols) + $1.j), 1); //#18939
                } //#18939
                if (($1.j % ($1.rcols + 2)) == ($1.rcols + 1)) { //#18940
                    $put($1.pixs, $f(($1.i * $1.cols) + $1.j), $1.i % 2); //#18940
                } //#18940
                if ((($1.j % ($1.rcols + 2)) != 0) && (($1.j % ($1.rcols + 2)) != ($1.rcols + 1))) { //#18944
                    $put($1.pixs, $f(($1.i * $1.cols) + $1.j), $get($1.mmat, $1.cwpos)); //#18942
                    $1.cwpos = $1.cwpos + 1; //#18943
                } //#18943
            } //#18943
        } //#18943
    } //#18943
    var _Qj = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", $1.cols],
        ["pixy", $1.rows],
        ["height", ($1.rows * 2) / 72],
        ["width", ($1.cols * 2) / 72],
        ["opt", $1.options]
    ]); //#18957
    $k[$j++] = _Qj; //#18960
    if (!$1.dontdraw) { //#18960
        bwipp_renmatrix(); //#18960
    } //#18960
}

function bwipp_datamatrixrectangular() {
    var $1 = Object.create(bwipp_datamatrixrectangular.$ctx || (bwipp_datamatrixrectangular.$ctx = {})); //#18993
    $1.dontdraw = false; //#18996
    $k[$j++] = $1; //#18998
    bwipp_processoptions(); //#18998
    $1.options = $k[--$j]; //#18998
    $1.barcode = $k[--$j]; //#18999
    $put($1.options, "dontdraw", true); //#19002
    $put($1.options, "format", "rectangle"); //#19003
    $k[$j++] = 'args'; //#19005
    $k[$j++] = $1.barcode; //#19005
    $k[$j++] = $1.options; //#19005
    bwipp_datamatrix(); //#19005
    var _6 = $k[--$j]; //#19005
    $1[$k[--$j]] = _6; //#19005
    $put($1.args, "opt", $1.options); //#19007
    $k[$j++] = $1.args; //#19010
    if (!$1.dontdraw) { //#19010
        bwipp_renmatrix(); //#19010
    } //#19010
}

function bwipp_datamatrixrectangularextension() {
    var $1 = Object.create(bwipp_datamatrixrectangularextension.$ctx || (bwipp_datamatrixrectangularextension.$ctx = {})); //#19041
    $1.dontdraw = false; //#19044
    $1.dmre = false; //#19045
    $1.dindmre = false; //#19046
    $k[$j++] = $1; //#19048
    bwipp_processoptions(); //#19048
    $1.options = $k[--$j]; //#19048
    $1.barcode = $k[--$j]; //#19049
    $put($1.options, "dontdraw", true); //#19052
    if (!($1.dindmre || $1.dmre)) { //#19058
        $put($1.options, "dmre", true); //#19055
    } else { //#19058
        $put($1.options, "dmre", $1.dmre); //#19057
        $put($1.options, "dindmre", $1.dindmre); //#19058
    } //#19058
    $k[$j++] = 'args'; //#19061
    $k[$j++] = $1.barcode; //#19061
    $k[$j++] = $1.options; //#19061
    bwipp_datamatrix(); //#19061
    var _C = $k[--$j]; //#19061
    $1[$k[--$j]] = _C; //#19061
    $put($1.args, "opt", $1.options); //#19063
    $k[$j++] = $1.args; //#19066
    if (!$1.dontdraw) { //#19066
        bwipp_renmatrix(); //#19066
    } //#19066
}

function bwipp_mailmark() {
    var $1 = Object.create(bwipp_mailmark.$ctx || (bwipp_mailmark.$ctx = {})); //#19098
    $1.type = "unset"; //#19101
    $1.parse = false; //#19102
    $1.dontdraw = false; //#19103
    $k[$j++] = $1; //#19105
    bwipp_processoptions(); //#19105
    $1.options = $k[--$j]; //#19105
    $1.barcode = $k[--$j]; //#19106
    var _3 = new Map([
        ["parse", $1.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#19112
    $1.fncvals = _3; //#19113
    $k[$j++] = 'barcode'; //#19114
    $k[$j++] = $1.barcode; //#19114
    $k[$j++] = $1.fncvals; //#19114
    bwipp_parseinput(); //#19114
    var _6 = $k[--$j]; //#19114
    $1[$k[--$j]] = _6; //#19114
    $1.barlen = $1.barcode.length; //#19115
    delete $1.options["parse"]; //#19116
    var _A = $1['type']; //#19119
    if ($ne(_A, "7") && ($ne(_A, "9") && $ne(_A, "29"))) { //#19121
        $k[$j++] = 'bwipp.mailmarkBadType#19120'; //#19120
        $k[$j++] = "Royal Mail Mailmark type must be 7, 9 or 29"; //#19120
        bwipp_raiseerror(); //#19120
    } //#19120
    var _B = new Map([
        ["7", "24x24"],
        ["9", "32x32"],
        ["29", "16x48"]
    ]); //#19125
    $1.version = $get(_B, $1['type']); //#19126
    var _E = new Map([
        ["7", "square"],
        ["9", "square"],
        ["29", "rectangle"]
    ]); //#19131
    $1.format = $get(_E, $1['type']); //#19132
    if ($1.barcode.length < 45) { //#19137
        $k[$j++] = 'bwipp.mailmarkBadLength#19136'; //#19136
        $k[$j++] = "Royal Mail Mailmark must contain at least 45 characters of Mailmark formatted data, including any required space padding"; //#19136
        bwipp_raiseerror(); //#19136
    } //#19136
    if ($ne($geti($1.barcode, 0, 4), "JGB ")) { //#19140
        $k[$j++] = 'bwipp.mailmarkBadIndicator#19139'; //#19139
        $k[$j++] = "Royal Mail Mailmark must begin with JGB<space> identifier"; //#19139
        bwipp_raiseerror(); //#19139
    } //#19139
    $put($1.options, "dontdraw", true); //#19143
    $put($1.options, "version", $1.version); //#19144
    $put($1.options, "format", $1.format); //#19145
    $put($1.options, "c40headerlength", 45); //#19146
    $k[$j++] = 'args'; //#19147
    $k[$j++] = $1.barcode; //#19147
    $k[$j++] = $1.options; //#19147
    bwipp_datamatrix(); //#19147
    var _S = $k[--$j]; //#19147
    $1[$k[--$j]] = _S; //#19147
    $put($1.args, "opt", $1.options); //#19149
    $k[$j++] = $1.args; //#19152
    if (!$1.dontdraw) { //#19152
        bwipp_renmatrix(); //#19152
    } //#19152
}

function bwipp_qrcode() {
    var $1 = Object.create(bwipp_qrcode.$ctx || (bwipp_qrcode.$ctx = {})); //#19185
    $1.dontdraw = false; //#19188
    $1.format = "unset"; //#19189
    $1.version = "unset"; //#19190
    $1.eclevel = "unset"; //#19191
    $1.parse = false; //#19192
    $1.parsefnc = false; //#19193
    $1.mask = -1; //#19194
    $k[$j++] = $1; //#19196
    bwipp_processoptions(); //#19196
    $1.options = $k[--$j]; //#19196
    $1.barcode = $k[--$j]; //#19197
    if ($ne($1.version, "unset")) { //#19210
        if ($eq($1.format, "unset")) { //#19208
            $k[$j++] = "full"; //#19205
            if ($eq($geti($1.version, 0, 1), "M")) { //#19205
                $j--; //#19205
                $k[$j++] = "micro"; //#19205
            } //#19205
            if ($eq($geti($1.version, 0, 1), "R")) { //#19206
                $j--; //#19206
                $k[$j++] = "rmqr"; //#19206
            } //#19206
            $1.format = $k[--$j]; //#19207
        } //#19207
    } else { //#19210
        if ($eq($1.format, "unset")) { //#19210
            $1.format = "full"; //#19210
        } //#19210
    } //#19210
    if ($eq($1.eclevel, "unset")) { //#19214
        $k[$j++] = 'eclevel'; //#19214
        if ($ne($1.format, "micro")) { //#19214
            $k[$j++] = "M"; //#19214
        } else { //#19214
            $k[$j++] = "L"; //#19214
        } //#19214
        var _C = $k[--$j]; //#19214
        $1[$k[--$j]] = _C; //#19214
    } //#19214
    $1.fn1 = -1; //#19217
    var _H = new Map([
        ["parse", $1.parse],
        ["parsefnc", $1.parsefnc],
        ["eci", true],
        ["FNC1", $1.fn1]
    ]); //#19222
    $1.fncvals = _H; //#19223
    $k[$j++] = 'msg'; //#19224
    $k[$j++] = $1.barcode; //#19224
    $k[$j++] = $1.fncvals; //#19224
    bwipp_parseinput(); //#19224
    var _K = $k[--$j]; //#19224
    $1[$k[--$j]] = _K; //#19224
    $1.msglen = $1.msg.length; //#19225
    $1.fnc1first = false; //#19228
    if ($1.msglen > 0) { //#19235
        if ($get($1.msg, 0) == $1.fn1) { //#19234
            $1.fnc1first = true; //#19231
            $k[$j++] = Infinity; //#19232
            var _T = $geti($1.msg, 1, $1.msglen - 1); //#19232
            for (var _U = 0, _V = _T.length; _U < _V; _U++) { //#19232
                var _W = $get(_T, _U); //#19232
                $k[$j++] = _W; //#19232
                if (_W == 37) { //#19232
                    var _X = $k[--$j]; //#19232
                    $k[$j++] = _X; //#19232
                    $k[$j++] = _X; //#19232
                } //#19232
            } //#19232
            $1.msg = $a(); //#19232
            $1.msglen = $1.msg.length; //#19233
        } //#19233
    } //#19233
    if (!bwipp_qrcode.$ctx._19356) { //#19356
        (function() { //#19356
            var $ctx = Object.create($1); //#19356
            var _a = $a(['v1to9', 'v10to26', 'v27to40', 'vM1', 'vM2', 'vM3', 'vM4', 'vR7x43', 'vR7x59', 'vR7x77', 'vR7x99', 'vR7x139', 'vR9x43', 'vR9x59', 'vR9x77', 'vR9x99', 'vR9x139', 'vR11x27', 'vR11x43', 'vR11x59', 'vR11x77', 'vR11x99', 'vR11x139', 'vR13x27', 'vR13x43', 'vR13x59', 'vR13x77', 'vR13x99', 'vR13x139', 'vR15x43', 'vR15x59', 'vR15x77', 'vR15x99', 'vR15x139', 'vR17x43', 'vR17x59', 'vR17x77', 'vR17x99', 'vR17x139']); //#19248
            $k[$j++] = 0; //#19249
            for (var _b = 0, _c = _a.length; _b < _c; _b++) { //#19249
                var _e = $k[--$j]; //#19249
                $1[$get(_a, _b)] = _e; //#19249
                $k[$j++] = $f(_e + 1); //#19249
            } //#19249
            $j--; //#19249
            $ctx.N = 0; //#19255
            $ctx.A = 1; //#19255
            $ctx.B = 2; //#19255
            $ctx.K = 3; //#19255
            $ctx.E = 4; //#19255
            $k[$j++] = Infinity; //#19260
            $k[$j++] = Infinity; //#19259
            for (var _f = 48; _f <= 57; _f += 1) { //#19259
                $k[$j++] = _f; //#19259
            } //#19259
            var _g = $a(); //#19259
            for (var _h = 0, _i = _g.length; _h < _i; _h++) { //#19260
                $k[$j++] = $get(_g, _h); //#19260
                $k[$j++] = -1; //#19260
            } //#19260
            $ctx.Nexcl = $d(); //#19261
            $k[$j++] = Infinity; //#19268
            $k[$j++] = Infinity; //#19267
            $k[$j++] = 32; //#19266
            $k[$j++] = 36; //#19266
            $k[$j++] = 37; //#19266
            $k[$j++] = 42; //#19266
            $k[$j++] = 43; //#19266
            $k[$j++] = 45; //#19266
            $k[$j++] = 46; //#19266
            $k[$j++] = 47; //#19266
            $k[$j++] = 58; //#19266
            for (var _l = 65; _l <= 90; _l += 1) { //#19266
                $k[$j++] = _l; //#19266
            } //#19266
            $k[$j++] = $ctx.fn1; //#19267
            var _n = $a(); //#19267
            for (var _o = 0, _p = _n.length; _o < _p; _o++) { //#19268
                $k[$j++] = $get(_n, _o); //#19268
                $k[$j++] = -1; //#19268
            } //#19268
            $ctx.Aexcl = $d(); //#19269
            $k[$j++] = Infinity; //#19277
            $k[$j++] = Infinity; //#19276
            for (var _s = 129; _s <= 159; _s += 1) { //#19275
                $k[$j++] = _s; //#19275
            } //#19275
            for (var _t = 224; _t <= 235; _t += 1) { //#19276
                $k[$j++] = _t; //#19276
            } //#19276
            var _u = $a(); //#19276
            for (var _v = 0, _w = _u.length; _v < _w; _v++) { //#19277
                $k[$j++] = $get(_u, _v); //#19277
                $k[$j++] = -1; //#19277
            } //#19277
            $ctx.Kexcl = $d(); //#19278
            $k[$j++] = Infinity; //#19290
            $k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); //#19291
            $k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); //#19291
            $k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); //#19291
            $k[$j++] = $a(["", -1, -1, -1, -1]); //#19291
            $k[$j++] = $a(["0", "1", -1, -1, -1]); //#19291
            $k[$j++] = $a(["00", "01", "10", "11", -1]); //#19291
            $k[$j++] = $a(["000", "001", "010", "011", -1]); //#19291
            for (var _16 = 0, _17 = 32; _16 < _17; _16++) { //#19291
                $k[$j++] = $a(["001", "010", "011", "100", "111"]); //#19290
            } //#19290
            $ctx.mids = $a(); //#19290
            $ctx.cclens = $a([$a([10, 9, 8, 8]), $a([12, 11, 16, 10]), $a([14, 13, 16, 12]), $a([3, -1, -1, -1]), $a([4, 3, -1, -1]), $a([5, 4, 4, 3]), $a([6, 5, 5, 4]), $a([4, 3, 3, 2]), $a([5, 5, 4, 3]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([5, 5, 4, 3]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([4, 4, 3, 2]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([8, 7, 7, 6]), $a([5, 5, 4, 3]), $a([6, 6, 5, 5]), $a([7, 6, 6, 5]), $a([7, 7, 6, 6]), $a([8, 7, 7, 6]), $a([8, 8, 7, 7]), $a([7, 6, 6, 5]), $a([7, 7, 6, 5]), $a([8, 7, 7, 6]), $a([8, 7, 7, 6]), $a([9, 8, 7, 7]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([8, 7, 7, 6]), $a([8, 8, 7, 6]), $a([9, 8, 8, 7])]); //#19334
            $k[$j++] = Infinity; //#19345
            for (var _1o = 0, _1p = 3; _1o < _1p; _1o++) { //#19339
                $k[$j++] = 4; //#19338
            } //#19338
            $k[$j++] = 3; //#19346
            $k[$j++] = 5; //#19346
            $k[$j++] = 7; //#19346
            $k[$j++] = 9; //#19346
            for (var _1q = 0, _1r = 32; _1q < _1r; _1q++) { //#19346
                $k[$j++] = 3; //#19345
            } //#19345
            $ctx.termlens = $a(); //#19345
            $ctx.padstrs = $a(["11101100", "00010001"]); //#19349
            $ctx.charmap = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:"; //#19352
            $ctx.charvals = new Map; //#19353
            for (var _1u = 0; _1u <= 44; _1u += 1) { //#19354
                $put($ctx.charvals, $get($ctx.charmap, _1u), _1u); //#19354
            } //#19354
            for (var _1y in $ctx) {
                $ctx.hasOwnProperty(_1y) && (bwipp_qrcode.$ctx[_1y] = $ctx[_1y]);
            } //#19354
            bwipp_qrcode.$ctx._19356 = 1; //#19354
        })(); //#19354
    } //#19354
    $1.tobin = function() {
        var _20 = $s($k[--$j]); //#19360
        $k[$j++] = _20; //#19360
        for (var _22 = 0, _21 = _20.length - 1; _22 <= _21; _22 += 1) { //#19360
            var _23 = $k[--$j]; //#19360
            $put(_23, _22, 48); //#19360
            $k[$j++] = _23; //#19360
        } //#19360
        var _24 = $k[--$j]; //#19361
        var _27 = $cvrs($s(_24.length), $k[--$j], 2); //#19361
        $puti(_24, _24.length - _27.length, _27); //#19361
        $k[$j++] = _24; //#19361
    }; //#19361
    $1.encA = function() {
        $1.in = $k[--$j]; //#19365
        if ($1.fnc1first) { //#19368
            $k[$j++] = Infinity; //#19367
            $forall($1.in, function() { //#19367
                var _2B = $k[--$j]; //#19367
                $k[$j++] = _2B; //#19367
                if (_2B == $1.fn1) { //#19367
                    $j--; //#19367
                    $k[$j++] = 37; //#19367
                } //#19367
            }); //#19367
            $1.in = $a(); //#19367
        } //#19367
        $1.out = $s((~~(($1.in.length * 11) / 2)) + 1); //#19369
        $1.k = 0; //#19370
        $1.m = 0; //#19370
        for (;;) { //#19381
            if ($1.k == $1.in.length) { //#19371
                break; //#19371
            } //#19371
            if ($1.k < ($1.in.length - 1)) { //#19377
                $k[$j++] = $f(($get($1.charvals, $get($1.in, $1.k)) * 45) + $get($1.charvals, $get($1.in, $1.k + 1))); //#19373
                $k[$j++] = 11; //#19373
                $1.tobin(); //#19373
                $1.k = $1.k + 2; //#19374
            } else { //#19377
                $k[$j++] = $get($1.charvals, $get($1.in, $1.k)); //#19376
                $k[$j++] = 6; //#19376
                $1.tobin(); //#19376
                $1.k = $1.k + 1; //#19377
            } //#19377
            var _2b = $k[--$j]; //#19379
            $puti($1.out, $1.m, _2b); //#19379
            $1.m = _2b.length + $1.m; //#19380
        } //#19380
        $k[$j++] = $geti($1.out, 0, $1.m); //#19382
    }; //#19382
    $1.encN = function() {
        $1.in = $k[--$j]; //#19386
        $1.out = $s((~~(($1.in.length * 10) / 3)) + 1); //#19387
        $1.k = 0; //#19388
        $1.m = 0; //#19388
        for (;;) { //#19404
            if ($1.k == $1.in.length) { //#19389
                break; //#19389
            } //#19389
            if ($1.k < ($1.in.length - 2)) { //#19399
                var _2r = $geti($1.in, $1.k, 3); //#19391
                $k[$j++] = 0; //#19391
                for (var _2s = 0, _2t = _2r.length; _2s < _2t; _2s++) { //#19391
                    var _2v = $k[--$j]; //#19391
                    $k[$j++] = $f($get(_2r, _2s) + ($f((_2v * 10) - 48))); //#19391
                } //#19391
                $k[$j++] = 10; //#19391
                $1.tobin(); //#19391
                $1.k = $1.k + 3; //#19392
            } else { //#19399
                if ($1.k == ($1.in.length - 2)) { //#19399
                    var _31 = $geti($1.in, $1.k, 2); //#19395
                    $k[$j++] = 0; //#19395
                    for (var _32 = 0, _33 = _31.length; _32 < _33; _32++) { //#19395
                        var _35 = $k[--$j]; //#19395
                        $k[$j++] = $f($get(_31, _32) + ($f((_35 * 10) - 48))); //#19395
                    } //#19395
                    $k[$j++] = 7; //#19395
                    $1.tobin(); //#19395
                    $1.k = $1.k + 2; //#19396
                } else { //#19399
                    var _39 = $geti($1.in, $1.k, 1); //#19398
                    $k[$j++] = 0; //#19398
                    for (var _3A = 0, _3B = _39.length; _3A < _3B; _3A++) { //#19398
                        var _3D = $k[--$j]; //#19398
                        $k[$j++] = $f($get(_39, _3A) + ($f((_3D * 10) - 48))); //#19398
                    } //#19398
                    $k[$j++] = 4; //#19398
                    $1.tobin(); //#19398
                    $1.k = $1.k + 1; //#19399
                } //#19399
            } //#19399
            var _3F = $k[--$j]; //#19402
            $puti($1.out, $1.m, _3F); //#19402
            $1.m = _3F.length + $1.m; //#19403
        } //#19403
        $k[$j++] = $geti($1.out, 0, $1.m); //#19405
    }; //#19405
    $1.encB = function() {
        $1.in = $k[--$j]; //#19409
        if ($1.fnc1first) { //#19412
            $k[$j++] = Infinity; //#19411
            $forall($1.in, function() { //#19411
                var _3P = $k[--$j]; //#19411
                $k[$j++] = _3P; //#19411
                if (_3P == $1.fn1) { //#19411
                    $j--; //#19411
                    $k[$j++] = 29; //#19411
                } //#19411
            }); //#19411
            $1.in = $a(); //#19411
        } //#19411
        $1.out = $s($1.in.length * 8); //#19413
        for (var _3W = 0, _3V = $1.in.length - 1; _3W <= _3V; _3W += 1) { //#19418
            $1.k = _3W; //#19415
            $k[$j++] = $cvi($get($1.in, $1.k)); //#19416
            $k[$j++] = 8; //#19416
            $1.tobin(); //#19416
            $puti($1.out, $1.k * 8, $k[--$j]); //#19417
        } //#19417
        $k[$j++] = $1.out; //#19419
    }; //#19419
    $1.encK = function() {
        $1.in = $k[--$j]; //#19423
        $1.out = $s((~~($1.in.length / 2)) * 13); //#19424
        $1.k = 0; //#19425
        $1.m = 0; //#19425
        for (;;) { //#19433
            if ($1.k == $1.in.length) { //#19426
                break; //#19426
            } //#19426
            var _3p = $f(($get($1.in, $1.k) * 256) + $get($1.in, $1.k + 1)); //#19428
            $k[$j++] = _3p; //#19428
            if (_3p < 57408) { //#19428
                $k[$j++] = 33088; //#19428
            } else { //#19428
                $k[$j++] = 49472; //#19428
            } //#19428
            var _3q = $k[--$j]; //#19428
            var _3s = $f($k[--$j] - _3q); //#19429
            $k[$j++] = $f(((_3s >>> 8) * 192) + (_3s & 255)); //#19430
            $k[$j++] = 13; //#19430
            $1.tobin(); //#19430
            var _3t = $k[--$j]; //#19430
            $puti($1.out, $1.m, _3t); //#19430
            $1.m = _3t.length + $1.m; //#19431
            $1.k = $1.k + 2; //#19432
        } //#19432
        $k[$j++] = $1.out; //#19434
    }; //#19434
    $1.encE = function() {
        var _41 = $f((-$get($k[--$j], 0)) - 1000000); //#19439
        $k[$j++] = _41; //#19445
        if (_41 <= 127) { //#19444
            $k[$j++] = 8; //#19440
            $1.tobin(); //#19440
        } else { //#19444
            var _42 = $k[--$j]; //#19441
            $k[$j++] = _42; //#19445
            if (_42 <= 16383) { //#19444
                var _43 = $k[--$j]; //#19442
                $k[$j++] = $f(_43 + 32768); //#19442
                $k[$j++] = 16; //#19442
                $1.tobin(); //#19442
            } else { //#19444
                var _44 = $k[--$j]; //#19444
                $k[$j++] = $f(_44 + 12582912); //#19444
                $k[$j++] = 24; //#19444
                $1.tobin(); //#19444
            } //#19444
        } //#19444
    }; //#19444
    $1.encfuncs = $a(['encN', 'encA', 'encB', 'encK', 'encE']); //#19448
    $1.addtobits = function() {
        var _46 = $k[--$j]; //#19451
        $puti($1.bits, $1.j, _46); //#19451
        $1.j = _46.length + $1.j; //#19452
    }; //#19452
    $k[$j++] = Infinity; //#19455
    for (var _4B = 0, _4C = $1.msglen; _4B < _4C; _4B++) { //#19455
        $k[$j++] = 0; //#19455
    } //#19455
    $k[$j++] = 0; //#19455
    $1.numNs = $a(); //#19455
    $k[$j++] = Infinity; //#19456
    for (var _4F = 0, _4G = $1.msglen; _4F < _4G; _4F++) { //#19456
        $k[$j++] = 0; //#19456
    } //#19456
    $k[$j++] = 0; //#19456
    $1.numAs = $a(); //#19456
    $k[$j++] = Infinity; //#19457
    for (var _4J = 0, _4K = $1.msglen; _4J < _4K; _4J++) { //#19457
        $k[$j++] = 0; //#19457
    } //#19457
    $k[$j++] = 0; //#19457
    $1.numAorNs = $a(); //#19457
    $k[$j++] = Infinity; //#19458
    for (var _4N = 0, _4O = $1.msglen; _4N < _4O; _4N++) { //#19458
        $k[$j++] = 0; //#19458
    } //#19458
    $k[$j++] = 0; //#19458
    $1.numBs = $a(); //#19458
    $k[$j++] = Infinity; //#19459
    for (var _4R = 0, _4S = $1.msglen; _4R < _4S; _4R++) { //#19459
        $k[$j++] = 0; //#19459
    } //#19459
    $k[$j++] = 0; //#19459
    $1.numKs = $a(); //#19459
    $k[$j++] = Infinity; //#19460
    for (var _4V = 0, _4W = $1.msglen; _4V < _4W; _4V++) { //#19460
        $k[$j++] = 0; //#19460
    } //#19460
    $k[$j++] = 9999; //#19460
    $1.nextNs = $a(); //#19460
    $k[$j++] = Infinity; //#19461
    for (var _4Z = 0, _4a = $1.msglen; _4Z < _4a; _4Z++) { //#19461
        $k[$j++] = 0; //#19461
    } //#19461
    $k[$j++] = 9999; //#19461
    $1.nextBs = $a(); //#19461
    $k[$j++] = Infinity; //#19462
    for (var _4d = 0, _4e = $1.msglen; _4d < _4e; _4d++) { //#19462
        $k[$j++] = 0; //#19462
    } //#19462
    $k[$j++] = 9999; //#19462
    $1.nextAs = $a(); //#19462
    $k[$j++] = Infinity; //#19463
    for (var _4h = 0, _4i = $1.msglen; _4h < _4i; _4h++) { //#19463
        $k[$j++] = 0; //#19463
    } //#19463
    $k[$j++] = 9999; //#19463
    $1.nextKs = $a(); //#19463
    $1.isECI = $a($1.msglen); //#19464
    for (var _4n = $1.msglen - 1; _4n >= 0; _4n -= 1) { //#19494
        $1.i = _4n; //#19466
        $1.barchar = $get($1.msg, $1.i); //#19467
        var _4t = $get($1.Kexcl, $1.barchar) !== undefined; //#19468
        if (_4t) { //#19477
            $k[$j++] = 'sjis'; //#19469
            if (($1.i + 1) < $1.msglen) { //#19469
                $k[$j++] = $f(($1.barchar * 256) + $get($1.msg, $1.i + 1)); //#19469
            } else { //#19469
                $k[$j++] = 0; //#19469
            } //#19469
            var _50 = $k[--$j]; //#19469
            $1[$k[--$j]] = _50; //#19469
            if ((($1.sjis >= 33088) && ($1.sjis <= 40956)) || (($1.sjis >= 57408) && ($1.sjis <= 60351))) { //#19474
                $put($1.nextKs, $1.i, 0); //#19471
                $put($1.numKs, $1.i, $f($get($1.numKs, $1.i + 2) + 1)); //#19472
            } else { //#19474
                $put($1.nextKs, $1.i, $f($get($1.nextKs, $1.i + 1) + 1)); //#19474
            } //#19474
        } else { //#19477
            $put($1.nextKs, $1.i, $f($get($1.nextKs, $1.i + 1) + 1)); //#19477
        } //#19477
        var _5P = $get($1.Nexcl, $1.barchar) !== undefined; //#19479
        if (_5P) { //#19484
            $put($1.nextNs, $1.i, 0); //#19480
            $put($1.numNs, $1.i, $f($get($1.numNs, $1.i + 1) + 1)); //#19481
            $put($1.numAorNs, $1.i, $f($get($1.numAorNs, $1.i + 1) + 1)); //#19482
        } else { //#19484
            $put($1.nextNs, $1.i, $f($get($1.nextNs, $1.i + 1) + 1)); //#19484
        } //#19484
        var _5j = $get($1.Aexcl, $1.barchar) !== undefined; //#19486
        if (_5j) { //#19491
            $put($1.nextAs, $1.i, 0); //#19487
            $put($1.numAs, $1.i, $f($get($1.numAs, $1.i + 1) + 1)); //#19488
            $put($1.numAorNs, $1.i, $f($get($1.numAorNs, $1.i + 1) + 1)); //#19489
        } else { //#19491
            $put($1.nextAs, $1.i, $f($get($1.nextAs, $1.i + 1) + 1)); //#19491
        } //#19491
        $put($1.isECI, $1.i, $1.barchar <= -1000000); //#19493
    } //#19493
    for (var _66 = 0, _65 = $1.msglen - 1; _66 <= _65; _66 += 1) { //#19501
        $1.i = _66; //#19496
        if ($get($1.numKs, $1.i) > 0) { //#19500
            $put($1.numKs, $1.i + 1, 0); //#19498
            $put($1.nextKs, $1.i + 1, $f($get($1.nextKs, $1.i + 1) + 1)); //#19499
        } //#19499
    } //#19499
    for (var _6I = $1.msglen - 1; _6I >= 0; _6I -= 1) { //#19510
        $1.i = _6I; //#19503
        if ((($f($get($1.numNs, $1.i) + $f($get($1.numAs, $1.i) + $get($1.numKs, $1.i)))) == 0) && $nt($get($1.isECI, $1.i))) { //#19508
            $put($1.nextBs, $1.i, 0); //#19505
            $put($1.numBs, $1.i, $f($get($1.numBs, $1.i + 1) + 1)); //#19506
        } else { //#19508
            $put($1.nextBs, $1.i, $f($get($1.nextBs, $1.i + 1) + 1)); //#19508
        } //#19508
    } //#19508
    $1.KbeforeB = function() {
        var _6k = $get($k[--$j], $1.ver); //#19512
        $k[$j++] = $ge($1.numK, _6k) && ($get($1.nextBs, $f(($1.numK * 2) + $1.i)) == 0); //#19512
    }; //#19512
    $1.KbeforeA = function() {
        var _6s = $get($k[--$j], $1.ver); //#19513
        $k[$j++] = $ge($1.numK, _6s) && ($get($1.nextAs, $f(($1.numK * 2) + $1.i)) == 0); //#19513
    }; //#19513
    $1.KbeforeN = function() {
        var _70 = $get($k[--$j], $1.ver); //#19514
        $k[$j++] = $ge($1.numK, _70) && ($get($1.nextNs, $f(($1.numK * 2) + $1.i)) == 0); //#19514
    }; //#19514
    $1.KbeforeE = function() {
        var _78 = $get($k[--$j], $1.ver); //#19515
        $k[$j++] = $ge($1.numK, _78) && (($f(($1.numK * 2) + $1.i)) == $1.msglen); //#19515
    }; //#19515
    $1.AbeforeK = function() {
        var _7F = $get($k[--$j], $1.ver); //#19516
        $k[$j++] = $ge($1.numA, _7F) && ($get($1.nextKs, $f($1.numA + $1.i)) == 0); //#19516
    }; //#19516
    $1.AbeforeB = function() {
        var _7N = $get($k[--$j], $1.ver); //#19517
        $k[$j++] = $ge($1.numA, _7N) && ($get($1.nextBs, $f($1.numA + $1.i)) == 0); //#19517
    }; //#19517
    $1.AbeforeN = function() {
        var _7V = $get($k[--$j], $1.ver); //#19518
        $k[$j++] = $ge($1.numA, _7V) && ($get($1.nextNs, $f($1.numA + $1.i)) == 0); //#19518
    }; //#19518
    $1.AbeforeE = function() {
        var _7d = $get($k[--$j], $1.ver); //#19519
        $k[$j++] = $ge($1.numA, _7d) && ($f($1.numA + $1.i) == $1.msglen); //#19519
    }; //#19519
    $1.NbeforeK = function() {
        var _7k = $get($k[--$j], $1.ver); //#19520
        $k[$j++] = $ge($1.numN, _7k) && ($get($1.nextKs, $f($1.numN + $1.i)) == 0); //#19520
    }; //#19520
    $1.NbeforeB = function() {
        var _7s = $get($k[--$j], $1.ver); //#19521
        $k[$j++] = $ge($1.numN, _7s) && ($get($1.nextBs, $f($1.numN + $1.i)) == 0); //#19521
    }; //#19521
    $1.NbeforeA = function() {
        var _80 = $get($k[--$j], $1.ver); //#19522
        $k[$j++] = $ge($1.numN, _80) && ($get($1.nextAs, $f($1.numN + $1.i)) == 0); //#19522
    }; //#19522
    $1.NbeforeE = function() {
        var _88 = $get($k[--$j], $1.ver); //#19523
        $k[$j++] = $ge($1.numN, _88) && ($f($1.numN + $1.i) == $1.msglen); //#19523
    }; //#19523
    $1.AorNbeforeB = function() {
        var _8F = $get($k[--$j], $1.ver); //#19524
        $k[$j++] = $ge($1.numAorN, _8F) && ($get($1.nextBs, $f($1.numAorN + $1.i)) == 0); //#19524
    }; //#19524
    $1.AorNbeforeE = function() {
        var _8N = $get($k[--$j], $1.ver); //#19525
        $k[$j++] = $ge($1.numAorN, _8N) && ($f($1.numAorN + $1.i) == $1.msglen); //#19525
    }; //#19525
    $1.nextNslt = function() {
        if ($get($1.nextNs, $1.i) >= $1.msglen) { //#19527
            $j--; //#19527
            $k[$j++] = true; //#19527
        } else { //#19527
            var _8d = $get($k[--$j], $1.ver); //#19527
            $k[$j++] = $lt($get($1.numNs, $f($get($1.nextNs, $1.i) + $1.i)), _8d); //#19527
        } //#19527
    }; //#19527
    if (!bwipp_qrcode.$ctx._19556) { //#19556
        (function() { //#19556
            var $ctx = Object.create($1); //#19556
            $k[$j++] = Infinity; //#19552
            for (var _8e = 0; _8e <= 9; _8e += 1) { //#19539
                $k[$j++] = $cvrs($s(2), _8e, 10); //#19539
                $k[$j++] = $ctx.v1to9; //#19539
            } //#19539
            for (var _8i = 10; _8i <= 26; _8i += 1) { //#19540
                $k[$j++] = $cvrs($s(2), _8i, 10); //#19540
                $k[$j++] = $ctx.v10to26; //#19540
            } //#19540
            for (var _8m = 27; _8m <= 40; _8m += 1) { //#19541
                $k[$j++] = $cvrs($s(2), _8m, 10); //#19541
                $k[$j++] = $ctx.v27to40; //#19541
            } //#19541
            $k[$j++] = "M1"; //#19552
            $k[$j++] = $ctx.vM1; //#19552
            $k[$j++] = "M2"; //#19552
            $k[$j++] = $ctx.vM2; //#19552
            $k[$j++] = "M3"; //#19552
            $k[$j++] = $ctx.vM3; //#19552
            $k[$j++] = "M4"; //#19552
            $k[$j++] = $ctx.vM4; //#19552
            $k[$j++] = "R7x43"; //#19552
            $k[$j++] = $ctx.vR7x43; //#19552
            $k[$j++] = "R7x59"; //#19552
            $k[$j++] = $ctx.vR7x59; //#19552
            $k[$j++] = "R7x77"; //#19552
            $k[$j++] = $ctx.vR7x77; //#19552
            $k[$j++] = "R7x99"; //#19552
            $k[$j++] = $ctx.vR7x99; //#19552
            $k[$j++] = "R7x139"; //#19552
            $k[$j++] = $ctx.vR7x139; //#19552
            $k[$j++] = "R9x43"; //#19552
            $k[$j++] = $ctx.vR9x43; //#19552
            $k[$j++] = "R9x59"; //#19552
            $k[$j++] = $ctx.vR9x59; //#19552
            $k[$j++] = "R9x77"; //#19552
            $k[$j++] = $ctx.vR9x77; //#19552
            $k[$j++] = "R9x99"; //#19552
            $k[$j++] = $ctx.vR9x99; //#19552
            $k[$j++] = "R9x139"; //#19552
            $k[$j++] = $ctx.vR9x139; //#19552
            $k[$j++] = "R11x27"; //#19552
            $k[$j++] = $ctx.vR11x27; //#19552
            $k[$j++] = "R11x43"; //#19552
            $k[$j++] = $ctx.vR11x43; //#19552
            $k[$j++] = "R11x59"; //#19552
            $k[$j++] = $ctx.vR11x59; //#19552
            $k[$j++] = "R11x77"; //#19552
            $k[$j++] = $ctx.vR11x77; //#19552
            $k[$j++] = "R11x99"; //#19552
            $k[$j++] = $ctx.vR11x99; //#19552
            $k[$j++] = "R11x139"; //#19552
            $k[$j++] = $ctx.vR11x139; //#19552
            $k[$j++] = "R13x27"; //#19552
            $k[$j++] = $ctx.vR13x27; //#19552
            $k[$j++] = "R13x43"; //#19552
            $k[$j++] = $ctx.vR13x43; //#19552
            $k[$j++] = "R13x59"; //#19552
            $k[$j++] = $ctx.vR13x59; //#19552
            $k[$j++] = "R13x77"; //#19552
            $k[$j++] = $ctx.vR13x77; //#19552
            $k[$j++] = "R13x99"; //#19552
            $k[$j++] = $ctx.vR13x99; //#19552
            $k[$j++] = "R13x139"; //#19552
            $k[$j++] = $ctx.vR13x139; //#19552
            $k[$j++] = "R15x43"; //#19552
            $k[$j++] = $ctx.vR15x43; //#19552
            $k[$j++] = "R15x59"; //#19552
            $k[$j++] = $ctx.vR15x59; //#19552
            $k[$j++] = "R15x77"; //#19552
            $k[$j++] = $ctx.vR15x77; //#19552
            $k[$j++] = "R15x99"; //#19552
            $k[$j++] = $ctx.vR15x99; //#19552
            $k[$j++] = "R15x139"; //#19552
            $k[$j++] = $ctx.vR15x139; //#19552
            $k[$j++] = "R17x43"; //#19552
            $k[$j++] = $ctx.vR17x43; //#19552
            $k[$j++] = "R17x59"; //#19552
            $k[$j++] = $ctx.vR17x59; //#19552
            $k[$j++] = "R17x77"; //#19552
            $k[$j++] = $ctx.vR17x77; //#19552
            $k[$j++] = "R17x99"; //#19552
            $k[$j++] = $ctx.vR17x99; //#19552
            $k[$j++] = "R17x139"; //#19552
            $k[$j++] = $ctx.vR17x139; //#19552
            $ctx.versetmap = $d(); //#19553
            $ctx.versetfull = $a([$ctx.v1to9, $ctx.v10to26, $ctx.v27to40]); //#19554
            $ctx.versetmicro = $a([$ctx.vM1, $ctx.vM2, $ctx.vM3, $ctx.vM4]); //#19555
            for (var _9a in $ctx) {
                $ctx.hasOwnProperty(_9a) && (bwipp_qrcode.$ctx[_9a] = $ctx[_9a]);
            } //#19555
            bwipp_qrcode.$ctx._19556 = 1; //#19555
        })(); //#19555
    } //#19555
    if ($ne($1.version, "unset")) { //#19563
        $k[$j++] = 'verset'; //#19559
        $k[$j++] = $get($1.versetmap, $1.version); //#19559
        $k[$j++] = Infinity; //#19559
        var _9f = $k[--$j]; //#19559
        var _9g = $k[--$j]; //#19559
        $k[$j++] = _9f; //#19559
        $k[$j++] = _9g; //#19559
        var _9h = $a(); //#19559
        $1[$k[--$j]] = _9h; //#19559
    } else { //#19563
        if ($eq($1.format, "full")) { //#19562
            $1.verset = $1.versetfull; //#19562
        } //#19562
        if ($eq($1.format, "micro")) { //#19563
            $1.verset = $1.versetmicro; //#19563
        } //#19563
    } //#19563
    $k[$j++] = Infinity; //#19568
    for (var _9n = 0, _9o = 39; _9n < _9o; _9n++) { //#19568
        $k[$j++] = -1; //#19568
    } //#19568
    $1.msgbits = $a(); //#19568
    $1.e = 10000; //#19569
    if (!bwipp_qrcode.$ctx._19599) { //#19599
        (function() { //#19599
            var $ctx = Object.create($1); //#19599
            $ctx.mode0forceKB = $a([1, 1, 1, $ctx.e, $ctx.e, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); //#19575
            $ctx.mode0forceA = $a([1, 1, 1, $ctx.e, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); //#19576
            $ctx.mode0forceN = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); //#19577
            $ctx.mode0NbeforeB = $a([4, 4, 5, $ctx.e, $ctx.e, 2, 3, 2, 2, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]); //#19579
            $ctx.modeBKbeforeB = $a([9, 12, 13, $ctx.e, $ctx.e, 4, 6, 4, 5, 6, 6, 6, 5, 6, 6, 6, 7, 4, 6, 6, 6, 7, 7, 5, 6, 6, 7, 7, 7, 6, 6, 7, 7, 7, 6, 7, 7, 7, 8]); //#19581
            $ctx.modeBKbeforeA = $a([8, 10, 11, $ctx.e, $ctx.e, 4, 5, 4, 5, 5, 6, 6, 5, 5, 6, 6, 6, 4, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 7, 7]); //#19582
            $ctx.modeBKbeforeN = $a([8, 9, 11, $ctx.e, $ctx.e, 3, 5, 3, 4, 5, 5, 5, 4, 5, 5, 5, 6, 3, 5, 5, 5, 6, 6, 4, 5, 5, 6, 6, 6, 5, 5, 6, 6, 7, 5, 6, 6, 6, 7]); //#19583
            $ctx.modeBKbeforeE = $a([5, 5, 6, $ctx.e, $ctx.e, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 2, 3, 3, 3, 4, 4, 3, 3, 3, 4, 4, 4, 3, 3, 4, 4, 4, 3, 4, 4, 4, 4]); //#19584
            $ctx.modeBAbeforeK = $a([11, 12, 14, $ctx.e, $ctx.e, 5, 7, 5, 6, 7, 8, 8, 6, 7, 8, 8, 8, 6, 7, 8, 8, 8, 8, 6, 8, 8, 8, 8, 9, 8, 8, 8, 8, 9, 8, 8, 8, 9, 9]); //#19586
            $ctx.modeBAbeforeB = $a([11, 15, 16, $ctx.e, $ctx.e, 6, 7, 6, 7, 7, 8, 8, 7, 7, 8, 8, 8, 6, 7, 8, 8, 8, 9, 7, 8, 8, 8, 9, 9, 8, 8, 9, 9, 9, 8, 8, 9, 9, 10]); //#19587
            $ctx.modeBAbeforeN = $a([12, 13, 15, $ctx.e, $ctx.e, 6, 8, 6, 7, 8, 8, 8, 7, 8, 8, 8, 9, 6, 8, 8, 8, 9, 9, 7, 8, 8, 9, 9, 10, 8, 9, 9, 9, 10, 8, 9, 9, 10, 10]); //#19588
            $ctx.modeBAbeforeE = $a([6, 7, 8, $ctx.e, $ctx.e, 3, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 5, 4, 5, 5, 5, 5, 4, 5, 5, 5, 5]); //#19589
            $ctx.modeBNbeforeK = $a([6, 7, 8, $ctx.e, $ctx.e, 3, 4, 3, 4, 4, 5, 5, 4, 4, 5, 5, 5, 3, 4, 5, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]); //#19591
            $ctx.modeBNbeforeB = $a([6, 8, 9, $ctx.e, $ctx.e, 3, 4, 3, 4, 4, 5, 5, 4, 4, 5, 5, 5, 3, 4, 5, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6]); //#19592
            $ctx.modeBNbeforeA = $a([6, 7, 8, $ctx.e, $ctx.e, 3, 4, 3, 4, 4, 5, 5, 4, 4, 5, 5, 5, 4, 4, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6]); //#19593
            $ctx.modeBNbeforeE = $a([3, 4, 4, $ctx.e, $ctx.e, 2, 3, 2, 2, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]); //#19594
            $ctx.modeANbeforeA = $a([13, 15, 17, $ctx.e, 5, 7, 9, 7, 8, 9, 9, 9, 8, 9, 9, 9, 11, 7, 9, 9, 9, 11, 11, 8, 9, 9, 10, 11, 11, 9, 10, 11, 11, 11, 9, 11, 11, 11, 11]); //#19596
            $ctx.modeANbeforeB = $a([13, 17, 18, $ctx.e, $ctx.e, 7, 9, 7, 8, 9, 9, 9, 8, 9, 9, 9, 10, 7, 9, 9, 9, 10, 11, 8, 9, 9, 9, 11, 11, 9, 9, 11, 11, 11, 9, 10, 11, 11, 11]); //#19597
            $ctx.modeANbeforeE = $a([7, 8, 9, $ctx.e, 3, 4, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6]); //#19598
            for (var _Ag in $ctx) {
                $ctx.hasOwnProperty(_Ag) && (bwipp_qrcode.$ctx[_Ag] = $ctx[_Ag]);
            } //#19598
            bwipp_qrcode.$ctx._19599 = 1; //#19598
        })(); //#19598
    } //#19598
    var _Ah = $1.verset; //#19601
    for (var _Ai = 0, _Aj = _Ah.length; _Ai < _Aj; _Ai++) { //#19733
        $1.ver = $get(_Ah, _Ai); //#19602
        $1.mode = -1; //#19605
        $1.seq = $a([]); //#19605
        $1.i = 0; //#19605
        for (;;) { //#19702
            if ($1.i >= $1.msglen) { //#19606
                break; //#19606
            } //#19606
            $1.numK = $get($1.numKs, $1.i); //#19607
            $1.numB = $get($1.numBs, $1.i); //#19608
            $1.numA = $get($1.numAs, $1.i); //#19609
            $1.numN = $get($1.numNs, $1.i); //#19610
            $1.numAorN = $get($1.numAorNs, $1.i); //#19611
            $1.eci = $get($1.isECI, $1.i); //#19612
            if ($eq($1.ver, $1.vM1) && ($1.numA >= 1)) { //#19613
                $1.seq = -1; //#19613
                break; //#19613
            } //#19613
            if ($eq($1.ver, $1.vM1) && ($1.numB >= 1)) { //#19614
                $1.seq = -1; //#19614
                break; //#19614
            } //#19614
            if ($eq($1.ver, $1.vM1) && ($1.numK >= 1)) { //#19615
                $1.seq = -1; //#19615
                break; //#19615
            } //#19615
            if ($eq($1.ver, $1.vM1) && $1.eci) { //#19616
                $1.seq = -1; //#19616
                break; //#19616
            } //#19616
            if ($eq($1.ver, $1.vM2) && ($1.numB >= 1)) { //#19617
                $1.seq = -1; //#19617
                break; //#19617
            } //#19617
            if ($eq($1.ver, $1.vM2) && ($1.numK >= 1)) { //#19618
                $1.seq = -1; //#19618
                break; //#19618
            } //#19618
            if ($eq($1.ver, $1.vM2) && $1.eci) { //#19619
                $1.seq = -1; //#19619
                break; //#19619
            } //#19619
            if ($eq($1.ver, $1.vM3) && $1.eci) { //#19620
                $1.seq = -1; //#19620
                break; //#19620
            } //#19620
            if ($eq($1.ver, $1.vM4) && $1.eci) { //#19621
                $1.seq = -1; //#19621
                break; //#19621
            } //#19621
            for (;;) { //#19682
                if ($1.eci) { //#19625
                    $k[$j++] = $1.E; //#19624
                    break; //#19624
                } //#19624
                if ($1.mode == -1) { //#19640
                    $k[$j++] = $1.mode0forceKB; //#19627
                    $1.KbeforeA(); //#19627
                    if ($k[--$j]) { //#19627
                        $k[$j++] = $1.K; //#19627
                        break; //#19627
                    } //#19627
                    $k[$j++] = $1.mode0forceKB; //#19628
                    $1.KbeforeN(); //#19628
                    if ($k[--$j]) { //#19628
                        $k[$j++] = $1.K; //#19628
                        break; //#19628
                    } //#19628
                    $k[$j++] = $1.modeBKbeforeE; //#19629
                    $1.KbeforeB(); //#19629
                    if ($k[--$j]) { //#19629
                        $k[$j++] = $1.K; //#19629
                        break; //#19629
                    } //#19629
                    $k[$j++] = $1.mode0forceKB; //#19630
                    $1.KbeforeE(); //#19630
                    if ($k[--$j]) { //#19630
                        $k[$j++] = $1.K; //#19630
                        break; //#19630
                    } //#19630
                    if ($1.numK >= 1) { //#19631
                        $k[$j++] = $1.B; //#19631
                        break; //#19631
                    } //#19631
                    $k[$j++] = $1.mode0NbeforeB; //#19632
                    $1.NbeforeB(); //#19632
                    if ($k[--$j]) { //#19632
                        $k[$j++] = $1.N; //#19632
                        break; //#19632
                    } //#19632
                    $k[$j++] = $1.mode0forceKB; //#19633
                    $1.NbeforeB(); //#19633
                    if ($k[--$j]) { //#19633
                        $k[$j++] = $1.B; //#19633
                        break; //#19633
                    } //#19633
                    $k[$j++] = $1.modeANbeforeE; //#19634
                    $1.NbeforeA(); //#19634
                    if ($k[--$j]) { //#19634
                        $k[$j++] = $1.N; //#19634
                        break; //#19634
                    } //#19634
                    $k[$j++] = $1.mode0forceN; //#19635
                    $1.NbeforeE(); //#19635
                    if ($k[--$j]) { //#19635
                        $k[$j++] = $1.N; //#19635
                        break; //#19635
                    } //#19635
                    $k[$j++] = $1.modeBAbeforeE; //#19636
                    $1.AbeforeK(); //#19636
                    if ($k[--$j]) { //#19636
                        $k[$j++] = $1.A; //#19636
                        break; //#19636
                    } //#19636
                    $k[$j++] = $1.modeBAbeforeE; //#19637
                    $1.AorNbeforeB(); //#19637
                    if ($k[--$j]) { //#19637
                        $k[$j++] = $1.A; //#19637
                        break; //#19637
                    } //#19637
                    $k[$j++] = $1.mode0forceA; //#19638
                    $1.AorNbeforeE(); //#19638
                    if ($k[--$j]) { //#19638
                        $k[$j++] = $1.A; //#19638
                        break; //#19638
                    } //#19638
                    $k[$j++] = $1.B; //#19639
                    break; //#19639
                } //#19639
                if ($1.mode == $1.B) { //#19658
                    $k[$j++] = $1.modeBKbeforeB; //#19642
                    $1.KbeforeB(); //#19642
                    if ($k[--$j]) { //#19642
                        $k[$j++] = $1.K; //#19642
                        break; //#19642
                    } //#19642
                    $k[$j++] = $1.modeBKbeforeA; //#19643
                    $1.KbeforeA(); //#19643
                    if ($k[--$j]) { //#19643
                        $k[$j++] = $1.K; //#19643
                        break; //#19643
                    } //#19643
                    $k[$j++] = $1.modeBKbeforeN; //#19644
                    $1.KbeforeN(); //#19644
                    if ($k[--$j]) { //#19644
                        $k[$j++] = $1.K; //#19644
                        break; //#19644
                    } //#19644
                    $k[$j++] = $1.modeBKbeforeE; //#19645
                    $1.KbeforeE(); //#19645
                    if ($k[--$j]) { //#19645
                        $k[$j++] = $1.K; //#19645
                        break; //#19645
                    } //#19645
                    $k[$j++] = $1.modeBAbeforeK; //#19646
                    $1.AbeforeK(); //#19646
                    if ($k[--$j]) { //#19646
                        $k[$j++] = $1.A; //#19646
                        break; //#19646
                    } //#19646
                    $k[$j++] = $1.modeBAbeforeB; //#19647
                    $1.AbeforeB(); //#19647
                    if ($k[--$j]) { //#19647
                        $k[$j++] = $1.A; //#19647
                        break; //#19647
                    } //#19647
                    $k[$j++] = $1.modeBAbeforeN; //#19648
                    $1.AbeforeN(); //#19648
                    if ($k[--$j]) { //#19648
                        $k[$j++] = $1.A; //#19648
                        break; //#19648
                    } //#19648
                    $k[$j++] = $1.modeBAbeforeE; //#19649
                    $1.AbeforeE(); //#19649
                    if ($k[--$j]) { //#19649
                        $k[$j++] = $1.A; //#19649
                        break; //#19649
                    } //#19649
                    $k[$j++] = $1.modeBNbeforeK; //#19650
                    $1.NbeforeK(); //#19650
                    if ($k[--$j]) { //#19650
                        $k[$j++] = $1.N; //#19650
                        break; //#19650
                    } //#19650
                    $k[$j++] = $1.modeBNbeforeB; //#19651
                    $1.NbeforeB(); //#19651
                    if ($k[--$j]) { //#19651
                        $k[$j++] = $1.N; //#19651
                        break; //#19651
                    } //#19651
                    $k[$j++] = $1.modeBNbeforeA; //#19652
                    $1.NbeforeA(); //#19652
                    if ($k[--$j]) { //#19652
                        $k[$j++] = $1.N; //#19652
                        break; //#19652
                    } //#19652
                    $k[$j++] = $1.modeBNbeforeE; //#19653
                    $1.NbeforeE(); //#19653
                    if ($k[--$j]) { //#19653
                        $k[$j++] = $1.N; //#19653
                        break; //#19653
                    } //#19653
                    $k[$j++] = $1.modeBAbeforeE; //#19654
                    $1.AorNbeforeE(); //#19654
                    var _Cr = $k[--$j]; //#19654
                    if (_Cr && $le($1.numAorN, $get($1.modeBAbeforeN, $1.ver))) { //#19656
                        $k[$j++] = $1.modeBNbeforeA; //#19655
                        $1.nextNslt(); //#19655
                        if ($k[--$j]) { //#19655
                            $k[$j++] = $1.A; //#19655
                            break; //#19655
                        } //#19655
                    } //#19655
                    $k[$j++] = $1.B; //#19657
                    break; //#19657
                } //#19657
                if ($1.mode == $1.A) { //#19667
                    if ($1.numK >= 1) { //#19660
                        $k[$j++] = $1.K; //#19660
                        break; //#19660
                    } //#19660
                    if ($1.numB >= 1) { //#19661
                        $k[$j++] = $1.B; //#19661
                        break; //#19661
                    } //#19661
                    $k[$j++] = $1.modeANbeforeA; //#19662
                    $1.NbeforeA(); //#19662
                    if ($k[--$j]) { //#19662
                        $k[$j++] = $1.N; //#19662
                        break; //#19662
                    } //#19662
                    $k[$j++] = $1.modeANbeforeB; //#19663
                    $1.NbeforeB(); //#19663
                    if ($k[--$j]) { //#19663
                        $k[$j++] = $1.N; //#19663
                        break; //#19663
                    } //#19663
                    $k[$j++] = $1.modeANbeforeE; //#19664
                    $1.NbeforeE(); //#19664
                    if ($k[--$j]) { //#19664
                        $k[$j++] = $1.N; //#19664
                        break; //#19664
                    } //#19664
                    if (($1.numA >= 1) || ($1.numN >= 1)) { //#19665
                        $k[$j++] = $1.A; //#19665
                        break; //#19665
                    } //#19665
                    $k[$j++] = $1.B; //#19666
                    break; //#19666
                } //#19666
                if ($1.mode == $1.N) { //#19674
                    if ($1.numK >= 1) { //#19669
                        $k[$j++] = $1.K; //#19669
                        break; //#19669
                    } //#19669
                    if ($1.numB >= 1) { //#19670
                        $k[$j++] = $1.B; //#19670
                        break; //#19670
                    } //#19670
                    if ($1.numA >= 1) { //#19671
                        $k[$j++] = $1.A; //#19671
                        break; //#19671
                    } //#19671
                    if ($1.numN >= 1) { //#19672
                        $k[$j++] = $1.N; //#19672
                        break; //#19672
                    } //#19672
                    $k[$j++] = $1.B; //#19673
                    break; //#19673
                } //#19673
                if ($1.mode == $1.K) { //#19681
                    if ($1.numB >= 1) { //#19676
                        $k[$j++] = $1.B; //#19676
                        break; //#19676
                    } //#19676
                    if ($1.numA >= 1) { //#19677
                        $k[$j++] = $1.A; //#19677
                        break; //#19677
                    } //#19677
                    if ($1.numN >= 1) { //#19678
                        $k[$j++] = $1.N; //#19678
                        break; //#19678
                    } //#19678
                    if ($1.numK >= 1) { //#19679
                        $k[$j++] = $1.K; //#19679
                        break; //#19679
                    } //#19679
                    $k[$j++] = $1.B; //#19680
                    break; //#19680
                } //#19680
            } //#19680
            var _Db = $k[--$j]; //#19683
            $k[$j++] = _Db; //#19683
            if ((_Db == $1.K) && $1.fnc1first) { //#19683
                $j--; //#19683
                $k[$j++] = $1.B; //#19683
            } //#19683
            var _Df = $k[--$j]; //#19684
            $k[$j++] = _Df; //#19700
            if (_Df == $1.mode) { //#19699
                $j--; //#19685
                var _Dl = ($1.mode == $1.K) ? 2 : 1; //#19686
                $1.dat = $geti($1.msg, $1.i, _Dl); //#19686
                $k[$j++] = Infinity; //#19689
                $aload($1.seq); //#19688
                $k[$j++] = Infinity; //#19689
                var _Do = $k[--$j]; //#19689
                var _Dp = $k[--$j]; //#19689
                $k[$j++] = _Do; //#19689
                $aload(_Dp); //#19689
                $aload($1.dat); //#19689
                var _Dr = $a(); //#19689
                $k[$j++] = _Dr; //#19689
                $1.seq = $a(); //#19689
            } else { //#19699
                $1.mode = $k[--$j]; //#19692
                if ($1.mode == $1.K) { //#19693
                    $k[$j++] = $1.K; //#19693
                    $k[$j++] = $geti($1.msg, $1.i, $1.numK * 2); //#19693
                } //#19693
                if ($1.mode == $1.B) { //#19694
                    $k[$j++] = $1.B; //#19694
                    $k[$j++] = $geti($1.msg, $1.i, $1.numB); //#19694
                } //#19694
                if ($1.mode == $1.A) { //#19695
                    $k[$j++] = $1.A; //#19695
                    $k[$j++] = $geti($1.msg, $1.i, $1.numA); //#19695
                } //#19695
                if ($1.mode == $1.N) { //#19696
                    $k[$j++] = $1.N; //#19696
                    $k[$j++] = $geti($1.msg, $1.i, $1.numN); //#19696
                } //#19696
                if ($1.mode == $1.E) { //#19697
                    $1.mode = -1; //#19697
                    $k[$j++] = $1.E; //#19697
                    $k[$j++] = $geti($1.msg, $1.i, 1); //#19697
                } //#19697
                $1.dat = $k[--$j]; //#19698
                $1.sw = $k[--$j]; //#19698
                $k[$j++] = Infinity; //#19699
                $aload($1.seq); //#19699
                $k[$j++] = $1.sw; //#19699
                $k[$j++] = $1.dat; //#19699
                $1.seq = $a(); //#19699
            } //#19699
            $1.i = $1.i + $1.dat.length; //#19701
        } //#19701
        for (;;) { //#19732
            if ($1.seq == -1) { //#19706
                break; //#19706
            } //#19706
            $1.bits = $s(23648); //#19707
            $1.j = 0; //#19708
            if ($1.fnc1first) { //#19711
                if ($lt($1.ver, $1.vR7x43)) { //#19710
                    $k[$j++] = "0101"; //#19710
                } else { //#19710
                    $k[$j++] = "101"; //#19710
                } //#19710
                $1.addtobits(); //#19710
            } //#19710
            $1.abort = false; //#19712
            for (var _Eh = 0, _Eg = $1.seq.length - 1; _Eh <= _Eg; _Eh += 2) { //#19727
                $1.i = _Eh; //#19714
                $1.mode = $get($1.seq, $1.i); //#19715
                $k[$j++] = $get($get($1.mids, $1.ver), $1.mode); //#19716
                $1.addtobits(); //#19716
                $1.chars = $get($1.seq, $1.i + 1); //#19717
                $k[$j++] = 'charslen'; //#19718
                $k[$j++] = $1.chars.length; //#19718
                if ($1.mode == $1.K) { //#19718
                    var _Ew = $k[--$j]; //#19718
                    $k[$j++] = ~~(_Ew / 2); //#19718
                } //#19718
                var _Ex = $k[--$j]; //#19718
                $1[$k[--$j]] = _Ex; //#19718
                if ($1.mode != $1.E) { //#19725
                    $1.cclen = $get($get($1.cclens, $1.ver), $1.mode); //#19720
                    if ($1.charslen >= (~~Math.pow(2, $1.cclen))) { //#19723
                        $1.abort = true; //#19722
                        break; //#19722
                    } //#19722
                    $k[$j++] = $1.charslen; //#19724
                    $k[$j++] = $1.cclen; //#19724
                    $1.tobin(); //#19724
                    $1.addtobits(); //#19724
                } //#19724
                $k[$j++] = $1.chars; //#19726
                if ($1[$get($1.encfuncs, $1.mode)]() === true) {
                    break;
                } //#19726
                $1.addtobits(); //#19726
            } //#19726
            if ($1.abort) { //#19728
                break; //#19728
            } //#19728
            $1.bits = $geti($1.bits, 0, $1.j); //#19729
            $put($1.msgbits, $1.ver, $1.bits); //#19730
            break; //#19731
        } //#19731
    } //#19731
    if (!bwipp_qrcode.$ctx._19817) { //#19817
        (function() { //#19817
            var $ctx = Object.create($1); //#19817
            $ctx.metrics = $a([$a(["micro", "M1", $ctx.vM1, 11, 11, 98, 99, 36, $a([2, 99, 99, 99]), $a([1, 0, -1, -1, -1, -1, -1, -1])]), $a(["micro", "M2", $ctx.vM2, 13, 13, 98, 99, 80, $a([5, 6, 99, 99]), $a([1, 0, 1, 0, -1, -1, -1, -1])]), $a(["micro", "M3", $ctx.vM3, 15, 15, 98, 99, 132, $a([6, 8, 99, 99]), $a([1, 0, 1, 0, -1, -1, -1, -1])]), $a(["micro", "M4", $ctx.vM4, 17, 17, 98, 99, 192, $a([8, 10, 14, 99]), $a([1, 0, 1, 0, 1, 0, -1, -1])]), $a(["full", "1", $ctx.v1to9, 21, 21, 98, 99, 208, $a([7, 10, 13, 17]), $a([1, 0, 1, 0, 1, 0, 1, 0])]), $a(["full", "2", $ctx.v1to9, 25, 25, 18, 99, 359, $a([10, 16, 22, 28]), $a([1, 0, 1, 0, 1, 0, 1, 0])]), $a(["full", "3", $ctx.v1to9, 29, 29, 22, 99, 567, $a([15, 26, 36, 44]), $a([1, 0, 1, 0, 2, 0, 2, 0])]), $a(["full", "4", $ctx.v1to9, 33, 33, 26, 99, 807, $a([20, 36, 52, 64]), $a([1, 0, 2, 0, 2, 0, 4, 0])]), $a(["full", "5", $ctx.v1to9, 37, 37, 30, 99, 1079, $a([26, 48, 72, 88]), $a([1, 0, 2, 0, 2, 2, 2, 2])]), $a(["full", "6", $ctx.v1to9, 41, 41, 34, 99, 1383, $a([36, 64, 96, 112]), $a([2, 0, 4, 0, 4, 0, 4, 0])]), $a(["full", "7", $ctx.v1to9, 45, 45, 22, 38, 1568, $a([40, 72, 108, 130]), $a([2, 0, 4, 0, 2, 4, 4, 1])]), $a(["full", "8", $ctx.v1to9, 49, 49, 24, 42, 1936, $a([48, 88, 132, 156]), $a([2, 0, 2, 2, 4, 2, 4, 2])]), $a(["full", "9", $ctx.v1to9, 53, 53, 26, 46, 2336, $a([60, 110, 160, 192]), $a([2, 0, 3, 2, 4, 4, 4, 4])]), $a(["full", "10", $ctx.v10to26, 57, 57, 28, 50, 2768, $a([72, 130, 192, 224]), $a([2, 2, 4, 1, 6, 2, 6, 2])]), $a(["full", "11", $ctx.v10to26, 61, 61, 30, 54, 3232, $a([80, 150, 224, 264]), $a([4, 0, 1, 4, 4, 4, 3, 8])]), $a(["full", "12", $ctx.v10to26, 65, 65, 32, 58, 3728, $a([96, 176, 260, 308]), $a([2, 2, 6, 2, 4, 6, 7, 4])]), $a(["full", "13", $ctx.v10to26, 69, 69, 34, 62, 4256, $a([104, 198, 288, 352]), $a([4, 0, 8, 1, 8, 4, 12, 4])]), $a(["full", "14", $ctx.v10to26, 73, 73, 26, 46, 4651, $a([120, 216, 320, 384]), $a([3, 1, 4, 5, 11, 5, 11, 5])]), $a(["full", "15", $ctx.v10to26, 77, 77, 26, 48, 5243, $a([132, 240, 360, 432]), $a([5, 1, 5, 5, 5, 7, 11, 7])]), $a(["full", "16", $ctx.v10to26, 81, 81, 26, 50, 5867, $a([144, 280, 408, 480]), $a([5, 1, 7, 3, 15, 2, 3, 13])]), $a(["full", "17", $ctx.v10to26, 85, 85, 30, 54, 6523, $a([168, 308, 448, 532]), $a([1, 5, 10, 1, 1, 15, 2, 17])]), $a(["full", "18", $ctx.v10to26, 89, 89, 30, 56, 7211, $a([180, 338, 504, 588]), $a([5, 1, 9, 4, 17, 1, 2, 19])]), $a(["full", "19", $ctx.v10to26, 93, 93, 30, 58, 7931, $a([196, 364, 546, 650]), $a([3, 4, 3, 11, 17, 4, 9, 16])]), $a(["full", "20", $ctx.v10to26, 97, 97, 34, 62, 8683, $a([224, 416, 600, 700]), $a([3, 5, 3, 13, 15, 5, 15, 10])]), $a(["full", "21", $ctx.v10to26, 101, 101, 28, 50, 9252, $a([224, 442, 644, 750]), $a([4, 4, 17, 0, 17, 6, 19, 6])]), $a(["full", "22", $ctx.v10to26, 105, 105, 26, 50, 10068, $a([252, 476, 690, 816]), $a([2, 7, 17, 0, 7, 16, 34, 0])]), $a(["full", "23", $ctx.v10to26, 109, 109, 30, 54, 10916, $a([270, 504, 750, 900]), $a([4, 5, 4, 14, 11, 14, 16, 14])]), $a(["full", "24", $ctx.v10to26, 113, 113, 28, 54, 11796, $a([300, 560, 810, 960]), $a([6, 4, 6, 14, 11, 16, 30, 2])]), $a(["full", "25", $ctx.v10to26, 117, 117, 32, 58, 12708, $a([312, 588, 870, 1050]), $a([8, 4, 8, 13, 7, 22, 22, 13])]), $a(["full", "26", $ctx.v10to26, 121, 121, 30, 58, 13652, $a([336, 644, 952, 1110]), $a([10, 2, 19, 4, 28, 6, 33, 4])]), $a(["full", "27", $ctx.v27to40, 125, 125, 34, 62, 14628, $a([360, 700, 1020, 1200]), $a([8, 4, 22, 3, 8, 26, 12, 28])]), $a(["full", "28", $ctx.v27to40, 129, 129, 26, 50, 15371, $a([390, 728, 1050, 1260]), $a([3, 10, 3, 23, 4, 31, 11, 31])]), $a(["full", "29", $ctx.v27to40, 133, 133, 30, 54, 16411, $a([420, 784, 1140, 1350]), $a([7, 7, 21, 7, 1, 37, 19, 26])]), $a(["full", "30", $ctx.v27to40, 137, 137, 26, 52, 17483, $a([450, 812, 1200, 1440]), $a([5, 10, 19, 10, 15, 25, 23, 25])]), $a(["full", "31", $ctx.v27to40, 141, 141, 30, 56, 18587, $a([480, 868, 1290, 1530]), $a([13, 3, 2, 29, 42, 1, 23, 28])]), $a(["full", "32", $ctx.v27to40, 145, 145, 34, 60, 19723, $a([510, 924, 1350, 1620]), $a([17, 0, 10, 23, 10, 35, 19, 35])]), $a(["full", "33", $ctx.v27to40, 149, 149, 30, 58, 20891, $a([540, 980, 1440, 1710]), $a([17, 1, 14, 21, 29, 19, 11, 46])]), $a(["full", "34", $ctx.v27to40, 153, 153, 34, 62, 22091, $a([570, 1036, 1530, 1800]), $a([13, 6, 14, 23, 44, 7, 59, 1])]), $a(["full", "35", $ctx.v27to40, 157, 157, 30, 54, 23008, $a([570, 1064, 1590, 1890]), $a([12, 7, 12, 26, 39, 14, 22, 41])]), $a(["full", "36", $ctx.v27to40, 161, 161, 24, 50, 24272, $a([600, 1120, 1680, 1980]), $a([6, 14, 6, 34, 46, 10, 2, 64])]), $a(["full", "37", $ctx.v27to40, 165, 165, 28, 54, 25568, $a([630, 1204, 1770, 2100]), $a([17, 4, 29, 14, 49, 10, 24, 46])]), $a(["full", "38", $ctx.v27to40, 169, 169, 32, 58, 26896, $a([660, 1260, 1860, 2220]), $a([4, 18, 13, 32, 48, 14, 42, 32])]), $a(["full", "39", $ctx.v27to40, 173, 173, 26, 54, 28256, $a([720, 1316, 1950, 2310]), $a([20, 4, 40, 7, 43, 22, 10, 67])]), $a(["full", "40", $ctx.v27to40, 177, 177, 30, 58, 29648, $a([750, 1372, 2040, 2430]), $a([19, 6, 18, 31, 34, 34, 20, 61])]), $a(["rmqr", "R7x43", $ctx.vR7x43, 7, 43, 22, 99, 104, $a([99, 7, 99, 10]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x59", $ctx.vR7x59, 7, 59, 20, 40, 171, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x77", $ctx.vR7x77, 7, 77, 26, 52, 261, $a([99, 12, 99, 22]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x99", $ctx.vR7x99, 7, 99, 24, 50, 358, $a([99, 16, 99, 30]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x139", $ctx.vR7x139, 7, 139, 28, 56, 545, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R9x43", $ctx.vR9x43, 9, 43, 22, 99, 170, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R9x59", $ctx.vR9x59, 9, 59, 20, 40, 267, $a([99, 12, 99, 22]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R9x77", $ctx.vR9x77, 9, 77, 26, 52, 393, $a([99, 18, 99, 32]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R9x99", $ctx.vR9x99, 9, 99, 24, 50, 532, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R9x139", $ctx.vR9x139, 9, 139, 28, 56, 797, $a([99, 36, 99, 66]), $a([-1, -1, 1, 1, -1, -1, 3, 0])]), $a(["rmqr", "R11x27", $ctx.vR11x27, 11, 27, 98, 99, 122, $a([99, 8, 99, 10]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R11x43", $ctx.vR11x43, 11, 43, 22, 99, 249, $a([99, 12, 99, 20]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R11x59", $ctx.vR11x59, 11, 59, 20, 40, 376, $a([99, 16, 99, 32]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R11x77", $ctx.vR11x77, 11, 77, 26, 52, 538, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R11x99", $ctx.vR11x99, 11, 99, 24, 50, 719, $a([99, 32, 99, 60]), $a([-1, -1, 1, 1, -1, -1, 1, 1])]), $a(["rmqr", "R11x139", $ctx.vR11x139, 11, 139, 28, 56, 1062, $a([99, 48, 99, 90]), $a([-1, -1, 2, 0, -1, -1, 3, 0])]), $a(["rmqr", "R13x27", $ctx.vR13x27, 13, 27, 98, 99, 172, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R13x43", $ctx.vR13x43, 13, 43, 22, 99, 329, $a([99, 14, 99, 28]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R13x59", $ctx.vR13x59, 13, 59, 20, 40, 486, $a([99, 22, 99, 40]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R13x77", $ctx.vR13x77, 13, 77, 26, 52, 684, $a([99, 32, 99, 56]), $a([-1, -1, 1, 1, -1, -1, 1, 1])]), $a(["rmqr", "R13x99", $ctx.vR13x99, 13, 99, 24, 50, 907, $a([99, 40, 99, 78]), $a([-1, -1, 1, 1, -1, -1, 1, 2])]), $a(["rmqr", "R13x139", $ctx.vR13x139, 13, 139, 28, 56, 1328, $a([99, 60, 99, 112]), $a([-1, -1, 2, 1, -1, -1, 2, 2])]), $a(["rmqr", "R15x43", $ctx.vR15x43, 15, 43, 22, 99, 409, $a([99, 18, 99, 36]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R15x59", $ctx.vR15x59, 15, 59, 20, 40, 596, $a([99, 26, 99, 48]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R15x77", $ctx.vR15x77, 15, 77, 26, 52, 830, $a([99, 36, 99, 72]), $a([-1, -1, 1, 1, -1, -1, 2, 1])]), $a(["rmqr", "R15x99", $ctx.vR15x99, 15, 99, 24, 50, 1095, $a([99, 48, 99, 88]), $a([-1, -1, 2, 0, -1, -1, 4, 0])]), $a(["rmqr", "R15x139", $ctx.vR15x139, 15, 139, 28, 56, 1594, $a([99, 72, 99, 130]), $a([-1, -1, 2, 1, -1, -1, 1, 4])]), $a(["rmqr", "R17x43", $ctx.vR17x43, 17, 43, 22, 99, 489, $a([99, 22, 99, 40]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R17x59", $ctx.vR17x59, 17, 59, 20, 40, 706, $a([99, 32, 99, 60]), $a([-1, -1, 2, 0, -1, -1, 2, 0])]), $a(["rmqr", "R17x77", $ctx.vR17x77, 17, 77, 26, 52, 976, $a([99, 44, 99, 84]), $a([-1, -1, 2, 0, -1, -1, 1, 2])]), $a(["rmqr", "R17x99", $ctx.vR17x99, 17, 99, 24, 50, 1283, $a([99, 60, 99, 104]), $a([-1, -1, 2, 1, -1, -1, 4, 0])]), $a(["rmqr", "R17x139", $ctx.vR17x139, 17, 139, 28, 56, 1860, $a([99, 80, 99, 156]), $a([-1, -1, 4, 0, -1, -1, 2, 4])])]); //#19816
            for (var _KH in $ctx) {
                $ctx.hasOwnProperty(_KH) && (bwipp_qrcode.$ctx[_KH] = $ctx[_KH]);
            } //#19816
            bwipp_qrcode.$ctx._19817 = 1; //#19816
        })(); //#19816
    } //#19816
    $k[$j++] = 'eclval'; //#19819
    $search("LMQH", $1.eclevel); //#19819
    $j--; //#19819
    var _KJ = $k[--$j]; //#19819
    var _KK = $k[--$j]; //#19819
    $k[$j++] = _KJ.length; //#19819
    $k[$j++] = _KK; //#19819
    $j--; //#19819
    var _KL = $k[--$j]; //#19819
    var _KM = $k[--$j]; //#19819
    $k[$j++] = _KL; //#19819
    $k[$j++] = _KM; //#19819
    $j--; //#19819
    var _KN = $k[--$j]; //#19819
    $1[$k[--$j]] = _KN; //#19819
    for (var _KR = 0, _KQ = $1.metrics.length - 1; _KR <= _KQ; _KR += 1) { //#19858
        $1.i = _KR; //#19821
        $1.m = $get($1.metrics, $1.i); //#19822
        $1.frmt = $get($1.m, 0); //#19823
        $1.vers = $get($1.m, 1); //#19824
        $1.vergrp = $get($1.m, 2); //#19825
        $1.verind = $1.i - 44; //#19826
        $1.rows = $get($1.m, 3); //#19827
        $1.cols = $get($1.m, 4); //#19828
        $1.asp2 = $get($1.m, 5); //#19829
        $1.asp3 = $get($1.m, 6); //#19830
        $1.nmod = $get($1.m, 7); //#19831
        $1.ncws = ~~($1.nmod / 8); //#19832
        $1.rbit = $1.nmod % 8; //#19833
        $1.lc4b = false; //#19834
        if ($eq($1.vers, "M1") || $eq($1.vers, "M3")) { //#19839
            $1.ncws = $1.ncws + 1; //#19836
            $1.rbit = 0; //#19837
            $1.lc4b = true; //#19838
        } //#19838
        $1.ecws = $get($get($1.m, 8), $1.eclval); //#19840
        $1.dcws = $f($1.ncws - $1.ecws); //#19841
        var _Kz = $1.lc4b ? 4 : 0; //#19842
        $1.dmod = $f(($1.dcws * 8) - _Kz); //#19842
        $1.ecb1 = $get($get($1.m, 9), $1.eclval * 2); //#19843
        $1.ecb2 = $get($get($1.m, 9), $f(($1.eclval * 2) + 1)); //#19844
        $1.okay = true; //#19845
        if ($ne($1.format, $1.frmt)) { //#19846
            $1.okay = false; //#19846
        } //#19846
        if ($eq($1.frmt, "micro") && $1.fnc1first) { //#19847
            $1.okay = false; //#19847
        } //#19847
        if ($ne($1.version, "unset") && $ne($1.version, $1.vers)) { //#19848
            $1.okay = false; //#19848
        } //#19848
        if (($1.ecb1 == -1) || ($1.ecb2 == -1)) { //#19849
            $1.okay = false; //#19849
        } //#19849
        $1.verbits = $get($1.msgbits, $1.vergrp); //#19850
        if ($1.verbits == -1) { //#19854
            $1.okay = false; //#19852
        } else { //#19854
            if ($1.verbits.length > $1.dmod) { //#19854
                $1.okay = false; //#19854
            } //#19854
        } //#19854
        $1.term = $geti("000000000", 0, $get($1.termlens, $1.vergrp)); //#19856
        if ($1.okay) { //#19857
            break; //#19857
        } //#19857
    } //#19857
    if (!$1.okay) { //#19862
        $k[$j++] = 'bwipp.qrcodeNoValidSymbol#19861'; //#19861
        $k[$j++] = "Maximum length exceeded or invalid content"; //#19861
        bwipp_raiseerror(); //#19861
    } //#19861
    $1.format = $1.frmt; //#19864
    $1.version = $1.vers; //#19865
    $1.msgbits = $1.verbits; //#19866
    $1.dcpb = ~~($1.dcws / $f($1.ecb1 + $1.ecb2)); //#19867
    $1.ecpb = (~~($1.ncws / $f($1.ecb1 + $1.ecb2))) - $1.dcpb; //#19868
    var _Ld = $1.term; //#19871
    var _Le = $1.dmod; //#19871
    var _Lf = $1.msgbits; //#19871
    var _Lg = $1.term; //#19871
    var _Lh = _Lg.length; //#19871
    var _Li = $f(_Le - _Lf.length); //#19871
    if ($f(_Le - _Lf.length) > _Lg.length) { //#19871
        var _ = _Lh; //#19871
        _Lh = _Li; //#19871
        _Li = _; //#19871
    } //#19871
    $1.term = $geti(_Ld, 0, _Li); //#19871
    var _Lm = $s($1.msgbits.length + $1.term.length); //#19872
    $puti(_Lm, 0, $1.msgbits); //#19873
    $puti(_Lm, $1.msgbits.length, $1.term); //#19874
    $1.msgbits = _Lm; //#19875
    $1.pad = $s($1.dmod); //#19878
    for (var _Lu = 0, _Lt = $1.pad.length - 1; _Lu <= _Lt; _Lu += 1) { //#19879
        $put($1.pad, _Lu, 48); //#19879
    } //#19879
    $puti($1.pad, 0, $1.msgbits); //#19880
    $1.padnum = 0; //#19881
    var _M1 = $1.lc4b ? 5 : 1; //#19882
    for (var _M3 = ~~(Math.ceil($1.msgbits.length / 8) * 8), _M2 = $f($1.dmod - _M1); _M3 <= _M2; _M3 += 8) { //#19885
        $puti($1.pad, _M3, $get($1.padstrs, $1.padnum)); //#19883
        $1.padnum = ($1.padnum + 1) % 2; //#19884
    } //#19884
    $1.cws = $a($1.dcws); //#19888
    for (var _MD = 0, _MC = $1.cws.length - 1; _MD <= _MC; _MD += 1) { //#19900
        $1.c = _MD; //#19890
        $1.bpcw = 8; //#19891
        if ($1.lc4b && ($1.c == ($1.cws.length - 1))) { //#19892
            $1.bpcw = 4; //#19892
        } //#19892
        $1.cwb = $geti($1.pad, $1.c * 8, $1.bpcw); //#19893
        $1.cw = 0; //#19894
        for (var _MN = 0, _MM = $1.bpcw - 1; _MN <= _MM; _MN += 1) { //#19898
            $1.i = _MN; //#19896
            $1.cw = $f($1.cw + ((~~(Math.pow(2, ($1.bpcw - $1.i) - 1))) * $f($get($1.cwb, $1.i) - 48))); //#19897
        } //#19897
        $put($1.cws, $1.c, $1.cw); //#19899
    } //#19899
    if ($1.lc4b) { //#19903
        var _MY = $1.cws; //#19903
        var _MZ = $1.cws; //#19903
        $put(_MY, _MZ.length - 1, $get(_MY, _MZ.length - 1) << 4); //#19903
    } //#19903
    var _Mc = $get($1.options, 'debugcws') !== undefined; //#19905
    if (_Mc) { //#19905
        $k[$j++] = 'bwipp.debugcws#19905'; //#19905
        $k[$j++] = $1.cws; //#19905
        bwipp_raiseerror(); //#19905
    } //#19905
    if (!bwipp_qrcode.$ctx._19912) { //#19912
        (function() { //#19912
            var $ctx = Object.create($1); //#19912
            $k[$j++] = Infinity; //#19909
            $k[$j++] = 1; //#19909
            for (var _Me = 0, _Mf = 255; _Me < _Mf; _Me++) { //#19909
                var _Mg = $k[--$j]; //#19909
                var _Mh = _Mg * 2; //#19909
                $k[$j++] = _Mg; //#19909
                $k[$j++] = _Mh; //#19909
                if (_Mh >= 256) { //#19909
                    var _Mi = $k[--$j]; //#19909
                    $k[$j++] = _Mi ^ 285; //#19909
                } //#19909
            } //#19909
            $ctx.rsalog = $a(); //#19909
            $ctx.rslog = $a(256); //#19910
            for (var _Ml = 1; _Ml <= 255; _Ml += 1) { //#19911
                $put($ctx.rslog, $get($ctx.rsalog, _Ml), _Ml); //#19911
            } //#19911
            for (var _Mp in $ctx) {
                $ctx.hasOwnProperty(_Mp) && (bwipp_qrcode.$ctx[_Mp] = $ctx[_Mp]);
            } //#19911
            bwipp_qrcode.$ctx._19912 = 1; //#19911
        })(); //#19911
    } //#19911
    $1.rsprod = function() {
        var _Mq = $k[--$j]; //#19916
        var _Mr = $k[--$j]; //#19916
        $k[$j++] = _Mr; //#19920
        $k[$j++] = _Mq; //#19920
        if ((_Mq != 0) && (_Mr != 0)) { //#19919
            var _Mu = $get($1.rslog, $k[--$j]); //#19917
            var _Mz = $get($1.rsalog, $f(_Mu + $get($1.rslog, $k[--$j])) % 255); //#19917
            $k[$j++] = _Mz; //#19917
        } else { //#19919
            $j -= 2; //#19919
            $k[$j++] = 0; //#19919
        } //#19919
    }; //#19919
    $k[$j++] = Infinity; //#19924
    $k[$j++] = 1; //#19924
    for (var _N1 = 0, _N2 = $1.ecpb; _N1 < _N2; _N1++) { //#19924
        $k[$j++] = 0; //#19924
    } //#19924
    $1.coeffs = $a(); //#19924
    for (var _N6 = 0, _N5 = $1.ecpb - 1; _N6 <= _N5; _N6 += 1) { //#19933
        $1.i = _N6; //#19926
        $put($1.coeffs, $1.i + 1, $get($1.coeffs, $1.i)); //#19927
        for (var _ND = $1.i; _ND >= 1; _ND -= 1) { //#19931
            $1.j = _ND; //#19929
            $k[$j++] = $1.coeffs; //#19930
            $k[$j++] = $1.j; //#19930
            $k[$j++] = $get($1.coeffs, $1.j - 1); //#19930
            $k[$j++] = $get($1.coeffs, $1.j); //#19930
            $k[$j++] = $get($1.rsalog, $1.i); //#19930
            $1.rsprod(); //#19930
            var _NP = $k[--$j]; //#19930
            var _NQ = $k[--$j]; //#19930
            var _NR = $k[--$j]; //#19930
            $put($k[--$j], _NR, $xo(_NQ, _NP)); //#19930
        } //#19930
        $k[$j++] = $1.coeffs; //#19932
        $k[$j++] = 0; //#19932
        $k[$j++] = $get($1.coeffs, 0); //#19932
        $k[$j++] = $get($1.rsalog, $1.i); //#19932
        $1.rsprod(); //#19932
        var _NZ = $k[--$j]; //#19932
        var _Na = $k[--$j]; //#19932
        $put($k[--$j], _Na, _NZ); //#19932
    } //#19932
    $1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); //#19934
    $1.rscodes = function() {
        $1.rscws = $k[--$j]; //#19938
        $1.rsnd = $1.rscws.length; //#19939
        $k[$j++] = Infinity; //#19940
        $forall($1.rscws); //#19940
        for (var _Nj = 0, _Nk = $1.ecpb; _Nj < _Nk; _Nj++) { //#19940
            $k[$j++] = 0; //#19940
        } //#19940
        $1.rscws = $a(); //#19940
        for (var _No = 0, _Nn = $1.rsnd - 1; _No <= _Nn; _No += 1) { //#19948
            $1.m = _No; //#19942
            $1.k = $get($1.rscws, $1.m); //#19943
            for (var _Nu = 0, _Nt = $1.ecpb - 1; _Nu <= _Nt; _Nu += 1) { //#19947
                $1.j = _Nu; //#19945
                $k[$j++] = $1.rscws; //#19946
                $k[$j++] = ($1.m + $1.j) + 1; //#19946
                $k[$j++] = $get($1.coeffs, ($1.ecpb - $1.j) - 1); //#19946
                $k[$j++] = $1.k; //#19946
                $1.rsprod(); //#19946
                var _O7 = $k[--$j]; //#19946
                var _O8 = $k[--$j]; //#19946
                $put($k[--$j], _O8, $xo(_O7, $get($1.rscws, ($1.m + $1.j) + 1))); //#19946
            } //#19946
        } //#19946
        $k[$j++] = $geti($1.rscws, $1.rsnd, $1.ecpb); //#19949
    }; //#19949
    $1.dcwsb = $a($f($1.ecb1 + $1.ecb2)); //#19953
    $1.ecwsb = $a($f($1.ecb1 + $1.ecb2)); //#19954
    for (var _OM = 0, _OL = $f($1.ecb1 - 1); _OM <= _OL; _OM += 1) { //#19959
        $1.i = _OM; //#19956
        $put($1.dcwsb, $1.i, $geti($1.cws, $1.i * $1.dcpb, $1.dcpb)); //#19957
        $k[$j++] = $1.ecwsb; //#19958
        $k[$j++] = $1.i; //#19958
        $k[$j++] = $get($1.dcwsb, $1.i); //#19958
        $1.rscodes(); //#19958
        var _OZ = $k[--$j]; //#19958
        var _Oa = $k[--$j]; //#19958
        $put($k[--$j], _Oa, _OZ); //#19958
    } //#19958
    for (var _Oe = 0, _Od = $f($1.ecb2 - 1); _Oe <= _Od; _Oe += 1) { //#19964
        $1.i = _Oe; //#19961
        $put($1.dcwsb, $f($1.ecb1 + $1.i), $geti($1.cws, $f(($1.ecb1 * $1.dcpb) + ($1.i * ($1.dcpb + 1))), $1.dcpb + 1)); //#19962
        $k[$j++] = $1.ecwsb; //#19963
        $k[$j++] = $f($1.ecb1 + $1.i); //#19963
        $k[$j++] = $get($1.dcwsb, $f($1.ecb1 + $1.i)); //#19963
        $1.rscodes(); //#19963
        var _Ow = $k[--$j]; //#19963
        var _Ox = $k[--$j]; //#19963
        $put($k[--$j], _Ox, _Ow); //#19963
    } //#19963
    $1.cws = $a($1.ncws); //#19967
    $1.cw = 0; //#19968
    for (var _P3 = 0, _P2 = $1.dcpb; _P3 <= _P2; _P3 += 1) { //#19978
        $1.i = _P3; //#19970
        for (var _P7 = 0, _P6 = $f($f($1.ecb1 + $1.ecb2) - 1); _P7 <= _P6; _P7 += 1) { //#19977
            $1.j = _P7; //#19972
            if ($1.i < $get($1.dcwsb, $1.j).length) { //#19976
                $put($1.cws, $1.cw, $get($get($1.dcwsb, $1.j), $1.i)); //#19974
                $1.cw = $1.cw + 1; //#19975
            } //#19975
        } //#19975
    } //#19975
    for (var _PM = 0, _PL = $1.ecpb - 1; _PM <= _PL; _PM += 1) { //#19986
        $1.i = _PM; //#19980
        for (var _PQ = 0, _PP = $f($f($1.ecb1 + $1.ecb2) - 1); _PQ <= _PP; _PQ += 1) { //#19985
            $1.j = _PQ; //#19982
            $put($1.cws, $1.cw, $get($get($1.ecwsb, $1.j), $1.i)); //#19983
            $1.cw = $1.cw + 1; //#19984
        } //#19984
    } //#19984
    if ($1.rbit > 0) { //#19994
        $1.pad = $a($1.cws.length + 1); //#19990
        $puti($1.pad, 0, $1.cws); //#19991
        $put($1.pad, $1.pad.length - 1, 0); //#19992
        $1.cws = $1.pad; //#19993
    } //#19993
    if ($1.lc4b) { //#20005
        var _Pi = $1.cws; //#19998
        var _Pj = $1.dcws; //#19998
        $put(_Pi, $f(_Pj - 1), $get(_Pi, $f(_Pj - 1)) >>> 4); //#19998
        for (var _Po = $f($1.dcws - 1), _Pn = $1.ncws - 2; _Po <= _Pn; _Po += 1) { //#20003
            $1.i = _Po; //#20000
            $put($1.cws, $1.i, ($get($1.cws, $1.i) & 15) << 4); //#20001
            $put($1.cws, $1.i, (($get($1.cws, $1.i + 1) >>> 4) & 15) | $get($1.cws, $1.i)); //#20002
        } //#20002
        $put($1.cws, $1.ncws - 1, ($get($1.cws, $1.ncws - 1) & 15) << 4); //#20004
    } //#20004
    var _Q8 = $get($1.options, 'debugecc') !== undefined; //#20007
    if (_Q8) { //#20007
        $k[$j++] = 'bwipp.debugecc#20007'; //#20007
        $k[$j++] = $1.cws; //#20007
        bwipp_raiseerror(); //#20007
    } //#20007
    $k[$j++] = Infinity; //#20010
    for (var _QC = 0, _QD = $1.rows * $1.cols; _QC < _QD; _QC++) { //#20010
        $k[$j++] = -1; //#20010
    } //#20010
    $1.pixs = $a(); //#20010
    $1.qmv = function() {
        var _QG = $k[--$j]; //#20011
        var _QH = $k[--$j]; //#20011
        $k[$j++] = $f(_QH + (_QG * $1.cols)); //#20011
    }; //#20011
    if ($eq($1.format, "full")) { //#20020
        for (var _QL = 8, _QK = $f($1.cols - 9); _QL <= _QK; _QL += 1) { //#20019
            $1.i = _QL; //#20016
            $k[$j++] = $1.pixs; //#20017
            $k[$j++] = $1.i; //#20017
            $k[$j++] = 6; //#20017
            $1.qmv(); //#20017
            var _QP = $k[--$j]; //#20017
            $put($k[--$j], _QP, ($1.i + 1) % 2); //#20017
            $k[$j++] = $1.pixs; //#20018
            $k[$j++] = 6; //#20018
            $k[$j++] = $1.i; //#20018
            $1.qmv(); //#20018
            var _QU = $k[--$j]; //#20018
            $put($k[--$j], _QU, ($1.i + 1) % 2); //#20018
        } //#20018
    } //#20018
    if ($eq($1.format, "micro")) { //#20027
        for (var _QZ = 8, _QY = $f($1.cols - 1); _QZ <= _QY; _QZ += 1) { //#20026
            $1.i = _QZ; //#20023
            $k[$j++] = $1.pixs; //#20024
            $k[$j++] = $1.i; //#20024
            $k[$j++] = 0; //#20024
            $1.qmv(); //#20024
            var _Qd = $k[--$j]; //#20024
            $put($k[--$j], _Qd, ($1.i + 1) % 2); //#20024
            $k[$j++] = $1.pixs; //#20025
            $k[$j++] = 0; //#20025
            $k[$j++] = $1.i; //#20025
            $1.qmv(); //#20025
            var _Qi = $k[--$j]; //#20025
            $put($k[--$j], _Qi, ($1.i + 1) % 2); //#20025
        } //#20025
    } //#20025
    if ($eq($1.format, "rmqr")) { //#20046
        for (var _Qn = 3, _Qm = $f($1.cols - 4); _Qn <= _Qm; _Qn += 1) { //#20033
            $1.i = _Qn; //#20030
            $k[$j++] = $1.pixs; //#20031
            $k[$j++] = $1.i; //#20031
            $k[$j++] = 0; //#20031
            $1.qmv(); //#20031
            var _Qr = $k[--$j]; //#20031
            $put($k[--$j], _Qr, ($1.i + 1) % 2); //#20031
            $k[$j++] = $1.pixs; //#20032
            $k[$j++] = $1.i; //#20032
            $k[$j++] = $f($1.rows - 1); //#20032
            $1.qmv(); //#20032
            var _Qx = $k[--$j]; //#20032
            $put($k[--$j], _Qx, ($1.i + 1) % 2); //#20032
        } //#20032
        for (var _R1 = 3, _R0 = $f($1.rows - 4); _R1 <= _R0; _R1 += 1) { //#20038
            $1.i = _R1; //#20035
            $k[$j++] = $1.pixs; //#20036
            $k[$j++] = 0; //#20036
            $k[$j++] = $1.i; //#20036
            $1.qmv(); //#20036
            var _R5 = $k[--$j]; //#20036
            $put($k[--$j], _R5, ($1.i + 1) % 2); //#20036
            $k[$j++] = $1.pixs; //#20037
            $k[$j++] = $f($1.cols - 1); //#20037
            $k[$j++] = $1.i; //#20037
            $1.qmv(); //#20037
            var _RB = $k[--$j]; //#20037
            $put($k[--$j], _RB, ($1.i + 1) % 2); //#20037
        } //#20037
        for (var _RI = $f($1.asp2 - 1), _RJ = $f($1.asp3 - $1.asp2), _RH = $f($1.cols - 13); _RJ < 0 ? _RI >= _RH : _RI <= _RH; _RI += _RJ) { //#20045
            $1.i = _RI; //#20040
            for (var _RM = 3, _RL = $f($1.rows - 4); _RM <= _RL; _RM += 1) { //#20044
                $1.j = _RM; //#20042
                $k[$j++] = $1.pixs; //#20043
                $k[$j++] = $1.i; //#20043
                $k[$j++] = $1.j; //#20043
                $1.qmv(); //#20043
                var _RR = $k[--$j]; //#20043
                $put($k[--$j], _RR, ($1.j + 1) % 2); //#20043
            } //#20043
        } //#20043
    } //#20043
    if (!bwipp_qrcode.$ctx._20096) { //#20096
        (function() { //#20096
            var $ctx = Object.create($1); //#20096
            $ctx.fpat = $a([$a([1, 1, 1, 1, 1, 1, 1, 0]), $a([1, 0, 0, 0, 0, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 0, 0, 0, 0, 1, 0]), $a([1, 1, 1, 1, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); //#20059
            $ctx.fsubpat = $a([$a([1, 1, 1, 1, 1, 9, 9, 9]), $a([1, 0, 0, 0, 1, 9, 9, 9]), $a([1, 0, 1, 0, 1, 9, 9, 9]), $a([1, 0, 0, 0, 1, 9, 9, 9]), $a([1, 1, 1, 1, 1, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); //#20069
            $ctx.fcorpat = $a([$a([1, 1, 1, 9, 9, 9, 9, 9]), $a([1, 0, 9, 9, 9, 9, 9, 9]), $a([1, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); //#20079
            $ctx.fnullpat = $a([$a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); //#20089
            var _SI = new Map([
                ["full", $a([$ctx.fpat, $ctx.fpat, $ctx.fpat, $ctx.fnullpat])],
                ["micro", $a([$ctx.fpat, $ctx.fnullpat, $ctx.fnullpat, $ctx.fnullpat])],
                ["rmqr", $a([$ctx.fpat, $ctx.fcorpat, $ctx.fcorpat, $ctx.fsubpat])]
            ]); //#20094
            $ctx.fpatmap = _SI; //#20095
            for (var _SJ in $ctx) {
                $ctx.hasOwnProperty(_SJ) && (bwipp_qrcode.$ctx[_SJ] = $ctx[_SJ]);
            } //#20095
            bwipp_qrcode.$ctx._20096 = 1; //#20095
        })(); //#20095
    } //#20095
    $1.fpats = $get($1.fpatmap, $1.format); //#20097
    for (var _SN = 0; _SN <= 7; _SN += 1) { //#20111
        $1.y = _SN; //#20099
        for (var _SO = 0; _SO <= 7; _SO += 1) { //#20110
            $1.x = _SO; //#20101
            $1.fpb0 = $get($get($get($1.fpats, 0), $1.y), $1.x); //#20102
            $1.fpb1 = $get($get($get($1.fpats, 1), $1.y), $1.x); //#20103
            $1.fpb2 = $get($get($get($1.fpats, 2), $1.y), $1.x); //#20104
            $1.fpb3 = $get($get($get($1.fpats, 3), $1.y), $1.x); //#20105
            if (($1.fpb0 != 9) && ($1.y < $1.rows)) { //#20106
                $k[$j++] = $1.pixs; //#20106
                $k[$j++] = $1.x; //#20106
                $k[$j++] = $1.y; //#20106
                $1.qmv(); //#20106
                var _Su = $k[--$j]; //#20106
                $put($k[--$j], _Su, $1.fpb0); //#20106
            } //#20106
            if ($1.fpb1 != 9) { //#20107
                $k[$j++] = $1.pixs; //#20107
                $k[$j++] = $f($f($1.cols - $1.x) - 1); //#20107
                $k[$j++] = $1.y; //#20107
                $1.qmv(); //#20107
                var _T2 = $k[--$j]; //#20107
                $put($k[--$j], _T2, $1.fpb1); //#20107
            } //#20107
            if ($1.fpb2 != 9) { //#20108
                $k[$j++] = $1.pixs; //#20108
                $k[$j++] = $1.x; //#20108
                $k[$j++] = $f($f($1.rows - $1.y) - 1); //#20108
                $1.qmv(); //#20108
                var _TA = $k[--$j]; //#20108
                $put($k[--$j], _TA, $1.fpb2); //#20108
            } //#20108
            if ($1.fpb3 != 9) { //#20109
                $k[$j++] = $1.pixs; //#20109
                $k[$j++] = $f($f($1.cols - $1.x) - 1); //#20109
                $k[$j++] = $f($f($1.rows - $1.y) - 1); //#20109
                $1.qmv(); //#20109
                var _TJ = $k[--$j]; //#20109
                $put($k[--$j], _TJ, $1.fpb3); //#20109
            } //#20109
        } //#20109
    } //#20109
    if (!bwipp_qrcode.$ctx._20129) { //#20129
        (function() { //#20129
            var $ctx = Object.create($1); //#20129
            $ctx.algnpatfull = $a([$a([1, 1, 1, 1, 1]), $a([1, 0, 0, 0, 1]), $a([1, 0, 1, 0, 1]), $a([1, 0, 0, 0, 1]), $a([1, 1, 1, 1, 1])]); //#20121
            $ctx.algnpatrmqr = $a([$a([1, 1, 1, 9, 9]), $a([1, 0, 1, 9, 9]), $a([1, 1, 1, 9, 9]), $a([9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9])]); //#20128
            for (var _TX in $ctx) {
                $ctx.hasOwnProperty(_TX) && (bwipp_qrcode.$ctx[_TX] = $ctx[_TX]);
            } //#20128
            bwipp_qrcode.$ctx._20129 = 1; //#20128
        })(); //#20128
    } //#20128
    $1.putalgnpat = function() {
        $1.py = $k[--$j]; //#20132
        $1.px = $k[--$j]; //#20133
        for (var _Ta = 0; _Ta <= 4; _Ta += 1) { //#20143
            $1.pb = _Ta; //#20135
            for (var _Tb = 0; _Tb <= 4; _Tb += 1) { //#20142
                $1.pa = _Tb; //#20137
                $1.algnb = $get($get($1.algnpat, $1.pb), $1.pa); //#20138
                if ($1.algnb != 9) { //#20141
                    $k[$j++] = $1.pixs; //#20140
                    $k[$j++] = $f($1.px + $1.pa); //#20140
                    $k[$j++] = $f($1.py + $1.pb); //#20140
                    $1.qmv(); //#20140
                    var _To = $k[--$j]; //#20140
                    $put($k[--$j], _To, $1.algnb); //#20140
                } //#20140
            } //#20140
        } //#20140
    }; //#20140
    if ($eq($1.format, "full")) { //#20159
        $1.algnpat = $1.algnpatfull; //#20146
        for (var _Tx = $f($1.asp2 - 2), _Ty = $f($1.asp3 - $1.asp2), _Tw = $f($1.cols - 13); _Ty < 0 ? _Tx >= _Tw : _Tx <= _Tw; _Tx += _Ty) { //#20151
            $1.i = _Tx; //#20148
            $k[$j++] = $1.i; //#20149
            $k[$j++] = 4; //#20149
            $1.putalgnpat(); //#20149
            $k[$j++] = 4; //#20150
            $k[$j++] = $1.i; //#20150
            $1.putalgnpat(); //#20150
        } //#20150
        for (var _U6 = $f($1.asp2 - 2), _U7 = $f($1.asp3 - $1.asp2), _U5 = $f($1.cols - 9); _U7 < 0 ? _U6 >= _U5 : _U6 <= _U5; _U6 += _U7) { //#20158
            $1.x = _U6; //#20153
            for (var _UD = $f($1.asp2 - 2), _UE = $f($1.asp3 - $1.asp2), _UC = $f($1.rows - 9); _UE < 0 ? _UD >= _UC : _UD <= _UC; _UD += _UE) { //#20157
                $1.y = _UD; //#20155
                $k[$j++] = $1.x; //#20156
                $k[$j++] = $1.y; //#20156
                $1.putalgnpat(); //#20156
            } //#20156
        } //#20156
    } //#20156
    if ($eq($1.format, "rmqr")) { //#20167
        $1.algnpat = $1.algnpatrmqr; //#20161
        for (var _UO = $f($1.asp2 - 2), _UP = $f($1.asp3 - $1.asp2), _UN = $f($1.cols - 13); _UP < 0 ? _UO >= _UN : _UO <= _UN; _UO += _UP) { //#20166
            $1.i = _UO; //#20163
            $k[$j++] = $1.i; //#20164
            $k[$j++] = 0; //#20164
            $1.putalgnpat(); //#20164
            $k[$j++] = $1.i; //#20165
            $k[$j++] = $f($1.rows - 3); //#20165
            $1.putalgnpat(); //#20165
        } //#20165
    } //#20165
    if (!bwipp_qrcode.$ctx._20176) { //#20176
        (function() { //#20176
            var $ctx = Object.create($1); //#20176
            $ctx.formatmapmicro = $a([$a([$a([1, 8])]), $a([$a([2, 8])]), $a([$a([3, 8])]), $a([$a([4, 8])]), $a([$a([5, 8])]), $a([$a([6, 8])]), $a([$a([7, 8])]), $a([$a([8, 8])]), $a([$a([8, 7])]), $a([$a([8, 6])]), $a([$a([8, 5])]), $a([$a([8, 4])]), $a([$a([8, 3])]), $a([$a([8, 2])]), $a([$a([8, 1])])]); //#20175
            for (var _Uy in $ctx) {
                $ctx.hasOwnProperty(_Uy) && (bwipp_qrcode.$ctx[_Uy] = $ctx[_Uy]);
            } //#20175
            bwipp_qrcode.$ctx._20176 = 1; //#20175
        })(); //#20175
    } //#20175
    var _XS = new Map([
        ["full", $a([$a([$a([0, 8]), $a([8, $f($1.cols - 1)])]), $a([$a([1, 8]), $a([8, $f($1.cols - 2)])]), $a([$a([2, 8]), $a([8, $f($1.cols - 3)])]), $a([$a([3, 8]), $a([8, $f($1.cols - 4)])]), $a([$a([4, 8]), $a([8, $f($1.cols - 5)])]), $a([$a([5, 8]), $a([8, $f($1.cols - 6)])]), $a([$a([7, 8]), $a([8, $f($1.cols - 7)])]), $a([$a([8, 8]), $a([$f($1.cols - 8), 8])]), $a([$a([8, 7]), $a([$f($1.cols - 7), 8])]), $a([$a([8, 5]), $a([$f($1.cols - 6), 8])]), $a([$a([8, 4]), $a([$f($1.cols - 5), 8])]), $a([$a([8, 3]), $a([$f($1.cols - 4), 8])]), $a([$a([8, 2]), $a([$f($1.cols - 3), 8])]), $a([$a([8, 1]), $a([$f($1.cols - 2), 8])]), $a([$a([8, 0]), $a([$f($1.cols - 1), 8])])])],
        ["micro", $1.formatmapmicro],
        ["rmqr", $a([$a([$a([11, 3]), $a([$f($1.cols - 3), $f($1.rows - 6)])]), $a([$a([11, 2]), $a([$f($1.cols - 4), $f($1.rows - 6)])]), $a([$a([11, 1]), $a([$f($1.cols - 5), $f($1.rows - 6)])]), $a([$a([10, 5]), $a([$f($1.cols - 6), $f($1.rows - 2)])]), $a([$a([10, 4]), $a([$f($1.cols - 6), $f($1.rows - 3)])]), $a([$a([10, 3]), $a([$f($1.cols - 6), $f($1.rows - 4)])]), $a([$a([10, 2]), $a([$f($1.cols - 6), $f($1.rows - 5)])]), $a([$a([10, 1]), $a([$f($1.cols - 6), $f($1.rows - 6)])]), $a([$a([9, 5]), $a([$f($1.cols - 7), $f($1.rows - 2)])]), $a([$a([9, 4]), $a([$f($1.cols - 7), $f($1.rows - 3)])]), $a([$a([9, 3]), $a([$f($1.cols - 7), $f($1.rows - 4)])]), $a([$a([9, 2]), $a([$f($1.cols - 7), $f($1.rows - 5)])]), $a([$a([9, 1]), $a([$f($1.cols - 7), $f($1.rows - 6)])]), $a([$a([8, 5]), $a([$f($1.cols - 8), $f($1.rows - 2)])]), $a([$a([8, 4]), $a([$f($1.cols - 8), $f($1.rows - 3)])]), $a([$a([8, 3]), $a([$f($1.cols - 8), $f($1.rows - 4)])]), $a([$a([8, 2]), $a([$f($1.cols - 8), $f($1.rows - 5)])]), $a([$a([8, 1]), $a([$f($1.cols - 8), $f($1.rows - 6)])])])]
    ]); //#20192
    $1.formatmap = $get(_XS, $1.format); //#20194
    $forall($1.formatmap, function() { //#20197
        $forall($k[--$j], function() { //#20196
            $forall($k[--$j]); //#20196
            $1.qmv(); //#20196
            $put($1.pixs, $k[--$j], 1); //#20196
        }); //#20196
    }); //#20196
    if ($eq($1.format, "full") && ($1.cols >= 45)) { //#20213
        $1.versionmap = $a([$a([$a([$f($1.cols - 9), 5]), $a([5, $f($1.cols - 9)])]), $a([$a([$f($1.cols - 10), 5]), $a([5, $f($1.cols - 10)])]), $a([$a([$f($1.cols - 11), 5]), $a([5, $f($1.cols - 11)])]), $a([$a([$f($1.cols - 9), 4]), $a([4, $f($1.cols - 9)])]), $a([$a([$f($1.cols - 10), 4]), $a([4, $f($1.cols - 10)])]), $a([$a([$f($1.cols - 11), 4]), $a([4, $f($1.cols - 11)])]), $a([$a([$f($1.cols - 9), 3]), $a([3, $f($1.cols - 9)])]), $a([$a([$f($1.cols - 10), 3]), $a([3, $f($1.cols - 10)])]), $a([$a([$f($1.cols - 11), 3]), $a([3, $f($1.cols - 11)])]), $a([$a([$f($1.cols - 9), 2]), $a([2, $f($1.cols - 9)])]), $a([$a([$f($1.cols - 10), 2]), $a([2, $f($1.cols - 10)])]), $a([$a([$f($1.cols - 11), 2]), $a([2, $f($1.cols - 11)])]), $a([$a([$f($1.cols - 9), 1]), $a([1, $f($1.cols - 9)])]), $a([$a([$f($1.cols - 10), 1]), $a([1, $f($1.cols - 10)])]), $a([$a([$f($1.cols - 11), 1]), $a([1, $f($1.cols - 11)])]), $a([$a([$f($1.cols - 9), 0]), $a([0, $f($1.cols - 9)])]), $a([$a([$f($1.cols - 10), 0]), $a([0, $f($1.cols - 10)])]), $a([$a([$f($1.cols - 11), 0]), $a([0, $f($1.cols - 11)])])]); //#20211
    } else { //#20213
        $1.versionmap = $a([]); //#20213
    } //#20213
    var _Z6 = $1.versionmap; //#20215
    for (var _Z7 = 0, _Z8 = _Z6.length; _Z7 < _Z8; _Z7++) { //#20217
        $forall($get(_Z6, _Z7), function() { //#20216
            $forall($k[--$j]); //#20216
            $1.qmv(); //#20216
            $put($1.pixs, $k[--$j], 0); //#20216
        }); //#20216
    } //#20216
    if ($eq($1.format, "full")) { //#20222
        $k[$j++] = $1.pixs; //#20221
        $k[$j++] = 8; //#20221
        $k[$j++] = $f($1.rows - 8); //#20221
        $1.qmv(); //#20221
        var _ZG = $k[--$j]; //#20221
        $put($k[--$j], _ZG, 0); //#20221
    } //#20221
    var _Za = $a([function() {
        var _ZI = $k[--$j]; //#20227
        var _ZJ = $k[--$j]; //#20227
        $k[$j++] = $f(_ZJ + _ZI) % 2; //#20227
    }, function() {
        var _ZK = $k[--$j]; //#20228
        var _ZL = $k[--$j]; //#20228
        $k[$j++] = _ZK; //#20228
        $k[$j++] = _ZL; //#20228
        $j--; //#20228
        var _ZM = $k[--$j]; //#20228
        $k[$j++] = _ZM % 2; //#20228
    }, function() {
        $j--; //#20229
        var _ZN = $k[--$j]; //#20229
        $k[$j++] = _ZN % 3; //#20229
    }, function() {
        var _ZO = $k[--$j]; //#20230
        var _ZP = $k[--$j]; //#20230
        $k[$j++] = $f(_ZP + _ZO) % 3; //#20230
    }, function() {
        var _ZQ = $k[--$j]; //#20231
        var _ZR = $k[--$j]; //#20231
        $k[$j++] = ((~~(_ZQ / 2)) + (~~(_ZR / 3))) % 2; //#20231
    }, function() {
        var _ZS = $k[--$j]; //#20232
        var _ZU = $k[--$j] * _ZS; //#20232
        $k[$j++] = $f((_ZU % 2) + (_ZU % 3)); //#20232
    }, function() {
        var _ZV = $k[--$j]; //#20233
        var _ZX = $k[--$j] * _ZV; //#20233
        $k[$j++] = ($f((_ZX % 2) + (_ZX % 3))) % 2; //#20233
    }, function() {
        var _ZY = $k[--$j]; //#20234
        var _ZZ = $k[--$j]; //#20234
        $k[$j++] = ($f(((_ZZ * _ZY) % 3) + ($f(_ZZ + _ZY) % 2))) % 2; //#20234
    }]); //#20234
    var _Zl = $a([function() {
        var _Zb = $k[--$j]; //#20237
        var _Zc = $k[--$j]; //#20237
        $k[$j++] = _Zb; //#20237
        $k[$j++] = _Zc; //#20237
        $j--; //#20237
        var _Zd = $k[--$j]; //#20237
        $k[$j++] = _Zd % 2; //#20237
    }, function() {
        var _Ze = $k[--$j]; //#20238
        var _Zf = $k[--$j]; //#20238
        $k[$j++] = ((~~(_Ze / 2)) + (~~(_Zf / 3))) % 2; //#20238
    }, function() {
        var _Zg = $k[--$j]; //#20239
        var _Zi = $k[--$j] * _Zg; //#20239
        $k[$j++] = ($f((_Zi % 2) + (_Zi % 3))) % 2; //#20239
    }, function() {
        var _Zj = $k[--$j]; //#20240
        var _Zk = $k[--$j]; //#20240
        $k[$j++] = ($f(((_Zk * _Zj) % 3) + ($f(_Zk + _Zj) % 2))) % 2; //#20240
    }]); //#20240
    var _Zo = $a([function() {
        var _Zm = $k[--$j]; //#20243
        var _Zn = $k[--$j]; //#20243
        $k[$j++] = ((~~(_Zm / 2)) + (~~(_Zn / 3))) % 2; //#20243
    }]); //#20243
    var _Zp = new Map([
        ["full", _Za],
        ["micro", _Zl],
        ["rmqr", _Zo]
    ]); //#20243
    $1.maskfuncs = $get(_Zp, $1.format); //#20245
    if ($1.mask != -1) { //#20249
        $1.maskfuncs = $a([$get($1.maskfuncs, $1.mask - 1)]); //#20247
        $1.bestmaskval = $1.mask - 1; //#20248
    } //#20248
    $1.masks = $a($1.maskfuncs.length); //#20250
    for (var _a2 = 0, _a1 = $1.masks.length - 1; _a2 <= _a1; _a2 += 1) { //#20264
        $1.m = _a2; //#20252
        $1.mask = $a($1.rows * $1.cols); //#20253
        for (var _a8 = 0, _a7 = $f($1.rows - 1); _a8 <= _a7; _a8 += 1) { //#20262
            $1.j = _a8; //#20255
            for (var _aB = 0, _aA = $f($1.cols - 1); _aB <= _aA; _aB += 1) { //#20261
                $1.i = _aB; //#20257
                $k[$j++] = $1.i; //#20258
                $k[$j++] = $1.j; //#20258
                if ($get($1.maskfuncs, $1.m)() === true) {
                    break;
                } //#20258
                var _aH = $k[--$j]; //#20258
                $k[$j++] = _aH == 0; //#20259
                $k[$j++] = $1.pixs; //#20259
                $k[$j++] = $1.i; //#20259
                $k[$j++] = $1.j; //#20259
                $1.qmv(); //#20259
                var _aL = $k[--$j]; //#20259
                var _aN = $get($k[--$j], _aL); //#20259
                var _aO = $k[--$j]; //#20259
                var _aP = (_aO && (_aN == -1)) ? 1 : 0; //#20259
                $k[$j++] = _aP; //#20260
                $k[$j++] = $1.mask; //#20260
                $k[$j++] = $1.i; //#20260
                $k[$j++] = $1.j; //#20260
                $1.qmv(); //#20260
                var _aT = $k[--$j]; //#20260
                var _aU = $k[--$j]; //#20260
                $put(_aU, _aT, $k[--$j]); //#20260
            } //#20260
        } //#20260
        $put($1.masks, $1.m, $1.mask); //#20263
    } //#20263
    var _ab = $ne($1.format, "rmqr") ? 1 : 2; //#20267
    $1.posx = $f($1.cols - _ab); //#20267
    $1.posy = $f($1.rows - 1); //#20268
    $1.dir = -1; //#20269
    $1.col = 1; //#20270
    $1.num = 0; //#20271
    for (;;) { //#20294
        if ($1.posx < 0) { //#20273
            break; //#20273
        } //#20273
        $k[$j++] = $1.pixs; //#20274
        $k[$j++] = $1.posx; //#20274
        $k[$j++] = $1.posy; //#20274
        $1.qmv(); //#20274
        var _ah = $k[--$j]; //#20274
        if ($get($k[--$j], _ah) == -1) { //#20278
            var _am = $get($1.cws, ~~($1.num / 8)); //#20275
            var _ao = -(7 - ($1.num % 8)); //#20275
            $k[$j++] = ((_ao < 0 ? _am >>> -_ao : _am << _ao)) & 1; //#20276
            $k[$j++] = $1.pixs; //#20276
            $k[$j++] = $1.posx; //#20276
            $k[$j++] = $1.posy; //#20276
            $1.qmv(); //#20276
            var _as = $k[--$j]; //#20276
            var _at = $k[--$j]; //#20276
            $put(_at, _as, $k[--$j]); //#20276
            $1.num = $1.num + 1; //#20277
        } //#20277
        if ($1.col == 1) { //#20291
            $1.col = 0; //#20280
            $1.posx = $f($1.posx - 1); //#20281
        } else { //#20291
            $1.col = 1; //#20283
            $1.posx = $f($1.posx + 1); //#20284
            $1.posy = $f($1.posy + $1.dir); //#20285
            if (($1.posy < 0) || ($1.posy >= $1.rows)) { //#20292
                $1.dir = $1.dir * -1; //#20287
                $1.posy = $f($1.posy + $1.dir); //#20288
                $1.posx = $f($1.posx - 2); //#20289
                if ($eq($1.format, "full") && ($1.posx == 6)) { //#20291
                    $1.posx = $f($1.posx - 1); //#20291
                } //#20291
            } //#20291
        } //#20291
    } //#20291
    $1.evalfulln1n3 = function() {
        $1.scrle = $k[--$j]; //#20298
        $k[$j++] = 'scr1'; //#20300
        $k[$j++] = 0; //#20300
        $forall($1.scrle, function() { //#20300
            var _bD = $k[--$j]; //#20300
            $k[$j++] = _bD; //#20300
            if (_bD >= 5) { //#20300
                var _bE = $k[--$j]; //#20300
                var _bG = $f($f($k[--$j] + _bE) - 2); //#20300
                $k[$j++] = _bG; //#20300
                $k[$j++] = _bG; //#20300
            } //#20300
            $j--; //#20300
        }); //#20300
        var _bH = $k[--$j]; //#20300
        $1[$k[--$j]] = _bH; //#20300
        $1.scr3 = 0; //#20302
        for (var _bL = 3, _bK = $1.scrle.length - 3; _bL <= _bK; _bL += 2) { //#20317
            $1.j = _bL; //#20304
            if (($get($1.scrle, $1.j) % 3) == 0) { //#20316
                $1.fact = ~~($get($1.scrle, $1.j) / 3); //#20306
                var _bU = $geti($1.scrle, $1.j - 2, 5); //#20307
                for (var _bV = 0, _bW = _bU.length; _bV < _bW; _bV++) { //#20307
                    $k[$j++] = $get(_bU, _bV) == $1.fact; //#20307
                } //#20307
                var _bZ = $k[--$j]; //#20307
                var _ba = $k[--$j]; //#20307
                var _bb = $k[--$j]; //#20307
                $k[$j++] = $an(_ba, _bZ); //#20307
                $k[$j++] = _bb; //#20307
                $j--; //#20307
                var _bc = $k[--$j]; //#20307
                var _bd = $k[--$j]; //#20307
                var _be = $k[--$j]; //#20307
                if (_be && (_bd && _bc)) { //#20315
                    if (($1.j == 3) || (($1.j + 4) >= $1.scrle.length)) { //#20312
                        $1.scr3 = $1.scr3 + 40; //#20309
                    } else { //#20312
                        if (($get($1.scrle, $1.j - 3) >= 4) || ($get($1.scrle, $1.j + 3) >= 4)) { //#20313
                            $1.scr3 = $1.scr3 + 40; //#20312
                        } //#20312
                    } //#20312
                } //#20312
            } //#20312
        } //#20312
        $k[$j++] = $1.scr1; //#20318
        $k[$j++] = $1.scr3; //#20318
    }; //#20318
    $1.evalfull = function() {
        $1.sym = $k[--$j]; //#20323
        $1.n1 = 0; //#20325
        $1.n2 = 0; //#20325
        $1.n3 = 0; //#20325
        $1.rle = $a($f($1.cols + 1)); //#20326
        $1.lastpairs = $a($1.cols); //#20327
        $1.thispairs = $a($1.cols); //#20328
        $1.colsadd1 = $f($1.cols + 1); //#20329
        for (var _c2 = 0, _c1 = $f($1.cols - 1); _c2 <= _c1; _c2 += 1) { //#20368
            $1.i = _c2; //#20331
            $k[$j++] = Infinity; //#20334
            var _c4 = $1.cols; //#20335
            $k[$j++] = 0; //#20337
            $k[$j++] = 0; //#20337
            for (var _c6 = $1.i, _c7 = _c4, _c5 = $f((_c4 * _c4) - 1); _c7 < 0 ? _c6 >= _c5 : _c6 <= _c5; _c6 += _c7) { //#20337
                var _c9 = $get($1.sym, _c6); //#20336
                var _cA = $k[--$j]; //#20336
                $k[$j++] = _c9; //#20336
                if ($eq(_cA, _c9)) { //#20336
                    var _cB = $k[--$j]; //#20336
                    var _cC = $k[--$j]; //#20336
                    $k[$j++] = $f(_cC + 1); //#20336
                    $k[$j++] = _cB; //#20336
                } else { //#20336
                    var _cD = $k[--$j]; //#20336
                    $k[$j++] = 1; //#20336
                    $k[$j++] = _cD; //#20336
                } //#20336
            } //#20336
            $j--; //#20338
            var _cF = $counttomark() + 2; //#20339
            $astore($geti($1.rle, 0, _cF - 2)); //#20339
            $1.evalfulln1n3(); //#20340
            $1.n3 = $f($k[--$j] + $1.n3); //#20340
            $1.n1 = $f($k[--$j] + $1.n1); //#20340
            $j--; //#20341
            $1.symrow = $geti($1.sym, $1.i * $1.cols, $1.cols); //#20344
            $k[$j++] = Infinity; //#20345
            var _cQ = $1.symrow; //#20346
            $k[$j++] = 0; //#20348
            $k[$j++] = 0; //#20348
            for (var _cR = 0, _cS = _cQ.length; _cR < _cS; _cR++) { //#20348
                var _cT = $get(_cQ, _cR); //#20348
                var _cU = $k[--$j]; //#20347
                $k[$j++] = _cT; //#20347
                if ($eq(_cU, _cT)) { //#20347
                    var _cV = $k[--$j]; //#20347
                    var _cW = $k[--$j]; //#20347
                    $k[$j++] = $f(_cW + 1); //#20347
                    $k[$j++] = _cV; //#20347
                } else { //#20347
                    var _cX = $k[--$j]; //#20347
                    $k[$j++] = 1; //#20347
                    $k[$j++] = _cX; //#20347
                } //#20347
            } //#20347
            $j--; //#20349
            var _cZ = $counttomark() + 2; //#20350
            $astore($geti($1.rle, 0, _cZ - 2)); //#20350
            $1.evalfulln1n3(); //#20351
            $1.n3 = $f($k[--$j] + $1.n3); //#20351
            $1.n1 = $f($k[--$j] + $1.n1); //#20351
            $j--; //#20352
            var _cf = $1.thispairs; //#20355
            $1.thispairs = $1.lastpairs; //#20355
            $1.lastpairs = _cf; //#20355
            var _cj = ($get($1.symrow, 0) == 1) ? 0 : 1; //#20356
            var _ck = $1.symrow; //#20357
            $k[$j++] = _cj; //#20357
            for (var _cl = 0, _cm = _ck.length; _cl < _cm; _cl++) { //#20357
                var _cn = $get(_ck, _cl); //#20357
                var _co = $k[--$j]; //#20357
                $k[$j++] = $f(_co + _cn); //#20357
                $k[$j++] = _cn; //#20357
            } //#20357
            $j--; //#20358
            $astore($1.thispairs); //#20359
            $j--; //#20359
            if ($1.i > 0) { //#20366
                $k[$j++] = Infinity; //#20361
                $aload($1.lastpairs); //#20362
                $aload($1.thispairs); //#20362
                $k[$j++] = $1.n2; //#20363
                for (var _cv = 0, _cw = $1.cols; _cv < _cw; _cv++) { //#20363
                    var _cx = $k[--$j]; //#20363
                    var _cy = $k[--$j]; //#20363
                    $k[$j++] = _cx; //#20363
                    $k[$j++] = _cy; //#20363
                    var _d0 = $k[$j - 1 - $1.colsadd1]; //#20363
                    if (($f($k[--$j] + _d0) & 3) == 0) { //#20363
                        var _d2 = $k[--$j]; //#20363
                        $k[$j++] = $f(_d2 + 3); //#20363
                    } //#20363
                } //#20363
                $1.n2 = $k[--$j]; //#20364
                $cleartomark(); //#20365
            } //#20365
        } //#20365
        $k[$j++] = 'dark'; //#20371
        $k[$j++] = 0; //#20371
        $forall($1.sym, function() { //#20371
            var _d5 = $k[--$j]; //#20371
            var _d6 = $k[--$j]; //#20371
            $k[$j++] = $f(_d6 + _d5); //#20371
        }); //#20371
        var _d7 = $k[--$j]; //#20371
        $1[$k[--$j]] = _d7; //#20371
        var _dA = $1.cols; //#20372
        $1.n4 = (~~((Math.abs($f((($1.dark * 100) / (_dA * _dA)) - 50))) / 5)) * 10; //#20372
        $k[$j++] = $f(($f($f($1.n1 + $1.n2) + $1.n3)) + $1.n4); //#20374
    }; //#20374
    $1.evalmicro = function() {
        $1.sym = $k[--$j]; //#20379
        $1.dkrhs = 0; //#20380
        $1.dkbot = 0; //#20380
        for (var _dI = 1, _dH = $f($1.cols - 1); _dI <= _dH; _dI += 1) { //#20385
            $1.i = _dI; //#20382
            $k[$j++] = 'dkrhs'; //#20383
            $k[$j++] = $1.dkrhs; //#20383
            $k[$j++] = $1.sym; //#20383
            $k[$j++] = $f($1.cols - 1); //#20383
            $k[$j++] = $1.i; //#20383
            $1.qmv(); //#20383
            var _dN = $k[--$j]; //#20383
            var _dP = $get($k[--$j], _dN); //#20383
            var _dQ = $k[--$j]; //#20383
            $1[$k[--$j]] = $f(_dQ + _dP); //#20383
            $k[$j++] = 'dkbot'; //#20384
            $k[$j++] = $1.dkbot; //#20384
            $k[$j++] = $1.sym; //#20384
            $k[$j++] = $1.i; //#20384
            $k[$j++] = $f($1.cols - 1); //#20384
            $1.qmv(); //#20384
            var _dW = $k[--$j]; //#20384
            var _dY = $get($k[--$j], _dW); //#20384
            var _dZ = $k[--$j]; //#20384
            $1[$k[--$j]] = $f(_dZ + _dY); //#20384
        } //#20384
        if ($1.dkrhs <= $1.dkbot) { //#20389
            $k[$j++] = -(($1.dkrhs * 16) + $1.dkbot); //#20387
        } else { //#20389
            $k[$j++] = -(($1.dkbot * 16) + $1.dkrhs); //#20389
        } //#20389
    }; //#20389
    $1.bestscore = 999999999; //#20394
    for (var _dj = 0, _di = $1.masks.length - 1; _dj <= _di; _dj += 1) { //#20416
        $1.m = _dj; //#20396
        $1.masksym = $a($1.rows * $1.cols); //#20397
        for (var _dq = 0, _dp = $f(($1.rows * $1.cols) - 1); _dq <= _dp; _dq += 1) { //#20401
            $1.i = _dq; //#20399
            $put($1.masksym, $1.i, $xo($get($1.pixs, $1.i), $get($get($1.masks, $1.m), $1.i))); //#20400
        } //#20400
        if ($1.masks.length != 1) { //#20414
            if ($eq($1.format, "full")) { //#20406
                $k[$j++] = $1.masksym; //#20404
                $1.evalfull(); //#20404
                $1.score = $k[--$j]; //#20404
            } else { //#20406
                $k[$j++] = $1.masksym; //#20406
                $1.evalmicro(); //#20406
                $1.score = $k[--$j]; //#20406
            } //#20406
            if ($1.score < $1.bestscore) { //#20412
                $1.bestsym = $1.masksym; //#20409
                $1.bestmaskval = $1.m; //#20410
                $1.bestscore = $1.score; //#20411
            } //#20411
        } else { //#20414
            $1.bestsym = $1.masksym; //#20414
        } //#20414
    } //#20414
    $1.pixs = $1.bestsym; //#20417
    if ($eq($1.format, "full")) { //#20422
        $k[$j++] = $1.pixs; //#20421
        $k[$j++] = 8; //#20421
        $k[$j++] = $f($1.cols - 8); //#20421
        $1.qmv(); //#20421
        var _eH = $k[--$j]; //#20421
        $put($k[--$j], _eH, 1); //#20421
    } //#20421
    if (!bwipp_qrcode.$ctx._20458) { //#20458
        (function() { //#20458
            var $ctx = Object.create($1); //#20458
            $ctx.fmtvalsfull = $a([21522, 20773, 24188, 23371, 17913, 16590, 20375, 19104, 30660, 29427, 32170, 30877, 26159, 25368, 27713, 26998, 5769, 5054, 7399, 6608, 1890, 597, 3340, 2107, 13663, 12392, 16177, 14854, 9396, 8579, 11994, 11245]); //#20431
            $ctx.fmtvalsmicro = $a([17477, 16754, 20011, 19228, 21934, 20633, 24512, 23287, 26515, 25252, 28157, 26826, 30328, 29519, 31766, 31009, 1758, 1001, 3248, 2439, 5941, 4610, 7515, 6252, 9480, 8255, 12134, 10833, 13539, 12756, 16013, 15290]); //#20437
            $ctx.fmtvalsrmqr1 = $a([129714, 124311, 121821, 115960, 112748, 108361, 104707, 99878, 98062, 90155, 89697, 82244, 81360, 74485, 72895, 66458, 61898, 61167, 53413, 53120, 45844, 44081, 37499, 36190, 29814, 27475, 21785, 19004, 13992, 10637, 6087, 2274, 258919, 257090, 250376, 249133, 242105, 241308, 233686, 233459, 227035, 223742, 219060, 215185, 209925, 207648, 202090, 199247, 194591, 190266, 186736, 181845, 178881, 173540, 170926, 165003, 163235, 156294, 154828, 148457, 147325, 139352, 138770, 131383]); //#20447
            $ctx.fmtvalsrmqr2 = $a([133755, 136542, 142100, 144433, 149669, 153472, 158154, 161519, 167879, 168162, 175784, 176525, 183577, 184892, 191606, 193363, 196867, 204326, 204908, 212809, 213981, 220408, 221874, 228759, 230591, 236442, 239056, 244469, 247393, 252228, 255758, 260139, 942, 7307, 8897, 15844, 16752, 24149, 24607, 32570, 34322, 39223, 42877, 47192, 50380, 56297, 58787, 64134, 67798, 71667, 76217, 79516, 84488, 87341, 93031, 95298, 101738, 102991, 109573, 111392, 118708, 118929, 126683, 127486]); //#20457
            for (var _eN in $ctx) {
                $ctx.hasOwnProperty(_eN) && (bwipp_qrcode.$ctx[_eN] = $ctx[_eN]);
            } //#20457
            bwipp_qrcode.$ctx._20458 = 1; //#20457
        })(); //#20457
    } //#20457
    if ($eq($1.format, "full")) { //#20468
        $k[$j++] = 'ecid'; //#20460
        $search("MLHQ", $1.eclevel); //#20460
        $j--; //#20460
        var _eQ = $k[--$j]; //#20460
        var _eR = $k[--$j]; //#20460
        $k[$j++] = _eQ.length; //#20460
        $k[$j++] = _eR; //#20460
        $j--; //#20460
        var _eS = $k[--$j]; //#20460
        var _eT = $k[--$j]; //#20460
        $k[$j++] = _eS; //#20460
        $k[$j++] = _eT; //#20460
        $j--; //#20460
        var _eU = $k[--$j]; //#20460
        $1[$k[--$j]] = _eU; //#20460
        $1.fmtval = $get($1.fmtvalsfull, ($1.ecid << 3) + $1.bestmaskval); //#20461
        for (var _ec = 0, _eb = $1.formatmap.length - 1; _ec <= _eb; _ec += 1) { //#20467
            $1.i = _ec; //#20463
            $forall($get($1.formatmap, $1.i), function() { //#20466
                var _eh = $k[--$j]; //#20465
                $k[$j++] = $1.pixs; //#20465
                $aload(_eh); //#20465
                $1.qmv(); //#20465
                var _ei = $1.fmtval; //#20465
                var _ek = -(14 - $1.i); //#20465
                var _el = $k[--$j]; //#20465
                $put($k[--$j], _el, ((_ek < 0 ? _ei >>> -_ek : _ei << _ek)) & 1); //#20465
            }); //#20465
        } //#20465
    } //#20465
    if ($eq($1.format, "micro")) { //#20476
        $1.symid = $get($get($a([$a([0]), $a([1, 2]), $a([3, 4]), $a([5, 6, 7])]), ~~($f($1.cols - 11) / 2)), $1.eclval); //#20470
        $1.fmtval = $get($1.fmtvalsmicro, ($1.symid << 2) + $1.bestmaskval); //#20471
        for (var _f3 = 0, _f2 = $1.formatmap.length - 1; _f3 <= _f2; _f3 += 1) { //#20475
            $1.i = _f3; //#20473
            $k[$j++] = $1.pixs; //#20474
            $aload($get($get($1.formatmap, $1.i), 0)); //#20474
            $1.qmv(); //#20474
            var _f9 = $1.fmtval; //#20474
            var _fB = -(14 - $1.i); //#20474
            var _fC = $k[--$j]; //#20474
            $put($k[--$j], _fC, ((_fB < 0 ? _f9 >>> -_fB : _f9 << _fB)) & 1); //#20474
        } //#20474
    } //#20474
    if ($eq($1.format, "rmqr")) { //#20486
        $k[$j++] = 'fmtvalu'; //#20478
        $search("MH", $1.eclevel); //#20478
        $j--; //#20478
        var _fG = $k[--$j]; //#20478
        var _fH = $k[--$j]; //#20478
        $k[$j++] = _fG.length; //#20478
        $k[$j++] = _fH; //#20478
        $j--; //#20478
        var _fI = $k[--$j]; //#20478
        var _fJ = $k[--$j]; //#20478
        $k[$j++] = _fI; //#20478
        $k[$j++] = _fJ; //#20478
        $j--; //#20478
        var _fK = $k[--$j]; //#20478
        $1[$k[--$j]] = (_fK << 5) + $1.verind; //#20478
        $1.fmtval1 = $get($1.fmtvalsrmqr1, $1.fmtvalu); //#20479
        $1.fmtval2 = $get($1.fmtvalsrmqr2, $1.fmtvalu); //#20480
        for (var _fV = 0, _fU = $1.formatmap.length - 1; _fV <= _fU; _fV += 1) { //#20485
            $1.i = _fV; //#20482
            $k[$j++] = $1.pixs; //#20483
            $aload($get($get($1.formatmap, $1.i), 0)); //#20483
            $1.qmv(); //#20483
            var _fb = $1.fmtval1; //#20483
            var _fd = -(17 - $1.i); //#20483
            var _fe = $k[--$j]; //#20483
            $put($k[--$j], _fe, ((_fd < 0 ? _fb >>> -_fd : _fb << _fd)) & 1); //#20483
            $k[$j++] = $1.pixs; //#20484
            $aload($get($get($1.formatmap, $1.i), 1)); //#20484
            $1.qmv(); //#20484
            var _fl = $1.fmtval2; //#20484
            var _fn = -(17 - $1.i); //#20484
            var _fo = $k[--$j]; //#20484
            $put($k[--$j], _fo, ((_fn < 0 ? _fl >>> -_fn : _fl << _fn)) & 1); //#20484
        } //#20484
    } //#20484
    if (!bwipp_qrcode.$ctx._20497) { //#20497
        (function() { //#20497
            var $ctx = Object.create($1); //#20497
            $ctx.vervals = $a([31892, 34236, 39577, 42195, 48118, 51042, 55367, 58893, 63784, 68472, 70749, 76311, 79154, 84390, 87683, 92361, 96236, 102084, 102881, 110507, 110734, 117786, 119615, 126325, 127568, 133589, 136957, 141498, 145311, 150283, 152622, 158308, 161089, 167017]); //#20496
            for (var _fr in $ctx) {
                $ctx.hasOwnProperty(_fr) && (bwipp_qrcode.$ctx[_fr] = $ctx[_fr]);
            } //#20496
            bwipp_qrcode.$ctx._20497 = 1; //#20496
        })(); //#20496
    } //#20496
    if ($eq($1.format, "full") && ($1.cols >= 45)) { //#20506
        $1.verval = $get($1.vervals, (~~($f($1.cols - 17) / 4)) - 7); //#20499
        for (var _fz = 0, _fy = $1.versionmap.length - 1; _fz <= _fy; _fz += 1) { //#20505
            $1.i = _fz; //#20501
            $forall($get($1.versionmap, $1.i), function() { //#20504
                var _g4 = $k[--$j]; //#20503
                $k[$j++] = $1.pixs; //#20503
                $forall(_g4); //#20503
                $1.qmv(); //#20503
                var _g5 = $1.verval; //#20503
                var _g7 = -(17 - $1.i); //#20503
                var _g8 = $k[--$j]; //#20503
                $put($k[--$j], _g8, ((_g7 < 0 ? _g5 >>> -_g7 : _g5 << _g7)) & 1); //#20503
            }); //#20503
        } //#20503
    } //#20503
    var _gG = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", $1.cols],
        ["pixy", $1.rows],
        ["height", ($1.rows * 2) / 72],
        ["width", ($1.cols * 2) / 72],
        ["opt", $1.options]
    ]); //#20516
    $k[$j++] = _gG; //#20519
    if (!$1.dontdraw) { //#20519
        bwipp_renmatrix(); //#20519
    } //#20519
}

function bwipp_swissqrcode() {
    var $1 = Object.create(bwipp_swissqrcode.$ctx || (bwipp_swissqrcode.$ctx = {})); //#20553
    $1.dontdraw = false; //#20556
    $1.parse = false; //#20557
    $k[$j++] = $1; //#20559
    bwipp_processoptions(); //#20559
    $1.options = $k[--$j]; //#20559
    $1.barcode = $k[--$j]; //#20560
    var _3 = new Map([
        ["parse", $1.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#20566
    $1.fncvals = _3; //#20567
    $k[$j++] = 'barcode'; //#20568
    $k[$j++] = $1.barcode; //#20568
    $k[$j++] = $1.fncvals; //#20568
    bwipp_parseinput(); //#20568
    var _6 = $k[--$j]; //#20568
    $1[$k[--$j]] = _6; //#20568
    $1.barlen = $1.barcode.length; //#20569
    delete $1.options["parse"]; //#20570
    if ($1.barcode.length > 997) { //#20575
        $k[$j++] = 'bwipp.swissqrcodeBadLength#20574'; //#20574
        $k[$j++] = "Swiss QR Code input must not exceed 997 digits"; //#20574
        bwipp_raiseerror(); //#20574
    } //#20574
    $put($1.options, "dontdraw", true); //#20578
    $k[$j++] = 'args'; //#20579
    $k[$j++] = $1.barcode; //#20579
    $k[$j++] = $1.options; //#20579
    bwipp_qrcode(); //#20579
    var _E = $k[--$j]; //#20579
    $1[$k[--$j]] = _E; //#20579
    $put($1.args, "opt", $1.options); //#20581
    $k[$j++] = $1.args; //#20650
    if (!$1.dontdraw) { //#20650
        $$.save(); //#20595
        var _K = $$.currpos(); //#20596
        $$.translate(_K.x, _K.y); //#20596
        var _L = 72 / 25.4; //#20597
        $$.scale(_L, _L); //#20597
        $$.save(); //#20600
        $$.newpath(); //#20601
        $$.moveto(0, 0); //#20602
        $$.lineto(46, 0); //#20603
        $$.lineto(46, 46); //#20604
        $$.lineto(0, 46); //#20605
        $$.closepath(); //#20606
        $$.moveto(19.5, 19.5); //#20607
        $$.lineto(19.5, 26.5); //#20608
        $$.lineto(26.5, 26.5); //#20609
        $$.lineto(26.5, 19.5); //#20610
        $$.closepath(); //#20611
        $$.clip(); //#20612
        $$.save(); //#20615
        $$.moveto(0, 0); //#20616
        var _O = (46 / $get($1.args, "pixx")) / 2; //#20617
        $$.scale(_O, _O); //#20617
        bwipp_renmatrix(); //#20618
        $$.restore(); //#20619
        $$.restore(); //#20621
        $$.translate(19.5, 19.5); //#20624
        var _P = 7 / 83; //#20625
        $$.scale(_P, _P); //#20625
        $$.newpath(); //#20627
        $$.moveto(6, 6); //#20628
        $$.lineto(6, 77); //#20629
        $$.lineto(77, 77); //#20630
        $$.lineto(77, 6); //#20631
        $$.closepath(); //#20632
        $$.moveto(49, 18); //#20633
        $$.lineto(49, 34); //#20634
        $$.lineto(65, 34); //#20635
        $$.lineto(65, 49); //#20636
        $$.lineto(49, 49); //#20637
        $$.lineto(49, 65); //#20638
        $$.lineto(34, 65); //#20639
        $$.lineto(34, 49); //#20640
        $$.lineto(18, 49); //#20641
        $$.lineto(18, 34); //#20642
        $$.lineto(34, 34); //#20643
        $$.lineto(34, 18); //#20644
        $$.closepath(); //#20645
        $$.setrgbcolor(0, 0, 0); //#20646
        $$.fill(); //#20646
        $$.restore(); //#20648
    } //#20648
}

function bwipp_microqrcode() {
    var $1 = Object.create(bwipp_microqrcode.$ctx || (bwipp_microqrcode.$ctx = {})); //#20681
    $1.dontdraw = false; //#20684
    $k[$j++] = $1; //#20686
    bwipp_processoptions(); //#20686
    $1.options = $k[--$j]; //#20686
    $1.barcode = $k[--$j]; //#20687
    $put($1.options, "dontdraw", true); //#20690
    $put($1.options, "format", "micro"); //#20691
    $k[$j++] = 'args'; //#20693
    $k[$j++] = $1.barcode; //#20693
    $k[$j++] = $1.options; //#20693
    bwipp_qrcode(); //#20693
    var _6 = $k[--$j]; //#20693
    $1[$k[--$j]] = _6; //#20693
    $put($1.args, "opt", $1.options); //#20695
    $k[$j++] = $1.args; //#20698
    if (!$1.dontdraw) { //#20698
        bwipp_renmatrix(); //#20698
    } //#20698
}

function bwipp_rectangularmicroqrcode() {
    var $1 = Object.create(bwipp_rectangularmicroqrcode.$ctx || (bwipp_rectangularmicroqrcode.$ctx = {})); //#20729
    $1.dontdraw = false; //#20732
    $k[$j++] = $1; //#20734
    bwipp_processoptions(); //#20734
    $1.options = $k[--$j]; //#20734
    $1.barcode = $k[--$j]; //#20735
    $put($1.options, "dontdraw", true); //#20738
    $put($1.options, "format", "rmqr"); //#20739
    $k[$j++] = 'args'; //#20741
    $k[$j++] = $1.barcode; //#20741
    $k[$j++] = $1.options; //#20741
    bwipp_qrcode(); //#20741
    var _6 = $k[--$j]; //#20741
    $1[$k[--$j]] = _6; //#20741
    $put($1.args, "opt", $1.options); //#20743
    $k[$j++] = $1.args; //#20746
    if (!$1.dontdraw) { //#20746
        bwipp_renmatrix(); //#20746
    } //#20746
}

function bwipp_maxicode() {
    var $1 = Object.create(bwipp_maxicode.$ctx || (bwipp_maxicode.$ctx = {})); //#20779
    $1.dontdraw = false; //#20782
    $1.mode = -1; //#20783
    $1.sam = -1; //#20784
    $1.parse = false; //#20785
    $1.parsefnc = false; //#20786
    $k[$j++] = $1; //#20788
    bwipp_processoptions(); //#20788
    $1.options = $k[--$j]; //#20788
    $1.barcode = $k[--$j]; //#20789
    var _4 = new Map([
        ["parse", $1.parse],
        ["parsefnc", $1.parsefnc],
        ["eci", true]
    ]); //#20797
    $1.fncvals = _4; //#20799
    $k[$j++] = 'msg'; //#20800
    $k[$j++] = $1.barcode; //#20800
    $k[$j++] = $1.fncvals; //#20800
    bwipp_parseinput(); //#20800
    var _7 = $k[--$j]; //#20800
    $1[$k[--$j]] = _7; //#20800
    $1.msglen = $1.msg.length; //#20801
    if (($1.mode == 2) || ($1.mode == 3)) { //#20840
        $1.barcode = $s($1.msglen); //#20807
        for (var _G = 0, _F = $1.msglen - 1; _G <= _F; _G += 1) { //#20813
            $1.i = _G; //#20809
            if ($get($1.msg, $1.i) > 0) { //#20812
                $put($1.barcode, $1.i, $get($1.msg, $1.i)); //#20811
            } //#20811
        } //#20811
        $1.barlen = $1.barcode.length; //#20814
        if ($eq($geti($1.barcode, 0, 7), "\x5b\x29\x3e\x1e\x30\x31\x1d")) { //#20821
            $1.fid = $geti($1.barcode, 0, 9); //#20818
            $1.barcode = $geti($1.barcode, 9, $1.barlen - 9); //#20819
        } else { //#20821
            $1.fid = ""; //#20821
        } //#20821
        $search($1.barcode, "\x1d"); //#20825
        $j--; //#20825
        $1.pcode = $k[--$j]; //#20825
        $j--; //#20826
        $search($k[--$j], "\x1d"); //#20826
        $j--; //#20826
        $1.ccode = $k[--$j]; //#20826
        $j--; //#20827
        $search($k[--$j], "\x1d"); //#20827
        $j--; //#20827
        $1.scode = $k[--$j]; //#20827
        $j--; //#20828
        $1.barcode = $k[--$j]; //#20828
        var _g = $s($1.barcode.length + $1.fid.length); //#20831
        $puti(_g, 0, $1.fid); //#20832
        $puti(_g, $1.fid.length, $1.barcode); //#20833
        $1.barcode = _g; //#20834
        $1.barlen = $1.barcode.length; //#20835
        $k[$j++] = Infinity; //#20837
        var _l = $1.barcode; //#20837
        for (var _m = 0, _n = _l.length; _m < _n; _m++) { //#20837
            $k[$j++] = $get(_l, _m); //#20837
        } //#20837
        $1.msg = $a(); //#20837
        $1.msglen = $1.msg.length; //#20838
    } //#20838
    if (!bwipp_maxicode.$ctx._20936) { //#20936
        (function() { //#20936
            var $ctx = Object.create($1); //#20936
            $ctx.eci = -1; //#20844
            $ctx.pad = -2; //#20844
            $ctx.ns = -3; //#20844
            $ctx.la = -4; //#20845
            $ctx.lb = -5; //#20845
            $ctx.sa = -6; //#20846
            $ctx.sb = -7; //#20846
            $ctx.sc = -8; //#20846
            $ctx.sd = -9; //#20846
            $ctx.se = -10; //#20846
            $ctx.sa2 = -11; //#20847
            $ctx.sa3 = -12; //#20847
            $ctx.lkc = -13; //#20848
            $ctx.lkd = -14; //#20848
            $ctx.lke = -15; //#20848
            $ctx.pd2 = -16; //#20849
            $ctx.pd3 = -17; //#20849
            $ctx.charmaps = $a([$a([13, "`", 192, 224, 0]), $a(["A", "a", 193, 225, 1]), $a(["B", "b", 194, 226, 2]), $a(["C", "c", 195, 227, 3]), $a(["D", "d", 196, 228, 4]), $a(["E", "e", 197, 229, 5]), $a(["F", "f", 198, 230, 6]), $a(["G", "g", 199, 231, 7]), $a(["H", "h", 200, 232, 8]), $a(["I", "i", 201, 233, 9]), $a(["J", "j", 202, 234, 10]), $a(["K", "k", 203, 235, 11]), $a(["L", "l", 204, 236, 12]), $a(["M", "m", 205, 237, 13]), $a(["N", "n", 206, 238, 14]), $a(["O", "o", 207, 239, 15]), $a(["P", "p", 208, 240, 16]), $a(["Q", "q", 209, 241, 17]), $a(["R", "r", 210, 242, 18]), $a(["S", "s", 211, 243, 19]), $a(["T", "t", 212, 244, 20]), $a(["U", "u", 213, 245, 21]), $a(["V", "v", 214, 246, 22]), $a(["W", "w", 215, 247, 23]), $a(["X", "x", 216, 248, 24]), $a(["Y", "y", 217, 249, 25]), $a(["Z", "z", 218, 250, 26]), $a([$ctx.eci, $ctx.eci, $ctx.eci, $ctx.eci, $ctx.eci]), $a([28, 28, 28, 28, $ctx.pad]), $a([29, 29, 29, 29, $ctx.pad]), $a([30, 30, 30, 30, 27]), $a([$ctx.ns, $ctx.ns, $ctx.ns, $ctx.ns, $ctx.ns]), $a([" ", "{", 219, 251, 28]), $a([$ctx.pad, $ctx.pad, 220, 252, 29]), $a(["\"", "}", 221, 253, 30]), $a(["#", "~", 222, 254, 31]), $a(["$", 127, 223, 255, 159]), $a(["%", ";", 170, 161, 160]), $a(["&", "<", 172, 168, 162]), $a(["'", "=", 177, 171, 163]), $a([40, ">", 178, 175, 164]), $a([41, "?", 179, 176, 165]), $a(["*", "[", 181, 180, 166]), $a(["+", 92, 185, 183, 167]), $a([",", "]", 186, 184, 169]), $a(["-", "^", 188, 187, 173]), $a([".", "_", 189, 191, 174]), $a(["/", " ", 190, 138, 182]), $a(["0", ",", 128, 139, 149]), $a(["1", ".", 129, 140, 150]), $a(["2", "/", 130, 141, 151]), $a(["3", ":", 131, 142, 152]), $a(["4", "@", 132, 143, 153]), $a(["5", "!", 133, 144, 154]), $a(["6", "|", 134, 145, 155]), $a(["7", $ctx.pd2, 135, 146, 156]), $a(["8", $ctx.sa2, 136, 147, 157]), $a(["9", $ctx.sa3, 137, 148, 158]), $a([":", $ctx.pd3, $ctx.la, $ctx.la, $ctx.la]), $a([$ctx.sb, $ctx.sa, " ", " ", " "]), $a([$ctx.sc, $ctx.sc, $ctx.lkc, $ctx.sc, $ctx.sc]), $a([$ctx.sd, $ctx.sd, $ctx.sd, $ctx.lkd, $ctx.sd]), $a([$ctx.se, $ctx.se, $ctx.se, $ctx.se, $ctx.lke]), $a([$ctx.lb, $ctx.la, $ctx.lb, $ctx.lb, $ctx.lb])]); //#20918
            $ctx.charvals = $a([new Map, new Map, new Map, new Map, new Map]); //#20921
            for (var _2e = 0, _2d = $ctx.charmaps.length - 1; _2e <= _2d; _2e += 1) { //#20930
                $ctx.i = _2e; //#20923
                $ctx.encs = $get($ctx.charmaps, $ctx.i); //#20924
                for (var _2i = 0; _2i <= 4; _2i += 1) { //#20929
                    $ctx.j = _2i; //#20926
                    var _2l = $get($ctx.encs, $ctx.j); //#20927
                    $k[$j++] = _2l; //#20927
                    if ($eq($type(_2l), 'stringtype')) { //#20927
                        var _2o = $get($k[--$j], 0); //#20927
                        $k[$j++] = _2o; //#20927
                    } //#20927
                    $put($get($ctx.charvals, $ctx.j), $k[--$j], $ctx.i); //#20928
                } //#20928
            } //#20928
            $ctx.seta = $get($ctx.charvals, 0); //#20931
            $ctx.setb = $get($ctx.charvals, 1); //#20932
            $ctx.setc = $get($ctx.charvals, 2); //#20933
            $ctx.setd = $get($ctx.charvals, 3); //#20934
            $ctx.sete = $get($ctx.charvals, 4); //#20935
            for (var _34 in $ctx) {
                $ctx.hasOwnProperty(_34) && (bwipp_maxicode.$ctx[_34] = $ctx[_34]);
            } //#20935
            bwipp_maxicode.$ctx._20936 = 1; //#20935
        })(); //#20935
    } //#20935
    $k[$j++] = Infinity; //#20939
    for (var _36 = 0, _37 = $1.msglen + 1; _36 < _37; _36++) { //#20939
        $k[$j++] = 0; //#20939
    } //#20939
    $1.nseq = $a(); //#20939
    for (var _3A = $1.msglen - 1; _3A >= 0; _3A -= 1) { //#20947
        $1.i = _3A; //#20941
        var _3D = $get($1.msg, $1.i); //#20942
        if ((_3D >= 48) && (_3D <= 57)) { //#20945
            $put($1.nseq, $1.i, $f($get($1.nseq, $1.i + 1) + 1)); //#20943
        } else { //#20945
            $put($1.nseq, $1.i, 0); //#20945
        } //#20945
    } //#20945
    $1.nseq = $geti($1.nseq, 0, $1.msglen); //#20948
    $1.prefixinset = function() {
        $k[$j++] = 0; //#20955
        for (;;) { //#20955
            var _3O = $k[--$j]; //#20953
            var _3P = $k[--$j]; //#20953
            $k[$j++] = _3P; //#20953
            $k[$j++] = _3O; //#20953
            if (_3O >= _3P.length) { //#20953
                break; //#20953
            } //#20953
            var _3Q = $k[--$j]; //#20954
            var _3R = $k[--$j]; //#20954
            var _3T = $k[--$j]; //#20954
            var _3U = $get(_3T, $get(_3R, _3Q)) !== undefined; //#20954
            $k[$j++] = _3T; //#20954
            $k[$j++] = _3R; //#20954
            $k[$j++] = _3Q; //#20954
            if (_3U) { //#20954
                var _3V = $k[--$j]; //#20954
                $k[$j++] = $f(_3V + 1); //#20954
            } else { //#20954
                break; //#20954
            } //#20954
        } //#20954
        var _3W = $k[--$j]; //#20956
        var _3X = $k[--$j]; //#20956
        $k[$j++] = _3W; //#20956
        $k[$j++] = _3X; //#20956
        $j--; //#20956
        var _3Y = $k[--$j]; //#20956
        var _3Z = $k[--$j]; //#20956
        $k[$j++] = _3Y; //#20956
        $k[$j++] = _3Z; //#20956
        $j--; //#20956
    }; //#20956
    $1.enc = function() {
        var _3a = $k[--$j]; //#20960
        $put($1.out, $1.j, $get(_3a, $k[--$j])); //#20960
        $1.j = $1.j + 1; //#20961
    }; //#20961
    $1.out = $a(144); //#20964
    $1.i = 0; //#20965
    $1.j = 0; //#20965
    $1.cset = "seta"; //#20965
    for (;;) { //#21117
        if ($1.i == $1.msglen) { //#20974
            if ($ne($1.cset, "seta") && $ne($1.cset, "setb")) { //#20972
                $k[$j++] = $1.la; //#20970
                $k[$j++] = $1[$1.cset]; //#20970
                $1.enc(); //#20970
                $1.cset = "seta"; //#20971
            } //#20971
            break; //#20973
        } //#20973
        for (;;) { //#21116
            if ($get($1.msg, $1.i) <= -1000000) { //#21003
                $k[$j++] = $1.eci; //#20978
                $k[$j++] = $1[$1.cset]; //#20978
                $1.enc(); //#20978
                var _3x = $f((-$get($1.msg, $1.i)) - 1000000); //#20980
                $k[$j++] = _3x; //#20998
                if (_3x <= 31) { //#20997
                    var _3y = $k[--$j]; //#20981
                    $k[$j++] = _3y & 63; //#20982
                    $astore($a(1)); //#20982
                } else { //#20997
                    var _40 = $k[--$j]; //#20983
                    $k[$j++] = _40; //#20998
                    if (_40 <= 1023) { //#20997
                        var _41 = $k[--$j]; //#20984
                        $k[$j++] = ((_41 >>> 6) & 31) | 32; //#20986
                        $k[$j++] = _41 & 63; //#20986
                        $astore($a(2)); //#20986
                    } else { //#20997
                        var _43 = $k[--$j]; //#20987
                        $k[$j++] = _43; //#20998
                        if (_43 <= 32767) { //#20997
                            var _44 = $k[--$j]; //#20988
                            $k[$j++] = ((_44 >>> 12) & 47) | 48; //#20991
                            $k[$j++] = (_44 >>> 6) & 63; //#20991
                            $k[$j++] = _44 & 63; //#20991
                            $astore($a(3)); //#20991
                        } else { //#20997
                            var _46 = $k[--$j]; //#20993
                            $k[$j++] = ((_46 >>> 18) & 55) | 56; //#20997
                            $k[$j++] = (_46 >>> 12) & 63; //#20997
                            $k[$j++] = (_46 >>> 6) & 63; //#20997
                            $k[$j++] = _46 & 63; //#20997
                            $astore($a(4)); //#20997
                        } //#20997
                    } //#20997
                } //#20997
                var _48 = $k[--$j]; //#20999
                $puti($1.out, $1.j, _48); //#20999
                $1.j = _48.length + $1.j; //#21000
                $1.i = $1.i + 1; //#21001
                break; //#21002
            } //#21002
            if ($get($1.nseq, $1.i) >= 9) { //#21014
                var _4I = $geti($1.msg, $1.i, 9); //#21007
                $k[$j++] = 0; //#21007
                for (var _4J = 0, _4K = _4I.length; _4J < _4K; _4J++) { //#21007
                    var _4M = $k[--$j]; //#21007
                    $k[$j++] = ($f(_4M + $f($get(_4I, _4J) - 48))) * 10; //#21007
                } //#21007
                var _4N = $k[--$j]; //#21007
                $k[$j++] = ~~(_4N / 10); //#21008
                for (var _4O = 0, _4P = 4; _4O < _4P; _4O++) { //#21008
                    var _4Q = $k[--$j]; //#21008
                    $k[$j++] = _4Q & 63; //#21008
                    $k[$j++] = _4Q >>> 6; //#21008
                } //#21008
                $k[$j++] = $get($1[$1.cset], $1.ns); //#21009
                for (var _4V = 0; _4V <= 10; _4V += 2) { //#21009
                    var _4W = $k[$j - 1 - _4V]; //#21009
                    $k[$j++] = _4W; //#21009
                } //#21009
                $astore($a(6)); //#21009
                var _4Y = $k[--$j]; //#21009
                var _4Z = $k[--$j]; //#21009
                var _4a = $k[--$j]; //#21009
                var _4b = $k[--$j]; //#21009
                var _4c = $k[--$j]; //#21009
                var _4d = $k[--$j]; //#21009
                var _4e = $k[--$j]; //#21009
                $k[$j++] = _4Y; //#21009
                $k[$j++] = _4e; //#21009
                $k[$j++] = _4d; //#21009
                $k[$j++] = _4c; //#21009
                $k[$j++] = _4b; //#21009
                $k[$j++] = _4a; //#21009
                $k[$j++] = _4Z; //#21009
                for (var _4f = 0, _4g = 6; _4f < _4g; _4f++) { //#21009
                    $j--; //#21009
                } //#21009
                $puti($1.out, $1.j, $k[--$j]); //#21010
                $1.i = $1.i + 9; //#21011
                $1.j = $1.j + 6; //#21012
                break; //#21013
            } //#21013
            $1.char1 = $get($1.msg, $1.i); //#21017
            $k[$j++] = 'char2'; //#21018
            if (($1.i + 1) < $1.msglen) { //#21018
                $k[$j++] = $get($1.msg, $1.i + 1); //#21018
            } else { //#21018
                $k[$j++] = -99; //#21018
            } //#21018
            var _4u = $k[--$j]; //#21018
            $1[$k[--$j]] = _4u; //#21018
            $k[$j++] = 'char3'; //#21019
            if (($1.i + 2) < $1.msglen) { //#21019
                $k[$j++] = $get($1.msg, $1.i + 2); //#21019
            } else { //#21019
                $k[$j++] = -99; //#21019
            } //#21019
            var _51 = $k[--$j]; //#21019
            $1[$k[--$j]] = _51; //#21019
            var _56 = $get($1[$1.cset], $1.char1) !== undefined; //#21022
            if (_56) { //#21026
                $k[$j++] = $1.char1; //#21023
                $k[$j++] = $1[$1.cset]; //#21023
                $1.enc(); //#21023
                $1.i = $1.i + 1; //#21024
                break; //#21025
            } //#21025
            var _5E = $get($1.setb, $1.char1) !== undefined; //#21029
            if ($eq($1.cset, "seta") && _5E) { //#21039
                var _5H = $get($1.setb, $1.char2) !== undefined; //#21030
                if (_5H) { //#21036
                    $k[$j++] = $1.lb; //#21031
                    $k[$j++] = $1.seta; //#21031
                    $1.enc(); //#21031
                    $1.cset = "setb"; //#21032
                } else { //#21036
                    $k[$j++] = $1.sb; //#21034
                    $k[$j++] = $1.seta; //#21034
                    $1.enc(); //#21034
                    $k[$j++] = $1.char1; //#21035
                    $k[$j++] = $1.setb; //#21035
                    $1.enc(); //#21035
                    $1.i = $1.i + 1; //#21036
                } //#21036
                break; //#21038
            } //#21038
            var _5S = $get($1.seta, $1.char1) !== undefined; //#21042
            if ($eq($1.cset, "setb") && _5S) { //#21067
                var _5T = $1.seta; //#21043
                var _5U = $1.msg; //#21043
                var _5V = $1.i; //#21043
                var _5W = $1.msglen; //#21043
                var _5X = $1.i; //#21043
                var _5Y = _5W - _5X; //#21043
                var _5Z = 4; //#21043
                if (4 > (_5W - _5X)) { //#21043
                    var _ = _5Y; //#21043
                    _5Y = _5Z; //#21043
                    _5Z = _; //#21043
                } //#21043
                $k[$j++] = 'p'; //#21043
                $k[$j++] = _5T; //#21043
                $k[$j++] = $geti(_5U, _5V, _5Z); //#21043
                $1.prefixinset(); //#21043
                var _5b = $k[--$j]; //#21043
                $1[$k[--$j]] = _5b; //#21043
                if ($1.p == 1) { //#21048
                    $k[$j++] = $1.sa; //#21045
                    $k[$j++] = $1.setb; //#21045
                    $1.enc(); //#21045
                    $k[$j++] = $1.char1; //#21046
                    $k[$j++] = $1.seta; //#21046
                    $1.enc(); //#21046
                    $1.i = $1.i + 1; //#21047
                } //#21047
                if ($1.p == 2) { //#21054
                    $k[$j++] = $1.sa2; //#21050
                    $k[$j++] = $1.setb; //#21050
                    $1.enc(); //#21050
                    $k[$j++] = $1.char1; //#21051
                    $k[$j++] = $1.seta; //#21051
                    $1.enc(); //#21051
                    $k[$j++] = $1.char2; //#21052
                    $k[$j++] = $1.seta; //#21052
                    $1.enc(); //#21052
                    $1.i = $1.i + 2; //#21053
                } //#21053
                if ($1.p == 3) { //#21061
                    $k[$j++] = $1.sa3; //#21056
                    $k[$j++] = $1.setb; //#21056
                    $1.enc(); //#21056
                    $k[$j++] = $1.char1; //#21057
                    $k[$j++] = $1.seta; //#21057
                    $1.enc(); //#21057
                    $k[$j++] = $1.char2; //#21058
                    $k[$j++] = $1.seta; //#21058
                    $1.enc(); //#21058
                    $k[$j++] = $1.char3; //#21059
                    $k[$j++] = $1.seta; //#21059
                    $1.enc(); //#21059
                    $1.i = $1.i + 3; //#21060
                } //#21060
                if ($1.p >= 4) { //#21065
                    $k[$j++] = $1.la; //#21063
                    $k[$j++] = $1.setb; //#21063
                    $1.enc(); //#21063
                    $1.cset = "seta"; //#21064
                } //#21064
                break; //#21066
            } //#21066
            var _66 = $get($1.seta, $1.char1) !== undefined; //#21070
            if (_66) { //#21074
                $k[$j++] = $1.la; //#21071
                $k[$j++] = $1[$1.cset]; //#21071
                $1.enc(); //#21071
                $1.cset = "seta"; //#21072
                break; //#21073
            } //#21073
            var _6C = $get($1.setb, $1.char1) !== undefined; //#21075
            if (_6C) { //#21079
                $k[$j++] = $1.lb; //#21076
                $k[$j++] = $1[$1.cset]; //#21076
                $1.enc(); //#21076
                $1.cset = "setb"; //#21077
                break; //#21078
            } //#21078
            var _6I = $get($1.setc, $1.char1) !== undefined; //#21082
            if (_6I) { //#21082
                $1.setx = "setc"; //#21082
                $1.sx = $1.sc; //#21082
                $1.lkx = $1.lkc; //#21082
            } //#21082
            var _6N = $get($1.setd, $1.char1) !== undefined; //#21083
            if (_6N) { //#21083
                $1.setx = "setd"; //#21083
                $1.sx = $1.sd; //#21083
                $1.lkx = $1.lkd; //#21083
            } //#21083
            var _6S = $get($1.sete, $1.char1) !== undefined; //#21084
            if (_6S) { //#21084
                $1.setx = "sete"; //#21084
                $1.sx = $1.se; //#21084
                $1.lkx = $1.lke; //#21084
            } //#21084
            var _6W = $1[$1.setx]; //#21087
            var _6X = $1.msg; //#21087
            var _6Y = $1.i; //#21087
            var _6Z = $1.msglen; //#21087
            var _6a = $1.i; //#21087
            var _6b = _6Z - _6a; //#21087
            var _6c = 4; //#21087
            if (4 > (_6Z - _6a)) { //#21087
                var _ = _6b; //#21087
                _6b = _6c; //#21087
                _6c = _; //#21087
            } //#21087
            $k[$j++] = 'p'; //#21087
            $k[$j++] = _6W; //#21087
            $k[$j++] = $geti(_6X, _6Y, _6c); //#21087
            $1.prefixinset(); //#21087
            var _6e = $k[--$j]; //#21087
            $1[$k[--$j]] = _6e; //#21087
            if ($1.p == 1) { //#21092
                $k[$j++] = $1.sx; //#21089
                $k[$j++] = $1[$1.cset]; //#21089
                $1.enc(); //#21089
                $k[$j++] = $1.char1; //#21090
                $k[$j++] = $1[$1.setx]; //#21090
                $1.enc(); //#21090
                $1.i = $1.i + 1; //#21091
            } //#21091
            if ($1.p == 2) { //#21099
                $k[$j++] = $1.sx; //#21094
                $k[$j++] = $1[$1.cset]; //#21094
                $1.enc(); //#21094
                $k[$j++] = $1.char1; //#21095
                $k[$j++] = $1[$1.setx]; //#21095
                $1.enc(); //#21095
                $k[$j++] = $1.sx; //#21096
                $k[$j++] = $1[$1.cset]; //#21096
                $1.enc(); //#21096
                $k[$j++] = $1.char2; //#21097
                $k[$j++] = $1[$1.setx]; //#21097
                $1.enc(); //#21097
                $1.i = $1.i + 2; //#21098
            } //#21098
            if ($1.p == 3) { //#21108
                $k[$j++] = $1.sx; //#21101
                $k[$j++] = $1[$1.cset]; //#21101
                $1.enc(); //#21101
                $k[$j++] = $1.char1; //#21102
                $k[$j++] = $1[$1.setx]; //#21102
                $1.enc(); //#21102
                $k[$j++] = $1.sx; //#21103
                $k[$j++] = $1[$1.cset]; //#21103
                $1.enc(); //#21103
                $k[$j++] = $1.char2; //#21104
                $k[$j++] = $1[$1.setx]; //#21104
                $1.enc(); //#21104
                $k[$j++] = $1.sx; //#21105
                $k[$j++] = $1[$1.cset]; //#21105
                $1.enc(); //#21105
                $k[$j++] = $1.char3; //#21106
                $k[$j++] = $1[$1.setx]; //#21106
                $1.enc(); //#21106
                $1.i = $1.i + 3; //#21107
            } //#21107
            if ($1.p >= 4) { //#21113
                $k[$j++] = $1.sx; //#21110
                $k[$j++] = $1[$1.cset]; //#21110
                $1.enc(); //#21110
                $k[$j++] = $1.lkx; //#21111
                $k[$j++] = $1[$1.setx]; //#21111
                $1.enc(); //#21111
                $1.cset = $1.setx; //#21112
            } //#21112
            break; //#21115
        } //#21115
    } //#21115
    $1.encmsg = $geti($1.out, 0, $1.j); //#21118
    $1.padval = $get($1[$1.cset], $1.pad); //#21119
    $1.sami = $a([]); //#21122
    if ($1.sam != -1) { //#21127
        $1.sami = $a(2); //#21124
        $put($1.sami, 0, $get($1.seta, $1.pad)); //#21125
        $put($1.sami, 1, (((~~($1.sam / 10)) - 1) * 8) + (($1.sam % 10) - 1)); //#21126
    } //#21126
    $k[$j++] = Infinity; //#21128
    $aload($1.sami); //#21128
    $aload($1.encmsg); //#21128
    $1.encmsg = $a(); //#21128
    if (($1.mode == 2) || ($1.mode == 3)) { //#21183
        var _7r = $strcpy($s(4), "0000"); //#21134
        var _7u = $cvrs($s(4), ~~$1.mode, 2); //#21134
        $puti(_7r, 4 - _7u.length, _7u); //#21134
        $1.mdb = _7r; //#21134
        var _7w = $strcpy($s(10), "0000000000"); //#21135
        var _7z = $cvrs($s(10), $cvi($1.ccode), 2); //#21135
        $puti(_7w, 10 - _7z.length, _7z); //#21135
        $1.ccb = _7w; //#21135
        var _81 = $strcpy($s(10), "0000000000"); //#21136
        var _84 = $cvrs($s(10), $cvi($1.scode), 2); //#21136
        $puti(_81, 10 - _84.length, _84); //#21136
        $1.scb = _81; //#21136
        $1.pcb = $strcpy($s(36), "000000000000000000000000000000000000"); //#21137
        if ($1.mode == 2) { //#21150
            var _8B = $cvrs($s(6), $1.pcode.length, 2); //#21140
            $puti($1.pcb, 6 - _8B.length, _8B); //#21140
            var _8F = $cvrs($s(30), $cvi($1.pcode), 2); //#21141
            $puti($1.pcb, 36 - _8F.length, _8F); //#21141
        } else { //#21150
            $k[$j++] = Infinity; //#21146
            var _8H = $strcpy($s(6), "      "); //#21145
            $k[$j++] = _8H; //#21145
            $k[$j++] = _8H; //#21145
            $k[$j++] = 0; //#21145
            if ($1.pcode.length > 6) { //#21145
                $k[$j++] = $geti($1.pcode, 0, 6); //#21145
            } else { //#21145
                $k[$j++] = $1.pcode; //#21145
            } //#21145
            var _8M = $k[--$j]; //#21145
            var _8N = $k[--$j]; //#21145
            $puti($k[--$j], _8N, _8M); //#21145
            $forall($k[--$j], function() { //#21146
                var _8S = $get($1.seta, $k[--$j]); //#21146
                $k[$j++] = _8S; //#21146
            }); //#21146
            $1.pccw = $a(); //#21146
            for (var _8U = 0; _8U <= 5; _8U += 1) { //#21151
                $1.i = _8U; //#21149
                var _8a = $cvrs($s(6), $get($1.pccw, $1.i), 2); //#21150
                $puti($1.pcb, ((6 * $1.i) + 6) - _8a.length, _8a); //#21150
            } //#21150
        } //#21150
        $1.scm = $s(60); //#21155
        $puti($1.scm, 2, $1.mdb); //#21156
        $puti($1.scm, 38, $geti($1.pcb, 0, 4)); //#21157
        $puti($1.scm, 30, $geti($1.pcb, 4, 6)); //#21158
        $puti($1.scm, 24, $geti($1.pcb, 10, 6)); //#21159
        $puti($1.scm, 18, $geti($1.pcb, 16, 6)); //#21160
        $puti($1.scm, 12, $geti($1.pcb, 22, 6)); //#21161
        $puti($1.scm, 6, $geti($1.pcb, 28, 6)); //#21162
        $puti($1.scm, 0, $geti($1.pcb, 34, 2)); //#21163
        $puti($1.scm, 52, $geti($1.ccb, 0, 2)); //#21164
        $puti($1.scm, 42, $geti($1.ccb, 2, 6)); //#21165
        $puti($1.scm, 36, $geti($1.ccb, 8, 2)); //#21166
        $puti($1.scm, 54, $geti($1.scb, 0, 6)); //#21167
        $puti($1.scm, 48, $geti($1.scb, 6, 4)); //#21168
        $1.pri = $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]); //#21171
        for (var _9G = 0; _9G <= 59; _9G += 1) { //#21177
            $1.i = _9G; //#21173
            $1.ps = ~~($1.i / 6); //#21174
            $1.ep = (~~(Math.pow(2, 5 - ($1.i % 6)))) * ($get($1.scm, $1.i) - 48); //#21175
            $put($1.pri, $1.ps, $f($get($1.pri, $1.ps) + $1.ep)); //#21176
        } //#21176
        $k[$j++] = Infinity; //#21180
        for (var _9S = 0, _9T = 84; _9S < _9T; _9S++) { //#21180
            $k[$j++] = $1.padval; //#21180
        } //#21180
        $1.sec = $a(); //#21180
        $puti($1.sec, 0, $1.encmsg); //#21181
    } //#21181
    if (((($1.mode == 4) || ($1.mode == 5)) || ($1.mode == 6)) || ($1.mode == -1)) { //#21202
        if ($1.mode == -1) { //#21191
            var _9e = ($1.encmsg.length <= 77) ? 5 : 4; //#21190
            $1.mode = _9e; //#21190
        } //#21190
        $k[$j++] = Infinity; //#21194
        var _9g = ($1.mode == 5) ? 78 : 94; //#21194
        for (var _9h = 0, _9i = _9g; _9h < _9i; _9h++) { //#21194
            $k[$j++] = $1.padval; //#21194
        } //#21194
        $1.cws = $a(); //#21194
        $put($1.cws, 0, $1.mode); //#21195
        $puti($1.cws, 1, $1.encmsg); //#21196
        $1.pri = $geti($1.cws, 0, 10); //#21199
        $1.sec = $geti($1.cws, 10, $1.cws.length - 10); //#21200
    } //#21200
    $k[$j++] = Infinity; //#21205
    $k[$j++] = 1; //#21205
    for (var _9u = 0, _9v = 63; _9u < _9v; _9u++) { //#21205
        var _9w = $k[--$j]; //#21205
        var _9x = _9w * 2; //#21205
        $k[$j++] = _9w; //#21205
        $k[$j++] = _9x; //#21205
        if (_9x >= 64) { //#21205
            var _9y = $k[--$j]; //#21205
            $k[$j++] = _9y ^ 67; //#21205
        } //#21205
    } //#21205
    $1.rsalog = $a(); //#21205
    $1.rslog = $a(64); //#21206
    for (var _A1 = 1; _A1 <= 63; _A1 += 1) { //#21207
        $put($1.rslog, $get($1.rsalog, _A1), _A1); //#21207
    } //#21207
    $1.rsprod = function() {
        var _A5 = $k[--$j]; //#21211
        var _A6 = $k[--$j]; //#21211
        $k[$j++] = _A6; //#21215
        $k[$j++] = _A5; //#21215
        if ((_A5 != 0) && (_A6 != 0)) { //#21214
            var _A9 = $get($1.rslog, $k[--$j]); //#21212
            var _AE = $get($1.rsalog, $f(_A9 + $get($1.rslog, $k[--$j])) % 63); //#21212
            $k[$j++] = _AE; //#21212
        } else { //#21214
            $j -= 2; //#21214
            $k[$j++] = 0; //#21214
        } //#21214
    }; //#21214
    $1.rscodes = function() {
        $1.rsnum = $k[--$j]; //#21221
        $1.cwb = $k[--$j]; //#21222
        $k[$j++] = Infinity; //#21225
        $k[$j++] = 1; //#21225
        for (var _AI = 0, _AJ = $1.rsnum; _AI < _AJ; _AI++) { //#21225
            $k[$j++] = 0; //#21225
        } //#21225
        $1.coeffs = $a(); //#21225
        for (var _AN = 1, _AM = $1.rsnum; _AN <= _AM; _AN += 1) { //#21234
            $1.i = _AN; //#21227
            $put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); //#21228
            for (var _AU = $1.i - 1; _AU >= 1; _AU -= 1) { //#21232
                $1.j = _AU; //#21230
                $k[$j++] = $1.coeffs; //#21231
                $k[$j++] = $1.j; //#21231
                $k[$j++] = $get($1.coeffs, $1.j - 1); //#21231
                $k[$j++] = $get($1.coeffs, $1.j); //#21231
                $k[$j++] = $get($1.rsalog, $1.i); //#21231
                $1.rsprod(); //#21231
                var _Ag = $k[--$j]; //#21231
                var _Ah = $k[--$j]; //#21231
                var _Ai = $k[--$j]; //#21231
                $put($k[--$j], _Ai, $xo(_Ah, _Ag)); //#21231
            } //#21231
            $k[$j++] = $1.coeffs; //#21233
            $k[$j++] = 0; //#21233
            $k[$j++] = $get($1.coeffs, 0); //#21233
            $k[$j++] = $get($1.rsalog, $1.i); //#21233
            $1.rsprod(); //#21233
            var _Aq = $k[--$j]; //#21233
            var _Ar = $k[--$j]; //#21233
            $put($k[--$j], _Ar, _Aq); //#21233
        } //#21233
        $1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); //#21235
        $k[$j++] = Infinity; //#21238
        for (var _Ax = 0, _Ay = $1.rsnum; _Ax < _Ay; _Ax++) { //#21238
            $k[$j++] = 0; //#21238
        } //#21238
        $1.ecb = $a(); //#21238
        for (var _B2 = 0, _B1 = $1.cwb.length - 1; _B2 <= _B1; _B2 += 1) { //#21247
            $1.t = $xo($get($1.cwb, _B2), $get($1.ecb, 0)); //#21240
            for (var _B8 = $1.ecb.length - 1; _B8 >= 0; _B8 -= 1) { //#21246
                $1.i = _B8; //#21242
                $1.p = ($1.ecb.length - $1.i) - 1; //#21243
                $k[$j++] = $1.ecb; //#21244
                $k[$j++] = $1.p; //#21244
                $k[$j++] = $1.t; //#21244
                $k[$j++] = $get($1.coeffs, $1.i); //#21244
                $1.rsprod(); //#21244
                var _BH = $k[--$j]; //#21244
                var _BI = $k[--$j]; //#21244
                $put($k[--$j], _BI, _BH); //#21244
                if ($1.i > 0) { //#21245
                    $put($1.ecb, $1.p, $xo($get($1.ecb, $1.p + 1), $get($1.ecb, $1.p))); //#21245
                } //#21245
            } //#21245
        } //#21245
        $k[$j++] = $1.ecb; //#21249
    }; //#21249
    $k[$j++] = Infinity; //#21254
    for (var _BW = 0, _BV = $1.sec.length - 1; _BW <= _BV; _BW += 2) { //#21254
        $k[$j++] = $get($1.sec, _BW); //#21254
    } //#21254
    $1.seco = $a(); //#21254
    $k[$j++] = Infinity; //#21255
    for (var _Bc = 1, _Bb = $1.sec.length - 1; _Bc <= _Bb; _Bc += 2) { //#21255
        $k[$j++] = $get($1.sec, _Bc); //#21255
    } //#21255
    $1.sece = $a(); //#21255
    var _Bh = ($1.sec.length == 84) ? 20 : 28; //#21258
    $1.scodes = _Bh; //#21258
    $k[$j++] = 'secochk'; //#21259
    $k[$j++] = $1.seco; //#21259
    $k[$j++] = $1.scodes; //#21259
    $1.rscodes(); //#21259
    var _Bk = $k[--$j]; //#21259
    $1[$k[--$j]] = _Bk; //#21259
    $k[$j++] = 'secechk'; //#21260
    $k[$j++] = $1.sece; //#21260
    $k[$j++] = $1.scodes; //#21260
    $1.rscodes(); //#21260
    var _Bo = $k[--$j]; //#21260
    $1[$k[--$j]] = _Bo; //#21260
    $k[$j++] = Infinity; //#21263
    for (var _Bs = 0, _Br = $1.scodes - 1; _Bs <= _Br; _Bs += 1) { //#21263
        $k[$j++] = $get($1.secochk, _Bs); //#21263
        $k[$j++] = $get($1.secechk, _Bs); //#21263
    } //#21263
    $1.secchk = $a(); //#21263
    $k[$j++] = Infinity; //#21270
    $aload($1.pri); //#21267
    $k[$j++] = $1.pri; //#21268
    $k[$j++] = 10; //#21268
    $1.rscodes(); //#21268
    $aload($k[--$j]); //#21268
    $aload($1.sec); //#21269
    $aload($1.secchk); //#21270
    $1.codewords = $a(); //#21270
    $k[$j++] = Infinity; //#21274
    for (var _C4 = 0, _C5 = 864; _C4 < _C5; _C4++) { //#21274
        $k[$j++] = 0; //#21274
    } //#21274
    $1.mods = $a(); //#21274
    for (var _C7 = 0; _C7 <= 143; _C7 += 1) { //#21279
        $1.i = _C7; //#21276
        $k[$j++] = Infinity; //#21277
        var _CC = $cvrs($s(6), $get($1.codewords, $1.i), 2); //#21277
        for (var _CD = 0, _CE = _CC.length; _CD < _CE; _CD++) { //#21277
            $k[$j++] = $get(_CC, _CD) - 48; //#21277
        } //#21277
        $1.cw = $a(); //#21277
        $puti($1.mods, (6 * $1.i) + (6 - $1.cw.length), $1.cw); //#21278
    } //#21278
    if (!bwipp_maxicode.$ctx._21329) { //#21329
        (function() { //#21329
            var $ctx = Object.create($1); //#21329
            $ctx.modmap = $a([469, 529, 286, 316, 347, 346, 673, 672, 703, 702, 647, 676, 283, 282, 313, 312, 370, 610, 618, 379, 378, 409, 408, 439, 705, 704, 559, 589, 588, 619, 458, 518, 640, 701, 675, 674, 285, 284, 315, 314, 310, 340, 531, 289, 288, 319, 349, 348, 456, 486, 517, 516, 471, 470, 369, 368, 399, 398, 429, 428, 549, 548, 579, 578, 609, 608, 649, 648, 679, 678, 709, 708, 639, 638, 669, 668, 699, 698, 279, 278, 309, 308, 339, 338, 381, 380, 411, 410, 441, 440, 561, 560, 591, 590, 621, 620, 547, 546, 577, 576, 607, 606, 367, 366, 397, 396, 427, 426, 291, 290, 321, 320, 351, 350, 651, 650, 681, 680, 711, 710, 1, 0, 31, 30, 61, 60, 3, 2, 33, 32, 63, 62, 5, 4, 35, 34, 65, 64, 7, 6, 37, 36, 67, 66, 9, 8, 39, 38, 69, 68, 11, 10, 41, 40, 71, 70, 13, 12, 43, 42, 73, 72, 15, 14, 45, 44, 75, 74, 17, 16, 47, 46, 77, 76, 19, 18, 49, 48, 79, 78, 21, 20, 51, 50, 81, 80, 23, 22, 53, 52, 83, 82, 25, 24, 55, 54, 85, 84, 27, 26, 57, 56, 87, 86, 117, 116, 147, 146, 177, 176, 115, 114, 145, 144, 175, 174, 113, 112, 143, 142, 173, 172, 111, 110, 141, 140, 171, 170, 109, 108, 139, 138, 169, 168, 107, 106, 137, 136, 167, 166, 105, 104, 135, 134, 165, 164, 103, 102, 133, 132, 163, 162, 101, 100, 131, 130, 161, 160, 99, 98, 129, 128, 159, 158, 97, 96, 127, 126, 157, 156, 95, 94, 125, 124, 155, 154, 93, 92, 123, 122, 153, 152, 91, 90, 121, 120, 151, 150, 181, 180, 211, 210, 241, 240, 183, 182, 213, 212, 243, 242, 185, 184, 215, 214, 245, 244, 187, 186, 217, 216, 247, 246, 189, 188, 219, 218, 249, 248, 191, 190, 221, 220, 251, 250, 193, 192, 223, 222, 253, 252, 195, 194, 225, 224, 255, 254, 197, 196, 227, 226, 257, 256, 199, 198, 229, 228, 259, 258, 201, 200, 231, 230, 261, 260, 203, 202, 233, 232, 263, 262, 205, 204, 235, 234, 265, 264, 207, 206, 237, 236, 267, 266, 297, 296, 327, 326, 357, 356, 295, 294, 325, 324, 355, 354, 293, 292, 323, 322, 353, 352, 277, 276, 307, 306, 337, 336, 275, 274, 305, 304, 335, 334, 273, 272, 303, 302, 333, 332, 271, 270, 301, 300, 331, 330, 361, 360, 391, 390, 421, 420, 363, 362, 393, 392, 423, 422, 365, 364, 395, 394, 425, 424, 383, 382, 413, 412, 443, 442, 385, 384, 415, 414, 445, 444, 387, 386, 417, 416, 447, 446, 477, 476, 507, 506, 537, 536, 475, 474, 505, 504, 535, 534, 473, 472, 503, 502, 533, 532, 455, 454, 485, 484, 515, 514, 453, 452, 483, 482, 513, 512, 451, 450, 481, 480, 511, 510, 541, 540, 571, 570, 601, 600, 543, 542, 573, 572, 603, 602, 545, 544, 575, 574, 605, 604, 563, 562, 593, 592, 623, 622, 565, 564, 595, 594, 625, 624, 567, 566, 597, 596, 627, 626, 657, 656, 687, 686, 717, 716, 655, 654, 685, 684, 715, 714, 653, 652, 683, 682, 713, 712, 637, 636, 667, 666, 697, 696, 635, 634, 665, 664, 695, 694, 633, 632, 663, 662, 693, 692, 631, 630, 661, 660, 691, 690, 721, 720, 751, 750, 781, 780, 723, 722, 753, 752, 783, 782, 725, 724, 755, 754, 785, 784, 727, 726, 757, 756, 787, 786, 729, 728, 759, 758, 789, 788, 731, 730, 761, 760, 791, 790, 733, 732, 763, 762, 793, 792, 735, 734, 765, 764, 795, 794, 737, 736, 767, 766, 797, 796, 739, 738, 769, 768, 799, 798, 741, 740, 771, 770, 801, 800, 743, 742, 773, 772, 803, 802, 745, 744, 775, 774, 805, 804, 747, 746, 777, 776, 807, 806, 837, 836, 867, 866, 897, 896, 835, 834, 865, 864, 895, 894, 833, 832, 863, 862, 893, 892, 831, 830, 861, 860, 891, 890, 829, 828, 859, 858, 889, 888, 827, 826, 857, 856, 887, 886, 825, 824, 855, 854, 885, 884, 823, 822, 853, 852, 883, 882, 821, 820, 851, 850, 881, 880, 819, 818, 849, 848, 879, 878, 817, 816, 847, 846, 877, 876, 815, 814, 845, 844, 875, 874, 813, 812, 843, 842, 873, 872, 811, 810, 841, 840, 871, 870, 901, 900, 931, 930, 961, 960, 903, 902, 933, 932, 963, 962, 905, 904, 935, 934, 965, 964, 907, 906, 937, 936, 967, 966, 909, 908, 939, 938, 969, 968, 911, 910, 941, 940, 971, 970, 913, 912, 943, 942, 973, 972, 915, 914, 945, 944, 975, 974, 917, 916, 947, 946, 977, 976, 919, 918, 949, 948, 979, 978, 921, 920, 951, 950, 981, 980, 923, 922, 953, 952, 983, 982, 925, 924, 955, 954, 985, 984, 927, 926, 957, 956, 987, 986, 58, 89, 88, 118, 149, 148, 178, 209, 208, 238, 269, 268, 298, 329, 328, 358, 389, 388, 418, 449, 448, 478, 509, 508, 538, 569, 568, 598, 629, 628, 658, 689, 688, 718, 749, 748, 778, 809, 808, 838, 869, 868, 898, 929, 928, 958, 989, 988]); //#21328
            for (var _CM in $ctx) {
                $ctx.hasOwnProperty(_CM) && (bwipp_maxicode.$ctx[_CM] = $ctx[_CM]);
            } //#21328
            bwipp_maxicode.$ctx._21329 = 1; //#21328
        })(); //#21328
    } //#21328
    $1.pixs = $a(864); //#21332
    $1.j = 0; //#21333
    for (var _CQ = 0, _CP = $1.mods.length - 1; _CQ <= _CP; _CQ += 1) { //#21340
        $1.i = _CQ; //#21335
        if ($get($1.mods, $1.i) == 1) { //#21339
            $put($1.pixs, $1.j, $get($1.modmap, $1.i)); //#21337
            $1.j = $1.j + 1; //#21338
        } //#21338
    } //#21338
    $k[$j++] = Infinity; //#21341
    var _Cc = $geti($1.pixs, 0, $1.j); //#21341
    for (var _Cd = 0, _Ce = _Cc.length; _Cd < _Ce; _Cd++) { //#21341
        $k[$j++] = $get(_Cc, _Cd); //#21341
    } //#21341
    $k[$j++] = 28; //#21341
    $k[$j++] = 29; //#21341
    $k[$j++] = 280; //#21341
    $k[$j++] = 281; //#21341
    $k[$j++] = 311; //#21341
    $k[$j++] = 457; //#21341
    $k[$j++] = 488; //#21341
    $k[$j++] = 500; //#21341
    $k[$j++] = 530; //#21341
    $k[$j++] = 670; //#21341
    $k[$j++] = 700; //#21341
    $k[$j++] = 677; //#21341
    $k[$j++] = 707; //#21341
    $1.pixs = $a(); //#21341
    var _Cj = new Map([
        ["ren", bwipp_renmaximatrix],
        ["pixs", $1.pixs],
        ["opt", $1.options]
    ]); //#21347
    $k[$j++] = _Cj; //#21350
    if (!$1.dontdraw) { //#21350
        bwipp_renmaximatrix(); //#21350
    } //#21350
}

function bwipp_azteccode() {
    var $1 = Object.create(bwipp_azteccode.$ctx || (bwipp_azteccode.$ctx = {})); //#21385
    $1.dontdraw = false; //#21388
    $1.format = "unset"; //#21389
    $1.readerinit = false; //#21390
    $1.layers = -1; //#21391
    $1.eclevel = 23; //#21392
    $1.ecaddchars = 3; //#21393
    $1.raw = false; //#21394
    $1.parse = false; //#21395
    $1.parsefnc = false; //#21396
    $k[$j++] = $1; //#21398
    bwipp_processoptions(); //#21398
    $1.options = $k[--$j]; //#21398
    $1.barcode = $k[--$j]; //#21399
    if ($eq($1.format, "rune")) { //#21415
        if ($1.barcode.length == 0) { //#21406
            $k[$j++] = 'bwipp.aztecRuneNotNumeric#21405'; //#21405
            $k[$j++] = "Aztec runes must be numeric"; //#21405
            bwipp_raiseerror(); //#21405
        } //#21405
        $forall($1.barcode, function() { //#21411
            var _5 = $k[--$j]; //#21408
            if ((_5 < 48) || (_5 > 57)) { //#21410
                $k[$j++] = 'bwipp.aztecRuneNotNumeric#21409'; //#21409
                $k[$j++] = "Aztec runes must be numeric"; //#21409
                bwipp_raiseerror(); //#21409
            } //#21409
        }); //#21409
        var _7 = $cvi($1.barcode); //#21412
        if ((_7 < 0) || (_7 > 255)) { //#21414
            $k[$j++] = 'bwipp.aztecRuneInvalid#21413'; //#21413
            $k[$j++] = "Aztec runes must be 0 to 255"; //#21413
            bwipp_raiseerror(); //#21413
        } //#21413
    } //#21413
    $1.fn1 = -1; //#21418
    var _B = new Map([
        ["parse", $1.parse],
        ["parsefnc", $1.parsefnc],
        ["eci", true],
        ["FNC1", $1.fn1]
    ]); //#21423
    $1.fncvals = _B; //#21424
    $k[$j++] = 'msg'; //#21425
    $k[$j++] = $1.barcode; //#21425
    $k[$j++] = $1.fncvals; //#21425
    bwipp_parseinput(); //#21425
    var _E = $k[--$j]; //#21425
    $1[$k[--$j]] = _E; //#21425
    $1.msglen = $1.msg.length; //#21426
    if (!bwipp_azteccode.$ctx._21526) { //#21526
        (function() { //#21526
            var $ctx = Object.create($1); //#21526
            $ctx.U = 0; //#21430
            $ctx.L = 1; //#21430
            $ctx.M = 2; //#21430
            $ctx.P = 3; //#21430
            $ctx.D = 4; //#21430
            $ctx.B = 5; //#21430
            $ctx.lu = -2; //#21433
            $ctx.ll = -3; //#21433
            $ctx.lm = -4; //#21433
            $ctx.lp = -5; //#21434
            $ctx.ld = -6; //#21434
            $ctx.su = -7; //#21434
            $ctx.sp = -8; //#21435
            $ctx.sb = -9; //#21435
            $ctx.fl = -10; //#21435
            $ctx.p2 = -11; //#21436
            $ctx.p3 = -12; //#21436
            $ctx.p4 = -13; //#21436
            $ctx.p5 = -14; //#21436
            $ctx.charmaps = $a([$a([$ctx.sp, $ctx.sp, $ctx.sp, $ctx.fl, $ctx.sp]), $a([32, 32, 32, 13, 32]), $a(["A", "a", 1, $ctx.p2, "0"]), $a(["B", "b", 2, $ctx.p3, "1"]), $a(["C", "c", 3, $ctx.p4, "2"]), $a(["D", "d", 4, $ctx.p5, "3"]), $a(["E", "e", 5, "!", "4"]), $a(["F", "f", 6, "\"", "5"]), $a(["G", "g", 7, "#", "6"]), $a(["H", "h", 8, "$", "7"]), $a(["I", "i", 9, "%", "8"]), $a(["J", "j", 10, "&", "9"]), $a(["K", "k", 11, "'", ","]), $a(["L", "l", 12, 40, "."]), $a(["M", "m", 13, 41, $ctx.lu]), $a(["N", "n", 27, "*", $ctx.su]), $a(["O", "o", 28, "+", -99]), $a(["P", "p", 29, ",", -99]), $a(["Q", "q", 30, "-", -99]), $a(["R", "r", 31, ".", -99]), $a(["S", "s", "@", "/", -99]), $a(["T", "t", 92, ":", -99]), $a(["U", "u", "^", ";", -99]), $a(["V", "v", "_", "<", -99]), $a(["W", "w", "`", "=", -99]), $a(["X", "x", "|", ">", -99]), $a(["Y", "y", "~", "?", -99]), $a(["Z", "z", 127, "[", -99]), $a([$ctx.ll, $ctx.su, $ctx.ll, "]", -99]), $a([$ctx.lm, $ctx.lm, $ctx.lu, "{", -99]), $a([$ctx.ld, $ctx.ld, $ctx.lp, "}", -99]), $a([$ctx.sb, $ctx.sb, $ctx.sb, $ctx.lu, -99])]); //#21473
            $ctx.charvals = $a([new Map, new Map, new Map, new Map, new Map]); //#21476
            for (var _1F = 0, _1E = $ctx.charmaps.length - 1; _1F <= _1E; _1F += 1) { //#21485
                $ctx.i = _1F; //#21478
                $ctx.encs = $get($ctx.charmaps, $ctx.i); //#21479
                for (var _1J = 0; _1J <= 4; _1J += 1) { //#21484
                    $ctx.j = _1J; //#21481
                    var _1M = $get($ctx.encs, $ctx.j); //#21482
                    $k[$j++] = _1M; //#21482
                    if ($eq($type(_1M), 'stringtype')) { //#21482
                        var _1P = $get($k[--$j], 0); //#21482
                        $k[$j++] = _1P; //#21482
                    } //#21482
                    $put($get($ctx.charvals, $ctx.j), $k[--$j], $ctx.i); //#21483
                } //#21483
            } //#21483
            var _1Z = new Map([
                ["\x0d\x0a", $ctx.p2],
                [". ", $ctx.p3],
                [", ", $ctx.p4],
                [": ", $ctx.p5]
            ]); //#21492
            $ctx.pcomp = _1Z; //#21493
            $ctx.e = 10000; //#21495
            $ctx.latlen = $a([$a([0, 5, 5, 10, 5, 10]), $a([9, 0, 5, 10, 5, 10]), $a([5, 5, 0, 5, 10, 10]), $a([5, 10, 10, 0, 10, 15]), $a([4, 9, 9, 14, 0, 14]), $a([0, 0, 0, 0, 0, 0])]); //#21505
            var _21 = $ctx.lp; //#21510
            $ctx.latseq = $a([$a([$a([]), $a([$ctx.ll]), $a([$ctx.lm]), $a([$ctx.lm, $ctx.lp]), $a([$ctx.ld]), $a([$ctx.sb])]), $a([$a([$ctx.ld, $ctx.lu]), $a([]), $a([$ctx.lm]), $a([$ctx.lm, _21]), $a([$ctx.ld]), $a([$ctx.sb])]), $a([$a([$ctx.lu]), $a([$ctx.ll]), $a([]), $a([$ctx.lp]), $a([$ctx.lu, $ctx.ld]), $a([$ctx.sb])]), $a([$a([$ctx.lu]), $a([$ctx.lu, $ctx.ll]), $a([$ctx.lu, $ctx.lm]), $a([]), $a([$ctx.lu, $ctx.ld]), $a([$ctx.lu, $ctx.sb])]), $a([$a([$ctx.lu]), $a([$ctx.lu, $ctx.ll]), $a([$ctx.lu, $ctx.lm]), $a([$ctx.lu, $ctx.lm, $ctx.lp]), $a([]), $a([$ctx.lu, $ctx.sb])]), $a([$a([$ctx.lu]), $a([$ctx.ll]), $a([$ctx.lm]), $a([]), $a([]), $a([])])]); //#21515
            $ctx.shftlen = $a([$a([$ctx.e, $ctx.e, $ctx.e, 5, $ctx.e]), $a([5, $ctx.e, $ctx.e, 5, $ctx.e]), $a([$ctx.e, $ctx.e, $ctx.e, 5, $ctx.e]), $a([$ctx.e, $ctx.e, $ctx.e, $ctx.e, $ctx.e]), $a([4, $ctx.e, $ctx.e, 4, $ctx.e])]); //#21524
            for (var _3S in $ctx) {
                $ctx.hasOwnProperty(_3S) && (bwipp_azteccode.$ctx[_3S] = $ctx[_3S]);
            } //#21524
            bwipp_azteccode.$ctx._21526 = 1; //#21524
        })(); //#21524
    } //#21524
    $1.msgbits = ""; //#21529
    if ($ne($1.format, "rune") && $1.raw) { //#21530
        $1.msgbits = $1.barcode; //#21530
    } //#21530
    if ($ne($1.format, "rune") && (!$1.raw)) { //#21821
        $1.charsize = function() {
            var _3Y = $k[--$j]; //#21534
            $k[$j++] = _3Y; //#21545
            if (_3Y >= 0) { //#21543
                $j--; //#21536
                var _3b = $get($a([5, 5, 5, 5, 4, 8]), $k[--$j]); //#21536
                $k[$j++] = _3b; //#21536
            } else { //#21543
                var _3c = $k[--$j]; //#21538
                var _3d = $k[--$j]; //#21538
                $k[$j++] = _3c; //#21538
                $k[$j++] = _3d; //#21538
                $j--; //#21538
                var _3e = $k[--$j]; //#21539
                $k[$j++] = _3e; //#21544
                if (_3e == $1.fn1) { //#21543
                    $j--; //#21540
                    $k[$j++] = 8; //#21540
                } else { //#21543
                    var _3h = $f((-$k[--$j]) - 1000000); //#21542
                    $k[$j++] = _3h; //#21542
                    if (_3h == 0) { //#21542
                        $j--; //#21542
                        $k[$j++] = 1; //#21542
                    } //#21542
                    var _3i = $k[--$j]; //#21543
                    $k[$j++] = (((~~(Math.log(_3i) / Math.log(10))) + 1) * 4) + 8; //#21543
                } //#21543
            } //#21543
        }; //#21543
        $1.curlen = $a([0, $1.e, $1.e, $1.e, $1.e, $1.e]); //#21549
        $1.curseq = $a([$a([]), $a([]), $a([]), $a([]), $a([]), $a([])]); //#21550
        $1.backto = $1.U; //#21552
        $1.lastchar = ""; //#21553
        $forall($1.msg, function() { //#21705
            $1.char = $k[--$j]; //#21558
            for (;;) { //#21584
                $1.imp = false; //#21562
                var _45 = $a([$1.U, $1.L, $1.M, $1.P, $1.D, $1.B]); //#21563
                for (var _46 = 0, _47 = _45.length; _46 < _47; _46++) { //#21582
                    $1.x = $get(_45, _46); //#21564
                    var _4F = $a([$1.U, $1.L, $1.M, $1.P, $1.D, $1.B]); //#21565
                    for (var _4G = 0, _4H = _4F.length; _4G < _4H; _4G++) { //#21581
                        $1.y = $get(_4F, _4G); //#21566
                        if (($1.x != $1.B) || ($1.y == $1.backto)) { //#21580
                            $1.cost = $f($get($1.curlen, $1.x) + $get($get($1.latlen, $1.x), $1.y)); //#21568
                            if ($1.cost < $get($1.curlen, $1.y)) { //#21579
                                $put($1.curlen, $1.y, $1.cost); //#21570
                                $k[$j++] = $1.curseq; //#21573
                                $k[$j++] = $1.y; //#21573
                                $k[$j++] = Infinity; //#21573
                                $aload($get($1.curseq, $1.x)); //#21572
                                $aload($get($get($1.latseq, $1.x), $1.y)); //#21573
                                var _4m = $a(); //#21573
                                var _4n = $k[--$j]; //#21574
                                $put($k[--$j], _4n, _4m); //#21574
                                if ($1.y == $1.B) { //#21577
                                    $k[$j++] = 'backto'; //#21576
                                    if (($1.x == $1.P) || ($1.x == $1.D)) { //#21576
                                        $k[$j++] = $1.U; //#21576
                                    } else { //#21576
                                        $k[$j++] = $1.x; //#21576
                                    } //#21576
                                    var _4x = $k[--$j]; //#21576
                                    $1[$k[--$j]] = _4x; //#21576
                                } //#21576
                                $1.imp = true; //#21578
                            } //#21578
                        } //#21578
                    } //#21578
                } //#21578
                if (!$1.imp) { //#21583
                    break; //#21583
                } //#21583
            } //#21583
            $1.nxtlen = $a([$1.e, $1.e, $1.e, $1.e, $1.e, $1.e]); //#21587
            $1.nxtseq = $a(6); //#21588
            var _5E = $a([$1.U, $1.L, $1.M, $1.P, $1.D, $1.B]); //#21590
            for (var _5F = 0, _5G = _5E.length; _5F < _5G; _5F++) { //#21629
                $1.x = $get(_5E, _5F); //#21591
                for (;;) { //#21627
                    if ($1.char >= 0) { //#21599
                        if ($1.x != $1.B) { //#21597
                            var _5P = $get($get($1.charvals, $1.x), $1.char) !== undefined; //#21597
                            if (!_5P) { //#21597
                                break; //#21597
                            } //#21597
                        } //#21597
                    } else { //#21599
                        if ($1.x != $1.P) { //#21599
                            break; //#21599
                        } //#21599
                    } //#21599
                    $k[$j++] = 'cost'; //#21603
                    $k[$j++] = $get($1.curlen, $1.x); //#21603
                    $k[$j++] = $1.x; //#21603
                    $k[$j++] = $1.char; //#21603
                    $1.charsize(); //#21603
                    var _5X = $k[--$j]; //#21603
                    var _5Y = $k[--$j]; //#21603
                    $1[$k[--$j]] = $f(_5Y + _5X); //#21603
                    if ($1.cost < $get($1.nxtlen, $1.x)) { //#21607
                        $put($1.nxtlen, $1.x, $1.cost); //#21605
                        $k[$j++] = $1.nxtseq; //#21606
                        $k[$j++] = $1.x; //#21606
                        $k[$j++] = Infinity; //#21606
                        $aload($get($1.curseq, $1.x)); //#21606
                        $k[$j++] = $1.char; //#21606
                        var _5n = $a(); //#21606
                        var _5o = $k[--$j]; //#21606
                        $put($k[--$j], _5o, _5n); //#21606
                    } //#21606
                    if ($1.x == $1.B) { //#21610
                        break; //#21610
                    } //#21610
                    var _5x = $a([$1.U, $1.L, $1.M, $1.P, $1.D]); //#21611
                    for (var _5y = 0, _5z = _5x.length; _5y < _5z; _5y++) { //#21624
                        $1.y = $get(_5x, _5y); //#21612
                        if ($ne($1.x, $1.y)) { //#21623
                            $k[$j++] = 'cost'; //#21614
                            $k[$j++] = $f($get($1.curlen, $1.y) + $get($get($1.shftlen, $1.y), $1.x)); //#21614
                            $k[$j++] = $1.x; //#21614
                            $k[$j++] = $1.char; //#21614
                            $1.charsize(); //#21614
                            var _6D = $k[--$j]; //#21614
                            var _6E = $k[--$j]; //#21614
                            $1[$k[--$j]] = $f(_6E + _6D); //#21614
                            if ($1.cost < $get($1.nxtlen, $1.y)) { //#21622
                                $put($1.nxtlen, $1.y, $1.cost); //#21616
                                $k[$j++] = $1.nxtseq; //#21620
                                $k[$j++] = $1.y; //#21620
                                $k[$j++] = Infinity; //#21620
                                $aload($get($1.curseq, $1.y)); //#21618
                                var _6U = ($1.x == $1.U) ? $1.su : $1.sp; //#21619
                                $k[$j++] = _6U; //#21620
                                $k[$j++] = $1.char; //#21620
                                var _6W = $a(); //#21620
                                var _6X = $k[--$j]; //#21621
                                $put($k[--$j], _6X, _6W); //#21621
                            } //#21621
                        } //#21621
                    } //#21621
                    break; //#21626
                } //#21626
            } //#21626
            if ($ne($1.lastchar, "") && ($1.char >= 0)) { //#21690
                var _6b = $s(2); //#21633
                $put(_6b, 0, $1.lastchar); //#21633
                $put(_6b, 1, $1.char); //#21633
                $1.pchars = _6b; //#21633
                var _6g = $get($1.pcomp, $1.pchars) !== undefined; //#21634
                if (_6g) { //#21689
                    var _6m = $a([$1.U, $1.L, $1.M, $1.P, $1.D]); //#21635
                    for (var _6n = 0, _6o = _6m.length; _6n < _6o; _6n++) { //#21688
                        $1.i = $get(_6m, _6n); //#21636
                        $1.inP = true; //#21637
                        if ($1.i == $1.M) { //#21642
                            if ($1.lastchar == 13) { //#21639
                                $1.inP = false; //#21639
                            } //#21639
                        } else { //#21642
                            if ($1.i == $1.D) { //#21643
                                if (($1.lastchar == 44) || ($1.lastchar == 46)) { //#21642
                                    $1.inP = false; //#21642
                                } //#21642
                            } //#21642
                        } //#21642
                        if ($1.inP && $lt($get($1.curlen, $1.i), $get($1.nxtlen, $1.i))) { //#21687
                            $1.curseqi = $get($1.curseq, $1.i); //#21646
                            $1.lastld = false; //#21647
                            $1.lastsp = false; //#21648
                            $1.lastidx = -1; //#21649
                            for (var _78 = $1.curseqi.length - 1; _78 >= 0; _78 -= 1) { //#21670
                                $1.idx = _78; //#21651
                                $1.ch = $get($1.curseqi, $1.idx); //#21652
                                if ($1.lastidx == -1) { //#21667
                                    if ($eq($1.ch, $1.lastchar)) { //#21659
                                        $1.lastidx = $1.idx; //#21655
                                        if ($1.idx > 0) { //#21658
                                            if ($get($1.curseqi, $1.idx - 1) == $1.sp) { //#21657
                                                $1.lastsp = true; //#21657
                                            } //#21657
                                        } //#21657
                                    } //#21657
                                } else { //#21667
                                    if (($1.ch < 0) && ($1.ch >= $1.ld)) { //#21668
                                        if ($1.i == $1.P) { //#21665
                                            if ($1.ch == $1.ld) { //#21663
                                                $1.lastld = true; //#21663
                                            } //#21663
                                        } else { //#21665
                                            if ($1.ch != $1.lp) { //#21665
                                                $1.inP = $1.lastsp; //#21665
                                            } //#21665
                                        } //#21665
                                        break; //#21667
                                    } //#21667
                                } //#21667
                            } //#21667
                            if ($1.inP && ($1.lastidx >= 0)) { //#21686
                                $put($1.nxtlen, $1.i, $get($1.curlen, $1.i)); //#21672
                                if ($1.lastidx < ($1.curseqi.length - 1)) { //#21684
                                    if ($1.i == $1.P) { //#21681
                                        if ($1.lastld) { //#21675
                                            $put($1.nxtlen, $1.i, $f($get($1.nxtlen, $1.i) + 1)); //#21675
                                        } //#21675
                                        $k[$j++] = $1.nxtseq; //#21677
                                        $k[$j++] = $1.i; //#21677
                                        $k[$j++] = Infinity; //#21677
                                        $aload($1.curseqi); //#21677
                                        $r($1.curseqi.length - $1.lastidx, -1); //#21677
                                        $j--; //#21677
                                        $k[$j++] = $get($1.pcomp, $1.pchars); //#21677
                                        var _7u = $a(); //#21677
                                        var _7v = $k[--$j]; //#21677
                                        $put($k[--$j], _7v, _7u); //#21677
                                    } else { //#21681
                                        $k[$j++] = $1.nxtseq; //#21680
                                        $k[$j++] = $1.i; //#21680
                                        $k[$j++] = Infinity; //#21680
                                        $aload($1.curseqi); //#21680
                                        var _80 = $a(); //#21680
                                        var _81 = $k[--$j]; //#21680
                                        $put($k[--$j], _81, _80); //#21680
                                        $put($get($1.nxtseq, $1.i), $1.lastidx, $get($1.pcomp, $1.pchars)); //#21681
                                    } //#21681
                                } else { //#21684
                                    $k[$j++] = $1.nxtseq; //#21684
                                    $k[$j++] = $1.i; //#21684
                                    $k[$j++] = Infinity; //#21684
                                    $aload($1.curseqi); //#21684
                                    $j--; //#21684
                                    $k[$j++] = $get($1.pcomp, $1.pchars); //#21684
                                    var _8G = $a(); //#21684
                                    var _8H = $k[--$j]; //#21684
                                    $put($k[--$j], _8H, _8G); //#21684
                                } //#21684
                            } //#21684
                        } //#21684
                    } //#21684
                } //#21684
            } //#21684
            if ($ne($get($1.nxtseq, $1.B), null)) { //#21699
                $1.numbytes = 0; //#21694
                $forall($get($1.nxtseq, $1.B), function() { //#21697
                    if ($k[--$j] == $1.sb) { //#21696
                        $k[$j++] = 0; //#21696
                    } else { //#21696
                        $k[$j++] = $1.numbytes + 1; //#21696
                    } //#21696
                    $1.numbytes = $k[--$j]; //#21696
                }); //#21696
                if ($1.numbytes == 32) { //#21698
                    $put($1.nxtlen, $1.B, $f($get($1.nxtlen, $1.B) + 11)); //#21698
                } //#21698
            } //#21698
            $1.curlen = $1.nxtlen; //#21701
            $1.curseq = $1.nxtseq; //#21702
            $k[$j++] = 'lastchar'; //#21703
            if ($1.char >= 0) { //#21703
                $k[$j++] = $1.char; //#21703
            } else { //#21703
                $k[$j++] = ""; //#21703
            } //#21703
            var _8d = $k[--$j]; //#21703
            $1[$k[--$j]] = _8d; //#21703
        }); //#21703
        $1.minseq = $1.e; //#21708
        var _8m = $a([$1.U, $1.L, $1.M, $1.P, $1.D, $1.B]); //#21709
        for (var _8n = 0, _8o = _8m.length; _8n < _8o; _8n++) { //#21715
            $1.i = $get(_8m, _8n); //#21710
            if ($get($1.curlen, $1.i) < $1.minseq) { //#21714
                $1.minseq = $get($1.curlen, $1.i); //#21712
                $1.seq = $get($1.curseq, $1.i); //#21713
            } //#21713
        } //#21713
        $1.tobin = function() {
            var _91 = $s($k[--$j]); //#21719
            $k[$j++] = _91; //#21719
            for (var _93 = 0, _92 = _91.length - 1; _93 <= _92; _93 += 1) { //#21719
                var _94 = $k[--$j]; //#21719
                $put(_94, _93, 48); //#21719
                $k[$j++] = _94; //#21719
            } //#21719
            var _95 = $k[--$j]; //#21720
            var _98 = $cvrs($s(_95.length), $k[--$j], 2); //#21720
            $puti(_95, _95.length - _98.length, _98); //#21720
            $k[$j++] = _95; //#21720
        }; //#21720
        $1.encu = function() {
            var _9D = $get($get($1.charvals, $1.U), $k[--$j]); //#21723
            $k[$j++] = _9D; //#21723
            $k[$j++] = 5; //#21723
            $1.tobin(); //#21723
        }; //#21723
        $1.encl = function() {
            var _9I = $get($get($1.charvals, $1.L), $k[--$j]); //#21724
            $k[$j++] = _9I; //#21724
            $k[$j++] = 5; //#21724
            $1.tobin(); //#21724
        }; //#21724
        $1.encm = function() {
            var _9N = $get($get($1.charvals, $1.M), $k[--$j]); //#21725
            $k[$j++] = _9N; //#21725
            $k[$j++] = 5; //#21725
            $1.tobin(); //#21725
        }; //#21725
        $1.encd = function() {
            var _9S = $get($get($1.charvals, $1.D), $k[--$j]); //#21726
            $k[$j++] = _9S; //#21726
            $k[$j++] = 4; //#21726
            $1.tobin(); //#21726
        }; //#21726
        $1.encp = function() {
            var _9T = $k[--$j]; //#21729
            $k[$j++] = _9T; //#21746
            if (_9T == $1.fn1) { //#21745
                $j--; //#21730
                $k[$j++] = "00000000"; //#21730
            } else { //#21745
                var _9V = $k[--$j]; //#21732
                $k[$j++] = _9V; //#21746
                if (_9V <= -1000000) { //#21745
                    var _9X = $f((-$k[--$j]) - 1000000); //#21733
                    $k[$j++] = _9X; //#21733
                    $k[$j++] = _9X; //#21733
                    if (_9X == 0) { //#21733
                        $j--; //#21733
                        $k[$j++] = 1; //#21733
                    } //#21733
                    var _9Z = ~~(Math.log($k[--$j]) / Math.log(10)); //#21735
                    var _9a = $s(((_9Z + 1) * 4) + 8); //#21735
                    $puti(_9a, 0, "00000"); //#21736
                    $k[$j++] = _9Z; //#21737
                    $k[$j++] = _9a; //#21737
                    $k[$j++] = _9a; //#21737
                    $k[$j++] = _9Z + 1; //#21737
                    $k[$j++] = 3; //#21737
                    $1.tobin(); //#21737
                    var _9b = $k[--$j]; //#21737
                    $puti($k[--$j], 5, _9b); //#21737
                    var _9d = $k[--$j]; //#21738
                    var _9e = $k[--$j]; //#21738
                    var _9f = $k[--$j]; //#21738
                    $k[$j++] = _9d; //#21742
                    $k[$j++] = _9f; //#21742
                    for (var _9g = _9e; _9g >= 0; _9g -= 1) { //#21742
                        var _9h = $k[--$j]; //#21739
                        var _9i = $k[--$j]; //#21740
                        $k[$j++] = _9i; //#21741
                        $k[$j++] = ~~(_9h / 10); //#21741
                        $k[$j++] = _9i; //#21741
                        $k[$j++] = (_9g * 4) + 8; //#21741
                        $k[$j++] = $f((_9h % 10) + 2); //#21741
                        $k[$j++] = 4; //#21741
                        $1.tobin(); //#21741
                        var _9j = $k[--$j]; //#21741
                        var _9k = $k[--$j]; //#21741
                        $puti($k[--$j], _9k, _9j); //#21741
                    } //#21741
                    $j--; //#21743
                } else { //#21745
                    var _9q = $get($get($1.charvals, $1.P), $k[--$j]); //#21745
                    $k[$j++] = _9q; //#21745
                    $k[$j++] = 5; //#21745
                    $1.tobin(); //#21745
                } //#21745
            } //#21745
        }; //#21745
        $1.encfuncs = $a(['encu', 'encl', 'encm', 'encp', 'encd']); //#21749
        $1.addtomsgbits = function() {
            $1.v = $k[--$j]; //#21752
            $puti($1.msgbits, $1.j, $1.v); //#21753
            $1.j = $1.j + $1.v.length; //#21754
        }; //#21754
        $1.state = $1.U; //#21758
        $1.msgbits = $s($1.minseq); //#21759
        $1.i = 0; //#21760
        $1.j = 0; //#21760
        for (;;) { //#21819
            if ($1.i >= $1.seq.length) { //#21761
                break; //#21761
            } //#21761
            if ($1.state != $1.B) { //#21814
                $1.char = $get($1.seq, $1.i); //#21765
                $k[$j++] = $1.char; //#21768
                if ($1[$get($1.encfuncs, $1.state)]() === true) {
                    break;
                } //#21768
                $1.addtomsgbits(); //#21768
                $1.i = $1.i + 1; //#21769
                if (($1.char == $1.su) || ($1.char == $1.sp)) { //#21775
                    $k[$j++] = $get($1.seq, $1.i); //#21773
                    if ($1.char == $1.su) { //#21773
                        $1.encu(); //#21773
                    } else { //#21773
                        $1.encp(); //#21773
                    } //#21773
                    $1.addtomsgbits(); //#21773
                    $1.i = $1.i + 1; //#21774
                } //#21774
                if ($1.char == $1.lu) { //#21778
                    $1.state = $1.U; //#21778
                } //#21778
                if ($1.char == $1.ll) { //#21779
                    $1.state = $1.L; //#21779
                } //#21779
                if ($1.char == $1.lm) { //#21780
                    $1.state = $1.M; //#21780
                } //#21780
                if ($1.char == $1.lp) { //#21781
                    $1.state = $1.P; //#21781
                } //#21781
                if ($1.char == $1.ld) { //#21782
                    $1.state = $1.D; //#21782
                } //#21782
                if ($1.char == $1.sb) { //#21783
                    $1.state = $1.B; //#21783
                } //#21783
            } else { //#21814
                $1.numbytes = 0; //#21788
                for (;;) { //#21792
                    if (($1.i + $1.numbytes) >= $1.seq.length) { //#21789
                        break; //#21789
                    } //#21789
                    if ($get($1.seq, $1.i + $1.numbytes) < 0) { //#21790
                        break; //#21790
                    } //#21790
                    $1.numbytes = $1.numbytes + 1; //#21791
                } //#21791
                if ($1.numbytes <= 31) { //#21799
                    $k[$j++] = $1.numbytes; //#21796
                    $k[$j++] = 5; //#21796
                    $1.tobin(); //#21796
                    $1.addtomsgbits(); //#21796
                } else { //#21799
                    $k[$j++] = 0; //#21798
                    $k[$j++] = 5; //#21798
                    $1.tobin(); //#21798
                    $1.addtomsgbits(); //#21798
                    $k[$j++] = $1.numbytes - 31; //#21799
                    $k[$j++] = 11; //#21799
                    $1.tobin(); //#21799
                    $1.addtomsgbits(); //#21799
                } //#21799
                for (var _As = 0, _At = $1.numbytes; _As < _At; _As++) { //#21806
                    $k[$j++] = $get($1.seq, $1.i); //#21804
                    $k[$j++] = 8; //#21804
                    $1.tobin(); //#21804
                    $1.addtomsgbits(); //#21804
                    $1.i = $1.i + 1; //#21805
                } //#21805
                if ($1.i < $1.seq.length) { //#21815
                    $1.char = $get($1.seq, $1.i); //#21810
                    $1.i = $1.i + 1; //#21811
                    if ($1.char == $1.lu) { //#21812
                        $1.state = $1.U; //#21812
                    } //#21812
                    if ($1.char == $1.ll) { //#21813
                        $1.state = $1.L; //#21813
                    } //#21813
                    if ($1.char == $1.lm) { //#21814
                        $1.state = $1.M; //#21814
                    } //#21814
                } //#21814
            } //#21814
        } //#21814
    } //#21814
    if (!bwipp_azteccode.$ctx._21840) { //#21840
        (function() { //#21840
            var $ctx = Object.create($1); //#21840
            $ctx.metrics = $a([$a(["rune", 0, 0, 0, 6]), $a(["compact", 1, 1, 17, 6]), $a(["full", 1, 1, 21, 6]), $a(["compact", 2, 0, 40, 6]), $a(["full", 2, 1, 48, 6]), $a(["compact", 3, 0, 51, 8]), $a(["full", 3, 1, 60, 8]), $a(["compact", 4, 0, 76, 8]), $a(["full", 4, 1, 88, 8]), $a(["full", 5, 1, 120, 8]), $a(["full", 6, 1, 156, 8]), $a(["full", 7, 1, 196, 8]), $a(["full", 8, 1, 240, 8]), $a(["full", 9, 1, 230, 10]), $a(["full", 10, 1, 272, 10]), $a(["full", 11, 1, 316, 10]), $a(["full", 12, 1, 364, 10]), $a(["full", 13, 1, 416, 10]), $a(["full", 14, 1, 470, 10]), $a(["full", 15, 1, 528, 10]), $a(["full", 16, 1, 588, 10]), $a(["full", 17, 1, 652, 10]), $a(["full", 18, 1, 720, 10]), $a(["full", 19, 1, 790, 10]), $a(["full", 20, 1, 864, 10]), $a(["full", 21, 1, 940, 10]), $a(["full", 22, 1, 1020, 10]), $a(["full", 23, 0, 920, 12]), $a(["full", 24, 0, 992, 12]), $a(["full", 25, 0, 1066, 12]), $a(["full", 26, 0, 1144, 12]), $a(["full", 27, 0, 1224, 12]), $a(["full", 28, 0, 1306, 12]), $a(["full", 29, 0, 1392, 12]), $a(["full", 30, 0, 1480, 12]), $a(["full", 31, 0, 1570, 12]), $a(["full", 32, 0, 1664, 12])]); //#21839
            for (var _Bp in $ctx) {
                $ctx.hasOwnProperty(_Bp) && (bwipp_azteccode.$ctx[_Bp] = $ctx[_Bp]);
            } //#21839
            bwipp_azteccode.$ctx._21840 = 1; //#21839
        })(); //#21839
    } //#21839
    $1.i = 0; //#21842
    for (;;) { //#21860
        $1.m = $get($1.metrics, $1.i); //#21844
        $1.frmt = $get($1.m, 0); //#21845
        $1.mlyr = $get($1.m, 1); //#21846
        $1.icap = $get($1.m, 2); //#21847
        $1.ncws = $get($1.m, 3); //#21848
        $1.bpcw = $get($1.m, 4); //#21849
        $1.numecw = ~~(Math.ceil($f((($1.ncws * $1.eclevel) / 100) + $1.ecaddchars))); //#21850
        if ($1.msgbits.length == 0) { //#21851
            $1.numecw = 0; //#21851
        } //#21851
        $1.numdcw = $f($1.ncws - $1.numecw); //#21852
        $1.okay = true; //#21853
        if ($ne($1.format, "unset") && $ne($1.format, $1.frmt)) { //#21854
            $1.okay = false; //#21854
        } //#21854
        if ($1.readerinit && ($1.icap != 1)) { //#21855
            $1.okay = false; //#21855
        } //#21855
        if (($1.layers != -1) && ($1.layers != $1.mlyr)) { //#21856
            $1.okay = false; //#21856
        } //#21856
        if ((~~Math.ceil($1.msgbits.length / $1.bpcw)) > $1.numdcw) { //#21857
            $1.okay = false; //#21857
        } //#21857
        if ($1.okay) { //#21858
            break; //#21858
        } //#21858
        $1.i = $1.i + 1; //#21859
    } //#21859
    $1.layers = $1.mlyr; //#21861
    $1.format = $1.frmt; //#21862
    $1.allzero = function() {
        var _CO = $k[--$j]; //#21865
        $k[$j++] = $eq(_CO, $geti("000000000000", 0, _CO.length)); //#21865
    }; //#21865
    $1.allones = function() {
        var _CQ = $k[--$j]; //#21866
        $k[$j++] = $eq(_CQ, $geti("111111111111", 0, _CQ.length)); //#21866
    }; //#21866
    $1.cws = $a($1.ncws); //#21867
    $1.m = 0; //#21868
    $1.c = 0; //#21868
    for (;;) { //#21895
        if ($1.msgbits.length <= $1.m) { //#21870
            break; //#21870
        } //#21870
        if (($1.msgbits.length - $1.m) >= $1.bpcw) { //#21884
            $1.cwb = $geti($1.msgbits, $1.m, $f($1.bpcw - 1)); //#21872
            $1.cwf = $geti($1.msgbits, $f($f($1.m + $1.bpcw) - 1), 1); //#21873
            $k[$j++] = $1.cwb; //#21874
            $1.allzero(); //#21874
            if ($k[--$j]) { //#21874
                $1.cwf = "1"; //#21874
                $1.m = $1.m - 1; //#21874
            } //#21874
            $k[$j++] = $1.cwb; //#21875
            $1.allones(); //#21875
            if ($k[--$j]) { //#21875
                $1.cwf = "0"; //#21875
                $1.m = $1.m - 1; //#21875
            } //#21875
            var _Cn = $s(12); //#21877
            $puti(_Cn, 0, $1.cwb); //#21877
            $puti(_Cn, $f($1.bpcw - 1), $1.cwf); //#21878
            $1.cwb = $geti(_Cn, 0, $1.bpcw); //#21880
        } else { //#21884
            $1.cwb = $geti($1.msgbits, $1.m, $1.msgbits.length - $1.m); //#21882
            var _Cz = $strcpy($s(12), "111111111111"); //#21883
            $puti(_Cz, 0, $1.cwb); //#21883
            $1.cwb = $geti(_Cz, 0, $1.bpcw); //#21883
            $k[$j++] = $1.cwb; //#21884
            $1.allones(); //#21884
            if ($k[--$j]) { //#21884
                $puti($1.cwb, $1.cwb.length - 1, "0"); //#21884
            } //#21884
        } //#21884
        $1.cw = 0; //#21887
        for (var _D9 = 0, _D8 = $f($1.bpcw - 1); _D9 <= _D8; _D9 += 1) { //#21891
            $1.i = _D9; //#21889
            $1.cw = $f($1.cw + ((~~(Math.pow(2, $f($f($1.bpcw - $1.i) - 1)))) * $f($get($1.cwb, $1.i) - 48))); //#21890
        } //#21890
        $put($1.cws, $1.c, $1.cw); //#21892
        $1.m = $f($1.m + $1.bpcw); //#21893
        $1.c = $1.c + 1; //#21894
    } //#21894
    $1.cws = $geti($1.cws, 0, $1.c); //#21896
    var _DQ = $get($1.options, 'debugcws') !== undefined; //#21898
    if (_DQ) { //#21898
        $k[$j++] = 'bwipp.debugcws#21898'; //#21898
        $k[$j++] = $1.cws; //#21898
        bwipp_raiseerror(); //#21898
    } //#21898
    $1.rscodes = function() {
        $1.rspm = $k[--$j]; //#21903
        $1.rsgf = $k[--$j]; //#21904
        $1.rsnc = $k[--$j]; //#21905
        $1.rscws = $k[--$j]; //#21906
        $k[$j++] = Infinity; //#21909
        $k[$j++] = 1; //#21909
        for (var _DX = 0, _DY = $f($1.rsgf - 1); _DX < _DY; _DX++) { //#21909
            var _DZ = $k[--$j]; //#21909
            var _Da = _DZ * 2; //#21909
            $k[$j++] = _DZ; //#21909
            $k[$j++] = _Da; //#21909
            if (_Da >= $1.rsgf) { //#21909
                var _Dd = $k[--$j]; //#21909
                $k[$j++] = $xo(_Dd, $1.rspm); //#21909
            } //#21909
        } //#21909
        $1.rsalog = $a(); //#21909
        $1.rslog = $a($1.rsgf); //#21910
        for (var _Dj = 1, _Di = $f($1.rsgf - 1); _Dj <= _Di; _Dj += 1) { //#21911
            $put($1.rslog, $get($1.rsalog, _Dj), _Dj); //#21911
        } //#21911
        $1.rsprod = function() {
            var _Dn = $k[--$j]; //#21915
            var _Do = $k[--$j]; //#21915
            $k[$j++] = _Do; //#21919
            $k[$j++] = _Dn; //#21919
            if ((_Dn != 0) && (_Do != 0)) { //#21918
                var _Dr = $get($1.rslog, $k[--$j]); //#21916
                var _Dx = $get($1.rsalog, $f(_Dr + $get($1.rslog, $k[--$j])) % $f($1.rsgf - 1)); //#21916
                $k[$j++] = _Dx; //#21916
            } else { //#21918
                $j -= 2; //#21918
                $k[$j++] = 0; //#21918
            } //#21918
        }; //#21918
        $k[$j++] = Infinity; //#21923
        $k[$j++] = 1; //#21923
        for (var _Dz = 0, _E0 = $1.rsnc; _Dz < _E0; _Dz++) { //#21923
            $k[$j++] = 0; //#21923
        } //#21923
        $1.coeffs = $a(); //#21923
        for (var _E4 = 1, _E3 = $1.rsnc; _E4 <= _E3; _E4 += 1) { //#21932
            $1.i = _E4; //#21925
            $put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); //#21926
            for (var _EB = $1.i - 1; _EB >= 1; _EB -= 1) { //#21930
                $1.j = _EB; //#21928
                $k[$j++] = $1.coeffs; //#21929
                $k[$j++] = $1.j; //#21929
                $k[$j++] = $get($1.coeffs, $1.j - 1); //#21929
                $k[$j++] = $get($1.coeffs, $1.j); //#21929
                $k[$j++] = $get($1.rsalog, $1.i); //#21929
                $1.rsprod(); //#21929
                var _EN = $k[--$j]; //#21929
                var _EO = $k[--$j]; //#21929
                var _EP = $k[--$j]; //#21929
                $put($k[--$j], _EP, $xo(_EO, _EN)); //#21929
            } //#21929
            $k[$j++] = $1.coeffs; //#21931
            $k[$j++] = 0; //#21931
            $k[$j++] = $get($1.coeffs, 0); //#21931
            $k[$j++] = $get($1.rsalog, $1.i); //#21931
            $1.rsprod(); //#21931
            var _EX = $k[--$j]; //#21931
            var _EY = $k[--$j]; //#21931
            $put($k[--$j], _EY, _EX); //#21931
        } //#21931
        $1.nd = $1.rscws.length; //#21935
        $k[$j++] = Infinity; //#21936
        $forall($1.rscws); //#21936
        for (var _Ed = 0, _Ee = $1.rsnc; _Ed < _Ee; _Ed++) { //#21936
            $k[$j++] = 0; //#21936
        } //#21936
        $k[$j++] = 0; //#21936
        $1.rscws = $a(); //#21936
        for (var _Ei = 0, _Eh = $1.nd - 1; _Ei <= _Eh; _Ei += 1) { //#21943
            $1.k = $xo($get($1.rscws, _Ei), $get($1.rscws, $1.nd)); //#21938
            for (var _Eq = 0, _Ep = $f($1.rsnc - 1); _Eq <= _Ep; _Eq += 1) { //#21942
                $1.j = _Eq; //#21940
                $k[$j++] = $1.rscws; //#21941
                $k[$j++] = $1.nd + $1.j; //#21941
                $k[$j++] = $get($1.rscws, ($1.nd + $1.j) + 1); //#21941
                $k[$j++] = $1.k; //#21941
                $k[$j++] = $get($1.coeffs, $f($f($1.rsnc - $1.j) - 1)); //#21941
                $1.rsprod(); //#21941
                var _F3 = $k[--$j]; //#21941
                var _F4 = $k[--$j]; //#21941
                var _F5 = $k[--$j]; //#21941
                $put($k[--$j], _F5, $xo(_F4, _F3)); //#21941
            } //#21941
        } //#21941
        $k[$j++] = $geti($1.rscws, 0, $1.rscws.length - 1); //#21946
    }; //#21946
    if ($eq($1.format, "full")) { //#21961
        $1.mode = ($f($1.layers - 1) << 11) + ($1.cws.length - 1); //#21952
        if ($1.readerinit) { //#21953
            $1.mode = $1.mode | 1024; //#21953
        } //#21953
        $1.mode = $a([($1.mode & 61440) >>> 12, ($1.mode & 3840) >>> 8, ($1.mode & 240) >>> 4, $1.mode & 15]); //#21959
        $k[$j++] = 'mode'; //#21960
        $k[$j++] = $1.mode; //#21960
        $k[$j++] = 6; //#21960
        $k[$j++] = 16; //#21960
        $k[$j++] = 19; //#21960
        $1.rscodes(); //#21960
        var _FL = $k[--$j]; //#21960
        $1[$k[--$j]] = _FL; //#21960
    } //#21960
    if ($eq($1.format, "compact")) { //#21970
        $1.mode = ($f($1.layers - 1) << 6) + ($1.cws.length - 1); //#21963
        if ($1.readerinit) { //#21964
            $1.mode = $1.mode | 32; //#21964
        } //#21964
        $1.mode = $a([($1.mode & 240) >>> 4, $1.mode & 15]); //#21968
        $k[$j++] = 'mode'; //#21969
        $k[$j++] = $1.mode; //#21969
        $k[$j++] = 5; //#21969
        $k[$j++] = 16; //#21969
        $k[$j++] = 19; //#21969
        $1.rscodes(); //#21969
        var _FW = $k[--$j]; //#21969
        $1[$k[--$j]] = _FW; //#21969
    } //#21969
    if ($eq($1.format, "rune")) { //#21979
        $1.mode = $cvi($1.barcode); //#21972
        $1.mode = $a([($1.mode & 240) >>> 4, $1.mode & 15]); //#21976
        $k[$j++] = 'mode'; //#21977
        $k[$j++] = $1.mode; //#21977
        $k[$j++] = 5; //#21977
        $k[$j++] = 16; //#21977
        $k[$j++] = 19; //#21977
        $1.rscodes(); //#21977
        var _Fe = $k[--$j]; //#21977
        $1[$k[--$j]] = _Fe; //#21977
        $k[$j++] = Infinity; //#21978
        var _Fg = $1.mode; //#21978
        for (var _Fh = 0, _Fi = _Fg.length; _Fh < _Fi; _Fh++) { //#21978
            $k[$j++] = $get(_Fg, _Fh) ^ 10; //#21978
        } //#21978
        $1.mode = $a(); //#21978
    } //#21978
    $1.modebits = $s($1.mode.length * 4); //#21980
    for (var _Fp = 0, _Fo = $1.modebits.length - 1; _Fp <= _Fo; _Fp += 1) { //#21981
        $puti($1.modebits, _Fp, "0"); //#21981
    } //#21981
    for (var _Ft = 0, _Fs = $1.mode.length - 1; _Ft <= _Fs; _Ft += 1) { //#21985
        $1.i = _Ft; //#21983
        var _Fz = $cvrs($s(4), $get($1.mode, $1.i), 2); //#21984
        $puti($1.modebits, (4 - _Fz.length) + (4 * $1.i), _Fz); //#21984
    } //#21984
    if (!bwipp_azteccode.$ctx._21999) { //#21999
        (function() { //#21999
            var $ctx = Object.create($1); //#21999
            $ctx.rsparams = $a([$a([]), $a([]), $a([]), $a([]), $a([]), $a([]), $a([64, 67]), $a([]), $a([256, 301]), $a([]), $a([1024, 1033]), $a([]), $a([4096, 4201])]); //#21998
            for (var _GF in $ctx) {
                $ctx.hasOwnProperty(_GF) && (bwipp_azteccode.$ctx[_GF] = $ctx[_GF]);
            } //#21998
            bwipp_azteccode.$ctx._21999 = 1; //#21998
        })(); //#21998
    } //#21998
    $k[$j++] = 'cws'; //#22000
    $k[$j++] = $1.cws; //#22000
    $k[$j++] = $f($1.ncws - $1.cws.length); //#22000
    $forall($get($1.rsparams, $1.bpcw)); //#22000
    $1.rscodes(); //#22000
    var _GM = $k[--$j]; //#22000
    $1[$k[--$j]] = _GM; //#22000
    if ($eq($1.format, "full")) { //#22004
        $1.databits = $s($f((($1.layers * $1.layers) * 16) + ($1.layers * 112))); //#22002
    } else { //#22004
        $1.databits = $s($f((($1.layers * $1.layers) * 16) + ($1.layers * 88))); //#22004
    } //#22004
    for (var _GZ = 0, _GY = $1.databits.length - 1; _GZ <= _GY; _GZ += 1) { //#22006
        $puti($1.databits, _GZ, "0"); //#22006
    } //#22006
    for (var _Gd = 0, _Gc = $f($1.ncws - 1); _Gd <= _Gc; _Gd += 1) { //#22012
        $1.i = _Gd; //#22008
        var _Gk = $cvrs($s($1.bpcw), $get($1.cws, $1.i), 2); //#22009
        $puti($1.databits, $f(($f($f($1.bpcw - _Gk.length) + ($1.bpcw * $1.i))) + ($f($1.databits.length - ($1.ncws * $1.bpcw)))), _Gk); //#22011
    } //#22011
    $1.cmv = function() {
        var _Gs = $k[--$j]; //#22015
        var _Gt = $k[--$j]; //#22015
        $k[$j++] = $f(($f(_Gt - (_Gs * $1.size))) + $1.mid); //#22015
    }; //#22015
    $1.lmv = function() {
        $1.lbit = $k[--$j]; //#22019
        $1.llyr = $k[--$j]; //#22020
        $1.lwid = $f($1.fw + ($1.llyr * 4)); //#22021
        $1.ldir = ~~((~~($1.lbit / 2)) / $1.lwid); //#22022
        if ($1.ldir == 0) { //#22027
            $k[$j++] = $f(((-(~~($f($1.lwid - 1) / 2))) + 1) + ((~~($1.lbit / 2)) % $1.lwid)); //#22026
            $k[$j++] = $f(($f((~~(($1.fw - 1) / 2)) + ($1.llyr * 2))) + ($1.lbit % 2)); //#22026
            $1.cmv(); //#22026
        } //#22026
        if ($1.ldir == 1) { //#22032
            $k[$j++] = $f(($f((~~($1.fw / 2)) + ($1.llyr * 2))) + ($1.lbit % 2)); //#22031
            $k[$j++] = $f(((~~($f($1.lwid - 1) / 2)) - 1) - ((~~($1.lbit / 2)) % $1.lwid)); //#22031
            $1.cmv(); //#22031
        } //#22031
        if ($1.ldir == 2) { //#22037
            $k[$j++] = -($f(((-(~~($1.lwid / 2))) + 1) + ((~~($1.lbit / 2)) % $1.lwid))); //#22036
            $k[$j++] = -($f(($f((~~($1.fw / 2)) + ($1.llyr * 2))) + ($1.lbit % 2))); //#22036
            $1.cmv(); //#22036
        } //#22036
        if ($1.ldir == 3) { //#22042
            $k[$j++] = -($f(($f((~~(($1.fw - 1) / 2)) + ($1.llyr * 2))) + ($1.lbit % 2))); //#22041
            $k[$j++] = -($f(((~~($1.lwid / 2)) - 1) - ((~~($1.lbit / 2)) % $1.lwid))); //#22041
            $1.cmv(); //#22041
        } //#22041
    }; //#22041
    if ($eq($1.format, "full")) { //#22047
        $1.fw = 12; //#22047
    } else { //#22047
        $1.fw = 9; //#22047
    } //#22047
    $1.size = $f(($f($1.fw + ($1.layers * 4))) + 2); //#22048
    $k[$j++] = Infinity; //#22049
    for (var _HY = 0, _HZ = $1.size * $1.size; _HY < _HZ; _HY++) { //#22049
        $k[$j++] = -1; //#22049
    } //#22049
    $1.pixs = $a(); //#22049
    $1.mid = $f(((~~($f($1.size - 1) / 2)) * $1.size) + (~~($f($1.size - 1) / 2))); //#22050
    $1.i = 0; //#22053
    for (var _Hg = 1, _Hf = $1.layers; _Hg <= _Hf; _Hg += 1) { //#22061
        $1.layer = _Hg; //#22055
        for (var _Hk = 0, _Hj = (($1.fw + ($1.layer * 4)) * 8) - 1; _Hk <= _Hj; _Hk += 1) { //#22060
            $1.pos = _Hk; //#22057
            $k[$j++] = $1.pixs; //#22058
            $k[$j++] = $1.layer; //#22058
            $k[$j++] = $1.pos; //#22058
            $1.lmv(); //#22058
            var _Hs = $k[--$j]; //#22058
            $put($k[--$j], _Hs, $get($1.databits, ($1.databits.length - $1.i) - 1) - 48); //#22058
            $1.i = $1.i + 1; //#22059
        } //#22059
    } //#22059
    if ($eq($1.format, "full")) { //#22088
        $1.fw = 13; //#22065
        $1.size = $f(($f(($f($1.fw + ($1.layers * 4))) + 2)) + ((~~($f(($f($1.layers + 10.5) / 7.5) - 1))) * 2)); //#22066
        $1.mid = ~~(($1.size * $1.size) / 2); //#22067
        $k[$j++] = Infinity; //#22068
        for (var _I3 = 0, _I4 = $1.size * $1.size; _I3 < _I4; _I3++) { //#22068
            $k[$j++] = -2; //#22068
        } //#22068
        $1.npixs = $a(); //#22068
        for (var _I8 = 0, _I7 = ~~($1.size / 2); _I8 <= _I7; _I8 += 16) { //#22078
            $1.i = _I8; //#22070
            for (var _IB = 0, _IA = $f($1.size - 1); _IB <= _IA; _IB += 1) { //#22077
                $1.j = _IB; //#22072
                $k[$j++] = $1.npixs; //#22073
                $k[$j++] = (-(~~($1.size / 2))) + $1.j; //#22073
                $k[$j++] = $1.i; //#22073
                $1.cmv(); //#22073
                var _IK = $k[--$j]; //#22073
                $puti($k[--$j], _IK, $a([((((~~($1.size / 2)) + $1.j) + $1.i) + 1) % 2])); //#22073
                $k[$j++] = $1.npixs; //#22074
                $k[$j++] = (-(~~($1.size / 2))) + $1.j; //#22074
                $k[$j++] = -$1.i; //#22074
                $1.cmv(); //#22074
                var _IU = $k[--$j]; //#22074
                $puti($k[--$j], _IU, $a([((((~~($1.size / 2)) + $1.j) + $1.i) + 1) % 2])); //#22074
                $k[$j++] = $1.npixs; //#22075
                $k[$j++] = $1.i; //#22075
                $k[$j++] = (-(~~($1.size / 2))) + $1.j; //#22075
                $1.cmv(); //#22075
                var _Ie = $k[--$j]; //#22075
                $puti($k[--$j], _Ie, $a([((((~~($1.size / 2)) + $1.j) + $1.i) + 1) % 2])); //#22075
                $k[$j++] = $1.npixs; //#22076
                $k[$j++] = -$1.i; //#22076
                $k[$j++] = (-(~~($1.size / 2))) + $1.j; //#22076
                $1.cmv(); //#22076
                var _Io = $k[--$j]; //#22076
                $puti($k[--$j], _Io, $a([((((~~($1.size / 2)) + $1.j) + $1.i) + 1) % 2])); //#22076
            } //#22076
        } //#22076
        $1.j = 0; //#22079
        for (var _Is = 0, _Ir = $1.npixs.length - 1; _Is <= _Ir; _Is += 1) { //#22086
            $1.i = _Is; //#22081
            if ($get($1.npixs, $1.i) == -2) { //#22085
                $put($1.npixs, $1.i, $get($1.pixs, $1.j)); //#22083
                $1.j = $1.j + 1; //#22084
            } //#22084
        } //#22084
        $1.pixs = $1.npixs; //#22087
    } //#22087
    $1.fw = ~~($1.fw / 2); //#22091
    for (var _J7 = -$1.fw, _J6 = $1.fw; _J7 <= _J6; _J7 += 1) { //#22100
        $1.i = _J7; //#22093
        for (var _JB = -$1.fw, _JA = $1.fw; _JB <= _JA; _JB += 1) { //#22099
            $1.j = _JB; //#22095
            $k[$j++] = $1.pixs; //#22096
            $k[$j++] = $1.i; //#22096
            $k[$j++] = $1.j; //#22096
            $1.cmv(); //#22096
            if (Math.abs($1.i) > Math.abs($1.j)) { //#22097
                $k[$j++] = Math.abs($1.i); //#22097
            } else { //#22097
                $k[$j++] = Math.abs($1.j); //#22097
            } //#22097
            var _JJ = $k[--$j]; //#22097
            var _JK = $k[--$j]; //#22098
            $put($k[--$j], _JK, $f(_JJ + 1) % 2); //#22098
        } //#22098
    } //#22098
    var _Jw = $a([$a([-($1.fw + 1), $1.fw, 1]), $a([-($1.fw + 1), $1.fw + 1, 1]), $a([-$1.fw, $1.fw + 1, 1]), $a([$1.fw + 1, $1.fw + 1, 1]), $a([$1.fw + 1, $1.fw, 1]), $a([$1.fw + 1, -$1.fw, 1]), $a([$1.fw, $1.fw + 1, 0]), $a([$1.fw + 1, -($1.fw + 1), 0]), $a([$1.fw, -($1.fw + 1), 0]), $a([-$1.fw, -($1.fw + 1), 0]), $a([-($1.fw + 1), -($1.fw + 1), 0]), $a([-($1.fw + 1), -$1.fw, 0])]); //#22108
    for (var _Jx = 0, _Jy = _Jw.length; _Jx < _Jy; _Jx++) { //#22109
        $k[$j++] = $1.pixs; //#22109
        $forall($get(_Jw, _Jx)); //#22109
        var _K1 = $k[--$j]; //#22109
        var _K2 = $k[--$j]; //#22109
        var _K3 = $k[--$j]; //#22109
        $k[$j++] = _K1; //#22109
        $k[$j++] = _K3; //#22109
        $k[$j++] = _K2; //#22109
        $1.cmv(); //#22109
        var _K4 = $k[--$j]; //#22109
        var _K5 = $k[--$j]; //#22109
        $put($k[--$j], _K4, _K5); //#22109
    } //#22109
    if (!bwipp_azteccode.$ctx._22125) { //#22125
        (function() { //#22125
            var $ctx = Object.create($1); //#22125
            $ctx.modemapfull = $a([$a([-5, 7]), $a([-4, 7]), $a([-3, 7]), $a([-2, 7]), $a([-1, 7]), $a([1, 7]), $a([2, 7]), $a([3, 7]), $a([4, 7]), $a([5, 7]), $a([7, 5]), $a([7, 4]), $a([7, 3]), $a([7, 2]), $a([7, 1]), $a([7, -1]), $a([7, -2]), $a([7, -3]), $a([7, -4]), $a([7, -5]), $a([5, -7]), $a([4, -7]), $a([3, -7]), $a([2, -7]), $a([1, -7]), $a([-1, -7]), $a([-2, -7]), $a([-3, -7]), $a([-4, -7]), $a([-5, -7]), $a([-7, -5]), $a([-7, -4]), $a([-7, -3]), $a([-7, -2]), $a([-7, -1]), $a([-7, 1]), $a([-7, 2]), $a([-7, 3]), $a([-7, 4]), $a([-7, 5])]); //#22118
            $ctx.modemapcompact = $a([$a([-3, 5]), $a([-2, 5]), $a([-1, 5]), $a([0, 5]), $a([1, 5]), $a([2, 5]), $a([3, 5]), $a([5, 3]), $a([5, 2]), $a([5, 1]), $a([5, 0]), $a([5, -1]), $a([5, -2]), $a([5, -3]), $a([3, -5]), $a([2, -5]), $a([1, -5]), $a([0, -5]), $a([-1, -5]), $a([-2, -5]), $a([-3, -5]), $a([-5, -3]), $a([-5, -2]), $a([-5, -1]), $a([-5, 0]), $a([-5, 1]), $a([-5, 2]), $a([-5, 3])]); //#22124
            for (var _LF in $ctx) {
                $ctx.hasOwnProperty(_LF) && (bwipp_azteccode.$ctx[_LF] = $ctx[_LF]);
            } //#22124
            bwipp_azteccode.$ctx._22125 = 1; //#22124
        })(); //#22124
    } //#22124
    $k[$j++] = 'modemap'; //#22126
    if ($eq($1.format, "full")) { //#22126
        $k[$j++] = $1.modemapfull; //#22126
    } else { //#22126
        $k[$j++] = $1.modemapcompact; //#22126
    } //#22126
    var _LJ = $k[--$j]; //#22126
    $1[$k[--$j]] = _LJ; //#22126
    for (var _LN = 0, _LM = $1.modemap.length - 1; _LN <= _LM; _LN += 1) { //#22130
        $1.i = _LN; //#22128
        $k[$j++] = $1.pixs; //#22129
        $forall($get($1.modemap, $1.i)); //#22129
        $1.cmv(); //#22129
        var _LV = $k[--$j]; //#22129
        $put($k[--$j], _LV, $get($1.modebits, $1.i) - 48); //#22129
    } //#22129
    var _Ld = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", $1.size],
        ["pixy", $1.size],
        ["height", ($1.size * 2) / 72],
        ["width", ($1.size * 2) / 72],
        ["opt", $1.options]
    ]); //#22139
    $k[$j++] = _Ld; //#22142
    if (!$1.dontdraw) { //#22142
        bwipp_renmatrix(); //#22142
    } //#22142
}

function bwipp_azteccodecompact() {
    var $1 = Object.create(bwipp_azteccodecompact.$ctx || (bwipp_azteccodecompact.$ctx = {})); //#22175
    $1.dontdraw = false; //#22178
    $k[$j++] = $1; //#22180
    bwipp_processoptions(); //#22180
    $1.options = $k[--$j]; //#22180
    $1.barcode = $k[--$j]; //#22181
    $put($1.options, "dontdraw", true); //#22184
    $put($1.options, "format", "compact"); //#22185
    $k[$j++] = 'args'; //#22187
    $k[$j++] = $1.barcode; //#22187
    $k[$j++] = $1.options; //#22187
    bwipp_azteccode(); //#22187
    var _6 = $k[--$j]; //#22187
    $1[$k[--$j]] = _6; //#22187
    $put($1.args, "opt", $1.options); //#22189
    $k[$j++] = $1.args; //#22192
    if (!$1.dontdraw) { //#22192
        bwipp_renmatrix(); //#22192
    } //#22192
}

function bwipp_aztecrune() {
    var $1 = Object.create(bwipp_aztecrune.$ctx || (bwipp_aztecrune.$ctx = {})); //#22223
    $1.dontdraw = false; //#22226
    $k[$j++] = $1; //#22228
    bwipp_processoptions(); //#22228
    $1.options = $k[--$j]; //#22228
    $1.barcode = $k[--$j]; //#22229
    $put($1.options, "dontdraw", true); //#22232
    $put($1.options, "format", "rune"); //#22233
    $k[$j++] = 'args'; //#22235
    $k[$j++] = $1.barcode; //#22235
    $k[$j++] = $1.options; //#22235
    bwipp_azteccode(); //#22235
    var _6 = $k[--$j]; //#22235
    $1[$k[--$j]] = _6; //#22235
    $put($1.args, "opt", $1.options); //#22237
    $k[$j++] = $1.args; //#22240
    if (!$1.dontdraw) { //#22240
        bwipp_renmatrix(); //#22240
    } //#22240
}

function bwipp_codeone() {
    var $1 = Object.create(bwipp_codeone.$ctx || (bwipp_codeone.$ctx = {})); //#22273
    $1.dontdraw = false; //#22276
    $1.version = "unset"; //#22277
    $1.parse = false; //#22278
    $1.parsefnc = false; //#22279
    $k[$j++] = $1; //#22281
    bwipp_processoptions(); //#22281
    $1.options = $k[--$j]; //#22281
    $1.barcode = $k[--$j]; //#22282
    var _2 = $1.version; //#22286
    $1.stype = $eq($geti(_2, 0, 1), "S"); //#22286
    if (!bwipp_codeone.$ctx._22444) { //#22444
        (function() { //#22444
            var $ctx = Object.create($1); //#22444
            $ctx.stypevals = $a(["1", "1010", "1100100", "1111101000", "10011100010000", "11000011010100000", "11110100001001000000", "100110001001011010000000", "101111101011110000100000000", "111011100110101100101000000000", "1001010100000010111110010000000000", "1011101001000011101101110100000000000", "1110100011010100101001010001000000000000", "10010001100001001110011100101010000000000000", "10110101111001100010000011110100100000000000000", "11100011010111111010100100110001101000000000000000", "100011100001101111001001101111110000010000000000000000", "101100011010001010111100001011101100010100000000000000000"]); //#22308
            $ctx.stypemetrics = $a([$a(["S-10", 8, 11, 10, 4, 4, 1, 99, 99, 99]), $a(["S-20", 8, 21, 20, 8, 8, 1, 99, 99, 99]), $a(["S-30", 8, 31, 30, 12, 12, 1, 99, 99, 99])]); //#22316
            $ctx.nonstypemetrics = $a([$a(["A", 16, 18, 16, 10, 10, 1, 4, 99, 6]), $a(["B", 22, 22, 20, 19, 16, 1, 4, 99, 8]), $a(["C", 28, 32, 28, 44, 26, 1, 4, 22, 11]), $a(["D", 40, 42, 36, 91, 44, 1, 4, 16, 16]), $a(["E", 52, 54, 48, 182, 70, 1, 4, 22, 22]), $a(["F", 70, 76, 68, 370, 140, 2, 4, 22, 31]), $a(["G", 104, 98, 88, 732, 280, 4, 6, 21, 47]), $a(["H", 148, 134, 120, 1480, 560, 8, 6, 20, 69]), $a(["T-16", 16, 17, 16, 10, 10, 1, 99, 99, 99]), $a(["T-32", 16, 33, 32, 24, 16, 1, 99, 99, 99]), $a(["T-48", 16, 49, 48, 38, 22, 1, 99, 99, 99])]); //#22332
            $ctx.fnc1 = -1; //#22335
            $ctx.fnc3 = -2; //#22335
            $ctx.lC = -5; //#22336
            $ctx.lB = -6; //#22336
            $ctx.lX = -7; //#22336
            $ctx.lT = -8; //#22336
            $ctx.lD = -9; //#22336
            $ctx.unl = -10; //#22336
            $ctx.fnc2 = -11; //#22337
            $ctx.fnc4 = -12; //#22337
            $ctx.sft1 = -13; //#22337
            $ctx.sft2 = -14; //#22337
            $ctx.sft3 = -15; //#22337
            $ctx.eci = -16; //#22337
            $ctx.pad = -17; //#22337
            $ctx.fnc1lD = -18; //#22337
            $ctx.unlcw = 255; //#22338
            $k[$j++] = Infinity; //#22349
            for (var _L = 0; _L <= 128; _L += 1) { //#22341
                $k[$j++] = _L; //#22341
                $k[$j++] = _L + 1; //#22341
            } //#22341
            $k[$j++] = $ctx.pad; //#22346
            $k[$j++] = 129; //#22346
            for (var _N = 0; _N <= 99; _N += 1) { //#22346
                var _P = $cvrs($s(2), _N, 10); //#22344
                var _R = $strcpy($s(2), "00"); //#22344
                $puti(_R, 2 - _P.length, _P); //#22344
                $k[$j++] = _R; //#22345
                $k[$j++] = _N + 130; //#22345
            } //#22345
            var _Z = $a([$ctx.lC, $ctx.lB, $ctx.fnc1, $ctx.fnc2, $ctx.fnc3, $ctx.fnc4, $ctx.fnc1lD]); //#22347
            $k[$j++] = 229; //#22347
            for (var _a = 0, _b = _Z.length; _a < _b; _a++) { //#22347
                var _e = $f($k[--$j] + 1); //#22347
                $k[$j++] = $get(_Z, _a); //#22347
                $k[$j++] = _e; //#22347
                $k[$j++] = _e; //#22347
            } //#22347
            $j--; //#22347
            $k[$j++] = $ctx.lX; //#22349
            $k[$j++] = 238; //#22349
            $k[$j++] = $ctx.lT; //#22349
            $k[$j++] = 239; //#22349
            $ctx.Avals = $d(); //#22351
            $k[$j++] = Infinity; //#22353
            var _i = $ctx.Avals; //#22353
            for (var _n = _i.size, _m = _i.keys(), _l = 0; _l < _n; _l++) { //#22353
                var _j = _m.next().value; //#22353
                $k[$j++] = _j; //#22353
                $k[$j++] = _i.get(_j); //#22353
                $k[$j++] = Infinity; //#22353
                var _o = $k[--$j]; //#22353
                var _p = $k[--$j]; //#22353
                $k[$j++] = _o; //#22353
                $k[$j++] = _p; //#22353
                var _q = $a(); //#22353
                $k[$j++] = _q; //#22353
            } //#22353
            $ctx.Avals = $d(); //#22354
            $k[$j++] = Infinity; //#22362
            $k[$j++] = $ctx.sft1; //#22361
            $k[$j++] = 0; //#22361
            $k[$j++] = $ctx.sft2; //#22361
            $k[$j++] = 1; //#22361
            $k[$j++] = $ctx.sft3; //#22361
            $k[$j++] = 2; //#22361
            $k[$j++] = 32; //#22361
            $k[$j++] = 3; //#22361
            for (var _v = 48; _v <= 57; _v += 1) { //#22361
                $k[$j++] = _v; //#22361
                $k[$j++] = _v - 44; //#22361
            } //#22361
            for (var _w = 65; _w <= 90; _w += 1) { //#22362
                $k[$j++] = _w; //#22362
                $k[$j++] = _w - 51; //#22362
            } //#22362
            $ctx.CNvals = $d(); //#22363
            $k[$j++] = Infinity; //#22364
            for (var _y = 0; _y <= 31; _y += 1) { //#22364
                $k[$j++] = _y; //#22364
                $k[$j++] = _y; //#22364
            } //#22364
            $ctx.C1vals = $d(); //#22364
            $k[$j++] = Infinity; //#22373
            for (var _10 = 33; _10 <= 47; _10 += 1) { //#22366
                $k[$j++] = _10; //#22366
                $k[$j++] = _10 - 33; //#22366
            } //#22366
            for (var _11 = 58; _11 <= 64; _11 += 1) { //#22367
                $k[$j++] = _11; //#22367
                $k[$j++] = _11 - 43; //#22367
            } //#22367
            for (var _12 = 91; _12 <= 95; _12 += 1) { //#22368
                $k[$j++] = _12; //#22368
                $k[$j++] = _12 - 69; //#22368
            } //#22368
            $k[$j++] = $ctx.fnc1; //#22373
            $k[$j++] = 27; //#22373
            $k[$j++] = $ctx.fnc2; //#22373
            $k[$j++] = 28; //#22373
            $k[$j++] = $ctx.fnc3; //#22373
            $k[$j++] = 29; //#22373
            $k[$j++] = $ctx.fnc4; //#22373
            $k[$j++] = 30; //#22373
            $k[$j++] = $ctx.pad; //#22373
            $k[$j++] = 31; //#22373
            $ctx.C2vals = $d(); //#22374
            $k[$j++] = Infinity; //#22375
            for (var _19 = 96; _19 <= 127; _19 += 1) { //#22375
                $k[$j++] = _19; //#22375
                $k[$j++] = _19 - 96; //#22375
            } //#22375
            $ctx.C3vals = $d(); //#22375
            $k[$j++] = Infinity; //#22380
            var _1B = $ctx.CNvals; //#22377
            for (var _1G = _1B.size, _1F = _1B.keys(), _1E = 0; _1E < _1G; _1E++) { //#22377
                var _1C = _1F.next().value; //#22377
                $k[$j++] = _1C; //#22377
                $k[$j++] = _1B.get(_1C); //#22377
                $k[$j++] = Infinity; //#22377
                var _1H = $k[--$j]; //#22377
                var _1I = $k[--$j]; //#22377
                $k[$j++] = _1H; //#22377
                $k[$j++] = _1I; //#22377
                var _1J = $a(); //#22377
                $k[$j++] = _1J; //#22377
            } //#22377
            var _1K = $ctx.C1vals; //#22378
            for (var _1P = _1K.size, _1O = _1K.keys(), _1N = 0; _1N < _1P; _1N++) { //#22378
                var _1L = _1O.next().value; //#22378
                $k[$j++] = _1L; //#22378
                $k[$j++] = _1K.get(_1L); //#22378
                $k[$j++] = Infinity; //#22378
                var _1Q = $k[--$j]; //#22378
                var _1R = $k[--$j]; //#22378
                $k[$j++] = _1Q; //#22378
                $k[$j++] = $get($ctx.CNvals, $ctx.sft1); //#22378
                $k[$j++] = _1R; //#22378
                var _1V = $a(); //#22378
                $k[$j++] = _1V; //#22378
            } //#22378
            var _1W = $ctx.C2vals; //#22379
            for (var _1b = _1W.size, _1a = _1W.keys(), _1Z = 0; _1Z < _1b; _1Z++) { //#22379
                var _1X = _1a.next().value; //#22379
                $k[$j++] = _1X; //#22379
                $k[$j++] = _1W.get(_1X); //#22379
                $k[$j++] = Infinity; //#22379
                var _1c = $k[--$j]; //#22379
                var _1d = $k[--$j]; //#22379
                $k[$j++] = _1c; //#22379
                $k[$j++] = $get($ctx.CNvals, $ctx.sft2); //#22379
                $k[$j++] = _1d; //#22379
                var _1h = $a(); //#22379
                $k[$j++] = _1h; //#22379
            } //#22379
            var _1i = $ctx.C3vals; //#22380
            for (var _1n = _1i.size, _1m = _1i.keys(), _1l = 0; _1l < _1n; _1l++) { //#22380
                var _1j = _1m.next().value; //#22380
                $k[$j++] = _1j; //#22380
                $k[$j++] = _1i.get(_1j); //#22380
                $k[$j++] = Infinity; //#22380
                var _1o = $k[--$j]; //#22380
                var _1p = $k[--$j]; //#22380
                $k[$j++] = _1o; //#22380
                $k[$j++] = $get($ctx.CNvals, $ctx.sft3); //#22380
                $k[$j++] = _1p; //#22380
                var _1t = $a(); //#22380
                $k[$j++] = _1t; //#22380
            } //#22380
            $ctx.Cvals = $d(); //#22381
            $k[$j++] = Infinity; //#22389
            $k[$j++] = $ctx.sft1; //#22388
            $k[$j++] = 0; //#22388
            $k[$j++] = $ctx.sft2; //#22388
            $k[$j++] = 1; //#22388
            $k[$j++] = $ctx.sft3; //#22388
            $k[$j++] = 2; //#22388
            $k[$j++] = 32; //#22388
            $k[$j++] = 3; //#22388
            for (var _1y = 48; _1y <= 57; _1y += 1) { //#22388
                $k[$j++] = _1y; //#22388
                $k[$j++] = _1y - 44; //#22388
            } //#22388
            for (var _1z = 97; _1z <= 122; _1z += 1) { //#22389
                $k[$j++] = _1z; //#22389
                $k[$j++] = _1z - 83; //#22389
            } //#22389
            $ctx.TNvals = $d(); //#22390
            $k[$j++] = Infinity; //#22391
            for (var _21 = 0; _21 <= 31; _21 += 1) { //#22391
                $k[$j++] = _21; //#22391
                $k[$j++] = _21; //#22391
            } //#22391
            $ctx.T1vals = $d(); //#22391
            $k[$j++] = Infinity; //#22400
            for (var _23 = 33; _23 <= 47; _23 += 1) { //#22393
                $k[$j++] = _23; //#22393
                $k[$j++] = _23 - 33; //#22393
            } //#22393
            for (var _24 = 58; _24 <= 64; _24 += 1) { //#22394
                $k[$j++] = _24; //#22394
                $k[$j++] = _24 - 43; //#22394
            } //#22394
            for (var _25 = 91; _25 <= 95; _25 += 1) { //#22395
                $k[$j++] = _25; //#22395
                $k[$j++] = _25 - 69; //#22395
            } //#22395
            $k[$j++] = $ctx.fnc1; //#22400
            $k[$j++] = 27; //#22400
            $k[$j++] = $ctx.fnc2; //#22400
            $k[$j++] = 28; //#22400
            $k[$j++] = $ctx.fnc3; //#22400
            $k[$j++] = 29; //#22400
            $k[$j++] = $ctx.fnc4; //#22400
            $k[$j++] = 30; //#22400
            $k[$j++] = $ctx.pad; //#22400
            $k[$j++] = 31; //#22400
            $ctx.T2vals = $d(); //#22401
            $k[$j++] = Infinity; //#22405
            $k[$j++] = 96; //#22404
            $k[$j++] = 0; //#22404
            for (var _2C = 65; _2C <= 90; _2C += 1) { //#22404
                $k[$j++] = _2C; //#22404
                $k[$j++] = _2C - 64; //#22404
            } //#22404
            for (var _2D = 123; _2D <= 127; _2D += 1) { //#22405
                $k[$j++] = _2D; //#22405
                $k[$j++] = _2D - 96; //#22405
            } //#22405
            $ctx.T3vals = $d(); //#22406
            $k[$j++] = Infinity; //#22411
            var _2F = $ctx.TNvals; //#22408
            for (var _2K = _2F.size, _2J = _2F.keys(), _2I = 0; _2I < _2K; _2I++) { //#22408
                var _2G = _2J.next().value; //#22408
                $k[$j++] = _2G; //#22408
                $k[$j++] = _2F.get(_2G); //#22408
                $k[$j++] = Infinity; //#22408
                var _2L = $k[--$j]; //#22408
                var _2M = $k[--$j]; //#22408
                $k[$j++] = _2L; //#22408
                $k[$j++] = _2M; //#22408
                var _2N = $a(); //#22408
                $k[$j++] = _2N; //#22408
            } //#22408
            var _2O = $ctx.T1vals; //#22409
            for (var _2T = _2O.size, _2S = _2O.keys(), _2R = 0; _2R < _2T; _2R++) { //#22409
                var _2P = _2S.next().value; //#22409
                $k[$j++] = _2P; //#22409
                $k[$j++] = _2O.get(_2P); //#22409
                $k[$j++] = Infinity; //#22409
                var _2U = $k[--$j]; //#22409
                var _2V = $k[--$j]; //#22409
                $k[$j++] = _2U; //#22409
                $k[$j++] = $get($ctx.TNvals, $ctx.sft1); //#22409
                $k[$j++] = _2V; //#22409
                var _2Z = $a(); //#22409
                $k[$j++] = _2Z; //#22409
            } //#22409
            var _2a = $ctx.T2vals; //#22410
            for (var _2f = _2a.size, _2e = _2a.keys(), _2d = 0; _2d < _2f; _2d++) { //#22410
                var _2b = _2e.next().value; //#22410
                $k[$j++] = _2b; //#22410
                $k[$j++] = _2a.get(_2b); //#22410
                $k[$j++] = Infinity; //#22410
                var _2g = $k[--$j]; //#22410
                var _2h = $k[--$j]; //#22410
                $k[$j++] = _2g; //#22410
                $k[$j++] = $get($ctx.TNvals, $ctx.sft2); //#22410
                $k[$j++] = _2h; //#22410
                var _2l = $a(); //#22410
                $k[$j++] = _2l; //#22410
            } //#22410
            var _2m = $ctx.T3vals; //#22411
            for (var _2r = _2m.size, _2q = _2m.keys(), _2p = 0; _2p < _2r; _2p++) { //#22411
                var _2n = _2q.next().value; //#22411
                $k[$j++] = _2n; //#22411
                $k[$j++] = _2m.get(_2n); //#22411
                $k[$j++] = Infinity; //#22411
                var _2s = $k[--$j]; //#22411
                var _2t = $k[--$j]; //#22411
                $k[$j++] = _2s; //#22411
                $k[$j++] = $get($ctx.TNvals, $ctx.sft3); //#22411
                $k[$j++] = _2t; //#22411
                var _2x = $a(); //#22411
                $k[$j++] = _2x; //#22411
            } //#22411
            $ctx.Tvals = $d(); //#22412
            for (var _2z = 128; _2z <= 255; _2z += 1) { //#22420
                $ctx.i = _2z; //#22416
                $k[$j++] = $ctx.Avals; //#22417
                $k[$j++] = $ctx.i; //#22417
                $k[$j++] = Infinity; //#22417
                $aload($get($ctx.Avals, $ctx.fnc4)); //#22417
                $aload($get($ctx.Avals, $ctx.i - 128)); //#22417
                var _38 = $a(); //#22417
                var _39 = $k[--$j]; //#22417
                $put($k[--$j], _39, _38); //#22417
                $k[$j++] = $ctx.Cvals; //#22418
                $k[$j++] = $ctx.i; //#22418
                $k[$j++] = Infinity; //#22418
                $aload($get($ctx.Cvals, $ctx.fnc4)); //#22418
                $aload($get($ctx.Cvals, $ctx.i - 128)); //#22418
                var _3J = $a(); //#22418
                var _3K = $k[--$j]; //#22418
                $put($k[--$j], _3K, _3J); //#22418
                $k[$j++] = $ctx.Tvals; //#22419
                $k[$j++] = $ctx.i; //#22419
                $k[$j++] = Infinity; //#22419
                $aload($get($ctx.Tvals, $ctx.fnc4)); //#22419
                $aload($get($ctx.Tvals, $ctx.i - 128)); //#22419
                var _3U = $a(); //#22419
                var _3V = $k[--$j]; //#22419
                $put($k[--$j], _3V, _3U); //#22419
            } //#22419
            $k[$j++] = Infinity; //#22428
            $k[$j++] = 13; //#22427
            $k[$j++] = 0; //#22427
            $k[$j++] = 42; //#22427
            $k[$j++] = 1; //#22427
            $k[$j++] = 62; //#22427
            $k[$j++] = 2; //#22427
            $k[$j++] = 32; //#22427
            $k[$j++] = 3; //#22427
            for (var _3X = 48; _3X <= 57; _3X += 1) { //#22427
                $k[$j++] = _3X; //#22427
                $k[$j++] = _3X - 44; //#22427
            } //#22427
            for (var _3Y = 65; _3Y <= 90; _3Y += 1) { //#22428
                $k[$j++] = _3Y; //#22428
                $k[$j++] = _3Y - 51; //#22428
            } //#22428
            $ctx.Xvals = $d(); //#22429
            $k[$j++] = Infinity; //#22431
            var _3a = $ctx.Xvals; //#22431
            for (var _3f = _3a.size, _3e = _3a.keys(), _3d = 0; _3d < _3f; _3d++) { //#22431
                var _3b = _3e.next().value; //#22431
                $k[$j++] = _3b; //#22431
                $k[$j++] = _3a.get(_3b); //#22431
                $k[$j++] = Infinity; //#22431
                var _3g = $k[--$j]; //#22431
                var _3h = $k[--$j]; //#22431
                $k[$j++] = _3g; //#22431
                $k[$j++] = _3h; //#22431
                var _3i = $a(); //#22431
                $k[$j++] = _3i; //#22431
            } //#22431
            $ctx.Xvals = $d(); //#22432
            $k[$j++] = Infinity; //#22435
            for (var _3k = 0; _3k <= 255; _3k += 1) { //#22435
                $k[$j++] = _3k; //#22435
                $k[$j++] = _3k; //#22435
            } //#22435
            $ctx.Bvals = $d(); //#22436
            $k[$j++] = Infinity; //#22438
            var _3m = $ctx.Bvals; //#22438
            for (var _3r = _3m.size, _3q = _3m.keys(), _3p = 0; _3p < _3r; _3p++) { //#22438
                var _3n = _3q.next().value; //#22438
                $k[$j++] = _3n; //#22438
                $k[$j++] = _3m.get(_3n); //#22438
                $k[$j++] = Infinity; //#22438
                var _3s = $k[--$j]; //#22438
                var _3t = $k[--$j]; //#22438
                $k[$j++] = _3s; //#22438
                $k[$j++] = _3t; //#22438
                var _3u = $a(); //#22438
                $k[$j++] = _3u; //#22438
            } //#22438
            $ctx.Bvals = $d(); //#22439
            $ctx.encvals = $a([$ctx.Avals, $ctx.Cvals, $ctx.Tvals, $ctx.Xvals, -1, $ctx.Bvals]); //#22441
            $ctx.A = 0; //#22443
            $ctx.C = 1; //#22443
            $ctx.T = 2; //#22443
            $ctx.X = 3; //#22443
            $ctx.D = 4; //#22443
            $ctx.B = 5; //#22443
            for (var _42 in $ctx) {
                $ctx.hasOwnProperty(_42) && (bwipp_codeone.$ctx[_42] = $ctx[_42]);
            } //#22443
            bwipp_codeone.$ctx._22444 = 1; //#22443
        })(); //#22443
    } //#22443
    if ($1.stype) { //#22928
        $1.normalize = function() {
            $1.base = $k[--$j]; //#22449
            $1.num = $k[--$j]; //#22450
            for (var _47 = $1.num.length - 1; _47 >= 1; _47 -= 1) { //#22455
                $1.i = _47; //#22452
                var _48 = $1.num; //#22453
                var _49 = $1.i; //#22453
                $put(_48, _49 - 1, $f($get(_48, _49 - 1) + (~~($get($1.num, $1.i) / $1.base)))); //#22453
                $put($1.num, $1.i, $get($1.num, $1.i) % $1.base); //#22454
            } //#22454
            for (;;) { //#22461
                if ($lt($get($1.num, 0), $1.base)) { //#22457
                    break; //#22457
                } //#22457
                $k[$j++] = Infinity; //#22458
                $k[$j++] = 0; //#22458
                $forall($1.num); //#22458
                $1.num = $a(); //#22458
                $put($1.num, 0, $f($get($1.num, 0) + (~~($get($1.num, 1) / $1.base)))); //#22459
                $put($1.num, 1, $get($1.num, 1) % $1.base); //#22460
            } //#22460
            $k[$j++] = Infinity; //#22463
            $1.i = true; //#22463
            var _4a = $1.num; //#22463
            for (var _4b = 0, _4c = _4a.length; _4b < _4c; _4b++) { //#22463
                var _4d = $get(_4a, _4b); //#22463
                $k[$j++] = _4d; //#22463
                if ((_4d == 0) && $1.i) { //#22463
                    $j--; //#22463
                } else { //#22463
                    $1.i = false; //#22463
                } //#22463
            } //#22463
            $1.num = $a(); //#22463
            if ($1.num.length == 0) { //#22464
                $1.num = $a([0]); //#22464
            } //#22464
            $k[$j++] = $1.num; //#22465
        }; //#22465
        $1.bigadd = function() {
            var _4j = $k[--$j]; //#22469
            var _4k = $k[--$j]; //#22469
            $1.offset = Math.abs(_4j.length - _4k.length); //#22470
            if (_4j.length < _4k.length) { //#22471
                var _ = _4j; //#22471
                _4j = _4k; //#22471
                _4k = _; //#22471
            } //#22471
            $1.a = _4j; //#22472
            $1.b = _4k; //#22472
            for (var _4n = 0, _4m = $1.b.length - 1; _4n <= _4m; _4n += 1) { //#22475
                var _4o = $1.a; //#22474
                var _4p = $1.offset; //#22474
                $put(_4o, _4n + _4p, $f($get(_4o, _4n + _4p) + $get($1.b, _4n))); //#22474
            } //#22474
            $k[$j++] = $1.a; //#22476
        }; //#22476
        $1.barlen = $1.barcode.length; //#22479
        $1.v = $a([1]); //#22482
        for (var _4y = 0, _4x = $1.barlen - 1; _4y <= _4x; _4y += 1) { //#22487
            $1.i = _4y; //#22484
            $k[$j++] = Infinity; //#22485
            $forall($get($1.stypevals, $1.i), function() { //#22485
                var _52 = $k[--$j]; //#22485
                $k[$j++] = $f(_52 - 48) * $f($get($1.barcode, ($1.barlen - $1.i) - 1) - 48); //#22485
            }); //#22485
            var _57 = $a(); //#22485
            $k[$j++] = _57; //#22486
            $k[$j++] = $1.v; //#22486
            $1.bigadd(); //#22486
            $1.v = $k[--$j]; //#22486
        } //#22486
        $k[$j++] = 'v'; //#22488
        $k[$j++] = $1.v; //#22488
        $k[$j++] = 2; //#22488
        $1.normalize(); //#22488
        var _5B = $k[--$j]; //#22488
        $1[$k[--$j]] = _5B; //#22488
        $k[$j++] = Infinity; //#22491
        for (var _5E = 0, _5F = (5 - ($1.v.length % 5)) % 5; _5E < _5F; _5E++) { //#22491
            $k[$j++] = 0; //#22491
        } //#22491
        $aload($1.v); //#22491
        $1.v = $a(); //#22491
        $1.cws = $a(~~($1.v.length / 5)); //#22492
        for (var _5M = 0, _5L = $1.cws.length - 1; _5M <= _5L; _5M += 1) { //#22498
            $1.i = _5M; //#22494
            var _5P = $geti($1.v, $1.i * 5, 5); //#22495
            $k[$j++] = 0; //#22496
            for (var _5Q = 0, _5R = _5P.length; _5Q < _5R; _5Q++) { //#22496
                var _5T = $k[--$j]; //#22496
                $k[$j++] = $f(_5T + $get(_5P, _5Q)) * 2; //#22496
            } //#22496
            $put($1.cws, $1.i, ~~($k[--$j] / 2)); //#22497
        } //#22497
        $1.metrics = $1.stypemetrics; //#22500
    } else { //#22928
        var _5c = new Map([
            ["parse", $1.parse],
            ["parsefnc", $1.parsefnc],
            ["eci", true],
            ["FNC1", $1.fnc1],
            ["FNC3", $1.fnc3]
        ]); //#22510
        $1.fncvals = _5c; //#22511
        $k[$j++] = 'msg'; //#22512
        $k[$j++] = $1.barcode; //#22512
        $k[$j++] = $1.fncvals; //#22512
        bwipp_parseinput(); //#22512
        var _5f = $k[--$j]; //#22512
        $1[$k[--$j]] = _5f; //#22512
        $1.msglen = $1.msg.length; //#22513
        $1.eciesc = 92; //#22516
        var _5i = $1.msg; //#22517
        $k[$j++] = 'numecis'; //#22517
        $k[$j++] = 0; //#22517
        for (var _5j = 0, _5k = _5i.length; _5j < _5k; _5j++) { //#22517
            if ($get(_5i, _5j) <= -1000000) { //#22517
                var _5m = $k[--$j]; //#22517
                $k[$j++] = $f(_5m + 1); //#22517
            } //#22517
        } //#22517
        var _5n = $k[--$j]; //#22517
        $1[$k[--$j]] = _5n; //#22517
        if ($1.numecis > 0) { //#22544
            $1.msgtmp = $a($f(($f(($1.msg.length * 2) + ($1.numecis * 6))) + 2)); //#22519
            $put($1.msgtmp, 0, $1.pad); //#22520
            $put($1.msgtmp, 1, $1.eciesc); //#22521
            $1.j = 2; //#22522
            for (var _5z = 0, _5y = $1.msg.length - 1; _5z <= _5y; _5z += 1) { //#22541
                var _61 = $get($1.msg, _5z); //#22524
                $k[$j++] = _61; //#22540
                if (_61 <= -1000000) { //#22538
                    var _65 = $geti($cvrs($s(7), -$k[--$j], 10), 1, 6); //#22526
                    for (var _66 = 0, _67 = _65.length; _66 < _67; _66++) { //#22526
                        $k[$j++] = $get(_65, _66); //#22526
                    } //#22526
                    $astore($a(6)); //#22526
                    $puti($1.msgtmp, $1.j + 1, $k[--$j]); //#22527
                    $put($1.msgtmp, $1.j, $1.eciesc); //#22528
                    $1.j = $1.j + 7; //#22529
                } else { //#22538
                    var _6H = $k[--$j]; //#22531
                    $k[$j++] = _6H; //#22539
                    if (_6H != $1.eciesc) { //#22538
                        $put($1.msgtmp, $1.j, $k[--$j]); //#22532
                        $1.j = $1.j + 1; //#22533
                    } else { //#22538
                        $j--; //#22535
                        $put($1.msgtmp, $1.j, $1.eciesc); //#22536
                        $put($1.msgtmp, $1.j + 1, $1.eciesc); //#22537
                        $1.j = $1.j + 2; //#22538
                    } //#22538
                } //#22538
            } //#22538
            $1.msg = $geti($1.msgtmp, 0, $1.j); //#22542
            $1.msglen = $1.msg.length; //#22543
        } //#22543
        $1.metrics = $1.nonstypemetrics; //#22546
        $1.fullcws = $a([]); //#22549
        var _6a = $1.metrics; //#22550
        for (var _6b = 0, _6c = _6a.length; _6b < _6c; _6b++) { //#22561
            $1.m = $get(_6a, _6b); //#22551
            $1.vers = $get($1.m, 0); //#22552
            $1.dcws = $get($1.m, 4); //#22553
            $1.okay = true; //#22554
            if ($eq($1.version, "unset")) { //#22558
                if ($1.vers.length != 1) { //#22556
                    $1.okay = false; //#22556
                } //#22556
            } else { //#22558
                if ($ne($1.version, $1.vers)) { //#22558
                    $1.okay = false; //#22558
                } //#22558
            } //#22558
            if ($1.okay) { //#22560
                $k[$j++] = Infinity; //#22560
                $aload($1.fullcws); //#22560
                $k[$j++] = $1.dcws; //#22560
                $1.fullcws = $a(); //#22560
            } //#22560
        } //#22560
        $k[$j++] = Infinity; //#22562
        for (var _6q = 0, _6r = 1480; _6q < _6r; _6q++) { //#22562
            $k[$j++] = 10000; //#22562
        } //#22562
        $1.numremcws = $a(); //#22562
        var _6t = $1.fullcws; //#22563
        for (var _6u = 0, _6v = _6t.length; _6u < _6v; _6u++) { //#22563
            $put($1.numremcws, $f($get(_6t, _6u) - 1), 1); //#22563
        } //#22563
        for (var _6y = 1478; _6y >= 0; _6y -= 1) { //#22569
            $1.i = _6y; //#22565
            if ($get($1.numremcws, $1.i) != 1) { //#22568
                $put($1.numremcws, $1.i, $f($get($1.numremcws, $1.i + 1) + 1)); //#22567
            } //#22567
        } //#22567
        $k[$j++] = Infinity; //#22571
        for (var _78 = 0, _79 = $1.msglen; _78 < _79; _78++) { //#22571
            $k[$j++] = 0; //#22571
        } //#22571
        $k[$j++] = 0; //#22571
        $1.numD = $a(); //#22571
        $k[$j++] = Infinity; //#22572
        for (var _7C = 0, _7D = $1.msglen; _7C < _7D; _7C++) { //#22572
            $k[$j++] = 0; //#22572
        } //#22572
        $k[$j++] = 9999; //#22572
        $1.nextXterm = $a(); //#22572
        $k[$j++] = Infinity; //#22573
        for (var _7G = 0, _7H = $1.msglen; _7G < _7H; _7G++) { //#22573
            $k[$j++] = 0; //#22573
        } //#22573
        $k[$j++] = 9999; //#22573
        $1.nextNonX = $a(); //#22573
        for (var _7K = $1.msglen - 1; _7K >= 0; _7K -= 1) { //#22590
            $1.i = _7K; //#22575
            $1.barchar = $get($1.msg, $1.i); //#22576
            if (($1.barchar >= 48) && ($1.barchar <= 57)) { //#22579
                $put($1.numD, $1.i, $f($get($1.numD, $1.i + 1) + 1)); //#22578
            } //#22578
            if ((($1.barchar == 13) || ($1.barchar == 42)) || ($1.barchar == 62)) { //#22583
                $put($1.nextXterm, $1.i, 0); //#22581
            } else { //#22583
                $put($1.nextXterm, $1.i, $f($get($1.nextXterm, $1.i + 1) + 1)); //#22583
            } //#22583
            var _7h = $get($1.Xvals, $1.barchar) !== undefined; //#22585
            if (!_7h) { //#22588
                $put($1.nextNonX, $1.i, 0); //#22586
            } else { //#22588
                $put($1.nextNonX, $1.i, $f($get($1.nextNonX, $1.i + 1) + 1)); //#22588
            } //#22588
        } //#22588
        $k[$j++] = Infinity; //#22591
        var _7p = $1.nextXterm; //#22591
        for (var _7q = 0, _7r = _7p.length; _7q < _7r; _7q++) { //#22591
            var _7s = $get(_7p, _7q); //#22591
            $k[$j++] = _7s; //#22591
            if (_7s > 10000) { //#22591
                $j--; //#22591
                $k[$j++] = 10000; //#22591
            } //#22591
        } //#22591
        $1.nextXterm = $a(); //#22591
        $k[$j++] = Infinity; //#22592
        var _7u = $1.nextNonX; //#22592
        for (var _7v = 0, _7w = _7u.length; _7v < _7w; _7v++) { //#22592
            var _7x = $get(_7u, _7v); //#22592
            $k[$j++] = _7x; //#22592
            if (_7x > 10000) { //#22592
                $j--; //#22592
                $k[$j++] = 10000; //#22592
            } //#22592
        } //#22592
        $1.nextNonX = $a(); //#22592
        $1.isD = function() {
            $k[$j++] = ($1.char >= 48) && ($1.char <= 57); //#22594
        }; //#22594
        $1.isC = function() {
            var _83 = $get($1.CNvals, $1.char) !== undefined; //#22595
            $k[$j++] = _83; //#22595
        }; //#22595
        $1.isT = function() {
            var _86 = $get($1.TNvals, $1.char) !== undefined; //#22596
            $k[$j++] = _86; //#22596
        }; //#22596
        $1.isX = function() {
            var _89 = $get($1.Xvals, $1.char) !== undefined; //#22597
            $k[$j++] = _89; //#22597
        }; //#22597
        $1.isEA = function() {
            $k[$j++] = $1.char > 127; //#22598
        }; //#22598
        $1.isFN = function() {
            $k[$j++] = $1.char < 0; //#22599
        }; //#22599
        $1.XtermFirst = function() {
            var _8C = $k[--$j]; //#22600
            $k[$j++] = $lt($get($1.nextXterm, _8C), $get($1.nextNonX, _8C)); //#22600
        }; //#22600
        $1.lookup = function() {
            $1.ac = 1; //#22603
            $1.cc = 2; //#22603
            $1.tc = 2; //#22603
            $1.xc = 2; //#22603
            $1.bc = 3; //#22603
            if ($1.mode == $1.A) { //#22604
                $1.ac = 0; //#22604
                $1.cc = 1; //#22604
                $1.tc = 1; //#22604
                $1.xc = 1; //#22604
                $1.bc = 2; //#22604
            } //#22604
            if ($1.mode == $1.C) { //#22605
                $1.cc = 0; //#22605
            } //#22605
            if ($1.mode == $1.T) { //#22606
                $1.tc = 0; //#22606
            } //#22606
            if ($1.mode == $1.X) { //#22607
                $1.xc = 0; //#22607
            } //#22607
            if ($1.mode == $1.B) { //#22608
                $1.bc = 0; //#22608
            } //#22608
            for (var _8R = 0, _8S = 1; _8R < _8S; _8R++) { //#22636
                $1.k = 0; //#22610
                for (;;) { //#22635
                    if (($1.i + $1.k) == $1.msglen) { //#22617
                        var _8a = $a([$1.ac, $1.cc, $1.tc, $1.xc]); //#22612
                        $k[$j++] = true; //#22612
                        for (var _8b = 0, _8c = _8a.length; _8b < _8c; _8b++) { //#22612
                            var _8f = $k[--$j]; //#22612
                            $k[$j++] = _8f && ($1.bc <= Math.ceil($get(_8a, _8b))); //#22612
                        } //#22612
                        if ($k[--$j]) { //#22612
                            $k[$j++] = $1.B; //#22612
                            break; //#22612
                        } //#22612
                        var _8m = $a([$1.cc, $1.tc, $1.xc, $1.bc]); //#22613
                        $k[$j++] = true; //#22613
                        for (var _8n = 0, _8o = _8m.length; _8n < _8o; _8n++) { //#22613
                            var _8r = $k[--$j]; //#22613
                            $k[$j++] = _8r && ($1.ac <= Math.ceil($get(_8m, _8n))); //#22613
                        } //#22613
                        if ($k[--$j]) { //#22613
                            $k[$j++] = $1.A; //#22613
                            break; //#22613
                        } //#22613
                        var _8w = $a([$1.tc, $1.xc]); //#22614
                        $k[$j++] = true; //#22614
                        for (var _8x = 0, _8y = _8w.length; _8x < _8y; _8x++) { //#22614
                            var _91 = $k[--$j]; //#22614
                            $k[$j++] = _91 && (Math.ceil($1.cc) <= Math.ceil($get(_8w, _8x))); //#22614
                        } //#22614
                        if ($k[--$j]) { //#22614
                            $k[$j++] = $1.C; //#22614
                            break; //#22614
                        } //#22614
                        var _95 = $a([$1.xc]); //#22615
                        $k[$j++] = true; //#22615
                        for (var _96 = 0, _97 = _95.length; _96 < _97; _96++) { //#22615
                            var _9A = $k[--$j]; //#22615
                            $k[$j++] = _9A && (Math.ceil($1.tc) <= Math.ceil($get(_95, _96))); //#22615
                        } //#22615
                        if ($k[--$j]) { //#22615
                            $k[$j++] = $1.T; //#22615
                            break; //#22615
                        } //#22615
                        $k[$j++] = $1.X; //#22616
                        break; //#22616
                    } //#22616
                    $1.char = $get($1.msg, $1.i + $1.k); //#22618
                    $k[$j++] = 'ac'; //#22619
                    $k[$j++] = $1.ac; //#22619
                    $1.isD(); //#22619
                    if ($k[--$j]) { //#22619
                        var _9K = $k[--$j]; //#22619
                        $k[$j++] = $f(_9K + (1 / 2)); //#22619
                    } else { //#22619
                        $1.isEA(); //#22619
                        if ($k[--$j]) { //#22619
                            var _9M = $k[--$j]; //#22619
                            $k[$j++] = Math.ceil(_9M) + 2; //#22619
                        } else { //#22619
                            var _9N = $k[--$j]; //#22619
                            $k[$j++] = Math.ceil(_9N) + 1; //#22619
                        } //#22619
                    } //#22619
                    var _9O = $k[--$j]; //#22619
                    $1[$k[--$j]] = _9O; //#22619
                    $k[$j++] = 'cc'; //#22620
                    $k[$j++] = $1.cc; //#22620
                    $1.isC(); //#22620
                    if ($k[--$j]) { //#22620
                        var _9S = $k[--$j]; //#22620
                        $k[$j++] = $f(_9S + 0.6666667); //#22620
                    } else { //#22620
                        $1.isEA(); //#22620
                        if ($k[--$j]) { //#22620
                            var _9U = $k[--$j]; //#22620
                            $k[$j++] = $f(_9U + 2.6666667); //#22620
                        } else { //#22620
                            var _9V = $k[--$j]; //#22620
                            $k[$j++] = $f(_9V + 1.3333334); //#22620
                        } //#22620
                    } //#22620
                    var _9W = $k[--$j]; //#22620
                    $1[$k[--$j]] = _9W; //#22620
                    $k[$j++] = 'tc'; //#22621
                    $k[$j++] = $1.tc; //#22621
                    $1.isT(); //#22621
                    if ($k[--$j]) { //#22621
                        var _9a = $k[--$j]; //#22621
                        $k[$j++] = $f(_9a + 0.6666667); //#22621
                    } else { //#22621
                        $1.isEA(); //#22621
                        if ($k[--$j]) { //#22621
                            var _9c = $k[--$j]; //#22621
                            $k[$j++] = $f(_9c + 2.6666667); //#22621
                        } else { //#22621
                            var _9d = $k[--$j]; //#22621
                            $k[$j++] = $f(_9d + 1.3333334); //#22621
                        } //#22621
                    } //#22621
                    var _9e = $k[--$j]; //#22621
                    $1[$k[--$j]] = _9e; //#22621
                    $k[$j++] = 'xc'; //#22622
                    $k[$j++] = $1.xc; //#22622
                    $1.isX(); //#22622
                    if ($k[--$j]) { //#22622
                        var _9i = $k[--$j]; //#22622
                        $k[$j++] = $f(_9i + 0.6666667); //#22622
                    } else { //#22622
                        $1.isEA(); //#22622
                        if ($k[--$j]) { //#22622
                            var _9k = $k[--$j]; //#22622
                            $k[$j++] = $f(_9k + 4.3333334); //#22622
                        } else { //#22622
                            var _9l = $k[--$j]; //#22622
                            $k[$j++] = $f(_9l + 3.3333334); //#22622
                        } //#22622
                    } //#22622
                    var _9m = $k[--$j]; //#22622
                    $1[$k[--$j]] = _9m; //#22622
                    $k[$j++] = 'bc'; //#22623
                    $k[$j++] = $1.bc; //#22623
                    $1.isFN(); //#22623
                    if ($k[--$j]) { //#22623
                        var _9q = $k[--$j]; //#22623
                        $k[$j++] = $f(_9q + 3); //#22623
                    } else { //#22623
                        var _9r = $k[--$j]; //#22623
                        $k[$j++] = $f(_9r + 1); //#22623
                    } //#22623
                    var _9s = $k[--$j]; //#22623
                    $1[$k[--$j]] = _9s; //#22623
                    if ($1.k >= 3) { //#22633
                        var _9z = $a([$1.ac, $1.cc, $1.tc, $1.xc]); //#22625
                        $k[$j++] = true; //#22625
                        for (var _A0 = 0, _A1 = _9z.length; _A0 < _A1; _A0++) { //#22625
                            var _A4 = $k[--$j]; //#22625
                            $k[$j++] = _A4 && (($1.bc + 1) <= Math.ceil($get(_9z, _A0))); //#22625
                        } //#22625
                        if ($k[--$j]) { //#22625
                            $k[$j++] = $1.B; //#22625
                            break; //#22625
                        } //#22625
                        var _AB = $a([$1.cc, $1.tc, $1.xc, $1.bc]); //#22626
                        $k[$j++] = true; //#22626
                        for (var _AC = 0, _AD = _AB.length; _AC < _AD; _AC++) { //#22626
                            var _AG = $k[--$j]; //#22626
                            $k[$j++] = _AG && (($1.ac + 1) <= Math.ceil($get(_AB, _AC))); //#22626
                        } //#22626
                        if ($k[--$j]) { //#22626
                            $k[$j++] = $1.A; //#22626
                            break; //#22626
                        } //#22626
                        var _AN = $a([$1.ac, $1.cc, $1.xc, $1.bc]); //#22627
                        $k[$j++] = true; //#22627
                        for (var _AO = 0, _AP = _AN.length; _AO < _AP; _AO++) { //#22627
                            var _AS = $k[--$j]; //#22627
                            $k[$j++] = _AS && ((Math.ceil($1.tc) + 1) <= Math.ceil($get(_AN, _AO))); //#22627
                        } //#22627
                        if ($k[--$j]) { //#22627
                            $k[$j++] = $1.T; //#22627
                            break; //#22627
                        } //#22627
                        var _AX = $a([$1.ac, $1.tc]); //#22628
                        $k[$j++] = true; //#22628
                        for (var _AY = 0, _AZ = _AX.length; _AY < _AZ; _AY++) { //#22628
                            var _Ac = $k[--$j]; //#22628
                            $k[$j++] = _Ac && ((Math.ceil($1.cc) + 1) <= Math.ceil($get(_AX, _AY))); //#22628
                        } //#22628
                        if ($k[--$j]) { //#22631
                            if (Math.ceil($1.cc) < Math.ceil($1.xc)) { //#22629
                                $k[$j++] = $1.C; //#22629
                                break; //#22629
                            } //#22629
                            if ($1.cc == $1.xc) { //#22630
                                $k[$j++] = ($1.i + $1.k) + 1; //#22630
                                $1.XtermFirst(); //#22630
                                if ($k[--$j]) { //#22630
                                    $k[$j++] = $1.X; //#22630
                                    break; //#22630
                                } else { //#22630
                                    $k[$j++] = $1.C; //#22630
                                    break; //#22630
                                } //#22630
                            } //#22630
                        } //#22630
                        var _As = $a([$1.ac, $1.cc, $1.tc, $1.bc]); //#22632
                        $k[$j++] = true; //#22632
                        for (var _At = 0, _Au = _As.length; _At < _Au; _At++) { //#22632
                            var _Ax = $k[--$j]; //#22632
                            $k[$j++] = _Ax && ((Math.ceil($1.xc) + 1) <= Math.ceil($get(_As, _At))); //#22632
                        } //#22632
                        if ($k[--$j]) { //#22632
                            $k[$j++] = $1.X; //#22632
                            break; //#22632
                        } //#22632
                    } //#22632
                    $1.k = $1.k + 1; //#22634
                } //#22634
            } //#22634
        }; //#22634
        $1.addtocws = function() {
            var _B1 = $k[--$j]; //#22640
            $puti($1.cws, $1.j, _B1); //#22640
            $1.j = _B1.length + $1.j; //#22641
        }; //#22641
        $1.tobin = function() {
            var _B6 = $s($k[--$j]); //#22645
            $k[$j++] = _B6; //#22645
            for (var _B8 = 0, _B7 = _B6.length - 1; _B8 <= _B7; _B8 += 1) { //#22645
                var _B9 = $k[--$j]; //#22645
                $put(_B9, _B8, 48); //#22645
                $k[$j++] = _B9; //#22645
            } //#22645
            var _BA = $k[--$j]; //#22646
            var _BD = $cvrs($s(_BA.length), $k[--$j], 2); //#22646
            $puti(_BA, _BA.length - _BD.length, _BD); //#22646
            $k[$j++] = _BA; //#22647
            $k[$j++] = Infinity; //#22647
            var _BE = $k[--$j]; //#22647
            var _BF = $k[--$j]; //#22647
            $k[$j++] = _BE; //#22647
            $forall(_BF, function() { //#22647
                var _BG = $k[--$j]; //#22647
                $k[$j++] = $f(_BG - 48); //#22647
            }); //#22647
            var _BH = $a(); //#22647
            $k[$j++] = _BH; //#22647
        }; //#22647
        $1.encA = function() {
            for (var _BI = 0, _BJ = 1; _BI < _BJ; _BI++) { //#22692
                if ($get($1.numD, $1.i) >= 21) { //#22656
                    $1.Dbits = $a([1, 1, 1, 1]); //#22653
                    $1.mode = $1.D; //#22654
                    break; //#22655
                } //#22655
                var _BR = $get($1.numD, $1.i); //#22657
                if ((_BR >= 13) && ($f(_BR + $1.i) == $1.msglen)) { //#22661
                    $1.Dbits = $a([1, 1, 1, 1]); //#22658
                    $1.mode = $1.D; //#22659
                    break; //#22660
                } //#22660
                if ($get($1.numD, $1.i) >= 2) { //#22666
                    var _BZ = $s(2); //#22663
                    $put(_BZ, 0, $get($1.msg, $1.i)); //#22663
                    $put(_BZ, 1, $get($1.msg, $1.i + 1)); //#22663
                    $k[$j++] = $get($1.Avals, _BZ); //#22663
                    $1.addtocws(); //#22663
                    $1.i = $1.i + 2; //#22664
                    break; //#22665
                } //#22665
                if ($get($1.msg, $1.i) == $1.fnc1) { //#22682
                    if ($get($1.numD, $1.i + 1) >= 15) { //#22674
                        $k[$j++] = $get($1.Avals, $1.fnc1lD); //#22669
                        $1.addtocws(); //#22669
                        $1.i = $1.i + 1; //#22670
                        $1.Dbits = $a([]); //#22671
                        $1.mode = $1.D; //#22672
                        break; //#22673
                    } //#22673
                    var _By = $get($1.numD, $1.i + 1); //#22675
                    if ((_By >= 7) && (($f($f(_By + $1.i) + 1)) == $1.msglen)) { //#22681
                        $k[$j++] = $get($1.Avals, $1.fnc1lD); //#22676
                        $1.addtocws(); //#22676
                        $1.i = $1.i + 1; //#22677
                        $1.Dbits = $a([]); //#22678
                        $1.mode = $1.D; //#22679
                        break; //#22680
                    } //#22680
                } //#22680
                $k[$j++] = 'newmode'; //#22683
                $1.lookup(); //#22683
                var _C7 = $k[--$j]; //#22683
                $1[$k[--$j]] = _C7; //#22683
                if ($1.newmode != $1.mode) { //#22688
                    $k[$j++] = $get($1.Avals, $get($a([-1, $1.lC, $1.lT, $1.lX, $1.lD, $1.lB]), $1.newmode)); //#22685
                    $1.addtocws(); //#22685
                    $1.mode = $1.newmode; //#22686
                    break; //#22687
                } //#22687
                $k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); //#22689
                $1.addtocws(); //#22689
                $1.i = $1.i + 1; //#22690
                break; //#22691
            } //#22691
        }; //#22691
        $1.CTXvalstocws = function() {
            $1.in = $k[--$j]; //#22696
            $k[$j++] = Infinity; //#22697
            for (var _CV = 0, _CU = $1.in.length - 1; _CV <= _CU; _CV += 3) { //#22701
                var _CX = $geti($1.in, _CV, 3); //#22699
                $k[$j++] = 0; //#22699
                for (var _CY = 0, _CZ = _CX.length; _CY < _CZ; _CY++) { //#22699
                    var _Cb = $k[--$j]; //#22699
                    $k[$j++] = $f(_Cb + $get(_CX, _CY)) * 40; //#22699
                } //#22699
                var _Cd = (~~($k[--$j] / 40)) + 1; //#22700
                $k[$j++] = ~~(_Cd / 256); //#22700
                $k[$j++] = _Cd % 256; //#22700
            } //#22700
            $astore($a($counttomark())); //#22702
            var _Cg = $k[--$j]; //#22702
            var _Ch = $k[--$j]; //#22702
            $k[$j++] = _Cg; //#22702
            $k[$j++] = _Ch; //#22702
            $j--; //#22702
        }; //#22702
        $1.encCTX = function() {
            $1.p = 0; //#22706
            $1.ctxvals = $a(2220); //#22707
            for (;;) { //#22804
                if ($1.i == $1.msglen) { //#22711
                    break; //#22711
                } //#22711
                if (($1.p % 3) == 0) { //#22799
                    if ($get($1.numD, $1.i) >= 12) { //#22718
                        $k[$j++] = $geti($1.ctxvals, 0, $1.p); //#22714
                        $1.CTXvalstocws(); //#22714
                        $1.addtocws(); //#22714
                        $k[$j++] = $a([$1.unlcw]); //#22715
                        $1.addtocws(); //#22715
                        $1.mode = $1.A; //#22716
                        break; //#22717
                    } //#22717
                    var _Cx = $get($1.numD, $1.i); //#22719
                    if ((_Cx >= 8) && ($f(_Cx + $1.i) == $1.msglen)) { //#22724
                        $k[$j++] = $geti($1.ctxvals, 0, $1.p); //#22720
                        $1.CTXvalstocws(); //#22720
                        $1.addtocws(); //#22720
                        $k[$j++] = $a([$1.unlcw]); //#22721
                        $1.addtocws(); //#22721
                        $1.mode = $1.A; //#22722
                        break; //#22723
                    } //#22723
                    if ($1.mode == $1.X) { //#22746
                        var _DC = $get($1.Xvals, $get($1.msg, $1.i)) !== undefined; //#22726
                        if (!_DC) { //#22734
                            $k[$j++] = $geti($1.ctxvals, 0, $1.p); //#22727
                            $1.CTXvalstocws(); //#22727
                            $1.addtocws(); //#22727
                            if (($get($1.numremcws, $1.j) != 1) || ($get($1.msg, $1.i) > 127)) { //#22731
                                $k[$j++] = $a([$1.unlcw]); //#22730
                                $1.addtocws(); //#22730
                            } //#22730
                            $1.mode = $1.A; //#22732
                            break; //#22733
                        } //#22733
                        if (($1.i + 1) < $1.msglen) { //#22740
                            var _DV = $get($1.Xvals, $get($1.msg, $1.i + 1)) !== undefined; //#22736
                            if (!_DV) { //#22736
                                break; //#22736
                            } //#22736
                            if (($1.i + 2) < $1.msglen) { //#22739
                                var _Dc = $get($1.Xvals, $get($1.msg, $1.i + 2)) !== undefined; //#22738
                                if (!_Dc) { //#22738
                                    break; //#22738
                                } //#22738
                            } //#22738
                        } //#22738
                    } else { //#22746
                        $1.lookup(); //#22742
                        if ($k[--$j] != $1.mode) { //#22747
                            $k[$j++] = $geti($1.ctxvals, 0, $1.p); //#22743
                            $1.CTXvalstocws(); //#22743
                            $1.addtocws(); //#22743
                            $k[$j++] = $a([$1.unlcw]); //#22744
                            $1.addtocws(); //#22744
                            $1.mode = $1.A; //#22745
                            break; //#22746
                        } //#22746
                    } //#22746
                    if (($1.msglen - $1.i) <= 3) { //#22798
                        $1.remcws = $get($1.numremcws, $1.j + ((~~($1.p / 3)) * 2)); //#22750
                        $k[$j++] = Infinity; //#22756
                        var _Dv = $geti($1.msg, $1.i, $1.msglen - $1.i); //#22752
                        for (var _Dw = 0, _Dx = _Dv.length; _Dw < _Dx; _Dw++) { //#22758
                            var _Dy = $get(_Dv, _Dw); //#22758
                            var _E2 = $get($get($1.encvals, $1.mode), _Dy) !== undefined; //#22753
                            $k[$j++] = _Dy; //#22757
                            if (_E2) { //#22756
                                $aload($get($get($1.encvals, $1.mode), $k[--$j])); //#22754
                            } else { //#22756
                                $j--; //#22756
                                $k[$j++] = -1; //#22756
                                $k[$j++] = -1; //#22756
                                $k[$j++] = -1; //#22756
                                $k[$j++] = -1; //#22756
                            } //#22756
                        } //#22756
                        $1.remvals = $a(); //#22756
                        if (($1.remcws == 2) && ($1.remvals.length == 3)) { //#22769
                            $k[$j++] = Infinity; //#22764
                            $aload($geti($1.ctxvals, 0, $1.p)); //#22763
                            $aload($1.remvals); //#22764
                            var _EF = $a(); //#22764
                            $k[$j++] = _EF; //#22765
                            $1.CTXvalstocws(); //#22765
                            $1.addtocws(); //#22765
                            $1.mode = $1.A; //#22766
                            $1.i = $1.msglen; //#22767
                            break; //#22768
                        } //#22768
                        if ((($1.remcws == 2) && ($1.remvals.length == 2)) && ($1.mode != $1.X)) { //#22780
                            $k[$j++] = Infinity; //#22775
                            $aload($geti($1.ctxvals, 0, $1.p)); //#22773
                            $aload($1.remvals); //#22774
                            $aload($get($get($1.encvals, $1.mode), $1.sft1)); //#22775
                            var _EV = $a(); //#22775
                            $k[$j++] = _EV; //#22776
                            $1.CTXvalstocws(); //#22776
                            $1.addtocws(); //#22776
                            $1.mode = $1.A; //#22777
                            $1.i = $1.msglen; //#22778
                            break; //#22779
                        } //#22779
                        if (($1.remcws == 2) && ($1.remvals.length == 1)) { //#22789
                            $k[$j++] = $geti($1.ctxvals, 0, $1.p); //#22783
                            $1.CTXvalstocws(); //#22783
                            $1.addtocws(); //#22783
                            $k[$j++] = $a([$1.unlcw]); //#22784
                            $1.addtocws(); //#22784
                            $k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); //#22785
                            $1.addtocws(); //#22785
                            $1.mode = $1.A; //#22786
                            $1.i = $1.msglen; //#22787
                            break; //#22788
                        } //#22788
                        if (($1.remcws == 1) && ($1.remvals.length == 1)) { //#22797
                            $k[$j++] = $geti($1.ctxvals, 0, $1.p); //#22792
                            $1.CTXvalstocws(); //#22792
                            $1.addtocws(); //#22792
                            $k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); //#22793
                            $1.addtocws(); //#22793
                            $1.mode = $1.A; //#22794
                            $1.i = $1.msglen; //#22795
                            break; //#22796
                        } //#22796
                    } //#22796
                } //#22796
                var _F4 = $get($get($1.encvals, $1.mode), $get($1.msg, $1.i)); //#22800
                $puti($1.ctxvals, $1.p, _F4); //#22801
                $1.p = _F4.length + $1.p; //#22802
                $1.i = $1.i + 1; //#22803
            } //#22803
            if ($1.mode != $1.A) { //#22828
                for (;;) { //#22812
                    if (($1.p % 3) == 0) { //#22809
                        break; //#22809
                    } //#22809
                    $1.i = $1.i - 1; //#22810
                    $1.p = $1.p - $get($get($1.encvals, $1.mode), $get($1.msg, $1.i)).length; //#22811
                } //#22811
                $k[$j++] = Infinity; //#22814
                $aload($geti($1.ctxvals, 0, $1.p)); //#22814
                var _FO = $a(); //#22814
                $k[$j++] = _FO; //#22815
                $1.CTXvalstocws(); //#22815
                $1.addtocws(); //#22815
                $k[$j++] = $a([$1.unlcw]); //#22816
                $1.addtocws(); //#22816
                $1.mode = $1.A; //#22817
                if ($1.i != $1.msglen) { //#22827
                    if ($get($1.numD, $1.i) >= 2) { //#22825
                        var _FX = $s(2); //#22821
                        $put(_FX, 0, $get($1.msg, $1.i)); //#22821
                        $put(_FX, 1, $get($1.msg, $1.i + 1)); //#22821
                        $k[$j++] = $get($1.Avals, _FX); //#22821
                        $1.addtocws(); //#22821
                        $1.i = $1.i + 2; //#22822
                    } else { //#22825
                        $k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); //#22824
                        $1.addtocws(); //#22824
                        $1.i = $1.i + 1; //#22825
                    } //#22825
                } //#22825
            } //#22825
        }; //#22825
        $1.encD = function() {
            for (;;) { //#22889
                if ($get($1.numD, $1.i) < 3) { //#22879
                    $1.Drem = (8 - ($1.Dbits.length % 8)) % 8; //#22838
                    $1.remcws = $get($1.numremcws, $1.j + (~~($1.Dbits.length / 8))); //#22839
                    if (((($f($get($1.numremcws, ($1.j + (~~($1.Dbits.length / 8))) - 1) - 1) == 0) && ($1.Drem == 0)) || (($1.remcws == 1) && ($1.Drem != 0))) && ($1.i == $1.msglen)) { //#22848
                        if (($1.Drem == 4) || ($1.Drem == 6)) { //#22845
                            $k[$j++] = Infinity; //#22845
                            $aload($1.Dbits); //#22845
                            $k[$j++] = 1; //#22845
                            $k[$j++] = 1; //#22845
                            $k[$j++] = 1; //#22845
                            $k[$j++] = 1; //#22845
                            $1.Dbits = $a(); //#22845
                        } //#22845
                        if (($1.Drem == 2) || ($1.Drem == 6)) { //#22846
                            $k[$j++] = Infinity; //#22846
                            $aload($1.Dbits); //#22846
                            $k[$j++] = 0; //#22846
                            $k[$j++] = 1; //#22846
                            $1.Dbits = $a(); //#22846
                        } //#22846
                        break; //#22847
                    } //#22847
                    if ((((($1.i == ($1.msglen - 1)) && ($get($1.numD, $1.i) == 1)) || (($1.i == ($1.msglen - 2)) && ($get($1.numD, $1.i) == 2))) && ($1.remcws == 1)) && ($1.Drem == 0)) { //#22853
                        break; //#22853
                    } //#22853
                    if (!(((($1.i == ($1.msglen - 1)) && ($get($1.numD, $1.i) == 1)) && ($1.remcws == 1)) && (($1.Drem == 4) || ($1.Drem == 6)))) { //#22860
                        $k[$j++] = Infinity; //#22858
                        $aload($1.Dbits); //#22858
                        $k[$j++] = 1; //#22858
                        $k[$j++] = 1; //#22858
                        $k[$j++] = 1; //#22858
                        $k[$j++] = 1; //#22858
                        $k[$j++] = 1; //#22858
                        $k[$j++] = 1; //#22858
                        $1.Dbits = $a(); //#22858
                        $1.Drem = (8 - ($1.Dbits.length % 8)) % 8; //#22859
                    } //#22859
                    if (($1.Drem == 4) || ($1.Drem == 6)) { //#22871
                        if ($get($1.numD, $1.i) >= 1) { //#22868
                            $k[$j++] = Infinity; //#22865
                            $aload($1.Dbits); //#22865
                            $k[$j++] = $f($f($get($1.msg, $1.i) - 48) + 1); //#22865
                            $k[$j++] = 4; //#22865
                            $1.tobin(); //#22865
                            $aload($k[--$j]); //#22865
                            $1.Dbits = $a(); //#22865
                            $1.i = $1.i + 1; //#22866
                        } else { //#22868
                            $k[$j++] = Infinity; //#22868
                            $aload($1.Dbits); //#22868
                            $k[$j++] = 1; //#22868
                            $k[$j++] = 1; //#22868
                            $k[$j++] = 1; //#22868
                            $k[$j++] = 1; //#22868
                            $1.Dbits = $a(); //#22868
                        } //#22868
                        $1.Drem = $1.Drem - 4; //#22870
                    } //#22870
                    if ($1.Drem == 2) { //#22875
                        $k[$j++] = Infinity; //#22873
                        $aload($1.Dbits); //#22873
                        $k[$j++] = 0; //#22873
                        $k[$j++] = 1; //#22873
                        $1.Dbits = $a(); //#22873
                        $1.Drem = 0; //#22874
                    } //#22874
                    break; //#22877
                } //#22877
                $k[$j++] = Infinity; //#22885
                $aload($1.Dbits); //#22883
                var _Gu = $geti($1.msg, $1.i, 3); //#22884
                $k[$j++] = 0; //#22884
                for (var _Gv = 0, _Gw = _Gu.length; _Gv < _Gw; _Gv++) { //#22884
                    var _Gy = $k[--$j]; //#22884
                    $k[$j++] = ($f(_Gy + $f($get(_Gu, _Gv) - 48))) * 10; //#22884
                } //#22884
                var _Gz = $k[--$j]; //#22884
                $k[$j++] = (~~(_Gz / 10)) + 1; //#22885
                $k[$j++] = 10; //#22885
                $1.tobin(); //#22885
                $aload($k[--$j]); //#22885
                $1.Dbits = $a(); //#22885
                $1.i = $1.i + 3; //#22887
            } //#22887
            $k[$j++] = Infinity; //#22891
            for (var _H5 = 0, _H4 = $1.Dbits.length - 1; _H5 <= _H4; _H5 += 8) { //#22894
                var _H7 = $geti($1.Dbits, _H5, 8); //#22893
                $k[$j++] = 0; //#22893
                for (var _H8 = 0, _H9 = _H7.length; _H8 < _H9; _H8++) { //#22893
                    var _HB = $k[--$j]; //#22893
                    $k[$j++] = $f(_HB + $get(_H7, _H8)) * 2; //#22893
                } //#22893
                var _HC = $k[--$j]; //#22893
                $k[$j++] = ~~(_HC / 2); //#22893
            } //#22893
            $astore($a($counttomark())); //#22895
            var _HF = $k[--$j]; //#22895
            var _HG = $k[--$j]; //#22895
            $k[$j++] = _HF; //#22895
            $k[$j++] = _HG; //#22895
            $j--; //#22895
            $1.addtocws(); //#22895
            $1.mode = $1.A; //#22896
        }; //#22896
        $1.encB = function() {
            $1.p = 0; //#22901
            $1.bvals = $a(1480); //#22901
            for (;;) { //#22908
                if ($1.i == $1.msglen) { //#22902
                    break; //#22902
                } //#22902
                if ($get($1.msg, $1.i) < 0) { //#22903
                    break; //#22903
                } //#22903
                $1.lookup(); //#22904
                if ($k[--$j] != $1.mode) { //#22904
                    break; //#22904
                } //#22904
                $put($1.bvals, $1.p, $get($1.msg, $1.i)); //#22905
                $1.p = $1.p + 1; //#22906
                $1.i = $1.i + 1; //#22907
            } //#22907
            $1.remcws = $f($get($1.numremcws, $1.j + $1.p) - 1); //#22909
            $k[$j++] = Infinity; //#22916
            if (($1.remcws == 0) && ($1.i == $1.msglen)) { //#22914
                $k[$j++] = 0; //#22912
            } else { //#22914
                if ($1.p < 250) { //#22914
                    $k[$j++] = $1.p; //#22914
                } else { //#22914
                    $k[$j++] = (~~($1.p / 250)) + 249; //#22914
                    $k[$j++] = $1.p % 250; //#22914
                } //#22914
            } //#22914
            $aload($geti($1.bvals, 0, $1.p)); //#22916
            $1.bvals = $a(); //#22916
            $k[$j++] = $1.bvals; //#22918
            $1.addtocws(); //#22918
            $1.mode = $1.A; //#22919
        }; //#22919
        $1.cws = $a(1480); //#22923
        $1.mode = $1.A; //#22924
        $1.i = 0; //#22924
        $1.j = 0; //#22924
        for (;;) { //#22927
            if ($1.i >= $1.msglen) { //#22925
                break; //#22925
            } //#22925
            if ($1[$get($a(['encA', 'encCTX', 'encCTX', 'encCTX', 'encD', 'encB']), $1.mode)]() === true) {
                break;
            } //#22926
        } //#22926
        $1.cws = $geti($1.cws, 0, $1.j); //#22928
    } //#22928
    $1.i = 0; //#22933
    for (;;) { //#22953
        $1.m = $get($1.metrics, $1.i); //#22935
        $1.vers = $get($1.m, 0); //#22936
        $1.rows = $get($1.m, 1); //#22937
        $1.cols = $get($1.m, 2); //#22938
        $1.dcol = $get($1.m, 3); //#22939
        $1.dcws = $get($1.m, 4); //#22940
        $1.rscw = $get($1.m, 5); //#22941
        $1.rsbl = $get($1.m, 6); //#22942
        $1.riso = $get($1.m, 7); //#22943
        $1.risi = $get($1.m, 8); //#22944
        $1.risl = $get($1.m, 9); //#22945
        $1.dcpb = ~~($1.dcws / $1.rsbl); //#22946
        $1.ecpb = ~~($1.rscw / $1.rsbl); //#22947
        $1.okay = true; //#22948
        if ($ne($1.version, "unset") && $ne($1.version, $1.vers)) { //#22949
            $1.okay = false; //#22949
        } //#22949
        if ($1.cws.length > $1.dcws) { //#22950
            $1.okay = false; //#22950
        } //#22950
        if ($1.okay) { //#22951
            break; //#22951
        } //#22951
        $1.i = $1.i + 1; //#22952
    } //#22952
    if (!$1.stype) { //#22959
        $k[$j++] = Infinity; //#22957
        $aload($1.cws); //#22957
        for (var _Ib = 0, _Ic = $f($1.dcws - $1.cws.length); _Ib < _Ic; _Ib++) { //#22957
            $k[$j++] = 129; //#22957
        } //#22957
        $1.cws = $a(); //#22957
    } else { //#22959
        $k[$j++] = Infinity; //#22959
        for (var _Ig = 0, _Ih = $f($1.dcws - $1.cws.length); _Ig < _Ih; _Ig++) { //#22959
            $k[$j++] = 0; //#22959
        } //#22959
        $aload($1.cws); //#22959
        $1.cws = $a(); //#22959
    } //#22959
    var _Il = $get($1.options, 'debugcws') !== undefined; //#22962
    if (_Il) { //#22962
        $k[$j++] = 'bwipp.debugcws#22962'; //#22962
        $k[$j++] = $1.cws; //#22962
        bwipp_raiseerror(); //#22962
    } //#22962
    $1.cwbs = $a($1.rsbl); //#22965
    $1.ecbs = $a($1.rsbl); //#22966
    for (var _It = 0, _Is = $f($1.rsbl - 1); _It <= _Is; _It += 1) { //#22975
        $1.i = _It; //#22968
        $1.cwb = $a($1.dcpb); //#22969
        for (var _Iy = 0, _Ix = $1.dcpb - 1; _Iy <= _Ix; _Iy += 1) { //#22973
            $1.j = _Iy; //#22971
            $put($1.cwb, $1.j, $get($1.cws, $f(($1.j * $1.rsbl) + $1.i))); //#22972
        } //#22972
        $put($1.cwbs, $1.i, $1.cwb); //#22974
    } //#22974
    var _JA = $1.stype ? 32 : 256; //#22978
    $1.gf = _JA; //#22978
    $1['gf-1'] = $1.gf - 1; //#22979
    var _JD = $1.stype ? 37 : 301; //#22980
    $1.pm = _JD; //#22980
    $k[$j++] = Infinity; //#22981
    $k[$j++] = 1; //#22981
    for (var _JF = 0, _JG = $1["gf-1"]; _JF < _JG; _JF++) { //#22981
        var _JH = $k[--$j]; //#22981
        var _JI = _JH * 2; //#22981
        $k[$j++] = _JH; //#22981
        $k[$j++] = _JI; //#22981
        if (_JI >= $1.gf) { //#22981
            var _JL = $k[--$j]; //#22981
            $k[$j++] = _JL ^ $1.pm; //#22981
        } //#22981
    } //#22981
    $1.rsalog = $a(); //#22981
    $1.rslog = $a($1.gf); //#22982
    for (var _JR = 1, _JQ = $1["gf-1"]; _JR <= _JQ; _JR += 1) { //#22983
        $put($1.rslog, $get($1.rsalog, _JR), _JR); //#22983
    } //#22983
    $1.rsprod = function() {
        var _JV = $k[--$j]; //#22985
        var _JW = $k[--$j]; //#22985
        $k[$j++] = _JW; //#22989
        $k[$j++] = _JV; //#22989
        if ((_JV != 0) && (_JW != 0)) { //#22988
            var _JZ = $get($1.rslog, $k[--$j]); //#22986
            var _Jf = $get($1.rsalog, $f(_JZ + $get($1.rslog, $k[--$j])) % $1["gf-1"]); //#22986
            $k[$j++] = _Jf; //#22986
        } else { //#22988
            $j -= 2; //#22988
            $k[$j++] = 0; //#22988
        } //#22988
    }; //#22988
    $k[$j++] = Infinity; //#22993
    $k[$j++] = 1; //#22993
    for (var _Jh = 0, _Ji = $1.ecpb; _Jh < _Ji; _Jh++) { //#22993
        $k[$j++] = 0; //#22993
    } //#22993
    $1.coeffs = $a(); //#22993
    for (var _Jm = 0, _Jl = $1.ecpb - 1; _Jm <= _Jl; _Jm += 1) { //#23002
        $1.i = _Jm; //#22995
        $put($1.coeffs, $1.i + 1, $get($1.coeffs, $1.i)); //#22996
        for (var _Jt = $1.i; _Jt >= 1; _Jt -= 1) { //#23000
            $1.j = _Jt; //#22998
            $k[$j++] = $1.coeffs; //#22999
            $k[$j++] = $1.j; //#22999
            $k[$j++] = $get($1.coeffs, $1.j - 1); //#22999
            $k[$j++] = $get($1.coeffs, $1.j); //#22999
            $k[$j++] = $get($1.rsalog, $1.i); //#22999
            $1.rsprod(); //#22999
            var _K5 = $k[--$j]; //#22999
            var _K6 = $k[--$j]; //#22999
            var _K7 = $k[--$j]; //#22999
            $put($k[--$j], _K7, $xo(_K6, _K5)); //#22999
        } //#22999
        $k[$j++] = $1.coeffs; //#23001
        $k[$j++] = 0; //#23001
        $k[$j++] = $get($1.coeffs, 0); //#23001
        $k[$j++] = $get($1.rsalog, $1.i); //#23001
        $1.rsprod(); //#23001
        var _KF = $k[--$j]; //#23001
        var _KG = $k[--$j]; //#23001
        $put($k[--$j], _KG, _KF); //#23001
    } //#23001
    $1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); //#23003
    for (var _KN = 0, _KM = $1.cwbs.length - 1; _KN <= _KM; _KN += 1) { //#23018
        $1.i = _KN; //#23007
        $k[$j++] = Infinity; //#23008
        $aload($get($1.cwbs, $1.i)); //#23008
        for (var _KS = 0, _KT = $1.ecpb; _KS < _KT; _KS++) { //#23008
            $k[$j++] = 0; //#23008
        } //#23008
        $1.rscws = $a(); //#23008
        for (var _KX = 0, _KW = $1.dcpb - 1; _KX <= _KW; _KX += 1) { //#23016
            $1.m = _KX; //#23010
            $1.k = $get($1.rscws, $1.m); //#23011
            for (var _Kd = 0, _Kc = $1.ecpb - 1; _Kd <= _Kc; _Kd += 1) { //#23015
                $1.j = _Kd; //#23013
                $k[$j++] = $1.rscws; //#23014
                $k[$j++] = ($1.m + $1.j) + 1; //#23014
                $k[$j++] = $get($1.coeffs, ($1.ecpb - $1.j) - 1); //#23014
                $k[$j++] = $1.k; //#23014
                $1.rsprod(); //#23014
                var _Kq = $k[--$j]; //#23014
                var _Kr = $k[--$j]; //#23014
                $put($k[--$j], _Kr, $xo(_Kq, $get($1.rscws, ($1.m + $1.j) + 1))); //#23014
            } //#23014
        } //#23014
        $put($1.ecbs, $1.i, $geti($1.rscws, $1.dcpb, $1.ecpb)); //#23017
    } //#23017
    $k[$j++] = Infinity; //#23021
    $aload($1.cws); //#23021
    for (var _L1 = 0, _L2 = $1.rscw; _L1 < _L2; _L1++) { //#23021
        $k[$j++] = 0; //#23021
    } //#23021
    $1.cws = $a(); //#23021
    for (var _L6 = 0, _L5 = $f($1.rscw - 1); _L6 <= _L5; _L6 += 1) { //#23025
        $1.i = _L6; //#23023
        $put($1.cws, $f($1.dcws + $1.i), $get($get($1.ecbs, $1.i % $1.rsbl), ~~($1.i / $1.rsbl))); //#23024
    } //#23024
    var _LK = $1.stype ? 5 : 8; //#23028
    $1.mmat = $a($f($1.dcws + $1.rscw) * _LK); //#23028
    $1.r = 0; //#23029
    $1.c = 0; //#23029
    var _LN = $1.stype ? 2 : 1; //#23030
    for (var _LQ = 0, _LR = _LN, _LP = $1.cws.length - 1; _LR < 0 ? _LQ >= _LP : _LQ <= _LP; _LQ += _LR) { //#23051
        $1.i = _LQ; //#23031
        if (!$1.stype) { //#23045
            var _LU = $strcpy($s(8), "00000000"); //#23033
            var _LZ = $cvrs($s(8), $get($1.cws, $1.i), 2); //#23033
            $puti(_LU, 8 - _LZ.length, _LZ); //#23034
            $k[$j++] = _LU; //#23034
            $k[$j++] = Infinity; //#23034
            var _La = $k[--$j]; //#23034
            var _Lb = $k[--$j]; //#23034
            $k[$j++] = _La; //#23034
            $forall(_Lb, function() { //#23034
                var _Lc = $k[--$j]; //#23034
                $k[$j++] = $f(_Lc - 48); //#23034
            }); //#23034
            var _Ld = $a(); //#23034
            $1.top = $geti(_Ld, 0, 4); //#23035
            $1.bot = $geti(_Ld, 4, 4); //#23036
        } else { //#23045
            var _Lh = $strcpy($s(5), "00000"); //#23038
            var _Lm = $cvrs($s(5), $get($1.cws, $1.i), 2); //#23038
            $puti(_Lh, 5 - _Lm.length, _Lm); //#23039
            $k[$j++] = _Lh; //#23039
            $k[$j++] = Infinity; //#23039
            var _Ln = $k[--$j]; //#23039
            var _Lo = $k[--$j]; //#23039
            $k[$j++] = _Ln; //#23039
            $forall(_Lo, function() { //#23039
                var _Lp = $k[--$j]; //#23039
                $k[$j++] = $f(_Lp - 48); //#23039
            }); //#23039
            $1.c1 = $a(); //#23040
            var _Ls = $strcpy($s(5), "00000"); //#23041
            var _Lx = $cvrs($s(5), $get($1.cws, $1.i + 1), 2); //#23041
            $puti(_Ls, 5 - _Lx.length, _Lx); //#23042
            $k[$j++] = _Ls; //#23042
            $k[$j++] = Infinity; //#23042
            var _Ly = $k[--$j]; //#23042
            var _Lz = $k[--$j]; //#23042
            $k[$j++] = _Ly; //#23042
            $forall(_Lz, function() { //#23042
                var _M0 = $k[--$j]; //#23042
                $k[$j++] = $f(_M0 - 48); //#23042
            }); //#23042
            $1.c2 = $a(); //#23043
            $k[$j++] = Infinity; //#23044
            $aload($geti($1.c1, 0, 3)); //#23044
            $aload($geti($1.c2, 0, 2)); //#23044
            $1.top = $a(); //#23044
            $k[$j++] = Infinity; //#23045
            $aload($geti($1.c1, 3, 2)); //#23045
            $aload($geti($1.c2, 2, 3)); //#23045
            $1.bot = $a(); //#23045
        } //#23045
        $puti($1.mmat, $f(($1.r * $1.dcol) + $1.c), $1.top); //#23047
        $puti($1.mmat, $f((($1.r + 1) * $1.dcol) + $1.c), $1.bot); //#23048
        $1.c = $1.c + $1.top.length; //#23049
        if ($1.c == $1.dcol) { //#23050
            $1.c = 0; //#23050
            $1.r = $1.r + 2; //#23050
        } //#23050
    } //#23050
    $1.mmv = function() {
        var _MS = $k[--$j]; //#23054
        var _MT = $k[--$j]; //#23054
        $k[$j++] = $f(_MT + (_MS * $1.cols)); //#23054
    }; //#23054
    $k[$j++] = Infinity; //#23055
    for (var _MW = 0, _MX = $1.rows * $1.cols; _MW < _MX; _MW++) { //#23055
        $k[$j++] = -1; //#23055
    } //#23055
    $1.pixs = $a(); //#23055
    var _N3 = $a([function() {
        for (var _Ma = 0, _Mb = $1.cols; _Ma < _Mb; _Ma++) { //#23059
            $k[$j++] = 0; //#23059
        } //#23059
    }, function() {
        for (var _Md = 0, _Me = $1.cols; _Md < _Me; _Md++) { //#23060
            $k[$j++] = 1; //#23060
        } //#23060
    }, function() {
        $k[$j++] = 0; //#23061
        for (var _Mg = 0, _Mh = $f($1.cols - 2); _Mg < _Mh; _Mg++) { //#23061
            $k[$j++] = 1; //#23061
        } //#23061
        $k[$j++] = 0; //#23061
    }, function() {
        $k[$j++] = 0; //#23062
        $k[$j++] = 1; //#23062
        for (var _Mj = 0, _Mk = $f($1.cols - 4); _Mj < _Mk; _Mj++) { //#23062
            $k[$j++] = 0; //#23062
        } //#23062
        $k[$j++] = 1; //#23062
        $k[$j++] = 0; //#23062
    }, function() {
        for (var _Mm = 0, _Mn = ~~($f($1.cols - 1) / 2); _Mm < _Mn; _Mm++) { //#23063
            $k[$j++] = -1; //#23063
        } //#23063
        $k[$j++] = 1; //#23063
        for (var _Mp = 0, _Mq = ~~($f($1.cols - 1) / 2); _Mp < _Mq; _Mp++) { //#23063
            $k[$j++] = -1; //#23063
        } //#23063
    }, function() {
        for (var _Ms = 0, _Mt = ~~($f($1.cols - 1) / 2); _Ms < _Mt; _Ms++) { //#23064
            $k[$j++] = -1; //#23064
        } //#23064
        $k[$j++] = 0; //#23064
        for (var _Mv = 0, _Mw = ~~($f($1.cols - 1) / 2); _Mv < _Mw; _Mv++) { //#23064
            $k[$j++] = -1; //#23064
        } //#23064
    }, function() {
        $k[$j++] = 1; //#23065
        for (var _My = 0, _Mz = $f($1.cols - 2); _My < _Mz; _My++) { //#23065
            $k[$j++] = 0; //#23065
        } //#23065
        $k[$j++] = 1; //#23065
    }, function() {
        $k[$j++] = 1; //#23066
        $k[$j++] = 0; //#23066
        for (var _N1 = 0, _N2 = $f($1.cols - 4); _N1 < _N2; _N1++) { //#23066
            $k[$j++] = 1; //#23066
        } //#23066
        $k[$j++] = 0; //#23066
        $k[$j++] = 1; //#23066
    }]); //#23066
    $1.artifact = _N3; //#23067
    if (!bwipp_codeone.$ctx._23081) { //#23081
        (function() { //#23081
            var $ctx = Object.create($1); //#23081
            var _N4 = new Map([
                ["A", "121343"],
                ["B", "12134343"],
                ["C", "12121343"],
                ["D", "1213434343"],
                ["E", "1212134343"],
                ["F", "1212121343"],
                ["G", "121213434343"],
                ["H", "121212134343"],
                ["S", "56661278"],
                ["T", "5666666666127878"]
            ]); //#23079
            $ctx.cpatmap = _N4; //#23080
            for (var _N5 in $ctx) {
                $ctx.hasOwnProperty(_N5) && (bwipp_codeone.$ctx[_N5] = $ctx[_N5]);
            } //#23080
            bwipp_codeone.$ctx._23081 = 1; //#23080
        })(); //#23080
    } //#23080
    $1.cpat = $get($1.cpatmap, $geti($1.vers, 0, 1)); //#23082
    $k[$j++] = $1.pixs; //#23083
    $k[$j++] = 0; //#23083
    $k[$j++] = ~~($f($1.rows - $1.cpat.length) / 2); //#23083
    $1.mmv(); //#23083
    $k[$j++] = Infinity; //#23084
    $forall($1.cpat, function() { //#23084
        if ($get($1.artifact, $f($k[--$j] - 49))() === true) {
            return true;
        } //#23084
    }); //#23084
    var _NH = $a(); //#23084
    var _NI = $k[--$j]; //#23084
    $puti($k[--$j], _NI, _NH); //#23084
    for (var _NM = 0, _NL = $f($1.risl - 1); _NM <= _NL; _NM += 1) { //#23099
        $1.i = _NM; //#23088
        for (var _NR = $1.riso, _NS = $1.risi, _NQ = $f($1.cols - 1); _NS < 0 ? _NR >= _NQ : _NR <= _NQ; _NR += _NS) { //#23098
            $1.j = _NR; //#23090
            var _NU = (($1.i % 12) == 0) ? 1 : 0; //#23091
            var _NV = $a([1, _NU]); //#23091
            $k[$j++] = _NV; //#23092
            $k[$j++] = _NV; //#23092
            $k[$j++] = $1.pixs; //#23092
            $k[$j++] = $1.j; //#23092
            $k[$j++] = $1.i; //#23092
            $1.mmv(); //#23092
            var _NZ = $k[--$j]; //#23093
            var _Na = $k[--$j]; //#23093
            $puti(_Na, _NZ, $k[--$j]); //#23093
            if ($1.i != $f($1.risl - 1)) { //#23097
                $k[$j++] = $1.pixs; //#23095
                $k[$j++] = $f($f($1.cols - $1.j) - 2); //#23095
                $k[$j++] = $f($f($1.rows - $1.i) - 1); //#23095
                $1.mmv(); //#23095
                var _Nj = $k[--$j]; //#23096
                var _Nk = $k[--$j]; //#23096
                $puti(_Nk, _Nj, $k[--$j]); //#23096
            } else { //#23097
                $j--; //#23097
            } //#23097
        } //#23097
    } //#23097
    if (!bwipp_codeone.$ctx._23119) { //#23119
        (function() { //#23119
            var $ctx = Object.create($1); //#23119
            var _OP = new Map([
                ["A", $a([$a([12, 5])])],
                ["B", $a([$a([16, 7])])],
                ["C", $a([$a([26, 12])])],
                ["D", $a([])],
                ["E", $a([$a([26, 23])])],
                ["F", $a([$a([26, 32]), $a([70, 32]), $a([26, 34]), $a([70, 34])])],
                ["G", $a([$a([27, 48]), $a([69, 48])])],
                ["H", $a([$a([26, 70]), $a([66, 70]), $a([106, 70]), $a([26, 72]), $a([66, 72]), $a([106, 72])])],
                ["S-10", $a([])],
                ["S-20", $a([$a([10, 4])])],
                ["S-30", $a([$a([15, 4]), $a([15, 6])])],
                ["T-16", $a([$a([8, 10])])],
                ["T-32", $a([$a([16, 10]), $a([16, 12])])],
                ["T-48", $a([$a([24, 10]), $a([24, 12]), $a([24, 14])])]
            ]); //#23117
            $ctx.blackdotmap = _OP; //#23118
            for (var _OQ in $ctx) {
                $ctx.hasOwnProperty(_OQ) && (bwipp_codeone.$ctx[_OQ] = $ctx[_OQ]);
            } //#23118
            bwipp_codeone.$ctx._23119 = 1; //#23118
        })(); //#23118
    } //#23118
    $forall($get($1.blackdotmap, $1.vers), function() { //#23120
        var _OV = $k[--$j]; //#23120
        $k[$j++] = $1.pixs; //#23120
        $aload(_OV); //#23120
        $1.mmv(); //#23120
        var _OW = $k[--$j]; //#23120
        $put($k[--$j], _OW, 1); //#23120
    }); //#23120
    $1.j = 0; //#23123
    for (var _Oa = 0, _OZ = $1.pixs.length - 1; _Oa <= _OZ; _Oa += 1) { //#23130
        $1.i = _Oa; //#23125
        if ($get($1.pixs, $1.i) == -1) { //#23129
            $put($1.pixs, $1.i, $get($1.mmat, $1.j)); //#23127
            $1.j = $1.j + 1; //#23128
        } //#23128
    } //#23128
    var _Oq = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", $1.cols],
        ["pixy", $1.rows],
        ["height", ($1.rows / 72) * 2],
        ["width", ($1.cols / 72) * 2],
        ["opt", $1.options]
    ]); //#23140
    $k[$j++] = _Oq; //#23143
    if (!$1.dontdraw) { //#23143
        bwipp_renmatrix(); //#23143
    } //#23143
}

function bwipp_hanxin() {
    var $1 = Object.create(bwipp_hanxin.$ctx || (bwipp_hanxin.$ctx = {})); //#23178
    $1.dontdraw = false; //#23181
    $1.version = "unset"; //#23182
    $1.eclevel = "unset"; //#23183
    $1.parse = false; //#23184
    $1.parsefnc = false; //#23185
    $1.mask = -1; //#23186
    $k[$j++] = $1; //#23188
    bwipp_processoptions(); //#23188
    $1.options = $k[--$j]; //#23188
    $1.barcode = $k[--$j]; //#23189
    var _4 = new Map([
        ["parse", $1.parse],
        ["parsefnc", $1.parsefnc]
    ]); //#23196
    $1.fncvals = _4; //#23198
    $k[$j++] = 'msg'; //#23199
    $k[$j++] = $1.barcode; //#23199
    $k[$j++] = $1.fncvals; //#23199
    bwipp_parseinput(); //#23199
    var _7 = $k[--$j]; //#23199
    $1[$k[--$j]] = _7; //#23199
    $1.msglen = $1.msg.length; //#23200
    if ($eq($1.eclevel, "unset")) { //#23203
        $1.eclevel = "L2"; //#23203
    } //#23203
    $1.tobin = function() {
        var _C = $s($k[--$j]); //#23206
        $k[$j++] = _C; //#23206
        for (var _E = 0, _D = _C.length - 1; _E <= _D; _E += 1) { //#23206
            var _F = $k[--$j]; //#23206
            $put(_F, _E, 48); //#23206
            $k[$j++] = _F; //#23206
        } //#23206
        var _G = $k[--$j]; //#23207
        var _J = $cvrs($s(_G.length), $k[--$j], 2); //#23207
        $puti(_G, _G.length - _J.length, _J); //#23208
        $k[$j++] = _G; //#23208
    }; //#23208
    $1.bits = $s((4 + 13) + ($1.msglen * 8)); //#23212
    $puti($1.bits, 0, "0011"); //#23213
    $k[$j++] = $1.bits; //#23214
    $k[$j++] = 4; //#23214
    $k[$j++] = $1.msglen; //#23214
    $k[$j++] = 13; //#23214
    $1.tobin(); //#23214
    var _P = $k[--$j]; //#23214
    var _Q = $k[--$j]; //#23214
    $puti($k[--$j], _Q, _P); //#23214
    for (var _U = 0, _T = $1.msglen - 1; _U <= _T; _U += 1) { //#23218
        $1.i = _U; //#23216
        $k[$j++] = $1.bits; //#23217
        $k[$j++] = 17 + ($1.i * 8); //#23217
        $k[$j++] = $get($1.msg, $1.i); //#23217
        $k[$j++] = 8; //#23217
        $1.tobin(); //#23217
        var _a = $k[--$j]; //#23217
        var _b = $k[--$j]; //#23217
        $puti($k[--$j], _b, _a); //#23217
    } //#23217
    if (!bwipp_hanxin.$ctx._23561) { //#23561
        (function() { //#23561
            var $ctx = Object.create($1); //#23561
            var _23 = $a([1, 12, 20]); //#23251
            $ctx.metrics = $a([$a(["1", 23, -1, 0, 205, $a([1, 21, 4]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 17, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 13, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 9, 16]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["2", 25, -1, 0, 301, $a([1, 31, 6]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 25, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 19, 18]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 15, 22]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["3", 27, -1, 0, 405, $a([1, 42, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 34, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 26, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["4", 29, 14, 1, 439, $a([1, 46, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 38, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 30, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 22, 32]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["5", 31, 16, 1, 555, $a([1, 57, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 49, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 37, 32]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 14, 20]), $a([1, 13, 22]), $a([0, -1, -1])]), $a(["6", 33, 16, 1, 675, $a([1, 70, 14]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 58, 26]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 24, 20]), $a([1, 22, 18]), $a([0, -1, -1]), $a([1, 16, 24]), $a([1, 18, 26]), $a([0, -1, -1])]), $a(["7", 35, 17, 1, 805, $a([1, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 26, 22]), $a([1, 28, 24]), $a([0, -1, -1]), $a([2, 14, 20]), _23, $a([0, -1, -1])]), $a(["8", 37, 18, 1, 943, $a([1, 99, 18]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 40, 18]), $a([1, 41, 18]), $a([0, -1, -1]), $a([1, 31, 26]), $a([1, 32, 28]), $a([0, -1, -1]), $a([2, 16, 24]), $a([1, 15, 22]), $a([0, -1, -1])]), $a(["9", 39, 19, 1, 1089, $a([1, 114, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([2, 48, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([2, 24, 20]), $a([1, 26, 22]), $a([0, -1, -1]), $a([2, 18, 28]), $a([1, 18, 26]), $a([0, -1, -1])]), $a(["10", 41, 20, 1, 1243, $a([1, 131, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 52, 22]), $a([1, 57, 24]), $a([0, -1, -1]), $a([2, 27, 24]), $a([1, 29, 24]), $a([0, -1, -1]), $a([2, 21, 32]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["11", 43, 14, 2, 1289, $a([1, 135, 26]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 56, 24]), $a([1, 57, 24]), $a([0, -1, -1]), $a([2, 28, 24]), $a([1, 31, 26]), $a([0, -1, -1]), $a([2, 22, 32]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["12", 45, 15, 2, 1455, $a([1, 153, 28]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 62, 26]), $a([1, 65, 28]), $a([0, -1, -1]), $a([2, 32, 28]), $a([1, 33, 28]), $a([0, -1, -1]), $a([3, 17, 26]), $a([1, 22, 30]), $a([0, -1, -1])]), $a(["13", 47, 16, 2, 1629, $a([1, 86, 16]), $a([1, 85, 16]), $a([0, -1, -1]), $a([1, 71, 30]), $a([1, 72, 30]), $a([0, -1, -1]), $a([2, 37, 32]), $a([1, 35, 30]), $a([0, -1, -1]), $a([3, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["14", 49, 16, 2, 1805, $a([1, 94, 18]), $a([1, 95, 18]), $a([0, -1, -1]), $a([2, 51, 22]), $a([1, 55, 24]), $a([0, -1, -1]), $a([3, 30, 26]), $a([1, 31, 26]), $a([0, -1, -1]), $a([4, 18, 28]), $a([1, 17, 24]), $a([0, -1, -1])]), $a(["15", 51, 17, 2, 1995, $a([1, 104, 20]), $a([1, 105, 20]), $a([0, -1, -1]), $a([2, 57, 24]), $a([1, 61, 26]), $a([0, -1, -1]), $a([3, 33, 28]), $a([1, 36, 30]), $a([0, -1, -1]), $a([4, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["16", 53, 17, 2, 2187, $a([1, 115, 22]), $a([1, 114, 22]), $a([0, -1, -1]), $a([2, 65, 28]), $a([1, 61, 26]), $a([0, -1, -1]), $a([3, 38, 32]), $a([1, 33, 30]), $a([0, -1, -1]), $a([5, 19, 28]), $a([1, 14, 24]), $a([0, -1, -1])]), $a(["17", 55, 18, 2, 2393, $a([1, 126, 24]), $a([1, 125, 24]), $a([0, -1, -1]), $a([2, 70, 30]), $a([1, 69, 30]), $a([0, -1, -1]), $a([4, 33, 28]), $a([1, 29, 26]), $a([0, -1, -1]), $a([5, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["18", 57, 19, 2, 2607, $a([1, 136, 26]), $a([1, 137, 26]), $a([0, -1, -1]), $a([3, 56, 24]), $a([1, 59, 26]), $a([0, -1, -1]), $a([5, 35, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([6, 18, 28]), $a([1, 21, 28]), $a([0, -1, -1])]), $a(["19", 59, 20, 2, 2829, $a([1, 148, 28]), $a([1, 149, 28]), $a([0, -1, -1]), $a([3, 61, 26]), $a([1, 64, 28]), $a([0, -1, -1]), $a([7, 24, 20]), $a([1, 23, 22]), $a([0, -1, -1]), $a([6, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["20", 61, 20, 2, 3053, $a([3, 107, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([3, 65, 28]), $a([1, 72, 30]), $a([0, -1, -1]), $a([7, 26, 22]), $a([1, 23, 22]), $a([0, -1, -1]), $a([7, 19, 28]), $a([1, 20, 32]), $a([0, -1, -1])]), $a(["21", 63, 21, 2, 3291, $a([3, 115, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([4, 56, 24]), $a([1, 63, 28]), $a([0, -1, -1]), $a([7, 28, 24]), $a([1, 25, 22]), $a([0, -1, -1]), $a([8, 18, 28]), $a([1, 21, 22]), $a([0, -1, -1])]), $a(["22", 65, 16, 3, 3383, $a([2, 116, 22]), $a([1, 122, 24]), $a([0, -1, -1]), $a([4, 56, 24]), $a([1, 72, 30]), $a([0, -1, -1]), $a([7, 28, 24]), $a([1, 32, 26]), $a([0, -1, -1]), $a([8, 18, 28]), $a([1, 24, 30]), $a([0, -1, -1])]), $a(["23", 67, 17, 3, 3631, $a([3, 127, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([5, 51, 22]), $a([1, 62, 26]), $a([0, -1, -1]), $a([7, 30, 26]), $a([1, 35, 26]), $a([0, -1, -1]), $a([8, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["24", 69, 17, 3, 3887, $a([2, 135, 26]), $a([1, 137, 26]), $a([0, -1, -1]), $a([5, 56, 24]), $a([1, 59, 26]), $a([0, -1, -1]), $a([7, 33, 28]), $a([1, 30, 28]), $a([0, -1, -1]), $a([11, 16, 24]), $a([1, 19, 26]), $a([0, -1, -1])]), $a(["25", 71, 18, 3, 4151, $a([3, 105, 20]), $a([1, 121, 22]), $a([0, -1, -1]), $a([5, 61, 26]), $a([1, 57, 26]), $a([0, -1, -1]), $a([9, 28, 24]), $a([1, 28, 22]), $a([0, -1, -1]), $a([10, 19, 28]), $a([1, 18, 30]), $a([0, -1, -1])]), $a(["26", 73, 18, 3, 4423, $a([2, 157, 30]), $a([1, 150, 28]), $a([0, -1, -1]), $a([5, 65, 28]), $a([1, 61, 26]), $a([0, -1, -1]), $a([8, 33, 28]), $a([1, 34, 30]), $a([0, -1, -1]), $a([10, 19, 28]), $a([2, 15, 26]), $a([0, -1, -1])]), $a(["27", 75, 19, 3, 4703, $a([3, 126, 24]), $a([1, 115, 22]), $a([0, -1, -1]), $a([7, 51, 22]), $a([1, 54, 22]), $a([0, -1, -1]), $a([8, 35, 30]), $a([1, 37, 30]), $a([0, -1, -1]), $a([15, 15, 22]), $a([1, 10, 22]), $a([0, -1, -1])]), $a(["28", 77, 19, 3, 4991, $a([4, 105, 20]), $a([1, 103, 20]), $a([0, -1, -1]), $a([7, 56, 24]), $a([1, 45, 18]), $a([0, -1, -1]), $a([10, 31, 26]), $a([1, 27, 26]), $a([0, -1, -1]), $a([10, 17, 26]), $a([3, 20, 28]), $a([1, 21, 28])]), $a(["29", 79, 20, 3, 5287, $a([3, 139, 26]), $a([1, 137, 28]), $a([0, -1, -1]), $a([6, 66, 28]), $a([1, 66, 30]), $a([0, -1, -1]), $a([9, 36, 30]), $a([1, 34, 32]), $a([0, -1, -1]), $a([13, 19, 28]), $a([1, 17, 32]), $a([0, -1, -1])]), $a(["30", 81, 20, 3, 5591, $a([6, 84, 16]), $a([1, 82, 16]), $a([0, -1, -1]), $a([6, 70, 30]), $a([1, 68, 30]), $a([0, -1, -1]), $a([7, 35, 30]), $a([3, 33, 28]), $a([1, 32, 28]), $a([13, 20, 30]), $a([1, 20, 28]), $a([0, -1, -1])]), $a(["31", 83, 21, 3, 5903, $a([5, 105, 20]), $a([1, 94, 18]), $a([0, -1, -1]), $a([6, 74, 32]), $a([1, 71, 30]), $a([0, -1, -1]), $a([11, 33, 28]), $a([1, 34, 32]), $a([0, -1, -1]), $a([13, 19, 28]), $a([3, 16, 26]), $a([0, -1, -1])]), $a(["32", 85, 17, 4, 6033, $a([4, 127, 24]), $a([1, 126, 24]), $a([0, -1, -1]), $a([7, 66, 28]), $a([1, 66, 30]), $a([0, -1, -1]), $a([12, 30, 24]), $a([1, 24, 28]), $a([1, 24, 30]), $a([15, 19, 28]), $a([1, 17, 32]), $a([0, -1, -1])]), $a(["33", 87, 17, 4, 6353, $a([7, 84, 16]), $a([1, 78, 16]), $a([0, -1, -1]), $a([7, 70, 30]), $a([1, 66, 28]), $a([0, -1, -1]), $a([12, 33, 28]), $a([1, 32, 30]), $a([0, -1, -1]), $a([14, 21, 32]), $a([1, 24, 28]), $a([0, -1, -1])]), $a(["34", 89, 18, 4, 6689, $a([5, 117, 22]), $a([1, 117, 24]), $a([0, -1, -1]), $a([8, 66, 28]), $a([1, 58, 26]), $a([0, -1, -1]), $a([11, 38, 32]), $a([1, 34, 32]), $a([0, -1, -1]), $a([15, 20, 30]), $a([2, 17, 26]), $a([0, -1, -1])]), $a(["35", 91, 18, 4, 7025, $a([4, 148, 28]), $a([1, 146, 28]), $a([0, -1, -1]), $a([8, 68, 30]), $a([1, 70, 24]), $a([0, -1, -1]), $a([10, 36, 32]), $a([3, 38, 28]), $a([0, -1, -1]), $a([16, 19, 28]), $a([3, 16, 26]), $a([0, -1, -1])]), $a(["36", 93, 19, 4, 7377, $a([4, 126, 24]), $a([2, 135, 26]), $a([0, -1, -1]), $a([8, 70, 28]), $a([2, 43, 26]), $a([0, -1, -1]), $a([13, 32, 28]), $a([2, 41, 30]), $a([0, -1, -1]), $a([17, 19, 28]), $a([3, 15, 26]), $a([0, -1, -1])]), $a(["37", 95, 19, 4, 7729, $a([5, 136, 26]), $a([1, 132, 24]), $a([0, -1, -1]), $a([5, 67, 30]), $a([4, 68, 28]), $a([1, 69, 28]), $a([14, 35, 30]), $a([1, 32, 24]), $a([0, -1, -1]), $a([18, 18, 26]), $a([3, 16, 28]), $a([1, 14, 28])]), $a(["38", 97, 19, 4, 8089, $a([3, 142, 26]), $a([3, 141, 28]), $a([0, -1, -1]), $a([8, 70, 30]), $a([1, 73, 32]), $a([1, 74, 32]), $a([12, 34, 30]), $a([3, 34, 26]), $a([1, 35, 28]), $a([18, 21, 32]), $a([1, 27, 30]), $a([0, -1, -1])]), $a(["39", 99, 20, 4, 8465, $a([5, 116, 22]), $a([2, 103, 20]), $a([1, 102, 20]), $a([9, 74, 32]), $a([1, 74, 30]), $a([0, -1, -1]), $a([14, 34, 28]), $a([2, 32, 32]), $a([1, 32, 30]), $a([19, 21, 32]), $a([1, 25, 26]), $a([0, -1, -1])]), $a(["40", 101, 20, 4, 8841, $a([7, 116, 22]), $a([1, 117, 22]), $a([0, -1, -1]), $a([11, 65, 28]), $a([1, 58, 24]), $a([0, -1, -1]), $a([15, 38, 32]), $a([1, 27, 28]), $a([0, -1, -1]), $a([20, 20, 30]), $a([1, 20, 32]), $a([1, 21, 32])]), $a(["41", 103, 17, 5, 9009, $a([6, 136, 26]), $a([1, 130, 24]), $a([0, -1, -1]), $a([11, 66, 28]), $a([1, 62, 30]), $a([0, -1, -1]), $a([14, 34, 28]), $a([3, 34, 32]), $a([1, 30, 30]), $a([18, 20, 30]), $a([3, 20, 28]), $a([2, 15, 26])]), $a(["42", 105, 17, 5, 9401, $a([5, 105, 20]), $a([2, 115, 22]), $a([2, 116, 22]), $a([10, 75, 32]), $a([1, 73, 32]), $a([0, -1, -1]), $a([16, 38, 32]), $a([1, 27, 28]), $a([0, -1, -1]), $a([22, 19, 28]), $a([2, 16, 30]), $a([1, 19, 30])]), $a(["43", 107, 18, 5, 9799, $a([6, 147, 28]), $a([1, 146, 28]), $a([0, -1, -1]), $a([11, 66, 28]), $a([2, 65, 30]), $a([0, -1, -1]), $a([18, 33, 28]), $a([2, 33, 30]), $a([0, -1, -1]), $a([22, 21, 32]), $a([1, 28, 30]), $a([0, -1, -1])]), $a(["44", 109, 18, 5, 10207, $a([6, 116, 22]), $a([3, 125, 24]), $a([0, -1, -1]), $a([11, 75, 32]), $a([1, 68, 30]), $a([0, -1, -1]), $a([13, 35, 28]), $a([6, 34, 32]), $a([1, 30, 30]), $a([23, 21, 32]), $a([1, 26, 30]), $a([0, -1, -1])]), $a(["45", 111, 18, 5, 10623, $a([7, 105, 20]), $a([4, 95, 18]), $a([0, -1, -1]), $a([12, 67, 28]), $a([1, 63, 30]), $a([1, 62, 32]), $a([21, 31, 26]), $a([2, 33, 32]), $a([0, -1, -1]), $a([23, 21, 32]), $a([2, 24, 30]), $a([0, -1, -1])]), $a(["46", 113, 19, 5, 11045, $a([10, 116, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([12, 74, 32]), $a([1, 78, 30]), $a([0, -1, -1]), $a([18, 37, 32]), $a([1, 39, 30]), $a([1, 41, 28]), $a([25, 21, 32]), $a([1, 27, 28]), $a([0, -1, -1])]), $a(["47", 115, 19, 5, 11477, $a([5, 126, 24]), $a([4, 115, 22]), $a([1, 114, 22]), $a([12, 67, 28]), $a([2, 66, 32]), $a([1, 68, 30]), $a([21, 35, 30]), $a([1, 39, 30]), $a([0, -1, -1]), $a([26, 21, 32]), $a([1, 28, 28]), $a([0, -1, -1])]), $a(["48", 117, 19, 5, 11917, $a([9, 126, 24]), $a([1, 117, 22]), $a([0, -1, -1]), $a([13, 75, 32]), $a([1, 68, 30]), $a([0, -1, -1]), $a([20, 35, 30]), $a([3, 35, 28]), $a([0, -1, -1]), $a([27, 21, 32]), $a([1, 28, 30]), $a([0, -1, -1])]), $a(["49", 119, 17, 6, 12111, $a([9, 126, 24]), $a([1, 137, 26]), $a([0, -1, -1]), $a([13, 71, 30]), $a([2, 68, 32]), $a([0, -1, -1]), $a([20, 37, 32]), $a([1, 39, 28]), $a([1, 38, 28]), $a([24, 20, 32]), $a([5, 25, 28]), $a([0, -1, -1])]), $a(["50", 121, 17, 6, 12559, $a([8, 147, 28]), $a([1, 141, 28]), $a([0, -1, -1]), $a([10, 73, 32]), $a([4, 74, 30]), $a([1, 73, 30]), $a([16, 36, 32]), $a([6, 39, 30]), $a([1, 37, 30]), $a([27, 21, 32]), $a([3, 20, 26]), $a([0, -1, -1])]), $a(["51", 123, 18, 6, 13025, $a([9, 137, 26]), $a([1, 135, 26]), $a([0, -1, -1]), $a([12, 70, 30]), $a([4, 75, 32]), $a([0, -1, -1]), $a([24, 35, 30]), $a([1, 40, 28]), $a([0, -1, -1]), $a([23, 20, 32]), $a([8, 24, 30]), $a([0, -1, -1])]), $a(["52", 125, 18, 6, 13489, $a([14, 95, 18]), $a([1, 86, 18]), $a([0, -1, -1]), $a([13, 73, 32]), $a([3, 77, 30]), $a([0, -1, -1]), $a([24, 35, 30]), $a([2, 35, 28]), $a([0, -1, -1]), $a([26, 21, 32]), $a([5, 21, 30]), $a([1, 23, 30])]), $a(["53", 127, 18, 6, 13961, $a([9, 147, 28]), $a([1, 142, 28]), $a([0, -1, -1]), $a([10, 73, 30]), $a([6, 70, 32]), $a([1, 71, 32]), $a([25, 35, 30]), $a([2, 34, 26]), $a([0, -1, -1]), $a([29, 21, 32]), $a([4, 22, 30]), $a([0, -1, -1])]), $a(["54", 129, 18, 6, 14441, $a([11, 126, 24]), $a([1, 131, 24]), $a([0, -1, -1]), $a([16, 74, 32]), $a([1, 79, 30]), $a([0, -1, -1]), $a([25, 38, 32]), $a([1, 25, 30]), $a([0, -1, -1]), $a([33, 21, 32]), $a([1, 28, 28]), $a([0, -1, -1])]), $a(["55", 131, 19, 6, 14939, $a([14, 105, 20]), $a([1, 99, 18]), $a([0, -1, -1]), $a([19, 65, 28]), $a([1, 72, 28]), $a([0, -1, -1]), $a([24, 37, 32]), $a([2, 40, 30]), $a([1, 41, 30]), $a([31, 21, 32]), $a([4, 24, 32]), $a([0, -1, -1])]), $a(["56", 133, 19, 6, 15435, $a([10, 147, 28]), $a([1, 151, 28]), $a([0, -1, -1]), $a([15, 71, 30]), $a([3, 71, 32]), $a([1, 73, 32]), $a([24, 37, 32]), $a([3, 38, 30]), $a([1, 39, 30]), $a([36, 19, 30]), $a([3, 29, 26]), $a([0, -1, -1])]), $a(["57", 135, 19, 6, 15939, $a([15, 105, 20]), $a([1, 99, 18]), $a([0, -1, -1]), $a([19, 70, 30]), $a([1, 64, 28]), $a([0, -1, -1]), $a([27, 38, 32]), $a([2, 25, 26]), $a([0, -1, -1]), $a([38, 20, 30]), $a([2, 18, 28]), $a([0, -1, -1])]), $a(["58", 137, 17, 7, 16171, $a([14, 105, 20]), $a([1, 113, 22]), $a([1, 114, 22]), $a([17, 67, 30]), $a([3, 92, 32]), $a([0, -1, -1]), $a([30, 35, 30]), $a([1, 41, 30]), $a([0, -1, -1]), $a([36, 21, 32]), $a([1, 26, 30]), $a([1, 27, 30])]), $a(["59", 139, 17, 7, 16691, $a([11, 146, 28]), $a([1, 146, 26]), $a([0, -1, -1]), $a([20, 70, 30]), $a([1, 60, 26]), $a([0, -1, -1]), $a([29, 38, 32]), $a([1, 24, 32]), $a([0, -1, -1]), $a([40, 20, 30]), $a([2, 17, 26]), $a([0, -1, -1])]), $a(["60", 141, 18, 7, 17215, $a([3, 137, 26]), $a([1, 136, 26]), $a([10, 126, 24]), $a([22, 65, 28]), $a([1, 75, 30]), $a([0, -1, -1]), $a([30, 37, 32]), $a([1, 51, 30]), $a([0, -1, -1]), $a([42, 20, 30]), $a([1, 21, 30]), $a([0, -1, -1])]), $a(["61", 143, 18, 7, 17751, $a([12, 126, 24]), $a([2, 118, 22]), $a([1, 116, 22]), $a([19, 74, 32]), $a([1, 74, 30]), $a([1, 72, 28]), $a([30, 38, 32]), $a([2, 29, 30]), $a([0, -1, -1]), $a([39, 20, 32]), $a([2, 37, 26]), $a([1, 38, 26])]), $a(["62", 145, 18, 7, 18295, $a([12, 126, 24]), $a([3, 136, 26]), $a([0, -1, -1]), $a([21, 70, 30]), $a([2, 65, 28]), $a([0, -1, -1]), $a([34, 35, 30]), $a([1, 44, 32]), $a([0, -1, -1]), $a([42, 20, 30]), $a([2, 19, 28]), $a([2, 18, 28])]), $a(["63", 147, 18, 7, 18847, $a([12, 126, 24]), $a([3, 117, 22]), $a([1, 116, 22]), $a([25, 61, 26]), $a([2, 62, 28]), $a([0, -1, -1]), $a([34, 35, 30]), $a([1, 40, 32]), $a([1, 41, 32]), $a([45, 20, 30]), $a([1, 20, 32]), $a([1, 21, 32])]), $a(["64", 149, 19, 7, 19403, $a([15, 105, 20]), $a([2, 115, 22]), $a([2, 116, 22]), $a([25, 65, 28]), $a([1, 72, 28]), $a([0, -1, -1]), $a([18, 35, 30]), $a([17, 37, 32]), $a([1, 50, 32]), $a([42, 20, 30]), $a([6, 19, 28]), $a([1, 15, 28])]), $a(["65", 151, 19, 7, 19971, $a([19, 105, 20]), $a([1, 101, 20]), $a([0, -1, -1]), $a([33, 51, 22]), $a([1, 65, 22]), $a([0, -1, -1]), $a([40, 33, 28]), $a([1, 28, 28]), $a([0, -1, -1]), $a([49, 20, 30]), $a([1, 18, 28]), $a([0, -1, -1])]), $a(["66", 153, 17, 8, 20229, $a([18, 105, 20]), $a([2, 117, 22]), $a([0, -1, -1]), $a([26, 65, 28]), $a([1, 80, 30]), $a([0, -1, -1]), $a([35, 35, 30]), $a([3, 35, 28]), $a([1, 36, 28]), $a([52, 18, 28]), $a([2, 38, 30]), $a([0, -1, -1])]), $a(["67", 155, 17, 8, 20805, $a([26, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([26, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([45, 31, 26]), $a([1, 9, 26]), $a([0, -1, -1]), $a([52, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["68", 157, 17, 8, 21389, $a([16, 126, 24]), $a([1, 114, 22]), $a([1, 115, 22]), $a([23, 70, 30]), $a([3, 65, 28]), $a([1, 66, 28]), $a([40, 35, 30]), $a([1, 43, 30]), $a([0, -1, -1]), $a([46, 20, 30]), $a([7, 19, 28]), $a([1, 16, 28])]), $a(["69", 159, 18, 8, 21993, $a([19, 116, 22]), $a([1, 105, 22]), $a([0, -1, -1]), $a([20, 70, 30]), $a([7, 66, 28]), $a([1, 63, 28]), $a([40, 35, 30]), $a([1, 42, 32]), $a([1, 43, 32]), $a([54, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["70", 161, 18, 8, 22593, $a([17, 126, 24]), $a([2, 115, 22]), $a([0, -1, -1]), $a([24, 70, 30]), $a([4, 74, 32]), $a([0, -1, -1]), $a([48, 31, 26]), $a([2, 18, 26]), $a([0, -1, -1]), $a([54, 19, 28]), $a([6, 15, 26]), $a([1, 14, 26])]), $a(["71", 163, 18, 8, 23201, $a([29, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([29, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([6, 34, 30]), $a([3, 36, 30]), $a([38, 33, 28]), $a([58, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["72", 165, 18, 8, 23817, $a([16, 147, 28]), $a([1, 149, 28]), $a([0, -1, -1]), $a([31, 66, 28]), $a([1, 37, 26]), $a([0, -1, -1]), $a([48, 33, 28]), $a([1, 23, 26]), $a([0, -1, -1]), $a([53, 20, 30]), $a([6, 19, 28]), $a([1, 17, 28])]), $a(["73", 167, 19, 8, 24453, $a([20, 115, 22]), $a([2, 134, 24]), $a([0, -1, -1]), $a([29, 66, 28]), $a([2, 56, 26]), $a([2, 57, 26]), $a([45, 36, 30]), $a([2, 15, 28]), $a([0, -1, -1]), $a([59, 20, 30]), $a([2, 21, 32]), $a([0, -1, -1])]), $a(["74", 169, 19, 8, 25085, $a([17, 147, 28]), $a([1, 134, 26]), $a([0, -1, -1]), $a([26, 70, 30]), $a([5, 75, 32]), $a([0, -1, -1]), $a([47, 35, 30]), $a([1, 48, 32]), $a([0, -1, -1]), $a([64, 18, 28]), $a([2, 33, 30]), $a([1, 35, 30])]), $a(["75", 171, 17, 9, 25373, $a([22, 115, 22]), $a([1, 133, 24]), $a([0, -1, -1]), $a([33, 65, 28]), $a([1, 74, 28]), $a([0, -1, -1]), $a([43, 36, 30]), $a([5, 27, 28]), $a([1, 30, 28]), $a([57, 20, 30]), $a([5, 21, 32]), $a([1, 24, 32])]), $a(["76", 173, 17, 9, 26021, $a([18, 136, 26]), $a([2, 142, 26]), $a([0, -1, -1]), $a([33, 66, 28]), $a([2, 49, 26]), $a([0, -1, -1]), $a([48, 35, 30]), $a([2, 38, 28]), $a([0, -1, -1]), $a([64, 20, 30]), $a([1, 20, 32]), $a([0, -1, -1])]), $a(["77", 175, 17, 9, 26677, $a([19, 126, 24]), $a([2, 135, 26]), $a([1, 136, 26]), $a([32, 66, 28]), $a([2, 55, 26]), $a([2, 56, 26]), $a([49, 36, 30]), $a([2, 18, 32]), $a([0, -1, -1]), $a([65, 18, 28]), $a([5, 27, 30]), $a([1, 29, 30])]), $a(["78", 177, 18, 9, 27335, $a([20, 137, 26]), $a([1, 130, 26]), $a([0, -1, -1]), $a([30, 75, 32]), $a([2, 71, 32]), $a([0, -1, -1]), $a([46, 35, 30]), $a([6, 39, 32]), $a([0, -1, -1]), $a([3, 12, 30]), $a([70, 19, 28]), $a([0, -1, -1])]), $a(["79", 179, 18, 9, 28007, $a([20, 147, 28]), $a([0, -1, -1]), $a([0, -1, -1]), $a([35, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([49, 35, 30]), $a([5, 35, 28]), $a([0, -1, -1]), $a([70, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["80", 181, 18, 9, 28687, $a([21, 136, 26]), $a([1, 155, 28]), $a([0, -1, -1]), $a([34, 70, 30]), $a([1, 64, 28]), $a([1, 65, 28]), $a([54, 35, 30]), $a([1, 45, 30]), $a([0, -1, -1]), $a([68, 20, 30]), $a([3, 18, 28]), $a([1, 19, 28])]), $a(["81", 183, 18, 9, 29375, $a([19, 126, 24]), $a([5, 115, 22]), $a([1, 114, 22]), $a([33, 70, 30]), $a([3, 65, 28]), $a([1, 64, 28]), $a([52, 35, 30]), $a([3, 41, 32]), $a([1, 40, 32]), $a([67, 20, 30]), $a([5, 21, 32]), $a([1, 24, 32])]), $a(["82", 185, 18, 9, 30071, $a([2, 150, 28]), $a([21, 136, 26]), $a([0, -1, -1]), $a([32, 70, 30]), $a([6, 65, 28]), $a([0, -1, -1]), $a([52, 38, 32]), $a([2, 27, 32]), $a([0, -1, -1]), $a([73, 20, 30]), $a([2, 22, 32]), $a([0, -1, -1])]), $a(["83", 187, 17, 10, 30387, $a([21, 126, 24]), $a([4, 136, 26]), $a([0, -1, -1]), $a([30, 74, 32]), $a([6, 73, 30]), $a([0, -1, -1]), $a([54, 35, 30]), $a([4, 40, 32]), $a([0, -1, -1]), $a([75, 20, 30]), $a([1, 20, 28]), $a([0, -1, -1])]), $a(["84", 189, 17, 10, 31091, $a([30, 105, 20]), $a([1, 114, 22]), $a([0, -1, -1]), $a([3, 45, 22]), $a([55, 47, 20]), $a([0, -1, -1]), $a([2, 26, 26]), $a([62, 33, 28]), $a([0, -1, -1]), $a([79, 18, 28]), $a([4, 33, 30]), $a([0, -1, -1])])]); //#23560
            for (var _IG in $ctx) {
                $ctx.hasOwnProperty(_IG) && (bwipp_hanxin.$ctx[_IG] = $ctx[_IG]);
            } //#23560
            bwipp_hanxin.$ctx._23561 = 1; //#23560
        })(); //#23560
    } //#23560
    $1.eclval = $get($1.eclevel, 1) - 49; //#23563
    for (var _IJ = 0; _IJ <= 83; _IJ += 1) { //#23583
        $1.i = _IJ; //#23565
        $1.m = $get($1.metrics, $1.i); //#23566
        $1.vers = $get($1.m, 0); //#23567
        $1.size = $get($1.m, 1); //#23568
        $1.alnk = $get($1.m, 2); //#23569
        $1.alnn = $get($1.m, 3); //#23570
        $1.alnr = $f($1.size - ($1.alnk * $1.alnn)); //#23571
        $1.nmod = $get($1.m, 4); //#23572
        $1.ncws = ~~($1.nmod / 8); //#23573
        $1.rbit = $1.nmod % 8; //#23574
        $1.ecbs = $geti($1.m, 5 + ($1.eclval * 3), 3); //#23575
        var _If = $1.ecbs; //#23576
        $k[$j++] = 'ecws'; //#23576
        $k[$j++] = 0; //#23576
        for (var _Ig = 0, _Ih = _If.length; _Ig < _Ih; _Ig++) { //#23576
            var _Ii = $get(_If, _Ig); //#23576
            var _Il = $k[--$j]; //#23576
            $k[$j++] = $f(_Il + ($get(_Ii, 0) * $get(_Ii, 2))); //#23576
        } //#23576
        var _Im = $k[--$j]; //#23576
        $1[$k[--$j]] = _Im; //#23576
        $1.dcws = $f($1.ncws - $1.ecws); //#23577
        $1.dmod = $1.dcws * 8; //#23578
        $1.okay = true; //#23579
        if ($ne($1.version, "unset") && $ne($1.version, $1.vers)) { //#23580
            $1.okay = false; //#23580
        } //#23580
        if ($1.bits.length > $1.dmod) { //#23581
            $1.okay = false; //#23581
        } //#23581
        if ($1.okay) { //#23582
            break; //#23582
        } //#23582
    } //#23582
    if (!$1.okay) { //#23587
        $k[$j++] = 'bwipp.hanxinNoValidSymbol#23586'; //#23586
        $k[$j++] = "Maximum length exceeded or invalid content"; //#23586
        bwipp_raiseerror(); //#23586
    } //#23586
    $1.version = $1.vers; //#23589
    $1.msgbits = $1.bits; //#23590
    $1.e1nb = $get($get($1.ecbs, 0), 0); //#23591
    $1.e2nb = $get($get($1.ecbs, 1), 0); //#23591
    $1.e3nb = $get($get($1.ecbs, 2), 0); //#23591
    $1.e1dcws = $get($get($1.ecbs, 0), 1); //#23592
    $1.e2dcws = $get($get($1.ecbs, 1), 1); //#23592
    $1.e3dcws = $get($get($1.ecbs, 2), 1); //#23592
    $1.e1ecws = $get($get($1.ecbs, 0), 2); //#23593
    $1.e2ecws = $get($get($1.ecbs, 1), 2); //#23593
    $1.e3ecws = $get($get($1.ecbs, 2), 2); //#23593
    $1.pad = $s($1.dmod); //#23596
    for (var _JV = 0, _JU = $1.pad.length - 1; _JV <= _JU; _JV += 1) { //#23597
        $put($1.pad, _JV, 48); //#23597
    } //#23597
    $puti($1.pad, 0, $1.msgbits); //#23598
    $1.cws = $a($1.dcws); //#23601
    for (var _Jd = 0, _Jc = $1.cws.length - 1; _Jd <= _Jc; _Jd += 1) { //#23611
        $1.c = _Jd; //#23603
        $1.cwb = $geti($1.pad, $1.c * 8, 8); //#23604
        $1.cw = 0; //#23605
        for (var _Jh = 0; _Jh <= 7; _Jh += 1) { //#23609
            $1.i = _Jh; //#23607
            $1.cw = $f($1.cw + ((~~(Math.pow(2, (8 - $1.i) - 1))) * $f($get($1.cwb, $1.i) - 48))); //#23608
        } //#23608
        $put($1.cws, $1.c, $1.cw); //#23610
    } //#23610
    $1.rscodes = function() {
        $1.rspm = $k[--$j]; //#23615
        $1.rsgf = $k[--$j]; //#23616
        $1.rsnc = $k[--$j]; //#23617
        $1.rscws = $k[--$j]; //#23618
        $k[$j++] = Infinity; //#23621
        $k[$j++] = 1; //#23621
        for (var _Jv = 0, _Jw = $f($1.rsgf - 1); _Jv < _Jw; _Jv++) { //#23621
            var _Jx = $k[--$j]; //#23621
            var _Jy = _Jx * 2; //#23621
            $k[$j++] = _Jx; //#23621
            $k[$j++] = _Jy; //#23621
            if (_Jy >= $1.rsgf) { //#23621
                var _K1 = $k[--$j]; //#23621
                $k[$j++] = $xo(_K1, $1.rspm); //#23621
            } //#23621
        } //#23621
        $1.rsalog = $a(); //#23621
        $1.rslog = $a($1.rsgf); //#23622
        for (var _K7 = 1, _K6 = $f($1.rsgf - 1); _K7 <= _K6; _K7 += 1) { //#23623
            $put($1.rslog, $get($1.rsalog, _K7), _K7); //#23623
        } //#23623
        $1.rsprod = function() {
            var _KB = $k[--$j]; //#23627
            var _KC = $k[--$j]; //#23627
            $k[$j++] = _KC; //#23631
            $k[$j++] = _KB; //#23631
            if ((_KB != 0) && (_KC != 0)) { //#23630
                var _KF = $get($1.rslog, $k[--$j]); //#23628
                var _KL = $get($1.rsalog, $f(_KF + $get($1.rslog, $k[--$j])) % $f($1.rsgf - 1)); //#23628
                $k[$j++] = _KL; //#23628
            } else { //#23630
                $j -= 2; //#23630
                $k[$j++] = 0; //#23630
            } //#23630
        }; //#23630
        $k[$j++] = Infinity; //#23635
        $k[$j++] = 1; //#23635
        for (var _KN = 0, _KO = $1.rsnc; _KN < _KO; _KN++) { //#23635
            $k[$j++] = 0; //#23635
        } //#23635
        $1.coeffs = $a(); //#23635
        for (var _KS = 1, _KR = $1.rsnc; _KS <= _KR; _KS += 1) { //#23644
            $1.i = _KS; //#23637
            $put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); //#23638
            for (var _KZ = $1.i - 1; _KZ >= 1; _KZ -= 1) { //#23642
                $1.j = _KZ; //#23640
                $k[$j++] = $1.coeffs; //#23641
                $k[$j++] = $1.j; //#23641
                $k[$j++] = $get($1.coeffs, $1.j - 1); //#23641
                $k[$j++] = $get($1.coeffs, $1.j); //#23641
                $k[$j++] = $get($1.rsalog, $1.i); //#23641
                $1.rsprod(); //#23641
                var _Kl = $k[--$j]; //#23641
                var _Km = $k[--$j]; //#23641
                var _Kn = $k[--$j]; //#23641
                $put($k[--$j], _Kn, $xo(_Km, _Kl)); //#23641
            } //#23641
            $k[$j++] = $1.coeffs; //#23643
            $k[$j++] = 0; //#23643
            $k[$j++] = $get($1.coeffs, 0); //#23643
            $k[$j++] = $get($1.rsalog, $1.i); //#23643
            $1.rsprod(); //#23643
            var _Kv = $k[--$j]; //#23643
            var _Kw = $k[--$j]; //#23643
            $put($k[--$j], _Kw, _Kv); //#23643
        } //#23643
        $1.nd = $1.rscws.length; //#23647
        $k[$j++] = Infinity; //#23648
        $forall($1.rscws); //#23648
        for (var _L1 = 0, _L2 = $1.rsnc; _L1 < _L2; _L1++) { //#23648
            $k[$j++] = 0; //#23648
        } //#23648
        $k[$j++] = 0; //#23648
        $1.rscws = $a(); //#23648
        for (var _L6 = 0, _L5 = $1.nd - 1; _L6 <= _L5; _L6 += 1) { //#23655
            $1.k = $xo($get($1.rscws, _L6), $get($1.rscws, $1.nd)); //#23650
            for (var _LE = 0, _LD = $f($1.rsnc - 1); _LE <= _LD; _LE += 1) { //#23654
                $1.j = _LE; //#23652
                $k[$j++] = $1.rscws; //#23653
                $k[$j++] = $1.nd + $1.j; //#23653
                $k[$j++] = $get($1.rscws, ($1.nd + $1.j) + 1); //#23653
                $k[$j++] = $1.k; //#23653
                $k[$j++] = $get($1.coeffs, $f($f($1.rsnc - $1.j) - 1)); //#23653
                $1.rsprod(); //#23653
                var _LR = $k[--$j]; //#23653
                var _LS = $k[--$j]; //#23653
                var _LT = $k[--$j]; //#23653
                $put($k[--$j], _LT, $xo(_LS, _LR)); //#23653
            } //#23653
        } //#23653
        $k[$j++] = $geti($1.rscws, 0, $1.rscws.length - 1); //#23658
    }; //#23658
    $1.dcwsb = $a($f($f($1.e1nb + $1.e2nb) + $1.e3nb)); //#23663
    $1.ecwsb = $a($1.dcwsb.length); //#23664
    $1.in = 0; //#23665
    $1.out = 0; //#23665
    for (var _Lf = 0, _Lg = $1.e1nb; _Lf < _Lg; _Lf++) { //#23671
        $k[$j++] = $geti($1.cws, $1.in, $1.e1dcws); //#23667
        $k[$j++] = $1.e1ecws; //#23667
        $k[$j++] = 256; //#23667
        $k[$j++] = 355; //#23667
        $1.rscodes(); //#23667
        var _Lm = $k[--$j]; //#23668
        $put($1.dcwsb, $1.out, $geti(_Lm, 0, $1.e1dcws)); //#23668
        $put($1.ecwsb, $1.out, $geti(_Lm, $1.e1dcws, $1.e1ecws)); //#23669
        $1.in = $f($1.in + $1.e1dcws); //#23670
        $1.out = $1.out + 1; //#23670
    } //#23670
    for (var _M0 = 0, _M1 = $1.e2nb; _M0 < _M1; _M0++) { //#23677
        $k[$j++] = $geti($1.cws, $1.in, $1.e2dcws); //#23673
        $k[$j++] = $1.e2ecws; //#23673
        $k[$j++] = 256; //#23673
        $k[$j++] = 355; //#23673
        $1.rscodes(); //#23673
        var _M7 = $k[--$j]; //#23674
        $put($1.dcwsb, $1.out, $geti(_M7, 0, $1.e2dcws)); //#23674
        $put($1.ecwsb, $1.out, $geti(_M7, $1.e2dcws, $1.e2ecws)); //#23675
        $1.in = $f($1.in + $1.e2dcws); //#23676
        $1.out = $1.out + 1; //#23676
    } //#23676
    for (var _ML = 0, _MM = $1.e3nb; _ML < _MM; _ML++) { //#23683
        $k[$j++] = $geti($1.cws, $1.in, $1.e3dcws); //#23679
        $k[$j++] = $1.e3ecws; //#23679
        $k[$j++] = 256; //#23679
        $k[$j++] = 355; //#23679
        $1.rscodes(); //#23679
        var _MS = $k[--$j]; //#23680
        $put($1.dcwsb, $1.out, $geti(_MS, 0, $1.e3dcws)); //#23680
        $put($1.ecwsb, $1.out, $geti(_MS, $1.e3dcws, $1.e3ecws)); //#23681
        $1.in = $f($1.in + $1.e3dcws); //#23682
        $1.out = $1.out + 1; //#23682
    } //#23682
    $1.cws = $a($1.ncws); //#23686
    $1.cw = 0; //#23687
    for (var _Mj = 0, _Mi = $1.dcwsb.length - 1; _Mj <= _Mi; _Mj += 1) { //#23692
        $1.i = _Mj; //#23689
        var _Mm = $get($1.dcwsb, $1.i); //#23690
        $puti($1.cws, $1.cw, _Mm); //#23690
        $1.cw = _Mm.length + $1.cw; //#23690
        var _Ms = $get($1.ecwsb, $1.i); //#23691
        $puti($1.cws, $1.cw, _Ms); //#23691
        $1.cw = _Ms.length + $1.cw; //#23691
    } //#23691
    $k[$j++] = Infinity; //#23697
    var _Mw = $1.ncws; //#23696
    var _Mx = 12; //#23696
    var _My = _Mw - 1; //#23696
    if ((_Mw - 1) > 12) { //#23696
        var _ = _Mx; //#23696
        _Mx = _My; //#23696
        _My = _; //#23696
    } //#23696
    for (var _N0 = 0, _Mz = _My; _N0 <= _Mz; _N0 += 1) { //#23698
        for (var _N3 = _N0, _N2 = $1.ncws - 1; _N3 <= _N2; _N3 += 13) { //#23697
            $k[$j++] = _N3; //#23697
            if (_N3 < $1.ncws) { //#23697
                var _N7 = $get($1.cws, $k[--$j]); //#23697
                $k[$j++] = _N7; //#23697
            } else { //#23697
                $j--; //#23697
            } //#23697
        } //#23697
    } //#23697
    $1.cws = $a(); //#23697
    if ($1.rbit > 0) { //#23707
        $1.pad = $a($1.cws.length + 1); //#23703
        $puti($1.pad, 0, $1.cws); //#23704
        $put($1.pad, $1.pad.length - 1, 0); //#23705
        $1.cws = $1.pad; //#23706
    } //#23706
    $k[$j++] = Infinity; //#23710
    for (var _NJ = 0, _NK = $1.size * $1.size; _NJ < _NK; _NJ++) { //#23710
        $k[$j++] = -1; //#23710
    } //#23710
    $1.pixs = $a(); //#23710
    $1.qmv = function() {
        var _NN = $k[--$j]; //#23711
        var _NO = $k[--$j]; //#23711
        $k[$j++] = $f(_NO + (_NN * $1.size)); //#23711
    }; //#23711
    if ($1.alnn != 0) { //#23770
        $1.trmv = function() {
            var _NR = $k[--$j]; //#23715
            var _NT = $k[--$j]; //#23715
            $k[$j++] = $f(($f(($f((_NR * $1.size) + $1.size)) - 1)) - _NT); //#23715
        }; //#23715
        $1.aplot = function() {
            var _NU = $k[--$j]; //#23717
            var _NV = $k[--$j]; //#23717
            var _NW = $k[--$j]; //#23717
            $k[$j++] = _NU; //#23717
            $k[$j++] = _NW; //#23717
            $k[$j++] = _NV; //#23717
            $k[$j++] = _NU; //#23717
            $k[$j++] = _NV; //#23717
            $k[$j++] = _NW; //#23717
            $1.trmv(); //#23717
            var _NY = $k[--$j]; //#23717
            $put($1.pixs, _NY, $k[--$j]); //#23717
            $1.trmv(); //#23718
            var _Nb = $k[--$j]; //#23718
            $put($1.pixs, _Nb, $k[--$j]); //#23718
        }; //#23718
        $1.i = 0; //#23720
        $1.stag = 0; //#23720
        for (;;) { //#23742
            if ($1.i >= $1.size) { //#23721
                break; //#23721
            } //#23721
            for (var _Nh = 0, _Ng = $f($1.size - 1); _Nh <= _Ng; _Nh += 1) { //#23735
                $1.j = _Nh; //#23723
                if ($f($1.j + $1.alnr) < $1.size) { //#23729
                    $k[$j++] = (((((~~($1.j / $1.alnk)) + $1.stag) % 2) == 0) && (!(($1.i == 0) && ($1.j < $1.alnk)))) || (($1.j % $1.alnk) == 0); //#23727
                } else { //#23729
                    $k[$j++] = ($f($1.alnn + $1.stag) % 2) == 0; //#23729
                } //#23729
                if ($k[--$j]) { //#23734
                    $k[$j++] = $1.j; //#23732
                    $k[$j++] = $1.i; //#23732
                    $k[$j++] = 1; //#23732
                    $1.aplot(); //#23732
                    var _Ny = $1.j; //#23733
                    var _Nz = $1.i; //#23733
                    $k[$j++] = _Ny + 1; //#23733
                    $k[$j++] = _Nz + 1; //#23733
                    if (((_Nz + 1) < $1.size) && ((_Ny + 1) < $1.size)) { //#23733
                        $k[$j++] = 0; //#23733
                        $1.aplot(); //#23733
                    } else { //#23733
                        $j -= 2; //#23733
                    } //#23733
                } //#23733
            } //#23733
            if ($f($1.i + $1.alnr) == $1.size) { //#23739
                $1.i = $f($f($1.i + $1.alnr) - 1); //#23737
            } else { //#23739
                $1.i = $f($1.i + $1.alnk); //#23739
            } //#23739
            $1.stag = 1 - $1.stag; //#23741
        } //#23741
        for (var _OE = $1.alnk, _OF = $1.alnk, _OD = $f($1.size - 2); _OF < 0 ? _OE >= _OD : _OE <= _OD; _OE += _OF) { //#23769
            $1.i = _OE; //#23744
            if (((~~($1.i / $1.alnk)) % 2) != 0) { //#23756
                $k[$j++] = $1.pixs; //#23746
                $k[$j++] = 0; //#23746
                $k[$j++] = $1.i - 1; //#23746
                $1.trmv(); //#23746
                var _OK = $k[--$j]; //#23746
                $put($k[--$j], _OK, 0); //#23746
                $k[$j++] = $1.pixs; //#23747
                $k[$j++] = 0; //#23747
                $k[$j++] = $1.i + 1; //#23747
                $1.trmv(); //#23747
                var _OO = $k[--$j]; //#23747
                $put($k[--$j], _OO, 0); //#23747
                $k[$j++] = $1.pixs; //#23748
                $k[$j++] = 1; //#23748
                $k[$j++] = $1.i - 1; //#23748
                $1.trmv(); //#23748
                var _OS = $k[--$j]; //#23748
                $put($k[--$j], _OS, 0); //#23748
                $k[$j++] = $1.pixs; //#23749
                $k[$j++] = 1; //#23749
                $k[$j++] = $1.i; //#23749
                $1.trmv(); //#23749
                var _OW = $k[--$j]; //#23749
                $put($k[--$j], _OW, 0); //#23749
                $k[$j++] = $1.pixs; //#23750
                $k[$j++] = 1; //#23750
                $k[$j++] = $1.i + 1; //#23750
                $1.trmv(); //#23750
                var _Oa = $k[--$j]; //#23750
                $put($k[--$j], _Oa, 0); //#23750
                $k[$j++] = $1.pixs; //#23751
                $k[$j++] = $1.i - 1; //#23751
                $k[$j++] = 0; //#23751
                $1.trmv(); //#23751
                var _Oe = $k[--$j]; //#23751
                $put($k[--$j], _Oe, 0); //#23751
                $k[$j++] = $1.pixs; //#23752
                $k[$j++] = $1.i + 1; //#23752
                $k[$j++] = 0; //#23752
                $1.trmv(); //#23752
                var _Oi = $k[--$j]; //#23752
                $put($k[--$j], _Oi, 0); //#23752
                $k[$j++] = $1.pixs; //#23753
                $k[$j++] = $1.i - 1; //#23753
                $k[$j++] = 1; //#23753
                $1.trmv(); //#23753
                var _Om = $k[--$j]; //#23753
                $put($k[--$j], _Om, 0); //#23753
                $k[$j++] = $1.pixs; //#23754
                $k[$j++] = $1.i; //#23754
                $k[$j++] = 1; //#23754
                $1.trmv(); //#23754
                var _Oq = $k[--$j]; //#23754
                $put($k[--$j], _Oq, 0); //#23754
                $k[$j++] = $1.pixs; //#23755
                $k[$j++] = $1.i + 1; //#23755
                $k[$j++] = 1; //#23755
                $1.trmv(); //#23755
                var _Ou = $k[--$j]; //#23755
                $put($k[--$j], _Ou, 0); //#23755
            } //#23755
            $k[$j++] = $1.pixs; //#23757
            $k[$j++] = $f($1.size - 1); //#23757
            $k[$j++] = $1.i - 1; //#23757
            $1.trmv(); //#23757
            var _Oz = $k[--$j]; //#23757
            if ($get($k[--$j], _Oz) != 1) { //#23768
                $k[$j++] = $1.pixs; //#23758
                $k[$j++] = $f($1.size - 1); //#23758
                $k[$j++] = $1.i - 1; //#23758
                $1.trmv(); //#23758
                var _P5 = $k[--$j]; //#23758
                $put($k[--$j], _P5, 0); //#23758
                $k[$j++] = $1.pixs; //#23759
                $k[$j++] = $f($1.size - 2); //#23759
                $k[$j++] = $1.i - 1; //#23759
                $1.trmv(); //#23759
                var _PA = $k[--$j]; //#23759
                $put($k[--$j], _PA, 0); //#23759
                $k[$j++] = $1.pixs; //#23760
                $k[$j++] = $f($1.size - 2); //#23760
                $k[$j++] = $1.i; //#23760
                $1.trmv(); //#23760
                var _PF = $k[--$j]; //#23760
                $put($k[--$j], _PF, 0); //#23760
                $k[$j++] = $1.pixs; //#23761
                $k[$j++] = $f($1.size - 2); //#23761
                $k[$j++] = $1.i + 1; //#23761
                $1.trmv(); //#23761
                var _PK = $k[--$j]; //#23761
                $put($k[--$j], _PK, 0); //#23761
                $k[$j++] = $1.pixs; //#23762
                $k[$j++] = $f($1.size - 1); //#23762
                $k[$j++] = $1.i + 1; //#23762
                $1.trmv(); //#23762
                var _PP = $k[--$j]; //#23762
                $put($k[--$j], _PP, 0); //#23762
                $k[$j++] = $1.pixs; //#23763
                $k[$j++] = $1.i - 1; //#23763
                $k[$j++] = $f($1.size - 1); //#23763
                $1.trmv(); //#23763
                var _PU = $k[--$j]; //#23763
                $put($k[--$j], _PU, 0); //#23763
                $k[$j++] = $1.pixs; //#23764
                $k[$j++] = $1.i - 1; //#23764
                $k[$j++] = $f($1.size - 2); //#23764
                $1.trmv(); //#23764
                var _PZ = $k[--$j]; //#23764
                $put($k[--$j], _PZ, 0); //#23764
                $k[$j++] = $1.pixs; //#23765
                $k[$j++] = $1.i; //#23765
                $k[$j++] = $f($1.size - 2); //#23765
                $1.trmv(); //#23765
                var _Pe = $k[--$j]; //#23765
                $put($k[--$j], _Pe, 0); //#23765
                $k[$j++] = $1.pixs; //#23766
                $k[$j++] = $1.i + 1; //#23766
                $k[$j++] = $f($1.size - 2); //#23766
                $1.trmv(); //#23766
                var _Pj = $k[--$j]; //#23766
                $put($k[--$j], _Pj, 0); //#23766
                $k[$j++] = $1.pixs; //#23767
                $k[$j++] = $1.i + 1; //#23767
                $k[$j++] = $f($1.size - 1); //#23767
                $1.trmv(); //#23767
                var _Po = $k[--$j]; //#23767
                $put($k[--$j], _Po, 0); //#23767
            } //#23767
        } //#23767
    } //#23767
    if (!bwipp_hanxin.$ctx._23794) { //#23794
        (function() { //#23794
            var $ctx = Object.create($1); //#23794
            $ctx.fpat = $a([$a([1, 1, 1, 1, 1, 1, 1, 0]), $a([1, 0, 0, 0, 0, 0, 0, 0]), $a([1, 0, 1, 1, 1, 1, 1, 0]), $a([1, 0, 1, 0, 0, 0, 0, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); //#23783
            $ctx.fpat2 = $a([$a([1, 1, 1, 0, 1, 0, 1, 0]), $a([1, 1, 1, 0, 1, 0, 1, 0]), $a([1, 1, 1, 0, 1, 0, 1, 0]), $a([0, 0, 0, 0, 1, 0, 1, 0]), $a([1, 1, 1, 1, 1, 0, 1, 0]), $a([0, 0, 0, 0, 0, 0, 1, 0]), $a([1, 1, 1, 1, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); //#23793
            for (var _Q8 in $ctx) {
                $ctx.hasOwnProperty(_Q8) && (bwipp_hanxin.$ctx[_Q8] = $ctx[_Q8]);
            } //#23793
            bwipp_hanxin.$ctx._23794 = 1; //#23793
        })(); //#23793
    } //#23793
    for (var _QB = 0, _QA = $1.fpat.length - 1; _QB <= _QA; _QB += 1) { //#23806
        $1.y = _QB; //#23796
        for (var _QF = 0, _QE = $get($1.fpat, 0).length - 1; _QF <= _QE; _QF += 1) { //#23805
            $1.x = _QF; //#23798
            $1.fpb = $get($get($1.fpat, $1.y), $1.x); //#23799
            $1.fpb2 = $get($get($1.fpat2, $1.y), $1.x); //#23800
            $k[$j++] = $1.pixs; //#23801
            $k[$j++] = $1.x; //#23801
            $k[$j++] = $1.y; //#23801
            $1.qmv(); //#23801
            var _QU = $k[--$j]; //#23801
            $put($k[--$j], _QU, $1.fpb); //#23801
            $k[$j++] = $1.pixs; //#23802
            $k[$j++] = $f($f($1.size - $1.x) - 1); //#23802
            $k[$j++] = $1.y; //#23802
            $1.qmv(); //#23802
            var _Qb = $k[--$j]; //#23802
            $put($k[--$j], _Qb, $1.fpb); //#23802
            $k[$j++] = $1.pixs; //#23803
            $k[$j++] = $f($f($1.size - $1.x) - 1); //#23803
            $k[$j++] = $f($f($1.size - $1.y) - 1); //#23803
            $1.qmv(); //#23803
            var _Qj = $k[--$j]; //#23803
            $put($k[--$j], _Qj, $1.fpb); //#23803
            $k[$j++] = $1.pixs; //#23804
            $k[$j++] = $1.x; //#23804
            $k[$j++] = $f($f($1.size - $1.y) - 1); //#23804
            $1.qmv(); //#23804
            var _Qq = $k[--$j]; //#23804
            $put($k[--$j], _Qq, $1.fpb2); //#23804
        } //#23804
    } //#23804
    $1.functionmap = $a([$a([$a([0, 8]), $a([$f($1.size - 1), $f($1.size - 9)])]), $a([$a([1, 8]), $a([$f($1.size - 2), $f($1.size - 9)])]), $a([$a([2, 8]), $a([$f($1.size - 3), $f($1.size - 9)])]), $a([$a([3, 8]), $a([$f($1.size - 4), $f($1.size - 9)])]), $a([$a([4, 8]), $a([$f($1.size - 5), $f($1.size - 9)])]), $a([$a([5, 8]), $a([$f($1.size - 6), $f($1.size - 9)])]), $a([$a([6, 8]), $a([$f($1.size - 7), $f($1.size - 9)])]), $a([$a([7, 8]), $a([$f($1.size - 8), $f($1.size - 9)])]), $a([$a([8, 8]), $a([$f($1.size - 9), $f($1.size - 9)])]), $a([$a([8, 7]), $a([$f($1.size - 9), $f($1.size - 8)])]), $a([$a([8, 6]), $a([$f($1.size - 9), $f($1.size - 7)])]), $a([$a([8, 5]), $a([$f($1.size - 9), $f($1.size - 6)])]), $a([$a([8, 4]), $a([$f($1.size - 9), $f($1.size - 5)])]), $a([$a([8, 3]), $a([$f($1.size - 9), $f($1.size - 4)])]), $a([$a([8, 2]), $a([$f($1.size - 9), $f($1.size - 3)])]), $a([$a([8, 1]), $a([$f($1.size - 9), $f($1.size - 2)])]), $a([$a([8, 0]), $a([$f($1.size - 9), $f($1.size - 1)])]), $a([$a([$f($1.size - 9), 0]), $a([8, $f($1.size - 1)])]), $a([$a([$f($1.size - 9), 1]), $a([8, $f($1.size - 2)])]), $a([$a([$f($1.size - 9), 2]), $a([8, $f($1.size - 3)])]), $a([$a([$f($1.size - 9), 3]), $a([8, $f($1.size - 4)])]), $a([$a([$f($1.size - 9), 4]), $a([8, $f($1.size - 5)])]), $a([$a([$f($1.size - 9), 5]), $a([8, $f($1.size - 6)])]), $a([$a([$f($1.size - 9), 6]), $a([8, $f($1.size - 7)])]), $a([$a([$f($1.size - 9), 7]), $a([8, $f($1.size - 8)])]), $a([$a([$f($1.size - 9), 8]), $a([8, $f($1.size - 9)])]), $a([$a([$f($1.size - 8), 8]), $a([7, $f($1.size - 9)])]), $a([$a([$f($1.size - 7), 8]), $a([6, $f($1.size - 9)])]), $a([$a([$f($1.size - 6), 8]), $a([5, $f($1.size - 9)])]), $a([$a([$f($1.size - 5), 8]), $a([4, $f($1.size - 9)])]), $a([$a([$f($1.size - 4), 8]), $a([3, $f($1.size - 9)])]), $a([$a([$f($1.size - 3), 8]), $a([2, $f($1.size - 9)])]), $a([$a([$f($1.size - 2), 8]), $a([1, $f($1.size - 9)])]), $a([$a([$f($1.size - 1), 8]), $a([0, $f($1.size - 9)])])]); //#23828
    var _Td = $1.functionmap; //#23829
    for (var _Te = 0, _Tf = _Td.length; _Te < _Tf; _Te++) { //#23831
        $forall($get(_Td, _Te), function() { //#23830
            $forall($k[--$j]); //#23830
            $1.qmv(); //#23830
            $put($1.pixs, $k[--$j], 0); //#23830
        }); //#23830
    } //#23830
    var _Tq = $a([function() {
        $j -= 2; //#23834
        $k[$j++] = 1; //#23834
    }, function() {
        var _Tk = $k[--$j]; //#23835
        var _Tl = $k[--$j]; //#23835
        $k[$j++] = $f(_Tl + _Tk) % 2; //#23835
    }, function() {
        var _Tm = $k[--$j]; //#23836
        var _Tn = $k[--$j]; //#23836
        $k[$j++] = ($f(($f(_Tm + _Tn) % 3) + (_Tn % 3))) % 2; //#23836
    }, function() {
        var _To = $k[--$j]; //#23837
        var _Tp = $k[--$j]; //#23837
        $k[$j++] = ($f((_Tp % _To) + ($f((_To % _Tp) + ($f((_To % 3) + (_Tp % 3))))))) % 2; //#23838
    }]); //#23838
    $1.maskfuncs = _Tq; //#23839
    if ($1.mask != -1) { //#23843
        $1.maskfuncs = $a([$get($1.maskfuncs, $1.mask - 1)]); //#23841
        $1.bestmaskval = $1.mask - 1; //#23842
    } //#23842
    $1.masks = $a($1.maskfuncs.length); //#23844
    for (var _U1 = 0, _U0 = $1.masks.length - 1; _U1 <= _U0; _U1 += 1) { //#23858
        $1.m = _U1; //#23846
        $1.mask = $a($1.size * $1.size); //#23847
        for (var _U7 = 0, _U6 = $f($1.size - 1); _U7 <= _U6; _U7 += 1) { //#23856
            $1.j = _U7; //#23849
            for (var _UA = 0, _U9 = $f($1.size - 1); _UA <= _U9; _UA += 1) { //#23855
                $1.i = _UA; //#23851
                $k[$j++] = $1.i + 1; //#23852
                $k[$j++] = $1.j + 1; //#23852
                if ($get($1.maskfuncs, $1.m)() === true) {
                    break;
                } //#23852
                var _UG = $k[--$j]; //#23852
                $k[$j++] = _UG == 0; //#23853
                $k[$j++] = $1.pixs; //#23853
                $k[$j++] = $1.i; //#23853
                $k[$j++] = $1.j; //#23853
                $1.qmv(); //#23853
                var _UK = $k[--$j]; //#23853
                var _UM = $get($k[--$j], _UK); //#23853
                var _UN = $k[--$j]; //#23853
                var _UO = (_UN && (_UM == -1)) ? 1 : 0; //#23853
                $k[$j++] = _UO; //#23854
                $k[$j++] = $1.mask; //#23854
                $k[$j++] = $1.i; //#23854
                $k[$j++] = $1.j; //#23854
                $1.qmv(); //#23854
                var _US = $k[--$j]; //#23854
                var _UT = $k[--$j]; //#23854
                $put(_UT, _US, $k[--$j]); //#23854
            } //#23854
        } //#23854
        $put($1.masks, $1.m, $1.mask); //#23857
    } //#23857
    $1.posx = 0; //#23861
    $1.posy = 0; //#23862
    $1.num = 0; //#23863
    for (;;) { //#23873
        if ($1.posy == $1.size) { //#23865
            break; //#23865
        } //#23865
        $k[$j++] = $1.pixs; //#23866
        $k[$j++] = $1.posx; //#23866
        $k[$j++] = $1.posy; //#23866
        $1.qmv(); //#23866
        var _Ud = $k[--$j]; //#23866
        if ($get($k[--$j], _Ud) == -1) { //#23870
            var _Ui = $get($1.cws, ~~($1.num / 8)); //#23867
            var _Uk = -(7 - ($1.num % 8)); //#23867
            $k[$j++] = ((_Uk < 0 ? _Ui >>> -_Uk : _Ui << _Uk)) & 1; //#23868
            $k[$j++] = $1.pixs; //#23868
            $k[$j++] = $1.posx; //#23868
            $k[$j++] = $1.posy; //#23868
            $1.qmv(); //#23868
            var _Uo = $k[--$j]; //#23868
            var _Up = $k[--$j]; //#23868
            $put(_Up, _Uo, $k[--$j]); //#23868
            $1.num = $1.num + 1; //#23869
        } //#23869
        $1.posx = $1.posx + 1; //#23871
        if ($1.posx == $1.size) { //#23872
            $1.posx = 0; //#23872
            $1.posy = $1.posy + 1; //#23872
        } //#23872
    } //#23872
    $1.evalfulln1n3 = function() {
        $1.scrle = $k[--$j]; //#23877
        $k[$j++] = 'scr1'; //#23879
        $k[$j++] = 0; //#23879
        $forall($1.scrle, function() { //#23879
            var _Uy = $k[--$j]; //#23879
            $k[$j++] = _Uy; //#23879
            if (_Uy >= 3) { //#23879
                var _Uz = $k[--$j]; //#23879
                var _V1 = $f($k[--$j] + (_Uz * 4)); //#23879
                $k[$j++] = _V1; //#23879
                $k[$j++] = _V1; //#23879
            } //#23879
            $j--; //#23879
        }); //#23879
        var _V2 = $k[--$j]; //#23879
        $1[$k[--$j]] = _V2; //#23879
        $1.scr3 = 0; //#23880
        for (var _V6 = 5, _V5 = $1.scrle.length - 1; _V6 <= _V5; _V6 += 2) { //#23896
            $1.j = _V6; //#23883
            if (($get($1.scrle, $1.j) % 3) == 0) { //#23895
                $1.fact = ~~($get($1.scrle, $1.j) / 3); //#23885
                var _VF = $geti($1.scrle, $1.j - 4, 4); //#23886
                for (var _VG = 0, _VH = _VF.length; _VG < _VH; _VG++) { //#23886
                    $k[$j++] = $get(_VF, _VG) == $1.fact; //#23886
                } //#23886
                var _VK = $k[--$j]; //#23886
                var _VL = $k[--$j]; //#23886
                var _VM = $k[--$j]; //#23886
                var _VN = $k[--$j]; //#23886
                if (_VN && (_VM && (_VL && _VK))) { //#23894
                    if (($1.j == 5) || (($1.j + 2) >= $1.scrle.length)) { //#23891
                        $1.scr3 = $1.scr3 + 50; //#23888
                    } else { //#23891
                        if (($get($1.scrle, $1.j - 5) >= 3) || ($get($1.scrle, $1.j + 1) >= 3)) { //#23892
                            $1.scr3 = $1.scr3 + 50; //#23891
                        } //#23891
                    } //#23891
                } //#23891
            } //#23891
        } //#23891
        for (var _Vb = 1, _Va = $1.scrle.length - 5; _Vb <= _Va; _Vb += 2) { //#23912
            $1.j = _Vb; //#23899
            if (($get($1.scrle, $1.j) % 3) == 0) { //#23911
                $1.fact = ~~($get($1.scrle, $1.j) / 3); //#23901
                var _Vk = $geti($1.scrle, $1.j + 1, 4); //#23902
                for (var _Vl = 0, _Vm = _Vk.length; _Vl < _Vm; _Vl++) { //#23902
                    $k[$j++] = $get(_Vk, _Vl) == $1.fact; //#23902
                } //#23902
                var _Vp = $k[--$j]; //#23902
                var _Vq = $k[--$j]; //#23902
                var _Vr = $k[--$j]; //#23902
                var _Vs = $k[--$j]; //#23902
                if (_Vs && (_Vr && (_Vq && _Vp))) { //#23910
                    if (($1.j == 1) || (($1.j + 6) >= $1.scrle.length)) { //#23907
                        $1.scr3 = $1.scr3 + 50; //#23904
                    } else { //#23907
                        if (($get($1.scrle, $1.j - 1) >= 3) || ($get($1.scrle, $1.j + 5) >= 3)) { //#23908
                            $1.scr3 = $1.scr3 + 50; //#23907
                        } //#23907
                    } //#23907
                } //#23907
            } //#23907
        } //#23907
        $k[$j++] = $1.scr1; //#23913
        $k[$j++] = $1.scr3; //#23913
    }; //#23913
    $1.evalfull = function() {
        $1.sym = $k[--$j]; //#23918
        $1.n1 = 0; //#23920
        $1.n3 = 0; //#23920
        $1.rle = $a($f($1.size + 1)); //#23921
        $1.lastpairs = $a($1.size); //#23922
        $1.thispairs = $a($1.size); //#23923
        $1.sizeadd1 = $f($1.size + 1); //#23924
        for (var _WG = 0, _WF = $f($1.size - 1); _WG <= _WF; _WG += 1) { //#23949
            $1.i = _WG; //#23926
            $k[$j++] = Infinity; //#23929
            var _WI = $1.size; //#23930
            $k[$j++] = 0; //#23932
            $k[$j++] = 0; //#23932
            for (var _WK = $1.i, _WL = _WI, _WJ = $f((_WI * _WI) - 1); _WL < 0 ? _WK >= _WJ : _WK <= _WJ; _WK += _WL) { //#23932
                var _WN = $get($1.sym, _WK); //#23931
                var _WO = $k[--$j]; //#23931
                $k[$j++] = _WN; //#23931
                if ($eq(_WO, _WN)) { //#23931
                    var _WP = $k[--$j]; //#23931
                    var _WQ = $k[--$j]; //#23931
                    $k[$j++] = $f(_WQ + 1); //#23931
                    $k[$j++] = _WP; //#23931
                } else { //#23931
                    var _WR = $k[--$j]; //#23931
                    $k[$j++] = 1; //#23931
                    $k[$j++] = _WR; //#23931
                } //#23931
            } //#23931
            $j--; //#23933
            var _WT = $counttomark() + 2; //#23934
            $astore($geti($1.rle, 0, _WT - 2)); //#23934
            $1.evalfulln1n3(); //#23935
            $1.n3 = $f($k[--$j] + $1.n3); //#23935
            $1.n1 = $f($k[--$j] + $1.n1); //#23935
            $j--; //#23936
            $1.symrow = $geti($1.sym, $1.i * $1.size, $1.size); //#23939
            $k[$j++] = Infinity; //#23940
            var _We = $1.symrow; //#23941
            $k[$j++] = 0; //#23943
            $k[$j++] = 0; //#23943
            for (var _Wf = 0, _Wg = _We.length; _Wf < _Wg; _Wf++) { //#23943
                var _Wh = $get(_We, _Wf); //#23943
                var _Wi = $k[--$j]; //#23942
                $k[$j++] = _Wh; //#23942
                if ($eq(_Wi, _Wh)) { //#23942
                    var _Wj = $k[--$j]; //#23942
                    var _Wk = $k[--$j]; //#23942
                    $k[$j++] = $f(_Wk + 1); //#23942
                    $k[$j++] = _Wj; //#23942
                } else { //#23942
                    var _Wl = $k[--$j]; //#23942
                    $k[$j++] = 1; //#23942
                    $k[$j++] = _Wl; //#23942
                } //#23942
            } //#23942
            $j--; //#23944
            var _Wn = $counttomark() + 2; //#23945
            $astore($geti($1.rle, 0, _Wn - 2)); //#23945
            $1.evalfulln1n3(); //#23946
            $1.n3 = $f($k[--$j] + $1.n3); //#23946
            $1.n1 = $f($k[--$j] + $1.n1); //#23946
            $j--; //#23947
        } //#23947
        $k[$j++] = $f($1.n1 + $1.n3); //#23951
    }; //#23951
    $1.bestscore = 999999999; //#23955
    for (var _Wx = 0, _Ww = $1.masks.length - 1; _Wx <= _Ww; _Wx += 1) { //#23973
        $1.m = _Wx; //#23957
        $1.masksym = $a($1.size * $1.size); //#23958
        for (var _X4 = 0, _X3 = $f(($1.size * $1.size) - 1); _X4 <= _X3; _X4 += 1) { //#23962
            $1.i = _X4; //#23960
            $put($1.masksym, $1.i, $xo($get($1.pixs, $1.i), $get($get($1.masks, $1.m), $1.i))); //#23961
        } //#23961
        if ($1.masks.length != 1) { //#23971
            $k[$j++] = $1.masksym; //#23964
            $1.evalfull(); //#23964
            $1.score = $k[--$j]; //#23964
            if ($1.score < $1.bestscore) { //#23969
                $1.bestsym = $1.masksym; //#23966
                $1.bestmaskval = $1.m; //#23967
                $1.bestscore = $1.score; //#23968
            } //#23968
        } else { //#23971
            $1.bestsym = $1.masksym; //#23971
        } //#23971
    } //#23971
    $1.pixs = $1.bestsym; //#23974
    $1.funval = (((((~~($f($1.size - 21) / 2)) + 20) * 4) + $1.eclval) * 4) + $1.bestmaskval; //#23977
    $k[$j++] = $a([($1.funval & 3840) >>> 8, ($1.funval & 240) >>> 4, $1.funval & 15]); //#23981
    $k[$j++] = 4; //#23981
    $k[$j++] = 16; //#23981
    $k[$j++] = 19; //#23981
    $1.rscodes(); //#23981
    $1.funvals = $k[--$j]; //#23981
    $k[$j++] = Infinity; //#23986
    $forall($1.funvals, function() { //#23985
        $k[$j++] = 4; //#23984
        $1.tobin(); //#23984
        $forall($k[--$j], function() { //#23984
            var _XZ = $k[--$j]; //#23984
            $k[$j++] = $f(_XZ - 48); //#23984
        }); //#23984
    }); //#23984
    $k[$j++] = 0; //#23986
    $k[$j++] = 1; //#23986
    $k[$j++] = 0; //#23986
    $k[$j++] = 1; //#23986
    $k[$j++] = 0; //#23986
    $k[$j++] = 1; //#23986
    $1.funbits = $a(); //#23986
    for (var _Xd = 0, _Xc = $1.functionmap.length - 1; _Xd <= _Xc; _Xd += 1) { //#23993
        $1.i = _Xd; //#23989
        $forall($get($1.functionmap, $1.i), function() { //#23992
            var _Xi = $k[--$j]; //#23991
            $k[$j++] = $1.pixs; //#23991
            $aload(_Xi); //#23991
            $1.qmv(); //#23991
            var _Xm = $k[--$j]; //#23991
            $put($k[--$j], _Xm, $get($1.funbits, $1.i)); //#23991
        }); //#23991
    } //#23991
    var _Xu = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", $1.size],
        ["pixy", $1.size],
        ["height", ($1.size * 2) / 72],
        ["width", ($1.size * 2) / 72],
        ["opt", $1.options]
    ]); //#24003
    $k[$j++] = _Xu; //#24006
    if (!$1.dontdraw) { //#24006
        bwipp_renmatrix(); //#24006
    } //#24006
}

function bwipp_dotcode() {
    var $1 = Object.create(bwipp_dotcode.$ctx || (bwipp_dotcode.$ctx = {})); //#24041
    $1.dontdraw = false; //#24044
    $1.rows = -1; //#24045
    $1.columns = -1; //#24046
    $1.ratio = -1; //#24047
    $1.parse = false; //#24048
    $1.parsefnc = false; //#24049
    $1.raw = false; //#24050
    $1.fast = false; //#24051
    $1.mask = -1; //#24052
    $k[$j++] = $1; //#24054
    bwipp_processoptions(); //#24054
    $1.options = $k[--$j]; //#24054
    $1.barcode = $k[--$j]; //#24055
    if ((($1.ratio == -1) && ($1.rows == -1)) && ($1.columns == -1)) { //#24062
        $1.ratio = 3 / 2; //#24061
    } //#24061
    if (!bwipp_dotcode.$ctx._24075) { //#24075
        (function() { //#24075
            var $ctx = Object.create($1); //#24075
            $ctx.laa = -1; //#24066
            $ctx.lab = -2; //#24066
            $ctx.lac = -3; //#24066
            $ctx.bin = -4; //#24066
            $ctx.sfa = -5; //#24067
            $ctx.sfb = -6; //#24067
            $ctx.sb2 = -7; //#24067
            $ctx.sb3 = -8; //#24067
            $ctx.sb4 = -9; //#24068
            $ctx.sb5 = -10; //#24068
            $ctx.sb6 = -11; //#24068
            $ctx.sfc = -12; //#24068
            $ctx.sc2 = -13; //#24069
            $ctx.sc3 = -14; //#24069
            $ctx.sc4 = -15; //#24069
            $ctx.sc5 = -16; //#24069
            $ctx.sc6 = -17; //#24070
            $ctx.sc7 = -18; //#24070
            $ctx.bsa = -19; //#24070
            $ctx.bsb = -20; //#24070
            $ctx.tma = -21; //#24071
            $ctx.tmb = -22; //#24071
            $ctx.tmc = -23; //#24071
            $ctx.tms = -24; //#24071
            $ctx.fn1 = -25; //#24072
            $ctx.fn2 = -26; //#24072
            $ctx.fn3 = -27; //#24072
            $ctx.crl = -28; //#24072
            $ctx.aim = -29; //#24073
            $ctx.m05 = -30; //#24073
            $ctx.m06 = -31; //#24073
            $ctx.m12 = -32; //#24073
            $ctx.mac = -33; //#24074
            for (var _5 in $ctx) {
                $ctx.hasOwnProperty(_5) && (bwipp_dotcode.$ctx[_5] = $ctx[_5]);
            } //#24074
            bwipp_dotcode.$ctx._24075 = 1; //#24074
        })(); //#24074
    } //#24074
    var _A = new Map([
        ["parse", $1.parse],
        ["parsefnc", $1.parsefnc],
        ["eci", true],
        ["FNC1", $1.fn1],
        ["FNC3", $1.fn3]
    ]); //#24084
    $1.fncvals = _A; //#24085
    $k[$j++] = 'msg'; //#24086
    $k[$j++] = $1.barcode; //#24086
    $k[$j++] = $1.fncvals; //#24086
    bwipp_parseinput(); //#24086
    var _D = $k[--$j]; //#24086
    $1[$k[--$j]] = _D; //#24086
    $1.msglen = $1.msg.length; //#24087
    var _G = $1.msg; //#24090
    $k[$j++] = 'numecis'; //#24090
    $k[$j++] = 0; //#24090
    for (var _H = 0, _I = _G.length; _H < _I; _H++) { //#24090
        if ($get(_G, _H) <= -1000000) { //#24090
            var _K = $k[--$j]; //#24090
            $k[$j++] = $f(_K + 1); //#24090
        } //#24090
    } //#24090
    var _L = $k[--$j]; //#24090
    $1[$k[--$j]] = _L; //#24090
    $1.msgtmp = $a($f($1.msg.length + ($1.numecis * 6))); //#24091
    $1.j = 0; //#24092
    for (var _S = 0, _R = $1.msg.length - 1; _S <= _R; _S += 1) { //#24103
        var _U = $get($1.msg, _S); //#24094
        $k[$j++] = _U; //#24102
        if (_U <= -1000000) { //#24101
            var _Y = $geti($cvrs($s(7), -$k[--$j], 10), 1, 6); //#24095
            for (var _Z = 0, _a = _Y.length; _Z < _a; _Z++) { //#24095
                $k[$j++] = $get(_Y, _Z); //#24095
            } //#24095
            $astore($a(6)); //#24095
            $puti($1.msgtmp, $1.j + 1, $k[--$j]); //#24096
            $put($1.msgtmp, $1.j, $1.fn2); //#24097
            $1.j = $1.j + 7; //#24098
        } else { //#24101
            $put($1.msgtmp, $1.j, $k[--$j]); //#24100
            $1.j = $1.j + 1; //#24101
        } //#24101
    } //#24101
    $1.msg = $1.msgtmp; //#24104
    $1.msglen = $1.msg.length; //#24105
    if (!bwipp_dotcode.$ctx._24174) { //#24174
        (function() { //#24174
            var $ctx = Object.create($1); //#24174
            $ctx.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$ctx.sfb, $ctx.crl, "96"]), $a([$ctx.sb2, 9, "97"]), $a([$ctx.sb3, 28, "98"]), $a([$ctx.sb4, 29, "99"]), $a([$ctx.sb5, 30, $ctx.aim]), $a([$ctx.sb6, $ctx.sfa, $ctx.laa]), $a([$ctx.lab, $ctx.laa, $ctx.sfb]), $a([$ctx.sc2, $ctx.sc2, $ctx.sb2]), $a([$ctx.sc3, $ctx.sc3, $ctx.sb3]), $a([$ctx.sc4, $ctx.sc4, $ctx.sb4]), $a([$ctx.lac, $ctx.lac, $ctx.lab]), $a([$ctx.fn1, $ctx.fn1, $ctx.fn1]), $a([$ctx.fn2, $ctx.fn2, $ctx.fn2]), $a([$ctx.fn3, $ctx.fn3, $ctx.fn3]), $a([$ctx.bsa, $ctx.bsa, $ctx.bsa]), $a([$ctx.bsb, $ctx.bsb, $ctx.bsb]), $a([$ctx.bin, $ctx.bin, $ctx.bin])]); //#24149
            $ctx.charvals = $a([new Map, new Map, new Map]); //#24152
            for (var _3Q = 0, _3P = $ctx.charmaps.length - 1; _3Q <= _3P; _3Q += 1) { //#24161
                $ctx.i = _3Q; //#24154
                $ctx.encs = $get($ctx.charmaps, $ctx.i); //#24155
                for (var _3U = 0; _3U <= 2; _3U += 1) { //#24160
                    $ctx.j = _3U; //#24157
                    var _3X = $get($ctx.encs, $ctx.j); //#24158
                    $k[$j++] = _3X; //#24158
                    if ($eq($type(_3X), 'stringtype')) { //#24158
                        var _3a = $get($k[--$j], 0); //#24158
                        $k[$j++] = _3a; //#24158
                    } //#24158
                    $put($get($ctx.charvals, $ctx.j), $k[--$j], $ctx.i); //#24159
                } //#24159
            } //#24159
            $ctx.Avals = $get($ctx.charvals, 0); //#24162
            $ctx.Bvals = $get($ctx.charvals, 1); //#24163
            $put($ctx.Bvals, $ctx.m05, 97); //#24164
            $put($ctx.Bvals, $ctx.m06, 98); //#24165
            $put($ctx.Bvals, $ctx.m12, 99); //#24166
            $put($ctx.Bvals, $ctx.mac, 100); //#24167
            $ctx.Cvals = $get($ctx.charvals, 2); //#24168
            $k[$j++] = Infinity; //#24170
            var _44 = $a([$ctx.sc2, $ctx.sc3, $ctx.sc4, $ctx.sc5, $ctx.sc6, $ctx.sc7, $ctx.tma, $ctx.tmb, $ctx.tmc, $ctx.tms]); //#24170
            $k[$j++] = 102; //#24170
            for (var _45 = 0, _46 = _44.length; _45 < _46; _45++) { //#24170
                var _49 = $f($k[--$j] + 1); //#24170
                $k[$j++] = $get(_44, _45); //#24170
                $k[$j++] = _49; //#24170
                $k[$j++] = _49; //#24170
            } //#24170
            $j--; //#24170
            $ctx.BINvals = $d(); //#24171
            $ctx.A = 0; //#24173
            $ctx.B = 1; //#24173
            $ctx.C = 2; //#24173
            $ctx.BIN = 3; //#24173
            for (var _4B in $ctx) {
                $ctx.hasOwnProperty(_4B) && (bwipp_dotcode.$ctx[_4B] = $ctx[_4B]);
            } //#24173
            bwipp_dotcode.$ctx._24174 = 1; //#24173
        })(); //#24173
    } //#24173
    $k[$j++] = Infinity; //#24177
    for (var _4D = 0, _4E = $1.msglen + 1; _4D < _4E; _4D++) { //#24177
        $k[$j++] = 0; //#24177
    } //#24177
    $1.nDigits = $a(); //#24177
    $k[$j++] = Infinity; //#24178
    for (var _4H = 0, _4I = $1.msglen + 1; _4H < _4I; _4H++) { //#24178
        $k[$j++] = false; //#24178
    } //#24178
    $1.SeventeenTen = $a(); //#24178
    $k[$j++] = Infinity; //#24179
    for (var _4L = 0, _4M = $1.msglen + 1; _4L < _4M; _4L++) { //#24179
        $k[$j++] = false; //#24179
    } //#24179
    $1.ECI = $a(); //#24179
    $k[$j++] = Infinity; //#24180
    for (var _4P = 0, _4Q = $1.msglen + 1; _4P < _4Q; _4P++) { //#24180
        $k[$j++] = false; //#24180
    } //#24180
    $1.DatumA = $a(); //#24180
    $k[$j++] = Infinity; //#24181
    for (var _4T = 0, _4U = $1.msglen + 1; _4T < _4U; _4T++) { //#24181
        $k[$j++] = false; //#24181
    } //#24181
    $1.DatumB = $a(); //#24181
    $k[$j++] = Infinity; //#24182
    for (var _4X = 0, _4Y = $1.msglen + 1; _4X < _4Y; _4X++) { //#24182
        $k[$j++] = false; //#24182
    } //#24182
    $1.DatumC = $a(); //#24182
    $k[$j++] = Infinity; //#24183
    for (var _4b = 0, _4c = $1.msglen + 8; _4b < _4c; _4b++) { //#24183
        $k[$j++] = false; //#24183
    } //#24183
    $1.Binary = $a(); //#24183
    $k[$j++] = Infinity; //#24184
    for (var _4f = 0, _4g = $1.msglen + 1; _4f < _4g; _4f++) { //#24184
        $k[$j++] = 0; //#24184
    } //#24184
    $1.AheadC = $a(); //#24184
    $k[$j++] = Infinity; //#24185
    for (var _4j = 0, _4k = $1.msglen + 1; _4j < _4k; _4j++) { //#24185
        $k[$j++] = 0; //#24185
    } //#24185
    $1.TryC = $a(); //#24185
    $k[$j++] = Infinity; //#24186
    for (var _4n = 0, _4o = $1.msglen + 1; _4n < _4o; _4n++) { //#24186
        $k[$j++] = 0; //#24186
    } //#24186
    $1.AheadA = $a(); //#24186
    $k[$j++] = Infinity; //#24187
    for (var _4r = 0, _4s = $1.msglen + 1; _4r < _4s; _4r++) { //#24187
        $k[$j++] = 0; //#24187
    } //#24187
    $1.AheadB = $a(); //#24187
    $k[$j++] = Infinity; //#24188
    for (var _4v = 0, _4w = $1.msglen + 1; _4v < _4w; _4v++) { //#24188
        $k[$j++] = 0; //#24188
    } //#24188
    $1.UntilEndSeg = $a(); //#24188
    for (var _4z = $1.msglen - 1; _4z >= 0; _4z -= 1) { //#24243
        $1.i = _4z; //#24190
        $1.barchar = $get($1.msg, $1.i); //#24191
        if (($1.barchar >= 48) && ($1.barchar <= 57)) { //#24194
            $put($1.nDigits, $1.i, $f($get($1.nDigits, $1.i + 1) + 1)); //#24193
        } //#24193
        var _5C = $get($1.Avals, $1.barchar) !== undefined; //#24195
        if (_5C) { //#24195
            $put($1.DatumA, $1.i, true); //#24195
        } //#24195
        var _5H = $get($1.Bvals, $1.barchar) !== undefined; //#24196
        if (_5H) { //#24196
            $put($1.DatumB, $1.i, true); //#24196
        } //#24196
        $1.CRLF = false; //#24197
        if (($1.barchar == 13) && ($1.i < ($1.msglen - 1))) { //#24200
            if ($get($1.msg, $1.i + 1) == 10) { //#24199
                $1.CRLF = true; //#24199
            } //#24199
        } //#24199
        if ($1.CRLF) { //#24201
            $put($1.DatumB, $1.i, true); //#24201
        } //#24201
        if ($get($1.nDigits, $1.i) >= 2) { //#24202
            $put($1.DatumC, $1.i, true); //#24202
        } //#24202
        if ($1.barchar < 0) { //#24203
            $put($1.DatumC, $1.i, true); //#24203
        } //#24203
        if ($1.barchar >= 128) { //#24204
            $put($1.Binary, $1.i, true); //#24204
        } //#24204
        if ($get($1.nDigits, $1.i) >= 10) { //#24218
            $k[$j++] = Infinity; //#24206
            $aload($geti($1.msg, $1.i, 10)); //#24207
            for (var _5k = 0, _5l = 1; _5k < _5l; _5k++) { //#24215
                if ($k[--$j] != 48) { //#24209
                    $k[$j++] = false; //#24209
                    break; //#24209
                } //#24209
                if ($k[--$j] != 49) { //#24210
                    $k[$j++] = false; //#24210
                    break; //#24210
                } //#24210
                $j -= 6; //#24211
                if ($k[--$j] != 55) { //#24212
                    $k[$j++] = false; //#24212
                    break; //#24212
                } //#24212
                if ($k[--$j] != 49) { //#24213
                    $k[$j++] = false; //#24213
                    break; //#24213
                } //#24213
                $k[$j++] = true; //#24214
            } //#24214
            $put($1.SeventeenTen, $1.i, $k[--$j]); //#24216
            $cleartomark(); //#24217
        } //#24217
        if (($get($1.nDigits, $1.i + 1) >= 6) && ($get($1.msg, $1.i) == $1.fn2)) { //#24221
            $put($1.ECI, $1.i, true); //#24220
        } //#24220
        if (($1.barchar < 0) && ($1.barchar != $1.fn3)) { //#24228
            $put($1.AheadC, $1.i, $f($get($1.AheadC, $1.i + 1) + 1)); //#24223
        } else { //#24228
            if ($get($1.nDigits, $1.i) <= 1) { //#24228
                $put($1.AheadC, $1.i, 0); //#24226
            } else { //#24228
                $put($1.AheadC, $1.i, $f($get($1.AheadC, $1.i + 2) + 1)); //#24228
            } //#24228
        } //#24228
        if (($get($1.nDigits, $1.i) > 0) && $gt($get($1.AheadC, $1.i), $get($1.AheadC, $1.i + 1))) { //#24233
            $put($1.TryC, $1.i, $get($1.AheadC, $1.i)); //#24232
        } //#24232
        if (($get($1.DatumA, $1.i) && ($get($1.TryC, $1.i) < 2)) && ($1.barchar != $1.fn3)) { //#24236
            $put($1.AheadA, $1.i, $f($get($1.AheadA, $1.i + 1) + 1)); //#24235
        } //#24235
        if (($get($1.DatumB, $1.i) && ($get($1.TryC, $1.i) < 2)) && ($1.barchar != $1.fn3)) { //#24239
            $k[$j++] = $1.AheadB; //#24238
            $k[$j++] = $1.i; //#24238
            $k[$j++] = $1.AheadB; //#24238
            $k[$j++] = $1.i + 1; //#24238
            if ($1.CRLF) { //#24238
                var _6y = $k[--$j]; //#24238
                $k[$j++] = $f(_6y + 1); //#24238
            } //#24238
            var _6z = $k[--$j]; //#24238
            var _71 = $get($k[--$j], _6z); //#24238
            var _72 = $k[--$j]; //#24238
            $put($k[--$j], _72, $f(_71 + 1)); //#24238
        } //#24238
        if ($1.barchar != $1.fn3) { //#24242
            $put($1.UntilEndSeg, $1.i, $f($get($1.UntilEndSeg, $1.i + 1) + 1)); //#24241
        } //#24241
    } //#24241
    $1.addtocws = function() {
        var _7B = $k[--$j]; //#24246
        $puti($1.cws, $1.j, _7B); //#24246
        $1.j = _7B.length + $1.j; //#24247
    }; //#24247
    $1.base259to103 = function() {
        $1.in = $k[--$j]; //#24252
        $1.inlen = $1.in.length; //#24253
        $k[$j++] = Infinity; //#24254
        for (var _7I = 0, _7J = 5 - $1.inlen; _7I < _7J; _7I++) { //#24254
            $k[$j++] = 0; //#24254
        } //#24254
        $aload($1.in); //#24254
        $1.in = $a(); //#24254
        $1.out = $a(6); //#24255
        $k[$j++] = Infinity; //#24256
        $aload($geti($1.in, 0, 2)); //#24256
        $1.msbs = $a(); //#24256
        $k[$j++] = Infinity; //#24259
        $aload($1.msbs); //#24258
        var _7R = $k[--$j]; //#24258
        var _7S = $k[--$j]; //#24258
        $k[$j++] = $f(_7R + (_7S * 259)); //#24259
        for (var _7T = 0, _7U = 2; _7T < _7U; _7T++) { //#24259
            var _7V = $k[--$j]; //#24259
            $k[$j++] = _7V % 103; //#24259
            $k[$j++] = ~~(_7V / 103); //#24259
        } //#24259
        $1.mscs = $a(); //#24259
        $k[$j++] = Infinity; //#24261
        $aload($geti($1.in, 2, 3)); //#24261
        $1.lsbs = $a(); //#24261
        $k[$j++] = Infinity; //#24264
        $aload($1.lsbs); //#24263
        var _7b = $k[--$j]; //#24263
        var _7c = $k[--$j]; //#24263
        var _7d = $k[--$j]; //#24263
        $k[$j++] = $f(($f(_7b + (_7c * 259))) + (_7d * 67081)); //#24264
        for (var _7e = 0, _7f = 3; _7e < _7f; _7e++) { //#24264
            var _7g = $k[--$j]; //#24264
            $k[$j++] = _7g % 103; //#24264
            $k[$j++] = ~~(_7g / 103); //#24264
        } //#24264
        $1.lscs = $a(); //#24264
        var _7j = $get($1.lscs, 0); //#24266
        var _7l = $get($1.mscs, 0); //#24266
        $put($1.out, 5, ($f(_7j + (_7l * 42))) % 103); //#24267
        var _7o = $get($1.lscs, 1); //#24268
        var _7q = $get($1.mscs, 0); //#24268
        var _7s = $get($1.mscs, 1); //#24268
        $put($1.out, 4, ($f(($f(($f((~~(($f(_7j + (_7l * 42))) / 103)) + _7o)) + (_7q * 68))) + (_7s * 42))) % 103); //#24269
        var _7v = $get($1.lscs, 2); //#24270
        var _7x = $get($1.mscs, 0); //#24270
        var _7z = $get($1.mscs, 1); //#24270
        var _81 = $get($1.mscs, 2); //#24270
        $put($1.out, 3, ($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7j + (_7l * 42))) / 103)) + _7o)) + (_7q * 68))) + (_7s * 42))) / 103)) + _7v)) + (_7x * 92))) + (_7z * 68))) + (_81 * 42))) % 103); //#24271
        var _84 = $get($1.lscs, 3); //#24272
        var _86 = $get($1.mscs, 0); //#24272
        var _88 = $get($1.mscs, 1); //#24272
        var _8A = $get($1.mscs, 2); //#24272
        $put($1.out, 2, ($f(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7j + (_7l * 42))) / 103)) + _7o)) + (_7q * 68))) + (_7s * 42))) / 103)) + _7v)) + (_7x * 92))) + (_7z * 68))) + (_81 * 42))) / 103)) + _84)) + (_86 * 15))) + (_88 * 92))) + (_8A * 68))) % 103); //#24273
        var _8D = $get($1.mscs, 1); //#24274
        var _8F = $get($1.mscs, 2); //#24274
        $put($1.out, 1, ($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7j + (_7l * 42))) / 103)) + _7o)) + (_7q * 68))) + (_7s * 42))) / 103)) + _7v)) + (_7x * 92))) + (_7z * 68))) + (_81 * 42))) / 103)) + _84)) + (_86 * 15))) + (_88 * 92))) + (_8A * 68))) / 103)) + (_8D * 15))) + (_8F * 92))) % 103); //#24275
        $put($1.out, 0, ($f((~~(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7j + (_7l * 42))) / 103)) + _7o)) + (_7q * 68))) + (_7s * 42))) / 103)) + _7v)) + (_7x * 92))) + (_7z * 68))) + (_81 * 42))) / 103)) + _84)) + (_86 * 15))) + (_88 * 92))) + (_8A * 68))) / 103)) + (_8D * 15))) + (_8F * 92))) / 103)) + ($get($1.mscs, 2) * 15))) % 103); //#24277
        $k[$j++] = $geti($1.out, (6 - $1.inlen) - 1, $1.inlen + 1); //#24278
    }; //#24278
    $1.finaliseBIN = function() {
        if ($1.bpos != 0) { //#24285
            $k[$j++] = $geti($1.bvals, 0, $1.bpos); //#24283
            $1.base259to103(); //#24283
            $aload($k[--$j]); //#24283
            $1.bpos = 0; //#24284
        } //#24284
    }; //#24284
    $1.addtobin = function() {
        $put($1.bvals, $1.bpos, $k[--$j]); //#24289
        $1.bpos = $1.bpos + 1; //#24290
        if ($1.bpos == 5) { //#24291
            $1.finaliseBIN(); //#24291
        } //#24291
    }; //#24291
    $1.ECIabc = function() {
        var _8a = $geti($1.msg, $1.i + 1, 6); //#24295
        $k[$j++] = 0; //#24295
        for (var _8b = 0, _8c = _8a.length; _8b < _8c; _8b++) { //#24295
            var _8e = $k[--$j]; //#24295
            $k[$j++] = ($f(_8e + $f($get(_8a, _8b) - 48))) * 10; //#24295
        } //#24295
        var _8g = ~~($k[--$j] / 10); //#24296
        $k[$j++] = _8g; //#24300
        if (_8g >= 40) { //#24300
            var _8i = $f($k[--$j] - 40); //#24298
            var _8j = _8i % 12769; //#24299
            $k[$j++] = (~~(_8i / 12769)) + 40; //#24299
            $k[$j++] = ~~(_8j / 113); //#24299
            $k[$j++] = _8j % 113; //#24299
        } //#24299
    }; //#24299
    $1.ECIbin = function() {
        $k[$j++] = Infinity; //#24312
        var _8m = $geti($1.msg, $1.i + 1, 6); //#24305
        $k[$j++] = 0; //#24305
        for (var _8n = 0, _8o = _8m.length; _8n < _8o; _8n++) { //#24305
            var _8q = $k[--$j]; //#24305
            $k[$j++] = ($f(_8q + $f($get(_8m, _8n) - 48))) * 10; //#24305
        } //#24305
        var _8s = ~~($k[--$j] / 10); //#24306
        $k[$j++] = _8s; //#24314
        if (_8s >= 65536) { //#24312
            var _8t = $k[--$j]; //#24307
            var _8u = _8t % 65536; //#24307
            $k[$j++] = 258; //#24307
            $k[$j++] = ~~(_8t / 65536); //#24307
            $k[$j++] = ~~(_8u / 256); //#24307
            $k[$j++] = _8u % 256; //#24307
        } else { //#24312
            var _8v = $k[--$j]; //#24309
            $k[$j++] = _8v; //#24313
            if (_8v >= 256) { //#24312
                var _8w = $k[--$j]; //#24310
                $k[$j++] = 257; //#24310
                $k[$j++] = ~~(_8w / 256); //#24310
                $k[$j++] = _8w % 256; //#24310
            } else { //#24312
                var _8x = $k[--$j]; //#24312
                $k[$j++] = 256; //#24312
                $k[$j++] = _8x; //#24312
            } //#24312
        } //#24312
        var _8y = $a(); //#24312
        for (var _8z = 0, _90 = _8y.length; _8z < _90; _8z++) { //#24317
            $k[$j++] = $get(_8y, _8z); //#24316
            $1.addtobin(); //#24316
        } //#24316
    }; //#24316
    $1.encC = function() {
        for (var _92 = 0, _93 = 1; _92 < _93; _92++) { //#24441
            if ($1.i == $1.segstart) { //#24354
                for (var _96 = 0, _97 = 1; _96 < _97; _96++) { //#24339
                    if ($1.i > $f($1.segend - 7)) { //#24324
                        $k[$j++] = 0; //#24324
                        break; //#24324
                    } //#24324
                    if ($get($1.msg, $1.segstart) != 91) { //#24325
                        $k[$j++] = 0; //#24325
                        break; //#24325
                    } //#24325
                    if ($get($1.msg, $1.segstart + 1) != 41) { //#24326
                        $k[$j++] = 0; //#24326
                        break; //#24326
                    } //#24326
                    if ($get($1.msg, $1.segstart + 2) != 62) { //#24327
                        $k[$j++] = 0; //#24327
                        break; //#24327
                    } //#24327
                    if ($get($1.msg, $1.segstart + 3) != 30) { //#24328
                        $k[$j++] = 0; //#24328
                        break; //#24328
                    } //#24328
                    var _9O = $get($1.msg, $1.segstart + 4); //#24329
                    if ((_9O < 48) || (_9O > 57)) { //#24329
                        $k[$j++] = 0; //#24329
                        break; //#24329
                    } //#24329
                    var _9R = $get($1.msg, $1.segstart + 5); //#24330
                    if ((_9R < 48) || (_9R > 57)) { //#24330
                        $k[$j++] = 0; //#24330
                        break; //#24330
                    } //#24330
                    if ($get($1.msg, $f($1.segend - 1)) != 4) { //#24331
                        $k[$j++] = 0; //#24331
                        break; //#24331
                    } //#24331
                    var _9b = $f(($f($get($1.msg, $1.segstart + 4) - 48) * 10) + $f($get($1.msg, $1.segstart + 5) - 48)); //#24333
                    $k[$j++] = _9b; //#24333
                    if ((_9b != 5) && ((_9b != 6) && (_9b != 12))) { //#24333
                        $j--; //#24333
                        $k[$j++] = $1.mac; //#24333
                        break; //#24333
                    } //#24333
                    if ($get($1.msg, $1.segstart + 6) != 29) { //#24334
                        $j--; //#24334
                        $k[$j++] = 0; //#24334
                        break; //#24334
                    } //#24334
                    if ($get($1.msg, $f($1.segend - 2)) != 30) { //#24335
                        $j--; //#24335
                        $k[$j++] = 0; //#24335
                        break; //#24335
                    } //#24335
                    var _9j = $k[--$j]; //#24336
                    $k[$j++] = _9j; //#24336
                    if (_9j == 5) { //#24336
                        $j--; //#24336
                        $k[$j++] = $1.m05; //#24336
                        break; //#24336
                    } //#24336
                    if ($k[--$j] == 6) { //#24337
                        $k[$j++] = $1.m06; //#24337
                        break; //#24337
                    } //#24337
                    $k[$j++] = $1.m12; //#24338
                    break; //#24338
                } //#24338
                $1.inmac = $k[--$j]; //#24340
                if ($1.inmac != 0) { //#24353
                    $k[$j++] = $a([$get($1.Cvals, $1.lab)]); //#24342
                    $1.addtocws(); //#24342
                    $1.mode = $1.B; //#24343
                    $k[$j++] = $a([$get($1.Bvals, $1.inmac)]); //#24344
                    $1.addtocws(); //#24344
                    if ($1.inmac == $1.mac) { //#24350
                        $k[$j++] = $a([$get($1.Bvals, $get($1.msg, $1.segstart + 4))]); //#24346
                        $1.addtocws(); //#24346
                        $k[$j++] = $a([$get($1.Bvals, $get($1.msg, $1.segstart + 5))]); //#24347
                        $1.addtocws(); //#24347
                        $1.i = $1.i + 6; //#24348
                    } else { //#24350
                        $1.i = $1.i + 7; //#24350
                    } //#24350
                    break; //#24352
                } //#24352
            } //#24352
            if ($1.i == $1.segstart) { //#24365
                if ($get($1.nDigits, $1.i) >= 2) { //#24360
                    $k[$j++] = $a([$get($1.Cvals, $1.fn1)]); //#24359
                    $1.addtocws(); //#24359
                } //#24359
                if (($get($1.msg, $1.i) == $1.fn1) && ($get($1.nDigits, $1.i + 1) >= 2)) { //#24364
                    $1.i = $1.i + 1; //#24363
                } //#24363
            } //#24363
            if ($get($1.SeventeenTen, $1.i)) { //#24375
                $k[$j++] = $a([$get($1.Cvals, $1.aim), $f(($f($get($1.msg, $1.i + 2) - 48) * 10) + $f($get($1.msg, $1.i + 3) - 48)), $f(($f($get($1.msg, $1.i + 4) - 48) * 10) + $f($get($1.msg, $1.i + 5) - 48)), $f(($f($get($1.msg, $1.i + 6) - 48) * 10) + $f($get($1.msg, $1.i + 7) - 48))]); //#24372
                $1.addtocws(); //#24372
                $1.i = $1.i + 10; //#24373
                break; //#24374
            } //#24374
            if ($get($1.DatumC, $1.i)) { //#24397
                var _B1 = $get($1.msg, $1.i); //#24377
                if ((_B1 == $1.fn1) || ((_B1 == $1.fn2) || (_B1 == $1.fn3))) { //#24393
                    $k[$j++] = $a([$get($1.Cvals, $get($1.msg, $1.i))]); //#24378
                    $1.addtocws(); //#24378
                    if ($get($1.ECI, $1.i)) { //#24383
                        $k[$j++] = Infinity; //#24380
                        $1.ECIabc(); //#24380
                        var _BE = $a(); //#24380
                        $k[$j++] = _BE; //#24380
                        $1.addtocws(); //#24380
                        $1.i = $1.i + 7; //#24381
                        break; //#24382
                    } //#24382
                    if (($get($1.msg, $1.i) == $1.fn3) && ($1.segstart != $1.i)) { //#24390
                        $1.i = $1.i + 1; //#24385
                        $1.inmac = 0; //#24386
                        $1.segstart = $1.i; //#24387
                        $1.segend = $f($1.i + $get($1.UntilEndSeg, $1.i)); //#24388
                        break; //#24389
                    } //#24389
                    $1.i = $1.i + 1; //#24391
                    break; //#24392
                } //#24392
                $k[$j++] = $a([$f(($f($get($1.msg, $1.i) - 48) * 10) + $f($get($1.msg, $1.i + 1) - 48))]); //#24394
                $1.addtocws(); //#24394
                $1.i = $1.i + 2; //#24395
                break; //#24396
            } //#24396
            if ($get($1.Binary, $1.i)) { //#24411
                if ($get($1.nDigits, $1.i + 1) > 0) { //#24407
                    if ($get($1.msg, $1.i) < 160) { //#24403
                        $k[$j++] = $a([$get($1.Cvals, $1.bsa), $get($1.Avals, $f($get($1.msg, $1.i) - 128))]); //#24401
                        $1.addtocws(); //#24401
                    } else { //#24403
                        $k[$j++] = $a([$get($1.Cvals, $1.bsb), $get($1.Bvals, $f($get($1.msg, $1.i) - 128))]); //#24403
                        $1.addtocws(); //#24403
                    } //#24403
                    $1.i = $1.i + 1; //#24405
                    break; //#24406
                } //#24406
                $k[$j++] = $a([$get($1.Cvals, $1.bin)]); //#24408
                $1.addtocws(); //#24408
                $1.mode = $1.BIN; //#24409
                break; //#24410
            } //#24410
            $1.m = $get($1.AheadA, $1.i); //#24412
            $1.n = $get($1.AheadB, $1.i); //#24412
            if ($gt($1.m, $1.n)) { //#24417
                $k[$j++] = $a([$get($1.Cvals, $1.laa)]); //#24414
                $1.addtocws(); //#24414
                $1.mode = $1.A; //#24415
                break; //#24416
            } //#24416
            if ($1.i == $1.segstart) { //#24424
                var _CP = $get($1.msg, $1.i); //#24419
                if ((_CP == 9) || ((_CP == 28) || ((_CP == 29) || (_CP == 30)))) { //#24423
                    $k[$j++] = $a([$get($1.Cvals, $1.laa)]); //#24420
                    $1.addtocws(); //#24420
                    $1.mode = $1.A; //#24421
                    break; //#24422
                } //#24422
            } //#24422
            if ($1.n > 4) { //#24429
                $k[$j++] = $a([$get($1.Cvals, $1.lab)]); //#24426
                $1.addtocws(); //#24426
                $1.mode = $1.B; //#24427
                break; //#24428
            } //#24428
            $k[$j++] = $a([$get($1.Cvals, $get($a([$1.sfb, $1.sb2, $1.sb3, $1.sb4]), $f($1.n - 1)))]); //#24430
            $1.addtocws(); //#24430
            for (var _Cm = 0, _Cn = $1.n; _Cm < _Cn; _Cm++) { //#24439
                if ($get($1.msg, $1.i) == 13) { //#24437
                    $k[$j++] = $a([$get($1.Bvals, $1.crl)]); //#24433
                    $1.addtocws(); //#24433
                    $1.i = $1.i + 2; //#24434
                } else { //#24437
                    $k[$j++] = $a([$get($1.Bvals, $get($1.msg, $1.i))]); //#24436
                    $1.addtocws(); //#24436
                    $1.i = $1.i + 1; //#24437
                } //#24437
            } //#24437
            break; //#24440
        } //#24440
    }; //#24440
    $1.encB = function() {
        for (var _D3 = 0, _D4 = 1; _D3 < _D4; _D3++) { //#24517
            $1.n = $get($1.TryC, $1.i); //#24446
            if ($1.n >= 2) { //#24464
                if ($1.n > 4) { //#24452
                    $k[$j++] = $a([$get($1.Bvals, $1.lac)]); //#24449
                    $1.addtocws(); //#24449
                    $1.mode = $1.C; //#24450
                    break; //#24451
                } //#24451
                $k[$j++] = $a([$get($1.Bvals, $get($a([$1.sfc, $1.sc2, $1.sc3, $1.sc4]), $f($1.n - 1)))]); //#24453
                $1.addtocws(); //#24453
                for (var _DQ = 0, _DR = $1.n; _DQ < _DR; _DQ++) { //#24462
                    if ($get($1.msg, $1.i) < 0) { //#24460
                        $k[$j++] = $a([$get($1.Cvals, $get($1.msg, $1.i))]); //#24456
                        $1.addtocws(); //#24456
                        $1.i = $1.i + 1; //#24457
                    } else { //#24460
                        $k[$j++] = $a([$f(($f($get($1.msg, $1.i) - 48) * 10) + $f($get($1.msg, $1.i + 1) - 48))]); //#24459
                        $1.addtocws(); //#24459
                        $1.i = $1.i + 2; //#24460
                    } //#24460
                } //#24460
                break; //#24463
            } //#24463
            if ($get($1.DatumB, $1.i)) { //#24494
                var _Dp = $get($1.msg, $1.i); //#24466
                if ((_Dp == $1.fn1) || ((_Dp == $1.fn2) || (_Dp == $1.fn3))) { //#24483
                    $k[$j++] = $a([$get($1.Bvals, $get($1.msg, $1.i))]); //#24467
                    $1.addtocws(); //#24467
                    if ($get($1.ECI, $1.i)) { //#24472
                        $k[$j++] = Infinity; //#24469
                        $1.ECIabc(); //#24469
                        var _E2 = $a(); //#24469
                        $k[$j++] = _E2; //#24469
                        $1.addtocws(); //#24469
                        $1.i = $1.i + 7; //#24470
                        break; //#24471
                    } //#24471
                    if (($get($1.msg, $1.i) == $1.fn3) && ($1.i != $1.segstart)) { //#24480
                        $1.i = $1.i + 1; //#24474
                        $1.mode = $1.C; //#24475
                        $1.inmac = 0; //#24476
                        $1.segstart = $1.i; //#24477
                        $1.segend = $f($1.i + $get($1.UntilEndSeg, $1.i)); //#24478
                        break; //#24479
                    } //#24479
                    $1.i = $1.i + 1; //#24481
                    break; //#24482
                } //#24482
                if (($get($1.msg, $1.i) == 13) && ($1.i < ($1.msglen - 1))) { //#24490
                    if ($get($1.msg, $1.i + 1) == 10) { //#24489
                        $k[$j++] = $a([$get($1.Bvals, $1.crl)]); //#24486
                        $1.addtocws(); //#24486
                        $1.i = $1.i + 2; //#24487
                        break; //#24488
                    } //#24488
                } //#24488
                $k[$j++] = $a([$get($1.Bvals, $get($1.msg, $1.i))]); //#24491
                $1.addtocws(); //#24491
                $1.i = $1.i + 1; //#24492
                break; //#24493
            } //#24493
            if ($get($1.Binary, $1.i)) { //#24508
                if ($get($1.DatumB, $1.i + 1)) { //#24504
                    if ($get($1.msg, $1.i) < 160) { //#24500
                        $k[$j++] = $a([$get($1.Bvals, $1.bsa), $get($1.Avals, $f($get($1.msg, $1.i) - 128))]); //#24498
                        $1.addtocws(); //#24498
                    } else { //#24500
                        $k[$j++] = $a([$get($1.Bvals, $1.bsb), $get($1.Bvals, $f($get($1.msg, $1.i) - 128))]); //#24500
                        $1.addtocws(); //#24500
                    } //#24500
                    $1.i = $1.i + 1; //#24502
                    break; //#24503
                } //#24503
                $k[$j++] = $a([$get($1.Bvals, $1.bin)]); //#24505
                $1.addtocws(); //#24505
                $1.mode = $1.BIN; //#24506
                break; //#24507
            } //#24507
            if ($get($1.AheadA, $1.i) == 1) { //#24513
                $k[$j++] = $a([$get($1.Bvals, $1.sfa), $get($1.Avals, $get($1.msg, $1.i))]); //#24510
                $1.addtocws(); //#24510
                $1.i = $1.i + 1; //#24511
                break; //#24512
            } //#24512
            $k[$j++] = $a([$get($1.Bvals, $1.laa)]); //#24514
            $1.addtocws(); //#24514
            $1.mode = $1.A; //#24515
            break; //#24516
        } //#24516
    }; //#24516
    $1.encA = function() {
        for (var _FR = 0, _FS = 1; _FR < _FS; _FR++) { //#24595
            $1.n = $get($1.TryC, $1.i); //#24522
            if ($1.n >= 2) { //#24540
                if ($1.n > 4) { //#24528
                    $k[$j++] = $a([$get($1.Avals, $1.lac)]); //#24525
                    $1.addtocws(); //#24525
                    $1.mode = $1.C; //#24526
                    break; //#24527
                } //#24527
                $k[$j++] = $a([$get($1.Avals, $get($a([$1.sfc, $1.sc2, $1.sc3, $1.sc4]), $f($1.n - 1)))]); //#24529
                $1.addtocws(); //#24529
                for (var _Fo = 0, _Fp = $1.n; _Fo < _Fp; _Fo++) { //#24538
                    if ($get($1.msg, $1.i) < 0) { //#24536
                        $k[$j++] = $a([$get($1.Cvals, $get($1.msg, $1.i))]); //#24532
                        $1.addtocws(); //#24532
                        $1.i = $1.i + 1; //#24533
                    } else { //#24536
                        $k[$j++] = $a([$f(($f($get($1.msg, $1.i) - 48) * 10) + $f($get($1.msg, $1.i + 1) - 48))]); //#24535
                        $1.addtocws(); //#24535
                        $1.i = $1.i + 2; //#24536
                    } //#24536
                } //#24536
                break; //#24539
            } //#24539
            if ($get($1.DatumA, $1.i)) { //#24563
                var _GD = $get($1.msg, $1.i); //#24542
                if ((_GD == $1.fn1) || ((_GD == $1.fn2) || (_GD == $1.fn3))) { //#24559
                    $k[$j++] = $a([$get($1.Avals, $get($1.msg, $1.i))]); //#24543
                    $1.addtocws(); //#24543
                    if ($get($1.ECI, $1.i)) { //#24548
                        $k[$j++] = Infinity; //#24545
                        $1.ECIabc(); //#24545
                        var _GQ = $a(); //#24545
                        $k[$j++] = _GQ; //#24545
                        $1.addtocws(); //#24545
                        $1.i = $1.i + 7; //#24546
                        break; //#24547
                    } //#24547
                    if (($get($1.msg, $1.i) == $1.fn3) && ($1.i != $1.segstart)) { //#24556
                        $1.i = $1.i + 1; //#24550
                        $1.mode = $1.C; //#24551
                        $1.inmac = 0; //#24552
                        $1.segstart = $1.i; //#24553
                        $1.segend = $f($1.i + $get($1.UntilEndSeg, $1.i)); //#24554
                        break; //#24555
                    } //#24555
                    $1.i = $1.i + 1; //#24557
                    break; //#24558
                } //#24558
                $k[$j++] = $a([$get($1.Avals, $get($1.msg, $1.i))]); //#24560
                $1.addtocws(); //#24560
                $1.i = $1.i + 1; //#24561
                break; //#24562
            } //#24562
            if ($get($1.Binary, $1.i)) { //#24577
                if ($get($1.DatumA, $1.i + 1)) { //#24573
                    if ($get($1.msg, $1.i) < 160) { //#24569
                        $k[$j++] = $a([$get($1.Avals, $1.bsa), $get($1.Avals, $f($get($1.msg, $1.i) - 128))]); //#24567
                        $1.addtocws(); //#24567
                    } else { //#24569
                        $k[$j++] = $a([$get($1.Avals, $1.bsb), $get($1.Bvals, $f($get($1.msg, $1.i) - 128))]); //#24569
                        $1.addtocws(); //#24569
                    } //#24569
                    $1.i = $1.i + 1; //#24571
                    break; //#24572
                } //#24572
                $k[$j++] = $a([$get($1.Avals, $1.bin)]); //#24574
                $1.addtocws(); //#24574
                $1.mode = $1.BIN; //#24575
                break; //#24576
            } //#24576
            $1.n = $get($1.AheadB, $1.i); //#24578
            if ($1.n > 6) { //#24583
                $k[$j++] = $a([$get($1.Avals, $1.lab)]); //#24580
                $1.addtocws(); //#24580
                $1.mode = $1.B; //#24581
                break; //#24582
            } //#24582
            $k[$j++] = $a([$get($1.Avals, $get($a([$1.sfb, $1.sb2, $1.sb3, $1.sb4, $1.sb5, $1.sb6]), $f($1.n - 1)))]); //#24584
            $1.addtocws(); //#24584
            for (var _Hg = 0, _Hh = $1.n; _Hg < _Hh; _Hg++) { //#24593
                if ($get($1.msg, $1.i) == 13) { //#24591
                    $k[$j++] = $a([$get($1.Bvals, $1.crl)]); //#24587
                    $1.addtocws(); //#24587
                    $1.i = $1.i + 2; //#24588
                } else { //#24591
                    $k[$j++] = $a([$get($1.Bvals, $get($1.msg, $1.i))]); //#24590
                    $1.addtocws(); //#24590
                    $1.i = $1.i + 1; //#24591
                } //#24591
            } //#24591
            break; //#24594
        } //#24594
    }; //#24594
    $1.encBIN = function() {
        for (var _Hx = 0, _Hy = 1; _Hx < _Hy; _Hx++) { //#24657
            $1.n = $get($1.TryC, $1.i); //#24600
            if ($1.n >= 2) { //#24619
                $k[$j++] = Infinity; //#24602
                $1.finaliseBIN(); //#24602
                var _I3 = $a(); //#24602
                $k[$j++] = _I3; //#24602
                $1.addtocws(); //#24602
                if ($1.n > 7) { //#24607
                    $k[$j++] = $a([$get($1.BINvals, $1.tmc)]); //#24604
                    $1.addtocws(); //#24604
                    $1.mode = $1.C; //#24605
                    break; //#24606
                } //#24606
                $k[$j++] = $a([$get($1.BINvals, $get($a([$1.sc2, $1.sc3, $1.sc4, $1.sc5, $1.sc6, $1.sc7]), $f($1.n - 2)))]); //#24608
                $1.addtocws(); //#24608
                for (var _IN = 0, _IO = $1.n; _IN < _IO; _IN++) { //#24617
                    if ($get($1.msg, $1.i) < 0) { //#24615
                        $k[$j++] = $a([$get($1.Cvals, $get($1.msg, $1.i))]); //#24611
                        $1.addtocws(); //#24611
                        $1.i = $1.i + 1; //#24612
                    } else { //#24615
                        $k[$j++] = $a([$f(($f($get($1.msg, $1.i) - 48) * 10) + $f($get($1.msg, $1.i + 1) - 48))]); //#24614
                        $1.addtocws(); //#24614
                        $1.i = $1.i + 2; //#24615
                    } //#24615
                } //#24615
                break; //#24618
            } //#24618
            if (($get($1.ECI, $1.i) && $get($1.Binary, $1.i + 7))) { //#24625
                $k[$j++] = Infinity; //#24621
                $1.ECIbin(); //#24621
                var _In = $a(); //#24621
                $k[$j++] = _In; //#24621
                $1.addtocws(); //#24621
                $1.i = $1.i + 7; //#24622
                if ($1.i == $1.msglen) { //#24623
                    $k[$j++] = Infinity; //#24623
                    $1.finaliseBIN(); //#24623
                    var _Ir = $a(); //#24623
                    $k[$j++] = _Ir; //#24623
                    $1.addtocws(); //#24623
                } //#24623
                break; //#24624
            } //#24624
            if ($get($1.msg, $1.i) >= 0) { //#24635
                if (((($get($1.Binary, $1.i) || $get($1.Binary, $1.i + 1)) || $get($1.Binary, $1.i + 2)) || $get($1.Binary, $1.i + 3)) || ($get($1.ECI, $1.i + 1) && $get($1.Binary, $1.i + 8))) { //#24634
                    $k[$j++] = Infinity; //#24630
                    $k[$j++] = $get($1.msg, $1.i); //#24630
                    $1.addtobin(); //#24630
                    var _JG = $a(); //#24630
                    $k[$j++] = _JG; //#24630
                    $1.addtocws(); //#24630
                    $1.i = $1.i + 1; //#24631
                    if ($1.i == $1.msglen) { //#24632
                        $k[$j++] = Infinity; //#24632
                        $1.finaliseBIN(); //#24632
                        var _JK = $a(); //#24632
                        $k[$j++] = _JK; //#24632
                        $1.addtocws(); //#24632
                    } //#24632
                    break; //#24633
                } //#24633
            } //#24633
            $k[$j++] = Infinity; //#24636
            $1.finaliseBIN(); //#24636
            var _JL = $a(); //#24636
            $k[$j++] = _JL; //#24636
            $1.addtocws(); //#24636
            if ($1.i != ($1.msglen - 1)) { //#24655
                if (($get($1.msg, $1.i) == $1.fn3) && ($1.i != $1.segstart)) { //#24646
                    $k[$j++] = $a([$get($1.BINvals, $1.tms)]); //#24639
                    $1.addtocws(); //#24639
                    $1.i = $1.i + 1; //#24640
                    $1.mode = $1.C; //#24641
                    $1.inmac = 0; //#24642
                    $1.segstart = $1.i; //#24643
                    $1.segend = $f($1.i + $get($1.UntilEndSeg, $1.i)); //#24644
                    break; //#24645
                } //#24645
                if ($gt($get($1.AheadA, $1.i), $get($1.AheadB, $1.i))) { //#24652
                    $k[$j++] = $a([$get($1.BINvals, $1.tma)]); //#24648
                    $1.addtocws(); //#24648
                    $1.mode = $1.A; //#24649
                } else { //#24652
                    $k[$j++] = $a([$get($1.BINvals, $1.tmb)]); //#24651
                    $1.addtocws(); //#24651
                    $1.mode = $1.B; //#24652
                } //#24652
                break; //#24654
            } //#24654
            break; //#24656
        } //#24656
    }; //#24656
    $1.cws = $a(($1.msglen * 2) + 1); //#24660
    $1.mode = $1.C; //#24661
    $1.bvals = $a(5); //#24662
    $1.bpos = 0; //#24662
    $1.inmac = 0; //#24663
    $1.segstart = 0; //#24663
    $1.segend = $get($1.UntilEndSeg, 0); //#24663
    $1.i = 0; //#24664
    $1.j = 0; //#24664
    for (;;) { //#24677
        if ($1.i >= $1.msglen) { //#24665
            break; //#24665
        } //#24665
        if ($1.inmac != 0) { //#24675
            if (($1.inmac != $1.mac) && ($1.i == $f($1.segend - 2))) { //#24670
                $1.i = $1.i + 2; //#24668
                if ($1.i >= $1.msglen) { //#24669
                    break; //#24669
                } //#24669
            } //#24669
            if (($1.inmac == $1.mac) && ($1.i == $f($1.segend - 1))) { //#24674
                $1.i = $1.i + 1; //#24672
                if ($1.i >= $1.msglen) { //#24673
                    break; //#24673
                } //#24673
            } //#24673
        } //#24673
        if ($1[$get($a(['encA', 'encB', 'encC', 'encBIN']), $1.mode)]() === true) {
            break;
        } //#24676
    } //#24676
    $1.cws = $geti($1.cws, 0, $1.j); //#24678
    $1.nd = $1.cws.length; //#24681
    $1.minarea = (((($1.nd + 3) + (~~($1.nd / 2))) * 9) + 2) * 2; //#24682
    if ($1.ratio != -1) { //#24710
        $1.hgt = Math.sqrt($1.minarea / $1.ratio); //#24684
        $1.wid = Math.sqrt($1.minarea * $1.ratio); //#24685
        $1.h = ~~$1.hgt; //#24686
        $1.w = ~~$1.wid; //#24686
        if ((($1.h + $1.w) % 2) == 1) { //#24700
            if (($1.h * $1.w) < $1.minarea) { //#24688
                $1.h = $1.h + 1; //#24688
                $1.w = $1.w + 1; //#24688
            } //#24688
        } else { //#24700
            if (($1.hgt * $1.w) < ($1.wid * $1.h)) { //#24700
                $1.w = $1.w + 1; //#24691
                if (($1.h * $1.w) < $1.minarea) { //#24695
                    $1.w = $1.w - 1; //#24693
                    $1.h = $1.h + 1; //#24693
                    if (($1.h * $1.w) < $1.minarea) { //#24694
                        $1.w = $1.w + 2; //#24694
                    } //#24694
                } //#24694
            } else { //#24700
                $1.h = $1.h + 1; //#24697
                if (($1.h * $1.w) < $1.minarea) { //#24701
                    $1.h = $1.h - 1; //#24699
                    $1.w = $1.w + 1; //#24699
                    if (($1.h * $1.w) < $1.minarea) { //#24700
                        $1.h = $1.h + 2; //#24700
                    } //#24700
                } //#24700
            } //#24700
        } //#24700
        $1.rows = $1.h; //#24704
        $1.columns = $1.w; //#24704
    } else { //#24710
        if ($1.columns == -1) { //#24708
            var _LA = ~~((($1.minarea + $1.rows) - 1) / $1.rows); //#24707
            $k[$j++] = 'columns'; //#24707
            $k[$j++] = _LA; //#24707
            if (((_LA + $1.rows) % 2) == 0) { //#24707
                var _LC = $k[--$j]; //#24707
                $k[$j++] = $f(_LC + 1); //#24707
            } //#24707
            var _LD = $k[--$j]; //#24707
            $1[$k[--$j]] = _LD; //#24707
        } //#24707
        if ($1.rows == -1) { //#24711
            var _LJ = ~~((($1.minarea + $1.columns) - 1) / $1.columns); //#24710
            $k[$j++] = 'rows'; //#24710
            $k[$j++] = _LJ; //#24710
            if (((_LJ + $1.columns) % 2) == 0) { //#24710
                var _LL = $k[--$j]; //#24710
                $k[$j++] = $f(_LL + 1); //#24710
            } //#24710
            var _LM = $k[--$j]; //#24710
            $1[$k[--$j]] = _LM; //#24710
        } //#24710
    } //#24710
    $1.ndots = ~~(($1.rows * $1.columns) / 2); //#24715
    for (;;) { //#24719
        var _LR = $1.nd + 1; //#24717
        if ((((_LR + ((~~(_LR / 2)) + 3)) * 9) + 2) > $1.ndots) { //#24717
            break; //#24717
        } //#24717
        $1.nd = $1.nd + 1; //#24718
    } //#24718
    $1.nc = (~~($1.nd / 2)) + 3; //#24720
    $1.nw = $1.nd + $1.nc; //#24721
    $1.rembits = $1.ndots - (($1.nw * 9) + 2); //#24722
    if ($1.nd > $1.cws.length) { //#24729
        $k[$j++] = Infinity; //#24727
        $aload($1.cws); //#24725
        var _Le = ($1.mode == $1.BIN) ? 109 : 106; //#24726
        $k[$j++] = _Le; //#24727
        for (var _Lh = 0, _Li = ($1.nd - $1.cws.length) - 1; _Lh < _Li; _Lh++) { //#24727
            $k[$j++] = 106; //#24727
        } //#24727
        $1.cws = $a(); //#24727
    } //#24728
    var _Ll = $get($1.options, 'debugcws') !== undefined; //#24731
    if (_Ll) { //#24731
        $k[$j++] = 'bwipp.debugcws#24731'; //#24731
        $k[$j++] = $1.cws; //#24731
        bwipp_raiseerror(); //#24731
    } //#24731
    if (!bwipp_dotcode.$ctx._24760) { //#24760
        (function() { //#24760
            var $ctx = Object.create($1); //#24760
            $ctx.encs = $a
            for (var _Lo in $ctx) {
                $ctx.hasOwnProperty(_Lo) && (bwipp_dotcode.$ctx[_Lo] = $ctx[_Lo]);
            } //#24759
            bwipp_dotcode.$ctx._24760 = 1; //#24759
        })(); //#24759
    } //#24759
    if (($1.rows % 2) == 0) { //#24780
        $1.sixedges = $a([$a([$1.columns - 1, $1.rows - 2]), $a([0, $1.rows - 2]), $a([$1.columns - 2, $1.rows - 1]), $a([1, $1.rows - 1]), $a([$1.columns - 1, 0]), $a([0, 0])]); //#24771
    } else { //#24780
        $1.sixedges = $a([$a([$1.columns - 2, 0]), $a([$1.columns - 2, $1.rows - 1]), $a([$1.columns - 1, 1]), $a([$1.columns - 1, $1.rows - 2]), $a([0, 0]), $a([0, $1.rows - 1])]); //#24780
    } //#24780
    $1.dmv = function() {
        var _MJ = $k[--$j]; //#24783
        var _MK = $k[--$j]; //#24783
        $k[$j++] = $f(_MK + (_MJ * $1.columns)); //#24783
    }; //#24783
    $1.outline = $a($1.rows * $1.columns); //#24786
    for (var _MQ = 0, _MP = $1.rows - 1; _MQ <= _MP; _MQ += 1) { //#24793
        $1.y = _MQ; //#24788
        for (var _MT = 0, _MS = $1.columns - 1; _MT <= _MS; _MT += 1) { //#24792
            $1.x = _MT; //#24790
            $k[$j++] = $1.outline; //#24791
            $k[$j++] = $1.x; //#24791
            $k[$j++] = $1.y; //#24791
            $1.dmv(); //#24791
            var _MZ = $k[--$j]; //#24791
            $put($k[--$j], _MZ, (($1.x + $1.y) % 2) - 1); //#24791
        } //#24791
    } //#24791
    var _Mb = $1.sixedges; //#24794
    for (var _Mc = 0, _Md = _Mb.length; _Mc < _Md; _Mc++) { //#24796
        $k[$j++] = $1.outline; //#24795
        $aload($get(_Mb, _Mc)); //#24795
        $1.dmv(); //#24795
        var _Mg = $k[--$j]; //#24795
        $put($k[--$j], _Mg, 1); //#24795
    } //#24795
    $1.clearcol = function() {
        $1.x = $k[--$j]; //#24799
        $k[$j++] = true; //#24803
        for (var _Mm = $1.x & 1, _Ml = $1.rows - 1; _Mm <= _Ml; _Mm += 2) { //#24803
            $k[$j++] = $1.x; //#24802
            $k[$j++] = _Mm; //#24802
            $1.dmv(); //#24802
            if ($get($1.sym, $k[--$j]) == 1) { //#24802
                $j--; //#24802
                $k[$j++] = false; //#24802
                break; //#24802
            } //#24802
        } //#24802
    }; //#24802
    $1.clearrow = function() {
        $1.y = $k[--$j]; //#24807
        $k[$j++] = true; //#24811
        for (var _Mv = $1.y & 1, _Mu = $1.columns - 1; _Mv <= _Mu; _Mv += 2) { //#24811
            $k[$j++] = _Mv; //#24810
            $k[$j++] = $1.y; //#24810
            $1.dmv(); //#24810
            if ($get($1.sym, $k[--$j]) == 1) { //#24810
                $j--; //#24810
                $k[$j++] = false; //#24810
                break; //#24810
            } //#24810
        } //#24810
    }; //#24810
    $1.evalsymbol = function() {
        $1.sym = $k[--$j]; //#24816
        $1.worst = 9999999; //#24819
        var _N5 = $a([$a(['x', 0]), $a(['x', 1]), $a(['y', 0]), $a(['y', 1])]); //#24820
        for (var _N6 = 0, _N7 = _N5.length; _N6 < _N7; _N6++) { //#24838
            $aload($get(_N5, _N6)); //#24821
            $1.fl = $k[--$j]; //#24821
            $1.dir = $k[--$j]; //#24821
            $1.sum = 0; //#24822
            $1.first = -1; //#24822
            $1.last = -1; //#24822
            var _NC = $eq($1.dir, 'x') ? $1.columns : $1.rows; //#24823
            for (var _NE = 0, _ND = _NC - 1; _NE <= _ND; _NE += 1) { //#24834
                $1[$1.dir] = _NE; //#24824
                var _NG = $1.sym; //#24825
                var _NI = $1[$1.dir]; //#24826
                var _NK = $eq($1.dir, 'x') ? $1.rows : $1.columns; //#24827
                var _NN = (_NK - 1) * $1.fl; //#24828
                if ($eq($1.dir, 'y')) { //#24828
                    var _ = _NN; //#24828
                    _NN = _NI; //#24828
                    _NI = _; //#24828
                } //#24828
                $k[$j++] = _NG; //#24829
                $k[$j++] = _NI; //#24829
                $k[$j++] = _NN; //#24829
                $1.dmv(); //#24829
                var _NO = $k[--$j]; //#24829
                if ($get($k[--$j], _NO) == 1) { //#24833
                    if ($1.first == -1) { //#24830
                        $1.first = $1[$1.dir]; //#24830
                    } //#24830
                    $1.last = $1[$1.dir]; //#24831
                    $1.sum = $1.sum + 1; //#24832
                } //#24832
            } //#24832
            var _Nb = $eq($1.dir, 'x') ? $1.rows : $1.columns; //#24836
            var _Nc = ($f($f($1.sum + $1.last) - $1.first)) * _Nb; //#24837
            $k[$j++] = _Nc; //#24837
            if (_Nc < $1.worst) { //#24837
                $1.worst = $k[--$j]; //#24837
            } else { //#24837
                $j--; //#24837
            } //#24837
        } //#24837
        $1.pen = 0; //#24840
        if ((($1.rows % 2) == 1) || ($1.rows <= 12)) { //#24858
            $1.sum = 0; //#24846
            $1.p = 0; //#24846
            for (var _Nj = 1, _Ni = $1.columns - 2; _Nj <= _Ni; _Nj += 1) { //#24856
                $k[$j++] = _Nj; //#24848
                $1.clearcol(); //#24848
                if ($k[--$j]) { //#24854
                    $1.sum = $1.sum + 1; //#24849
                    $k[$j++] = 'p'; //#24850
                    if ($1.sum == 1) { //#24850
                        $k[$j++] = $1.rows; //#24850
                    } else { //#24850
                        $k[$j++] = $1.p * $1.rows; //#24850
                    } //#24850
                    var _Nq = $k[--$j]; //#24850
                    $1[$k[--$j]] = _Nq; //#24850
                } else { //#24854
                    $1.sum = 0; //#24852
                    $1.pen = $1.pen + $1.p; //#24853
                    $1.p = 0; //#24854
                } //#24854
            } //#24854
            $1.pen = $1.pen + $1.p; //#24857
        } //#24857
        if ((($1.rows % 2) == 0) || ($1.columns <= 12)) { //#24876
            $1.sum = 0; //#24864
            $1.p = 0; //#24864
            for (var _O0 = 1, _Nz = $1.rows - 2; _O0 <= _Nz; _O0 += 1) { //#24874
                $k[$j++] = _O0; //#24866
                $1.clearrow(); //#24866
                if ($k[--$j]) { //#24872
                    $1.sum = $1.sum + 1; //#24867
                    $k[$j++] = 'p'; //#24868
                    if ($1.sum == 1) { //#24868
                        $k[$j++] = $1.columns; //#24868
                    } else { //#24868
                        $k[$j++] = $1.p * $1.columns; //#24868
                    } //#24868
                    var _O7 = $k[--$j]; //#24868
                    $1[$k[--$j]] = _O7; //#24868
                } else { //#24872
                    $1.sum = 0; //#24870
                    $1.pen = $1.pen + $1.p; //#24871
                    $1.p = 0; //#24872
                } //#24872
            } //#24872
            $1.pen = $1.pen + $1.p; //#24875
        } //#24875
        $k[$j++] = Infinity; //#24886
        for (var _OE = 0, _OF = ($1.columns + 4) * 2; _OE < _OF; _OE++) { //#24880
            $k[$j++] = 0; //#24880
        } //#24880
        for (var _OJ = 0, _OK = $1.columns, _OI = $1.sym.length - 1; _OK < 0 ? _OJ >= _OI : _OJ <= _OI; _OJ += _OK) { //#24885
            $k[$j++] = 0; //#24883
            $k[$j++] = 0; //#24883
            $aload($geti($1.sym, _OJ, $1.columns)); //#24883
            $k[$j++] = 0; //#24884
            $k[$j++] = 0; //#24884
        } //#24884
        for (var _OP = 0, _OQ = ($1.columns + 4) * 2; _OP < _OQ; _OP++) { //#24886
            $k[$j++] = 0; //#24886
        } //#24886
        $1.symp = $a(); //#24886
        $1.columns = $1.columns + 4; //#24890
        $1.rows = $1.rows + 4; //#24891
        $1.sum = 0; //#24892
        for (var _OW = 2, _OV = $1.rows - 3; _OW <= _OV; _OW += 1) { //#24910
            $1.y = _OW; //#24894
            for (var _Oa = ($1.y & 1) + 2, _OZ = $1.columns - 3; _Oa <= _OZ; _Oa += 2) { //#24909
                $1.x = _Oa; //#24896
                for (var _Ob = 0, _Oc = 1; _Ob < _Oc; _Ob++) { //#24908
                    $k[$j++] = $1.symp; //#24898
                    $k[$j++] = $1.x - 1; //#24898
                    $k[$j++] = $1.y - 1; //#24898
                    $1.dmv(); //#24898
                    var _Og = $k[--$j]; //#24898
                    if ($get($k[--$j], _Og) == 1) { //#24898
                        break; //#24898
                    } //#24898
                    $k[$j++] = $1.symp; //#24899
                    $k[$j++] = $1.x + 1; //#24899
                    $k[$j++] = $1.y - 1; //#24899
                    $1.dmv(); //#24899
                    var _Om = $k[--$j]; //#24899
                    if ($get($k[--$j], _Om) == 1) { //#24899
                        break; //#24899
                    } //#24899
                    $k[$j++] = $1.symp; //#24900
                    $k[$j++] = $1.x - 1; //#24900
                    $k[$j++] = $1.y + 1; //#24900
                    $1.dmv(); //#24900
                    var _Os = $k[--$j]; //#24900
                    if ($get($k[--$j], _Os) == 1) { //#24900
                        break; //#24900
                    } //#24900
                    $k[$j++] = $1.symp; //#24901
                    $k[$j++] = $1.x + 1; //#24901
                    $k[$j++] = $1.y + 1; //#24901
                    $1.dmv(); //#24901
                    var _Oy = $k[--$j]; //#24901
                    if ($get($k[--$j], _Oy) == 1) { //#24901
                        break; //#24901
                    } //#24901
                    $k[$j++] = $1.symp; //#24902
                    $k[$j++] = $1.x; //#24902
                    $k[$j++] = $1.y; //#24902
                    $1.dmv(); //#24902
                    var _P4 = $k[--$j]; //#24902
                    if ($get($k[--$j], _P4) == 0) { //#24902
                        $1.sum = $1.sum + 1; //#24902
                        break; //#24902
                    } //#24902
                    $k[$j++] = $1.symp; //#24903
                    $k[$j++] = $1.x - 2; //#24903
                    $k[$j++] = $1.y; //#24903
                    $1.dmv(); //#24903
                    var _PB = $k[--$j]; //#24903
                    if ($get($k[--$j], _PB) == 1) { //#24903
                        break; //#24903
                    } //#24903
                    $k[$j++] = $1.symp; //#24904
                    $k[$j++] = $1.x; //#24904
                    $k[$j++] = $1.y - 2; //#24904
                    $1.dmv(); //#24904
                    var _PH = $k[--$j]; //#24904
                    if ($get($k[--$j], _PH) == 1) { //#24904
                        break; //#24904
                    } //#24904
                    $k[$j++] = $1.symp; //#24905
                    $k[$j++] = $1.x + 2; //#24905
                    $k[$j++] = $1.y; //#24905
                    $1.dmv(); //#24905
                    var _PN = $k[--$j]; //#24905
                    if ($get($k[--$j], _PN) == 1) { //#24905
                        break; //#24905
                    } //#24905
                    $k[$j++] = $1.symp; //#24906
                    $k[$j++] = $1.x; //#24906
                    $k[$j++] = $1.y + 2; //#24906
                    $1.dmv(); //#24906
                    var _PT = $k[--$j]; //#24906
                    if ($get($k[--$j], _PT) == 1) { //#24906
                        break; //#24906
                    } //#24906
                    $1.sum = $1.sum + 1; //#24907
                } //#24907
            } //#24907
        } //#24907
        $1.columns = $1.columns - 4; //#24911
        $1.rows = $1.rows - 4; //#24912
        if ($1.worst == 0) { //#24917
            $k[$j++] = -99999; //#24915
        } else { //#24917
            $k[$j++] = $f(($f($1.worst - ($1.sum * $1.sum))) - $1.pen); //#24917
        } //#24917
    }; //#24917
    $k[$j++] = Infinity; //#24923
    $k[$j++] = 1; //#24923
    for (var _Pe = 0, _Pf = 112; _Pe < _Pf; _Pe++) { //#24923
        var _Pg = $k[--$j]; //#24923
        $k[$j++] = _Pg; //#24923
        $k[$j++] = (_Pg * 3) % 113; //#24923
    } //#24923
    $1.rsalog = $a(); //#24923
    $1.step = (~~($1.nw / 112)) + 1; //#24924
    $1.offset = function() {
        var _Pk = $k[--$j]; //#24925
        $k[$j++] = $f((_Pk * $1.step) + $1.start); //#24925
    }; //#24925
    $1.bestscore = -99999999; //#24933
    $k[$j++] = 'masks'; //#24938
    if ($1.mask != -1) { //#24937
        $k[$j++] = $a([$1.mask]); //#24935
    } else { //#24937
        if ($1.fast) { //#24937
            $k[$j++] = $a([3, 2, 1, 0]); //#24937
        } else { //#24937
            $k[$j++] = $a([0, 1, 2, 3]); //#24937
        } //#24937
    } //#24937
    var _Ps = $k[--$j]; //#24938
    $1[$k[--$j]] = _Ps; //#24938
    $1.litmasks = $a(4); //#24939
    $forall($1.masks, function() { //#25041
        $1.mask = $k[--$j]; //#24942
        $k[$j++] = Infinity; //#24948
        var _Q1 = $1.cws; //#24947
        $k[$j++] = $1.mask; //#24947
        $k[$j++] = $get($a([0, 3, 7, 17]), $1.mask); //#24947
        $k[$j++] = 0; //#24947
        for (var _Q2 = 0, _Q3 = _Q1.length; _Q2 < _Q3; _Q2++) { //#24947
            var _Q5 = $k[--$j]; //#24947
            var _Q6 = $k[--$j]; //#24947
            $k[$j++] = $f($get(_Q1, _Q2) + _Q5) % 113; //#24947
            $k[$j++] = _Q6; //#24947
            $k[$j++] = $f(_Q5 + _Q6); //#24947
        } //#24947
        $j -= 2; //#24947
        for (var _Q8 = 0, _Q9 = $1.nc; _Q8 < _Q9; _Q8++) { //#24948
            $k[$j++] = 0; //#24948
        } //#24948
        $1.rscws = $a(); //#24948
        for (var _QD = 0, _QC = $1.step - 1; _QD <= _QC; _QD += 1) { //#24972
            $1.start = _QD; //#24951
            $1.ND = ~~((((($1.nd + 1) - $1.start) + $1.step) - 1) / $1.step); //#24952
            $1.NW = ~~((((($1.nw + 1) - $1.start) + $1.step) - 1) / $1.step); //#24953
            $1.NC = $1.NW - $1.ND; //#24954
            $k[$j++] = Infinity; //#24955
            $k[$j++] = 1; //#24955
            for (var _QP = 0, _QQ = $1.NC; _QP < _QQ; _QP++) { //#24955
                $k[$j++] = 0; //#24955
            } //#24955
            $1.coeffs = $a(); //#24955
            for (var _QU = 1, _QT = $1.NC; _QU <= _QT; _QU += 1) { //#24962
                $1.i = _QU; //#24957
                for (var _QW = $1.NC; _QW >= 1; _QW -= 1) { //#24961
                    $1.j = _QW; //#24959
                    $put($1.coeffs, $1.j, ($f($f($get($1.coeffs, $1.j) + 113) - (($get($1.rsalog, $1.i) * $get($1.coeffs, $1.j - 1)) % 113))) % 113); //#24960
                } //#24960
            } //#24960
            for (var _Qk = 0, _Qj = $1.ND - 1; _Qk <= _Qj; _Qk += 1) { //#24970
                $k[$j++] = 't'; //#24964
                $k[$j++] = $1.rscws; //#24964
                $k[$j++] = _Qk; //#24964
                $1.offset(); //#24964
                var _Qm = $k[--$j]; //#24964
                var _Qo = $get($k[--$j], _Qm); //#24964
                $k[$j++] = _Qo; //#24964
                $k[$j++] = $1.rscws; //#24964
                $k[$j++] = $1.ND; //#24964
                $1.offset(); //#24964
                var _Qr = $k[--$j]; //#24964
                var _Qt = $get($k[--$j], _Qr); //#24964
                var _Qu = $k[--$j]; //#24964
                $1[$k[--$j]] = $f(_Qu + _Qt) % 113; //#24964
                for (var _Qy = 0, _Qx = $1.NC - 2; _Qy <= _Qx; _Qy += 1) { //#24968
                    $1.j = _Qy; //#24966
                    $k[$j++] = $1.rscws; //#24967
                    $k[$j++] = $1.ND + $1.j; //#24967
                    $1.offset(); //#24967
                    $k[$j++] = $1.rscws; //#24967
                    $k[$j++] = ($1.ND + $1.j) + 1; //#24967
                    $1.offset(); //#24967
                    var _R5 = $k[--$j]; //#24967
                    var _R7 = $get($k[--$j], _R5); //#24967
                    var _RC = $k[--$j]; //#24967
                    $put($k[--$j], _RC, ($f($f(_R7 + 113) - (($1.t * $get($1.coeffs, $1.j + 1)) % 113))) % 113); //#24967
                } //#24967
                $k[$j++] = $1.rscws; //#24969
                $k[$j++] = ($1.ND + $1.NC) - 1; //#24969
                $1.offset(); //#24969
                var _RL = $k[--$j]; //#24969
                $put($k[--$j], _RL, ($f(113 - (($1.t * $get($1.coeffs, $1.NC)) % 113))) % 113); //#24969
            } //#24969
            for (var _RQ = $1.ND, _RP = $1.NW - 1; _RQ <= _RP; _RQ += 1) { //#24971
                $k[$j++] = _RQ; //#24971
                $k[$j++] = $1.rscws; //#24971
                $k[$j++] = _RQ; //#24971
                $1.offset(); //#24971
                var _RT = $k[--$j]; //#24971
                var _RU = $k[--$j]; //#24971
                var _RV = $k[--$j]; //#24971
                $k[$j++] = _RU; //#24971
                $k[$j++] = _RT; //#24971
                $k[$j++] = 113; //#24971
                $k[$j++] = $1.rscws; //#24971
                $k[$j++] = _RV; //#24971
                $1.offset(); //#24971
                var _RW = $k[--$j]; //#24971
                var _RY = $get($k[--$j], _RW); //#24971
                var _RZ = $k[--$j]; //#24971
                var _Ra = $k[--$j]; //#24971
                $put($k[--$j], _Ra, $f(_RZ - _RY) % 113); //#24971
            } //#24971
        } //#24971
        $1.bits = $s($1.ndots); //#24975
        $puti($1.bits, 0, $get($a(["00", "01", "10", "11"]), $1.mask)); //#24976
        for (var _Rk = 1, _Rj = $1.nw; _Rk <= _Rj; _Rk += 1) { //#24980
            $1.i = _Rk; //#24978
            $puti($1.bits, (($1.i - 1) * 9) + 2, $get($1.encs, $get($1.rscws, $1.i))); //#24979
        } //#24979
        if ($1.rembits > 0) { //#24983
            $puti($1.bits, ($1.nw * 9) + 2, $geti("11111111111111111", 0, $1.rembits)); //#24982
        } //#24982
        var _Rx = $1.outline; //#24986
        $1.pixs = $arrcpy($a(_Rx.length), _Rx); //#24986
        $1.posx = 0; //#24987
        $k[$j++] = 'posy'; //#24988
        if (($1.rows % 2) == 0) { //#24988
            $k[$j++] = 0; //#24988
        } else { //#24988
            $k[$j++] = $1.rows - 1; //#24988
        } //#24988
        var _S2 = $k[--$j]; //#24988
        $1[$k[--$j]] = _S2; //#24988
        var _S6 = $geti($1.bits, 0, $1.bits.length - 6); //#24989
        for (var _S7 = 0, _S8 = _S6.length; _S7 < _S8; _S7++) { //#25007
            $k[$j++] = $get(_S6, _S7); //#25005
            for (;;) { //#25005
                $k[$j++] = $1.pixs; //#24991
                $k[$j++] = $1.posx; //#24991
                $k[$j++] = $1.posy; //#24991
                $1.dmv(); //#24991
                var _SD = $k[--$j]; //#24991
                if ($get($k[--$j], _SD) == -1) { //#24991
                    break; //#24991
                } //#24991
                if (($1.rows % 2) == 0) { //#25002
                    $1.posy = $1.posy + 1; //#24993
                    if ($1.posy == $1.rows) { //#24997
                        $1.posy = 0; //#24995
                        $1.posx = $1.posx + 1; //#24996
                    } //#24996
                } else { //#25002
                    $1.posx = $1.posx + 1; //#24999
                    if ($1.posx == $1.columns) { //#25003
                        $1.posx = 0; //#25001
                        $1.posy = $1.posy - 1; //#25002
                    } //#25002
                } //#25002
            } //#25002
            $k[$j++] = $1.pixs; //#25006
            $k[$j++] = $1.posx; //#25006
            $k[$j++] = $1.posy; //#25006
            $1.dmv(); //#25006
            var _SS = $k[--$j]; //#25006
            var _ST = $k[--$j]; //#25006
            $put(_ST, _SS, $f($k[--$j] - 48)); //#25006
        } //#25006
        for (var _SV = 0; _SV <= 5; _SV += 1) { //#25012
            $1.i = _SV; //#25009
            $k[$j++] = $1.pixs; //#25010
            $aload($get($1.sixedges, $1.i)); //#25010
            $1.dmv(); //#25010
            var _Se = $k[--$j]; //#25011
            $put($k[--$j], _Se, $get($1.bits, ($1.bits.length - 6) + $1.i) - 48); //#25011
        } //#25011
        $k[$j++] = 'score'; //#25015
        $k[$j++] = $1.pixs; //#25015
        $1.evalsymbol(); //#25015
        var _Sh = $k[--$j]; //#25015
        $1[$k[--$j]] = _Sh; //#25015
        if ($1.score > $1.bestscore) { //#25020
            $1.bestsym = $1.pixs; //#25017
            $1.bestscore = $1.score; //#25018
            if ($1.fast && ($1.bestscore > (~~(($1.rows * $1.columns) / 2)))) { //#25019
                return true; //#25019
            } //#25019
        } //#25019
        var _Sr = $1.pixs; //#25023
        $1.litmask = $arrcpy($a(_Sr.length), _Sr); //#25023
        for (var _Su = 0; _Su <= 5; _Su += 1) { //#25028
            $1.i = _Su; //#25025
            $k[$j++] = $1.litmask; //#25026
            $aload($get($1.sixedges, $1.i)); //#25026
            $1.dmv(); //#25026
            var _Sz = $k[--$j]; //#25027
            $put($k[--$j], _Sz, 1); //#25027
        } //#25027
        $put($1.litmasks, $1.mask, $1.litmask); //#25029
        if ($1.fast) { //#25039
            $k[$j++] = 'score'; //#25033
            $k[$j++] = $1.litmask; //#25033
            $1.evalsymbol(); //#25033
            var _T6 = $k[--$j]; //#25033
            $1[$k[--$j]] = _T6; //#25033
            if ($gt($1.score, $1.bestscore)) { //#25038
                $1.bestsym = $1.litmask; //#25035
                $1.bestscore = $1.score; //#25036
                if ($1.bestscore > (~~(($1.rows * $1.columns) / 2))) { //#25037
                    return true; //#25037
                } //#25037
            } //#25037
        } //#25037
    }); //#25037
    $1.pixs = $1.bestsym; //#25042
    if ((!$1.fast) && ($1.bestscore <= (~~(($1.rows * $1.columns) / 2)))) { //#25056
        $1.bestscore = -99999999; //#25046
        $forall($1.masks, function() { //#25054
            $1.litmask = $get($1.litmasks, $k[--$j]); //#25048
            $k[$j++] = 'score'; //#25049
            $k[$j++] = $1.litmask; //#25049
            $1.evalsymbol(); //#25049
            var _TP = $k[--$j]; //#25049
            $1[$k[--$j]] = _TP; //#25049
            if ($1.score > $1.bestscore) { //#25053
                $1.bestsym = $1.litmask; //#25051
                $1.bestscore = $1.score; //#25052
            } //#25052
        }); //#25052
        $1.pixs = $1.bestsym; //#25055
    } //#25055
    var _Tc = new Map([
        ["ren", bwipp_renmatrix],
        ["dotty", true],
        ["pixs", $1.pixs],
        ["pixx", $1.columns],
        ["pixy", $1.rows],
        ["height", ($1.rows * 2) / 72],
        ["width", ($1.columns * 2) / 72],
        ["opt", $1.options]
    ]); //#25067
    $k[$j++] = _Tc; //#25070
    if (!$1.dontdraw) { //#25070
        bwipp_renmatrix(); //#25070
    } //#25070
}

function bwipp_ultracode() {
    var $1 = Object.create(bwipp_ultracode.$ctx || (bwipp_ultracode.$ctx = {})); //#25105
    $1.dontdraw = false; //#25108
    $1.eclevel = "EC2"; //#25109
    $1.encoding = "auto"; //#25110
    $1.parse = false; //#25111
    $1.parsefnc = false; //#25112
    $1.start = 257; //#25113
    $1.link1 = 0; //#25114
    $1.raw = false; //#25115
    $1.rev = 1; //#25116
    $k[$j++] = $1; //#25118
    bwipp_processoptions(); //#25118
    $1.options = $k[--$j]; //#25118
    $1.barcode = $k[--$j]; //#25119
    var _2 = $1.rev; //#25121
    if ((_2 != 1) && (_2 != 2)) { //#25123
        $k[$j++] = 'bwipp.ultracodeInvalidRevision#25122'; //#25122
        $k[$j++] = "Valid revisions are 1 and 2"; //#25122
        bwipp_raiseerror(); //#25122
    } //#25122
    if ($1.raw) { //#25127
        $1.encoding = "raw"; //#25127
    } //#25127
    if ($eq($1.encoding, "raw")) { //#25140
        $1.dcws = $a($1.barcode.length); //#25130
        $1.i = 0; //#25131
        $1.j = 0; //#25131
        for (;;) { //#25138
            if ($1.i == $1.barcode.length) { //#25133
                break; //#25133
            } //#25133
            $1.cw = $cvi($geti($1.barcode, $1.i + 1, 3)); //#25134
            $put($1.dcws, $1.j, $1.cw); //#25135
            $1.i = $1.i + 4; //#25136
            $1.j = $1.j + 1; //#25137
        } //#25137
        $1.dcws = $geti($1.dcws, 0, $1.j); //#25139
    } //#25139
    if ($eq($1.encoding, "auto")) { //#25167
        $1.fn1 = -1; //#25146
        $1.fn3 = -2; //#25146
        var _P = new Map([
            ["parse", $1.parse],
            ["parsefnc", $1.parsefnc],
            ["FNC1", $1.fn1],
            ["FNC3", $1.fn3]
        ]); //#25151
        $1.fncvals = _P; //#25152
        $k[$j++] = 'msg'; //#25153
        $k[$j++] = $1.barcode; //#25153
        $k[$j++] = $1.fncvals; //#25153
        bwipp_parseinput(); //#25153
        var _S = $k[--$j]; //#25153
        $1[$k[--$j]] = _S; //#25153
        $1.msglen = $1.msg.length; //#25154
        $1.scr = $a([]); //#25156
        $1.scp = $a([]); //#25157
        $k[$j++] = Infinity; //#25163
        $aload($1.scr); //#25159
        $aload($1.scp); //#25160
        $forall($1.msg, function() { //#25164
            var _a = $k[--$j]; //#25162
            $k[$j++] = _a; //#25162
            if (_a == $1.fn1) { //#25162
                $j--; //#25162
                $k[$j++] = 268; //#25162
            } //#25162
            var _c = $k[--$j]; //#25163
            $k[$j++] = _c; //#25163
            if (_c == $1.fn3) { //#25163
                $j--; //#25163
                $k[$j++] = 269; //#25163
            } //#25163
        }); //#25163
        $1.dcws = $a(); //#25163
    } //#25165
    var _g = $get($1.options, 'debugcws') !== undefined; //#25169
    if (_g) { //#25169
        $k[$j++] = 'bwipp.debugcws#25169'; //#25169
        $k[$j++] = $1.dcws; //#25169
        bwipp_raiseerror(); //#25169
    } //#25169
    $1.mcc = $1.dcws.length + 3; //#25171
    $1.eclval = $get($1.eclevel, 2) - 48; //#25173
    if ($1.eclval != 0) { //#25177
        $k[$j++] = 'qcc'; //#25175
        $k[$j++] = $get($a([0, 1, 2, 4, 6, 8]), $1.eclval); //#25175
        $k[$j++] = ~~($1.mcc / 25); //#25175
        if (($1.mcc % 25) != 0) { //#25175
            var _r = $k[--$j]; //#25175
            $k[$j++] = $f(_r + 1); //#25175
        } //#25175
        var _s = $k[--$j]; //#25175
        var _t = $k[--$j]; //#25175
        $1[$k[--$j]] = $f((_t * _s) + 5); //#25175
    } else { //#25177
        $1.qcc = 3; //#25177
    } //#25177
    $1.acc = ($1.qcc - 3) + (78 * $1.link1); //#25179
    $1.tcc = $1.mcc + $1.qcc; //#25180
    if (!bwipp_ultracode.$ctx._25191) { //#25191
        (function() { //#25191
            var $ctx = Object.create($1); //#25191
            $ctx.metrics = $a([$a([2, 7, 37, 5]), $a([3, 36, 84, 13]), $a([4, 85, 161, 22]), $a([5, 142, 282, 29])]); //#25190
            for (var _14 in $ctx) {
                $ctx.hasOwnProperty(_14) && (bwipp_ultracode.$ctx[_14] = $ctx[_14]);
            } //#25190
            bwipp_ultracode.$ctx._25191 = 1; //#25190
        })(); //#25190
    } //#25190
    for (var _15 = 0; _15 <= 3; _15 += 1) { //#25203
        $1.i = _15; //#25194
        $1.m = $get($1.metrics, $1.i); //#25195
        $1.rows = $get($1.m, 0); //#25196
        $1.minc = $get($1.m, 1); //#25197
        $1.maxc = $get($1.m, 2); //#25198
        $1.mcol = $get($1.m, 3); //#25199
        $1.okay = true; //#25200
        if (($1.tcc < $1.minc) || ($1.tcc > $1.maxc)) { //#25201
            $1.okay = false; //#25201
        } //#25201
        if ($1.okay) { //#25202
            break; //#25202
        } //#25202
    } //#25202
    if (!$1.okay) { //#25207
        $k[$j++] = 'bwipp.ultracodeNoValidSymbol#25206'; //#25206
        $k[$j++] = "Maximum length exceeded or invalid content"; //#25206
        bwipp_raiseerror(); //#25206
    } //#25206
    for (var _1O = $1.mcol; _1O <= 61; _1O += 1) { //#25221
        $1.columns = _1O; //#25211
        $k[$j++] = $1.columns; //#25213
        if ($1.columns >= 15) { //#25213
            var _1R = $k[--$j]; //#25213
            $k[$j++] = $f(_1R - 1); //#25213
        } //#25213
        if ($1.columns >= 31) { //#25214
            var _1T = $k[--$j]; //#25214
            $k[$j++] = $f(_1T - 1); //#25214
        } //#25214
        if ($1.columns >= 47) { //#25215
            var _1V = $k[--$j]; //#25215
            $k[$j++] = $f(_1V - 1); //#25215
        } //#25215
        var _1Z = $f(($f(($k[--$j] * $1.rows) - 3)) - $1.tcc); //#25216
        $k[$j++] = _1Z; //#25219
        if (_1Z >= 0) { //#25219
            $1.pads = $k[--$j]; //#25217
            break; //#25218
        } //#25218
        $j--; //#25220
    } //#25220
    $1.dcc = $f($1.columns - $1.mcol); //#25222
    $k[$j++] = Infinity; //#25231
    $k[$j++] = $1.start; //#25229
    $k[$j++] = $1.mcc; //#25229
    $k[$j++] = $1.acc; //#25229
    $aload($1.dcws); //#25229
    for (var _1i = 0, _1j = $1.qcc; _1i < _1j; _1i++) { //#25230
        $k[$j++] = 0; //#25230
    } //#25230
    $k[$j++] = 0; //#25231
    $1.rsseq = $a(); //#25231
    $k[$j++] = Infinity; //#25235
    $k[$j++] = 1; //#25235
    for (var _1l = 0, _1m = 282; _1l < _1m; _1l++) { //#25235
        var _1n = $k[--$j]; //#25235
        $k[$j++] = _1n; //#25235
        $k[$j++] = (_1n * 3) % 283; //#25235
    } //#25235
    $1.rsalog = $a(); //#25235
    $1.rslog = $a(283); //#25236
    for (var _1q = 1; _1q <= 282; _1q += 1) { //#25237
        $put($1.rslog, $get($1.rsalog, _1q), _1q); //#25237
    } //#25237
    $1.rsprod = function() {
        var _1u = $k[--$j]; //#25241
        var _1v = $k[--$j]; //#25241
        $k[$j++] = _1v; //#25245
        $k[$j++] = _1u; //#25245
        if ((_1u != 0) && (_1v != 0)) { //#25244
            var _1y = $get($1.rslog, $k[--$j]); //#25242
            var _23 = $get($1.rsalog, $f(_1y + $get($1.rslog, $k[--$j])) % 282); //#25242
            $k[$j++] = _23; //#25242
        } else { //#25244
            $j -= 2; //#25244
            $k[$j++] = 0; //#25244
        } //#25244
    }; //#25244
    $1.n = $1.mcc; //#25249
    $1.k = $1.qcc; //#25249
    $k[$j++] = Infinity; //#25250
    $k[$j++] = 1; //#25250
    for (var _27 = 0, _28 = $1.k; _27 < _28; _27++) { //#25250
        $k[$j++] = 0; //#25250
    } //#25250
    $1.coeffs = $a(); //#25250
    for (var _2C = 1, _2B = $1.k; _2C <= _2B; _2C += 1) { //#25259
        $1.i = _2C; //#25252
        $put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); //#25253
        for (var _2J = $1.i - 1; _2J >= 1; _2J -= 1) { //#25257
            $1.j = _2J; //#25255
            $k[$j++] = $1.coeffs; //#25256
            $k[$j++] = $1.j; //#25256
            $k[$j++] = $get($1.coeffs, $1.j - 1); //#25256
            $k[$j++] = $get($1.coeffs, $1.j); //#25256
            $k[$j++] = $get($1.rsalog, $1.i); //#25256
            $1.rsprod(); //#25256
            var _2V = $k[--$j]; //#25256
            var _2W = $k[--$j]; //#25256
            var _2X = $k[--$j]; //#25256
            $put($k[--$j], _2X, $f(_2W + _2V) % 283); //#25256
        } //#25256
        $k[$j++] = $1.coeffs; //#25258
        $k[$j++] = 0; //#25258
        $k[$j++] = $get($1.coeffs, 0); //#25258
        $k[$j++] = $get($1.rsalog, $1.i); //#25258
        $1.rsprod(); //#25258
        var _2f = $k[--$j]; //#25258
        var _2g = $k[--$j]; //#25258
        $put($k[--$j], _2g, _2f); //#25258
    } //#25258
    $1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); //#25260
    for (var _2m = $1.coeffs.length - 1; _2m >= 0; _2m -= 2) { //#25261
        var _2n = $1.coeffs; //#25261
        $put(_2n, _2m, $f(283 - $get(_2n, _2m))); //#25261
    } //#25261
    for (var _2r = 0, _2q = $1.n - 1; _2r <= _2q; _2r += 1) { //#25270
        $1.t = $f($get($1.rsseq, _2r) + $get($1.rsseq, $1.n)) % 283; //#25265
        for (var _2z = 0, _2y = $1.k - 1; _2z <= _2y; _2z += 1) { //#25269
            $1.j = _2z; //#25267
            $put($1.rsseq, $1.n + $1.j, ($f($get($1.rsseq, ($1.n + $1.j) + 1) + ($f(283 - (($1.t * $get($1.coeffs, ($1.k - $1.j) - 1)) % 283))))) % 283); //#25268
        } //#25268
    } //#25268
    for (var _3G = $1.n, _3F = $1.n + $1.k; _3G <= _3F; _3G += 1) { //#25271
        $put($1.rsseq, _3G, $f(283 - $get($1.rsseq, _3G)) % 283); //#25271
    } //#25271
    $1.ecws = $geti($1.rsseq, $1.n, $1.k); //#25272
    var _3P = $get($1.options, 'debugecc') !== undefined; //#25274
    if (_3P) { //#25274
        $k[$j++] = 'bwipp.debugecc#25274'; //#25274
        $k[$j++] = $1.ecws; //#25274
        bwipp_raiseerror(); //#25274
    } //#25274
    if (!bwipp_ultracode.$ctx._25333) { //#25333
        (function() { //#25333
            var $ctx = Object.create($1); //#25333
            $ctx.tiles = $a([13135, 13136, 13153, 13156, 13163, 13165, 13513, 13515, 13516, 13531, 13535, 13536, 13561, 13563, 13565, 13613, 13615, 13616, 13631, 13635, 13636, 13651, 13653, 13656, 15135, 15136, 15153, 15163, 15165, 15313, 15315, 15316, 15351, 15353, 15356, 15361, 15363, 15365, 15613, 15615, 15616, 15631, 15635, 15636, 15651, 15653, 15656, 16135, 16136, 16153, 16156, 16165, 16313, 16315, 16316, 16351, 16353, 16356, 16361, 16363, 16365, 16513, 16515, 16516, 16531, 16535, 16536, 16561, 16563, 16565, 31315, 31316, 31351, 31356, 31361, 31365, 31513, 31515, 31516, 31531, 31535, 31536, 31561, 31563, 31565, 31613, 31615, 31631, 31635, 31636, 31651, 31653, 31656, 35131, 35135, 35136, 35151, 35153, 35156, 35161, 35163, 35165, 35315, 35316, 35351, 35356, 35361, 35365, 35613, 35615, 35616, 35631, 35635, 35636, 35651, 35653, 35656, 36131, 36135, 36136, 36151, 36153, 36156, 36163, 36165, 36315, 36316, 36351, 36356, 36361, 36365, 36513, 36515, 36516, 36531, 36535, 36536, 36561, 36563, 36565, 51313, 51315, 51316, 51351, 51353, 51356, 51361, 51363, 51365, 51513, 51516, 51531, 51536, 51561, 51563, 51613, 51615, 51616, 51631, 51635, 51636, 51651, 51653, 51656, 53131, 53135, 53136, 53151, 53153, 53156, 53161, 53163, 53165, 53513, 53516, 53531, 53536, 53561, 53563, 53613, 53615, 53616, 53631, 53635, 53636, 53651, 53653, 53656, 56131, 56135, 56136, 56151, 56153, 56156, 56161, 56163, 56165, 56313, 56315, 56316, 56351, 56353, 56356, 56361, 56363, 56365, 56513, 56516, 56531, 56536, 56561, 56563, 61313, 61315, 61316, 61351, 61353, 61356, 61361, 61363, 61365, 61513, 61515, 61516, 61531, 61535, 61536, 61561, 61563, 61565, 61615, 61631, 61635, 61651, 61653, 63131, 63135, 63136, 63151, 63153, 63156, 63161, 63163, 63165, 63513, 63515, 63516, 63531, 63535, 63536, 63561, 63563, 63565, 63613, 63615, 63631, 63635, 63651, 63653, 65131, 65135, 65136, 65151, 65153, 65156, 65161, 65163, 65165, 65313, 65315, 65316, 65351, 65353, 65356, 65361, 65363, 65365, 65613, 65615, 65631, 65635, 65651, 65653, 56565, 51515]); //#25307
            $ctx.dccurev1 = $a([51363, 51563, 51653, 53153, 53163, 53513, 53563, 53613, 53653, 56153, 56163, 56313, 56353, 56363, 56513, 56563, 51316, 51356, 51536, 51616, 53156, 53516, 53536, 53616, 53636, 53656, 56136, 56156, 56316, 56356, 56516, 56536]); //#25314
            $ctx.dcclrev1 = $a([61351, 61361, 61531, 61561, 61631, 61651, 63131, 63151, 63161, 63531, 63561, 63631, 65131, 65161, 65351, 65631, 31351, 31361, 31531, 31561, 31631, 31651, 35131, 35151, 35161, 35361, 35631, 35651, 36131, 36151, 36351, 36531]); //#25320
            $ctx.dccurev2 = $a([15316, 16316, 13516, 16516, 13616, 15616, 13136, 15136, 16136, 13536, 16536, 13636, 13156, 16156, 15356, 13656, 15313, 16313, 13513, 16513, 13613, 15613, 13153, 15153, 16153, 16353, 13653, 15653, 13163, 15163, 15363, 13563]); //#25326
            $ctx.dcclrev2 = $a([36315, 36515, 35615, 35135, 36135, 31535, 36535, 31635, 35635, 35165, 36165, 31365, 35365, 36365, 31565, 36565, 61315, 65315, 63515, 61615, 65135, 61535, 63535, 61635, 63635, 65635, 63165, 65165, 61365, 65365, 61565, 63565]); //#25332
            for (var _3W in $ctx) {
                $ctx.hasOwnProperty(_3W) && (bwipp_ultracode.$ctx[_3W] = $ctx[_3W]);
            } //#25332
            bwipp_ultracode.$ctx._25333 = 1; //#25332
        })(); //#25332
    } //#25332
    $k[$j++] = 'dccu'; //#25335
    if ($1.rev == 1) { //#25335
        $k[$j++] = $1.dccurev1; //#25335
    } else { //#25335
        $k[$j++] = $1.dccurev2; //#25335
    } //#25335
    var _3a = $k[--$j]; //#25335
    $1[$k[--$j]] = _3a; //#25335
    $k[$j++] = 'dccl'; //#25336
    if ($1.rev == 1) { //#25336
        $k[$j++] = $1.dcclrev1; //#25336
    } else { //#25336
        $k[$j++] = $1.dcclrev2; //#25336
    } //#25336
    var _3f = $k[--$j]; //#25336
    $1[$k[--$j]] = _3f; //#25336
    $1.rows = $f(($1.rows * 6) + 1); //#25339
    $1.columns = $1.columns + 6; //#25340
    $k[$j++] = Infinity; //#25341
    for (var _3l = 0, _3m = $1.rows * $1.columns; _3l < _3m; _3l++) { //#25341
        $k[$j++] = -1; //#25341
    } //#25341
    $1.pixs = $a(); //#25341
    $1.qmv = function() {
        var _3p = $k[--$j]; //#25342
        var _3q = $k[--$j]; //#25342
        $k[$j++] = $f(_3q + (_3p * $1.columns)); //#25342
    }; //#25342
    for (var _3t = 0, _3s = $1.columns - 1; _3t <= _3s; _3t += 1) { //#25351
        $1.i = _3t; //#25344
        for (var _3w = 0, _3v = $f($1.rows - 1); _3w <= _3v; _3w += 6) { //#25348
            $1.j = _3w; //#25346
            if ($1.i >= 5) { //#25347
                $k[$j++] = $1.pixs; //#25347
                $k[$j++] = $1.i; //#25347
                $k[$j++] = $1.j; //#25347
                $1.qmv(); //#25347
                var _42 = $k[--$j]; //#25347
                $put($k[--$j], _42, ($1.i % 2) * 9); //#25347
            } //#25347
        } //#25347
        $k[$j++] = $1.pixs; //#25349
        $k[$j++] = $1.i; //#25349
        $k[$j++] = 0; //#25349
        $1.qmv(); //#25349
        var _46 = $k[--$j]; //#25349
        $put($k[--$j], _46, 9); //#25349
        $k[$j++] = $1.pixs; //#25350
        $k[$j++] = $1.i; //#25350
        $k[$j++] = $f($1.rows - 1); //#25350
        $1.qmv(); //#25350
        var _4B = $k[--$j]; //#25350
        $put($k[--$j], _4B, 9); //#25350
    } //#25350
    for (var _4F = 1, _4E = $f($1.rows - 2); _4F <= _4E; _4F += 1) { //#25364
        $1.i = _4F; //#25353
        for (var _4I = 3, _4H = $1.columns - 1; _4I <= _4H; _4I += 16) { //#25357
            $1.j = _4I; //#25355
            $k[$j++] = $1.pixs; //#25356
            $k[$j++] = $1.j; //#25356
            $k[$j++] = $1.i; //#25356
            $1.qmv(); //#25356
            var _4N = $k[--$j]; //#25356
            $put($k[--$j], _4N, (1 - ($1.i % 2)) * 9); //#25356
        } //#25356
        $k[$j++] = $1.pixs; //#25358
        $k[$j++] = 0; //#25358
        $k[$j++] = $1.i; //#25358
        $1.qmv(); //#25358
        var _4R = $k[--$j]; //#25358
        $put($k[--$j], _4R, 9); //#25358
        $k[$j++] = $1.pixs; //#25359
        $k[$j++] = 1; //#25359
        $k[$j++] = $1.i; //#25359
        $1.qmv(); //#25359
        var _4W = $k[--$j]; //#25359
        $put($k[--$j], _4W, (1 - ($1.i % 2)) * 9); //#25359
        $k[$j++] = $1.pixs; //#25360
        $k[$j++] = 2; //#25360
        $k[$j++] = $1.i; //#25360
        $1.qmv(); //#25360
        var _4a = $k[--$j]; //#25360
        $put($k[--$j], _4a, 0); //#25360
        $k[$j++] = $1.pixs; //#25361
        $k[$j++] = 3; //#25361
        $k[$j++] = $1.i; //#25361
        $1.qmv(); //#25361
        var _4e = $k[--$j]; //#25361
        $put($k[--$j], _4e, 9); //#25361
        $k[$j++] = $1.pixs; //#25362
        $k[$j++] = 4; //#25362
        $k[$j++] = $1.i; //#25362
        $1.qmv(); //#25362
        var _4i = $k[--$j]; //#25362
        $put($k[--$j], _4i, 0); //#25362
        $k[$j++] = $1.pixs; //#25363
        $k[$j++] = $1.columns - 1; //#25363
        $k[$j++] = $1.i; //#25363
        $1.qmv(); //#25363
        var _4n = $k[--$j]; //#25363
        $put($k[--$j], _4n, 9); //#25363
    } //#25363
    $1.i = (~~($1.rows / 2)) - 5; //#25367
    $k[$j++] = Infinity; //#25371
    var _4u = $cvrs($s(5), $get($1.dccu, $1.dcc), 10); //#25369
    for (var _4v = 0, _4w = _4u.length; _4v < _4w; _4v++) { //#25369
        $k[$j++] = $get(_4u, _4v) - 48; //#25369
    } //#25369
    var _52 = $cvrs($s(5), $get($1.dccl, $1.dcc), 10); //#25371
    $k[$j++] = 0; //#25371
    for (var _53 = 0, _54 = _52.length; _53 < _54; _53++) { //#25371
        $k[$j++] = $get(_52, _53) - 48; //#25371
    } //#25371
    var _56 = $a(); //#25371
    for (var _57 = 0, _58 = _56.length; _57 < _58; _57++) { //#25375
        $k[$j++] = $get(_56, _57); //#25373
        $k[$j++] = $1.pixs; //#25373
        $k[$j++] = 2; //#25373
        $k[$j++] = $1.i; //#25373
        $1.qmv(); //#25373
        var _5C = $k[--$j]; //#25373
        var _5D = $k[--$j]; //#25373
        $put(_5D, _5C, $k[--$j]); //#25373
        $1.i = $1.i + 1; //#25374
    } //#25374
    $k[$j++] = Infinity; //#25387
    $k[$j++] = $1.start; //#25381
    $k[$j++] = $1.mcc; //#25381
    $aload($1.ecws); //#25381
    $k[$j++] = $1.tcc; //#25385
    $k[$j++] = 283; //#25385
    $k[$j++] = $1.acc; //#25385
    $aload($1.dcws); //#25385
    for (var _5N = 0, _5O = $1.pads; _5N < _5O; _5N++) { //#25386
        $k[$j++] = 284; //#25386
    } //#25386
    $k[$j++] = $1.qcc; //#25387
    $1.tileseq = $a(); //#25387
    $1.x = 5; //#25390
    $1.y = 1; //#25390
    var _5R = $1.tileseq; //#25391
    for (var _5S = 0, _5T = _5R.length; _5S < _5T; _5S++) { //#25404
        var _5Y = $cvrs($s(5), $get($1.tiles, $get(_5R, _5S)), 10); //#25392
        for (var _5Z = 0, _5a = _5Y.length; _5Z < _5a; _5Z++) { //#25395
            $k[$j++] = $get(_5Y, _5Z); //#25393
            $k[$j++] = $1.pixs; //#25393
            $k[$j++] = $1.x; //#25393
            $k[$j++] = $1.y; //#25393
            $1.qmv(); //#25393
            var _5f = $k[--$j]; //#25393
            var _5g = $k[--$j]; //#25393
            $put(_5g, _5f, $f($k[--$j] - 48)); //#25393
            $1.y = $1.y + 1; //#25394
        } //#25394
        if ($1.y != $f($1.rows - 1)) { //#25401
            $1.y = $1.y + 1; //#25397
        } else { //#25401
            $1.x = $1.x + 1; //#25399
            $1.y = 1; //#25399
            $k[$j++] = $1.pixs; //#25400
            $k[$j++] = $1.x; //#25400
            $k[$j++] = $1.y; //#25400
            $1.qmv(); //#25400
            var _5q = $k[--$j]; //#25400
            if ($get($k[--$j], _5q) != -1) { //#25402
                $1.x = $1.x + 1; //#25401
            } //#25401
        } //#25401
    } //#25401
    if (!bwipp_ultracode.$ctx._25415) { //#25415
        (function() { //#25415
            var $ctx = Object.create($1); //#25415
            var _5u = new Map([
                [0, "FFFFFF"],
                [9, "000000"],
                [1, "00FFFF"],
                [3, "FF00FF"],
                [5, "FFFF00"],
                [6, "00FF00"]
            ]); //#25413
            $ctx.colormap = _5u; //#25414
            for (var _5v in $ctx) {
                $ctx.hasOwnProperty(_5v) && (bwipp_ultracode.$ctx[_5v] = $ctx[_5v]);
            } //#25414
            bwipp_ultracode.$ctx._25415 = 1; //#25414
        })(); //#25414
    } //#25414
    var _63 = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", $1.columns],
        ["pixy", $1.rows],
        ["height", ($1.rows / 72) * 2],
        ["width", ($1.columns / 72) * 2],
        ["colormap", $1.colormap],
        ["opt", $1.options]
    ]); //#25426
    $k[$j++] = _63; //#25429
    if (!$1.dontdraw) { //#25429
        bwipp_renmatrix(); //#25429
    } //#25429
}

function bwipp_jabcode() {
    var $1 = Object.create(bwipp_jabcode.$ctx || (bwipp_jabcode.$ctx = {})); //#25462
    $1.dontdraw = false; //#25465
    $1.rows = -1; //#25466
    $1.columns = -1; //#25467
    $1.slave = false; //#25468
    $1.colors = 16; //#25469
    $1.eclevel = 6; //#25470
    $1.raw = false; //#25471
    $1.parse = false; //#25472
    $1.parsefnc = false; //#25473
    $1.mask = -1; //#25474
    $k[$j++] = $1; //#25476
    bwipp_processoptions(); //#25476
    $1.options = $k[--$j]; //#25476
    $1.barcode = $k[--$j]; //#25477
    $1.databpm = ~~(Math.round(Math.log($1.colors) / Math.log(2))); //#25479
    var _3 = $1.colors; //#25480
    $k[$j++] = 'metabpm'; //#25480
    $k[$j++] = _3; //#25480
    if (_3 > 8) { //#25480
        $j--; //#25480
        $k[$j++] = 8; //#25480
    } //#25480
    var _4 = $k[--$j]; //#25480
    $1[$k[--$j]] = ~~(Math.round(Math.log(_4) / Math.log(2))); //#25480
    $1.fn1 = -1; //#25483
    var _9 = new Map([
        ["parse", $1.parse],
        ["parsefnc", $1.parsefnc],
        ["FNC1", $1.fn1]
    ]); //#25487
    $1.fncvals = _9; //#25488
    $k[$j++] = 'msg'; //#25489
    $k[$j++] = $1.barcode; //#25489
    $k[$j++] = $1.fncvals; //#25489
    bwipp_parseinput(); //#25489
    var _C = $k[--$j]; //#25489
    $1[$k[--$j]] = _C; //#25489
    $1.msglen = $1.msg.length; //#25490
    $1.addtobits = function() {
        var _F = $k[--$j]; //#25511
        $puti($1.bits, $1.j, _F); //#25511
        $1.j = _F.length + $1.j; //#25512
    }; //#25512
    $1.tofixedbits = function() {
        var _K = $strcpy($s(13), "0000000000000"); //#25516
        var _L = $k[--$j]; //#25516
        var _O = $cvrs($s(13), $k[--$j], 2); //#25516
        $puti(_K, $f(_L - _O.length), _O); //#25517
        $k[$j++] = $geti(_K, 0, _L); //#25518
    }; //#25518
    var _R = ($1.msglen <= 15) ? 4 : 17; //#25522
    $1.bits = $s(((7 + _R) + ($1.msglen * 8)) + 12); //#25522
    $1.j = 0; //#25523
    $k[$j++] = 31; //#25524
    $k[$j++] = 5; //#25524
    $1.tofixedbits(); //#25524
    $1.addtobits(); //#25524
    $k[$j++] = "00"; //#25525
    $1.addtobits(); //#25525
    if ($1.msglen <= 15) { //#25530
        $k[$j++] = $1.msglen; //#25527
        $k[$j++] = 4; //#25527
        $1.tofixedbits(); //#25527
        $1.addtobits(); //#25527
    } else { //#25530
        $k[$j++] = "0000"; //#25529
        $1.addtobits(); //#25529
        $k[$j++] = $1.msglen - 16; //#25530
        $k[$j++] = 13; //#25530
        $1.tofixedbits(); //#25530
        $1.addtobits(); //#25530
    } //#25530
    for (var _Z = 0, _Y = $1.msglen - 1; _Z <= _Y; _Z += 1) { //#25534
        $k[$j++] = $get($1.msg, _Z); //#25533
        $k[$j++] = 8; //#25533
        $1.tofixedbits(); //#25533
        $1.addtobits(); //#25533
    } //#25533
    $k[$j++] = 28; //#25535
    $k[$j++] = 5; //#25535
    $1.tofixedbits(); //#25535
    $1.addtobits(); //#25535
    $k[$j++] = 31; //#25536
    $k[$j++] = 5; //#25536
    $1.tofixedbits(); //#25536
    $1.addtobits(); //#25536
    $k[$j++] = "11"; //#25537
    $1.addtobits(); //#25537
    $1.diffside = 21; //#25540
    $1.sameshape = false; //#25541
    $1.sameecc = false; //#25542
    $1.hasslaves = false; //#25543
    $1.metrics = function() {
        $1.mc = $k[--$j]; //#25547
        $1.mr = $k[--$j]; //#25547
        var _e = $1.mc; //#25548
        var _f = $1.mr; //#25548
        var _g = $1.mc; //#25549
        var _h = $1.mr; //#25549
        var _i = $1.colors; //#25551
        var _j = 64; //#25551
        if (64 > _i) { //#25551
            var _ = _i; //#25551
            _i = _j; //#25551
            _j = _; //#25551
        } //#25551
        var _l = $1.slave ? 7 : 17; //#25552
        $k[$j++] = _e * _f; //#25580
        $k[$j++] = ((((~~($f(_g - 25) / 16)) + 2) * ((~~($f(_h - 25) / 16)) + 2)) - 4) * 7; //#25580
        $k[$j++] = _j * 2; //#25580
        $k[$j++] = _l * 4; //#25580
        if (!$1.slave) { //#25579
            var _p = $eq($1.mr, $1.mc) ? 0 : 1; //#25556
            $1.metass = _p; //#25556
            var _q = $1.mr; //#25557
            var _r = $1.mc; //#25557
            if ($lt(_q, _r)) { //#25557
                var _ = _r; //#25557
                _r = _q; //#25557
                _q = _; //#25557
            } //#25557
            $1.metavf = $get($a([0, 1, 2, 2, 3, 3, 3, 3]), ~~($f(_q - 21) / 16)); //#25558
            $k[$j++] = 'metavlen'; //#25559
            if ($1.metass == 0) { //#25559
                $k[$j++] = $a([2, 2, 3, 4]); //#25559
            } else { //#25559
                $k[$j++] = $a([4, 6, 8, 10]); //#25559
            } //#25559
            var _z = $get($k[--$j], $1.metavf); //#25559
            $1[$k[--$j]] = _z; //#25559
            $1.metaelen = $f(($1.metavf * 2) + 10); //#25560
            $k[$j++] = $f($f(7 + $1.metavlen) + $1.metaelen); //#25563
            if ($1.hasslaves) { //#25563
                var _15 = $k[--$j]; //#25563
                $k[$j++] = $f(_15 + 4); //#25563
            } //#25563
            var _18 = ~~(Math.ceil(($k[--$j] * 2) / $1.metabpm)); //#25566
            $1.nummetabits = $f((_18 * $1.metabpm) + 6); //#25566
            $k[$j++] = _18 + 6; //#25567
        } else { //#25579
            $k[$j++] = 3; //#25570
            if (!$1.sameshape) { //#25570
                var _1B = $k[--$j]; //#25570
                $k[$j++] = $f(_1B + 5); //#25570
            } //#25570
            if ($1.hasslaves) { //#25571
                var _1D = $k[--$j]; //#25571
                $k[$j++] = $f(_1D + 3); //#25571
            } //#25571
            if (!$1.sameecc) { //#25576
                var _1F = $1.mr; //#25573
                var _1G = $1.mc; //#25573
                if ($lt(_1F, _1G)) { //#25573
                    var _ = _1G; //#25573
                    _1G = _1F; //#25573
                    _1F = _; //#25573
                } //#25573
                var _1J = $k[--$j]; //#25575
                $k[$j++] = $f(_1J + $get($a([10, 12, 14, 14, 16, 16, 16, 16]), ~~($f(_1F - 21) / 16))); //#25575
            } //#25575
            var _1M = ~~(Math.ceil(($k[--$j] * 2) / $1.metabpm)); //#25579
            $1.nummetabits = _1M * $1.metabpm; //#25579
            $k[$j++] = _1M; //#25579
        } //#25579
        var _1O = $k[--$j]; //#25582
        $1.nummetamodules = _1O; //#25582
        var _1P = $k[--$j]; //#25583
        var _1Q = $k[--$j]; //#25583
        var _1R = $k[--$j]; //#25583
        $1.numdatamodules = $f($k[--$j] - ($f(_1R + ($f(_1Q + $f(_1P + _1O)))))); //#25583
        $1.numdatabits = $1.numdatamodules * $1.databpm; //#25584
    }; //#25584
    $1.coderate = $get($a([0.67, 0.63, 0.57, 0.55, 0.5, 0.43, 0.34, 0.25, 0.2, 0.17, 0.14]), $1.eclevel); //#25588
    $1.grosslen = ~~Math.ceil($1.bits.length / $1.coderate); //#25589
    $1.snapsize = function() {
        var _1b = (~~Math.ceil($k[--$j])) - 18; //#25590
        $k[$j++] = _1b; //#25590
        if (_1b < 0) { //#25590
            $j--; //#25590
            $k[$j++] = 0; //#25590
        } //#25590
        var _1c = $k[--$j]; //#25590
        $k[$j++] = ((~~(_1c / 4)) * 4) + 21; //#25590
    }; //#25590
    if (($1.rows == -1) && ($1.columns == -1)) { //#25619
        $k[$j++] = 'size'; //#25593
        $k[$j++] = Math.sqrt($1.grosslen); //#25593
        $1.snapsize(); //#25593
        var _1g = $k[--$j]; //#25593
        $1[$k[--$j]] = _1g; //#25593
        for (;;) { //#25598
            $k[$j++] = $1.size; //#25595
            $k[$j++] = $1.size; //#25595
            $1.metrics(); //#25595
            if ($1.grosslen <= $1.numdatabits) { //#25596
                break; //#25596
            } //#25596
            $1.size = $f($1.size + 4); //#25597
        } //#25597
        $1.rows = $1.size; //#25599
        $1.columns = $1.size; //#25600
    } else { //#25619
        if (($1.columns == -1) && ($1.rows != -1)) { //#25609
            $k[$j++] = 'columns'; //#25603
            $k[$j++] = $1.grosslen / $1.rows; //#25603
            $1.snapsize(); //#25603
            var _1t = $k[--$j]; //#25603
            $1[$k[--$j]] = _1t; //#25603
            for (;;) { //#25608
                $k[$j++] = $1.rows; //#25605
                $k[$j++] = $1.columns; //#25605
                $1.metrics(); //#25605
                if ($1.grosslen <= $1.numdatabits) { //#25606
                    break; //#25606
                } //#25606
                $1.columns = $f($1.columns + 4); //#25607
            } //#25607
        } //#25607
        if (($1.rows == -1) && ($1.columns != -1)) { //#25617
            $k[$j++] = 'rows'; //#25611
            $k[$j++] = $1.grosslen / $1.columns; //#25611
            $1.snapsize(); //#25611
            var _24 = $k[--$j]; //#25611
            $1[$k[--$j]] = _24; //#25611
            for (;;) { //#25616
                $k[$j++] = $1.rows; //#25613
                $k[$j++] = $1.columns; //#25613
                $1.metrics(); //#25613
                if ($1.grosslen <= $1.numdatabits) { //#25614
                    break; //#25614
                } //#25614
                $1.rows = $f($1.rows + 4); //#25615
            } //#25615
        } //#25615
        if (($1.rows != -1) && ($1.columns != -1)) { //#25620
            $k[$j++] = $1.rows; //#25619
            $k[$j++] = $1.columns; //#25619
            $1.metrics(); //#25619
        } //#25619
    } //#25619
    $1.C = $1.numdatabits; //#25622
    $1.cols = $1.columns; //#25623
    if (($1.rows > 145) || ($1.cols > 145)) { //#25628
        $k[$j++] = 'bwipp.jabcodeNoValidSymbol#25627'; //#25627
        $k[$j++] = "Maximum length exceeded or invalid content"; //#25627
        bwipp_raiseerror(); //#25627
    } //#25627
    $1.min = $1.C; //#25631
    for (var _2K = 3; _2K <= 8; _2K += 1) { //#25643
        $1.i = _2K; //#25633
        for (var _2M = $1.i + 1; _2M <= 9; _2M += 1) { //#25642
            $1.j = _2M; //#25635
            $1.dist = (((~~($1.C / $1.j)) * $1.j) - ((~~($1.C / $1.j)) * $1.i)) - $1.bits.length; //#25636
            if (($1.dist < $1.min) && ($1.dist >= 0)) { //#25641
                $1.datawc = $1.i; //#25638
                $1.datawr = $1.j; //#25639
                $1.min = $1.dist; //#25640
            } //#25640
        } //#25640
    } //#25640
    $1.tmpbits = $s(((~~($1.C / $1.datawr)) * $1.datawr) - ((~~($1.C / $1.datawr)) * $1.datawc)); //#25646
    $puti($1.tmpbits, 0, $1.bits); //#25647
    for (var _2m = $1.bits.length, _2l = $1.tmpbits.length - 1; _2m <= _2l; _2m += 1) { //#25651
        var _2o = $get($1.tmpbits, _2m - 1); //#25649
        $k[$j++] = _2m; //#25649
        $k[$j++] = _2o; //#25649
        if ((_2o % 2) == 0) { //#25649
            var _2p = $k[--$j]; //#25649
            $k[$j++] = $f(_2p + 1); //#25649
        } else { //#25649
            var _2q = $k[--$j]; //#25649
            $k[$j++] = $f(_2q - 1); //#25649
        } //#25649
        var _2s = $k[--$j]; //#25650
        $put($1.tmpbits, $k[--$j], _2s); //#25650
    } //#25650
    $1.bits = $1.tmpbits; //#25652
    $1.m0 = 22609 + 1; //#25656
    $1.m1 = 62509 - 65536; //#25656
    $1.m2 = 19605; //#25656
    $1.m3 = 32557; //#25656
    $1.lcg64_temper = function() {
        $1.p00 = $1.m0 * $1.s0; //#25662
        $1.p01 = $1.m0 * $1.s1; //#25662
        $1.p02 = $1.m0 * $1.s2; //#25662
        $1.p03 = $1.m0 * $1.s3; //#25662
        $1.p10 = $1.m1 * $1.s0; //#25663
        $1.p11 = $1.m1 * $1.s1; //#25663
        $1.p12 = $1.m1 * $1.s2; //#25663
        $1.p13 = $1.m1 * $1.s3; //#25663
        $1.p20 = $1.m2 * $1.s0; //#25664
        $1.p21 = $1.m2 * $1.s1; //#25664
        $1.p22 = $1.m2 * $1.s2; //#25664
        $1.p23 = $1.m2 * $1.s3; //#25664
        $1.p30 = $1.m3 * $1.s0; //#25665
        $1.p31 = $1.m3 * $1.s1; //#25665
        $1.p32 = $1.m3 * $1.s2; //#25665
        $1.p33 = $1.m3 * $1.s3; //#25665
        $1.s3 = ($1.p33 % 65536) + 1; //#25667
        $1.s2 = (($1.p32 % 65536) + (~~($1.p33 / 65536))) + ($1.p23 % 65536); //#25669
        $1.s1 = ((($1.p31 % 65536) + (~~($1.p32 / 65536))) + (($1.p22 % 65536) + (~~($1.p23 / 65536)))) + ($1.p13 % 65536); //#25672
        $1.s0 = (((($1.p30 % 65536) + (~~($1.p31 / 65536))) + (($1.p21 % 65536) + (~~($1.p22 / 65536)))) + (($1.p12 % 65536) + (~~($1.p13 / 65536)))) + ($1.p03 % 65536); //#25676
        $1.s3 = $1.s3 + 65536; //#25679
        $1.s2 = $1.s2 + 65535; //#25680
        $1.s1 = $1.s1 + 65535; //#25681
        $1.s0 = $1.s0 + 65535; //#25682
        $1.s2 = (~~($1.s3 / 65536)) + $1.s2; //#25685
        $1.s3 = $1.s3 % 65536; //#25685
        $1.s1 = (~~($1.s2 / 65536)) + $1.s1; //#25686
        $1.s2 = $1.s2 % 65536; //#25686
        $1.s0 = (~~($1.s1 / 65536)) + $1.s0; //#25687
        $1.s1 = $1.s1 % 65536; //#25687
        $1.s0 = $1.s0 % 65536; //#25688
        var _3x = (((($1.s0 - 32768) * 65536) + $1.s1) ^ 2147483648) & 4294967295; //#25693
        var _3y = _3x ^ (_3x >>> 11); //#25694
        var _3z = _3y ^ ((_3y << 7) & -1658038656); //#25695
        var _40 = (_3z ^ ((_3z << 15) & -272236544)) & 4294967295; //#25697
        $k[$j++] = _40 ^ (_40 >>> 18); //#25697
    }; //#25697
    $1.createMatrixA = function() {
        $k[$j++] = 'nb_pcb'; //#25703
        if ($1.wr < 4) { //#25703
            $k[$j++] = ~~($1.Pg_sub_block / 2); //#25703
        } else { //#25703
            $k[$j++] = (~~($1.Pg_sub_block / $1.wr)) * $1.wc; //#25703
        } //#25703
        var _46 = $k[--$j]; //#25703
        $1[$k[--$j]] = _46; //#25703
        $1.offset = ~~Math.ceil($1.Pg_sub_block / 32); //#25704
        $1.effwidth = $1.offset * 32; //#25705
        $1.matrixA = $a($1.offset * $1.nb_pcb); //#25706
        for (var _4G = 0, _4F = ($1.offset * $1.nb_pcb) - 1; _4G <= _4F; _4G += 1) { //#25707
            $put($1.matrixA, _4G, 0); //#25707
        } //#25707
        $1.permutation = $a($1.Pg_sub_block); //#25708
        for (var _4M = 0, _4L = $1.Pg_sub_block - 1; _4M <= _4L; _4M += 1) { //#25709
            $put($1.permutation, _4M, _4M); //#25709
        } //#25709
        for (var _4R = 0, _4Q = (~~($1.Pg_sub_block / $1.wr)) - 1; _4R <= _4Q; _4R += 1) { //#25718
            $1.i = _4R; //#25712
            for (var _4U = 0, _4T = $f($1.wr - 1); _4U <= _4T; _4U += 1) { //#25717
                $1.j = _4U; //#25714
                var _4V = $1.matrixA; //#25715
                var _4W = $1.i; //#25715
                var _4X = $1.effwidth; //#25715
                var _4Y = $1.wr; //#25715
                var _4Z = $1.j; //#25715
                var _4f = $f(31 - (($f(($1.i * $f($1.effwidth + $1.wr)) + $1.j)) % 32)); //#25716
                $put(_4V, ~~(($f((_4W * $f(_4X + _4Y)) + _4Z)) / 32), $get(_4V, ~~(($f((_4W * $f(_4X + _4Y)) + _4Z)) / 32)) | ((_4f < 0 ? 1 >>> -_4f : 1 << _4f))); //#25716
            } //#25716
        } //#25716
        $1.s0 = 0; //#25721
        $1.s1 = 0; //#25721
        $1.s2 = 11; //#25721
        $1.s3 = 64569; //#25721
        for (var _4i = 1, _4h = $f($1.wc - 1); _4i <= _4h; _4i += 1) { //#25744
            $1.i = _4i; //#25723
            $1.off_index = (~~($1.Pg_sub_block / $1.wr)) * $1.i; //#25724
            for (var _4o = 0, _4n = $1.Pg_sub_block - 1; _4o <= _4n; _4o += 1) { //#25743
                $1.j = _4o; //#25726
                $1.lcg64_temper(); //#25727
                var _4p = $k[--$j]; //#25728
                $k[$j++] = _4p; //#25728
                if (_4p < 0) { //#25728
                    var _4q = $k[--$j]; //#25728
                    $k[$j++] = $f((_4q ^ 2147483648) + 2147483648); //#25728
                } //#25728
                $1.pos = ~~(($k[--$j] / 4294967296) * ($1.Pg_sub_block - $1.j)); //#25730
                for (var _4x = 0, _4w = (~~($1.Pg_sub_block / $1.wr)) - 1; _4x <= _4w; _4x += 1) { //#25739
                    $1.k = _4x; //#25732
                    var _4y = $1.matrixA; //#25733
                    var _4z = $1.off_index; //#25733
                    var _50 = $1.k; //#25733
                    var _51 = $1.offset; //#25733
                    var _52 = $1.j; //#25733
                    var _5A = $get($1.matrixA, (~~($get($1.permutation, $1.pos) / 32)) + ($1.k * $1.offset)); //#25735
                    var _5E = -($f(31 - ($get($1.permutation, $1.pos) % 32))); //#25736
                    var _5G = 31 - ($1.j % 32); //#25737
                    $put(_4y, ((_4z + _50) * _51) + (~~(_52 / 32)), $get(_4y, ((_4z + _50) * _51) + (~~(_52 / 32))) | ((_5G < 0 ? (((_5E < 0 ? _5A >>> -_5E : _5A << _5E)) & 1) >>> -_5G : (((_5E < 0 ? _5A >>> -_5E : _5A << _5E)) & 1) << _5G))); //#25738
                } //#25738
                var _5J = $1.permutation; //#25740
                var _5K = $1.Pg_sub_block; //#25740
                var _5L = $1.j; //#25740
                $put(_5J, (_5K - 1) - _5L, $get($1.permutation, $1.pos)); //#25742
                $put($1.permutation, $1.pos, $get(_5J, (_5K - 1) - _5L)); //#25742
            } //#25742
        } //#25742
    }; //#25742
    $1.createMetadataMatrixA = function() {
        $1.nb_pcb = ~~($1.Pg_sub_block / 2); //#25750
        $1.offset = ~~Math.ceil($1.Pg_sub_block / 32); //#25751
        $1.matrixA = $a($1.offset * $1.nb_pcb); //#25752
        for (var _5Y = 0, _5X = ($1.offset * $1.nb_pcb) - 1; _5Y <= _5X; _5Y += 1) { //#25753
            $put($1.matrixA, _5Y, 0); //#25753
        } //#25753
        $1.permutation = $a($1.Pg_sub_block); //#25754
        for (var _5e = 0, _5d = $1.Pg_sub_block - 1; _5e <= _5d; _5e += 1) { //#25755
            $put($1.permutation, _5e, _5e); //#25755
        } //#25755
        $1.s0 = 0; //#25758
        $1.s1 = 0; //#25758
        $1.s2 = 0; //#25758
        $1.s3 = 38545; //#25758
        $1.nb_once = ~~((~~($f((($1.nb_pcb / $1.wc) * $1.Pg_sub_block) + 3))) / $1.nb_pcb); //#25759
        for (var _5m = 0, _5l = $1.nb_pcb - 1; _5m <= _5l; _5m += 1) { //#25774
            $1.i = _5m; //#25761
            for (var _5p = 0, _5o = $1.nb_once - 1; _5p <= _5o; _5p += 1) { //#25773
                $1.j = _5p; //#25763
                $1.lcg64_temper(); //#25764
                var _5q = $k[--$j]; //#25765
                $k[$j++] = _5q; //#25765
                if (_5q < 0) { //#25765
                    var _5r = $k[--$j]; //#25765
                    $k[$j++] = $f((_5r ^ 2147483648) + 2147483648); //#25765
                } //#25765
                $1.pos = ~~(($k[--$j] / 4294967296) * ($1.Pg_sub_block - $1.j)); //#25767
                var _5v = $1.matrixA; //#25768
                var _5w = $1.i; //#25768
                var _5x = $1.offset; //#25768
                var _60 = $get($1.permutation, $1.pos); //#25768
                var _65 = $f(31 - ($get($1.permutation, $1.pos) % 32)); //#25769
                $put(_5v, (_5w * _5x) + (~~(_60 / 32)), $get(_5v, (_5w * _5x) + (~~(_60 / 32))) | ((_65 < 0 ? 1 >>> -_65 : 1 << _65))); //#25769
                var _68 = $1.permutation; //#25770
                var _69 = $1.Pg_sub_block; //#25770
                var _6A = $1.j; //#25770
                $put(_68, (_69 - 1) - _6A, $get($1.permutation, $1.pos)); //#25772
                $put($1.permutation, $1.pos, $get(_68, (_69 - 1) - _6A)); //#25772
            } //#25772
        } //#25772
    }; //#25772
    $1.GaussJordan = function() {
        $k[$j++] = 'nb_pcb'; //#25780
        if ($1.wr < 4) { //#25780
            $k[$j++] = ~~($1.Pg_sub_block / 2); //#25780
        } else { //#25780
            $k[$j++] = (~~($1.Pg_sub_block / $1.wr)) * $1.wc; //#25780
        } //#25780
        var _6K = $k[--$j]; //#25780
        $1[$k[--$j]] = _6K; //#25780
        $1.offset = ~~Math.ceil($1.Pg_sub_block / 32); //#25781
        var _6N = $1.matrixA; //#25782
        $1.matrixH = $arrcpy($a(_6N.length), _6N); //#25782
        $k[$j++] = Infinity; //#25783
        for (var _6R = 0, _6S = $1.Pg_sub_block; _6R < _6S; _6R++) { //#25783
            $k[$j++] = 0; //#25783
        } //#25783
        $1.column_arrangement = $a(); //#25783
        $k[$j++] = Infinity; //#25784
        for (var _6V = 0, _6W = $1.Pg_sub_block; _6V < _6W; _6V++) { //#25784
            $k[$j++] = false; //#25784
        } //#25784
        $1.processed_column = $a(); //#25784
        $k[$j++] = Infinity; //#25785
        for (var _6Z = 0, _6a = $1.nb_pcb; _6Z < _6a; _6Z++) { //#25785
            $k[$j++] = 0; //#25785
        } //#25785
        $1.zero_lines_nb = $a(); //#25785
        $k[$j++] = Infinity; //#25786
        for (var _6d = 0, _6e = $1.Pg_sub_block * 2; _6d < _6e; _6d++) { //#25786
            $k[$j++] = 0; //#25786
        } //#25786
        $1.swap_col = $a(); //#25786
        $1.zero_lines = 0; //#25787
        $1.loop0 = 0; //#25789
        for (var _6i = 0, _6h = $1.nb_pcb - 1; _6i <= _6h; _6i += 1) { //#25827
            $1.i = _6i; //#25791
            $1.pivot_column = $1.Pg_sub_block + 1; //#25792
            for (var _6m = 0, _6l = $1.Pg_sub_block - 1; _6m <= _6l; _6m += 1) { //#25800
                $1.j = _6m; //#25794
                var _6r = $get($1.matrixH, ~~(((($1.offset * 32) * $1.i) + $1.j) / 32)); //#25795
                var _6v = -(31 - (((($1.offset * 32) * $1.i) + $1.j) % 32)); //#25796
                if ((((_6v < 0 ? _6r >>> -_6v : _6r << _6v)) & 1) == 1) { //#25799
                    $1.pivot_column = $1.j; //#25797
                    break; //#25798
                } //#25798
            } //#25798
            if ($1.pivot_column < $1.Pg_sub_block) { //#25825
                $put($1.processed_column, $1.pivot_column, true); //#25802
                $put($1.column_arrangement, $1.pivot_column, $1.i); //#25803
                if ($1.pivot_column >= $1.nb_pcb) { //#25807
                    $put($1.swap_col, $1.loop0 * 2, $1.pivot_column); //#25805
                    $1.loop0 = $1.loop0 + 1; //#25806
                } //#25806
                $1.off_index = ~~($1.pivot_column / 32); //#25808
                $1.off_index1 = $1.pivot_column % 32; //#25809
                for (var _7E = 0, _7D = $1.nb_pcb - 1; _7E <= _7D; _7E += 1) { //#25822
                    $1.j = _7E; //#25811
                    if ($1.i != $1.j) { //#25821
                        var _7L = $get($1.matrixH, $1.off_index + ($1.j * $1.offset)); //#25813
                        var _7N = -(31 - $1.off_index1); //#25814
                        if ((((_7N < 0 ? _7L >>> -_7N : _7L << _7N)) & 1) == 1) { //#25820
                            for (var _7Q = 0, _7P = $1.offset - 1; _7Q <= _7P; _7Q += 1) { //#25819
                                $1.k = _7Q; //#25816
                                var _7R = $1.matrixH; //#25817
                                var _7S = $1.offset; //#25817
                                var _7T = $1.j; //#25817
                                var _7U = $1.k; //#25817
                                $put(_7R, (_7S * _7T) + _7U, $xo($get(_7R, (_7S * _7T) + _7U), $get($1.matrixH, ($1.offset * $1.i) + $1.k))); //#25818
                            } //#25818
                        } //#25818
                    } //#25818
                } //#25818
            } else { //#25825
                $put($1.zero_lines_nb, $1.zero_lines, $1.i); //#25824
                $1.zero_lines = $1.zero_lines + 1; //#25825
            } //#25825
        } //#25825
        $1.matrix_rank = $1.nb_pcb - $1.zero_lines; //#25829
        $1.loop2 = 0; //#25830
        for (var _7k = $1.matrix_rank, _7j = $1.nb_pcb - 1; _7k <= _7j; _7k += 1) { //#25850
            $1.i = _7k; //#25832
            if ($get($1.column_arrangement, $1.i) > 0) { //#25849
                for (var _7q = 0, _7p = $1.nb_pcb - 1; _7q <= _7p; _7q += 1) { //#25848
                    $1.j = _7q; //#25835
                    if ($nt($get($1.processed_column, $1.j))) { //#25847
                        $put($1.column_arrangement, $1.j, $get($1.column_arrangement, $1.i)); //#25837
                        $put($1.column_arrangement, $1.i, 0); //#25838
                        $put($1.processed_column, $1.j, true); //#25839
                        $put($1.processed_column, $1.i, false); //#25840
                        $put($1.swap_col, $1.loop0 * 2, $1.i); //#25841
                        $put($1.swap_col, ($1.loop0 * 2) + 1, $1.j); //#25842
                        $put($1.column_arrangement, $1.i, $1.j); //#25843
                        $1.loop0 = $1.loop0 + 1; //#25844
                        $1.loop2 = $1.loop2 + 1; //#25845
                        break; //#25846
                    } //#25846
                } //#25846
            } //#25846
        } //#25846
        $1.loop1 = 0; //#25852
        for (var _8I = 0, _8H = $1.nb_pcb - 1; _8I <= _8H; _8I += 1) { //#25861
            $1.kl = _8I; //#25854
            if ($nt($get($1.processed_column, $1.kl)) && ($1.loop1 < ($1.loop0 - $1.loop2))) { //#25860
                $put($1.column_arrangement, $1.kl, $get($1.column_arrangement, $get($1.swap_col, $1.loop1 * 2))); //#25856
                $put($1.processed_column, $1.kl, true); //#25857
                $put($1.swap_col, ($1.loop1 * 2) + 1, $1.kl); //#25858
                $1.loop1 = $1.loop1 + 1; //#25859
            } //#25859
        } //#25859
        $1.loop1 = 0; //#25863
        for (var _8e = 0, _8d = $1.nb_pcb - 1; _8e <= _8d; _8e += 1) { //#25870
            $1.kl = _8e; //#25865
            if ($nt($get($1.processed_column, $1.kl))) { //#25869
                $put($1.column_arrangement, $1.kl, $get($1.zero_lines_nb, $1.loop1)); //#25867
                $1.loop1 = $1.loop1 + 1; //#25868
            } //#25868
        } //#25868
        for (var _8q = 0, _8p = $1.nb_pcb - 1; _8q <= _8p; _8q += 1) { //#25879
            $1.i = _8q; //#25873
            for (var _8t = 0, _8s = $1.offset - 1; _8t <= _8s; _8t += 1) { //#25878
                $1.j = _8t; //#25875
                $put($1.matrixA, ($1.i * $1.offset) + $1.j, $get($1.matrixH, $f(($get($1.column_arrangement, $1.i) * $1.offset) + $1.j))); //#25877
            } //#25877
        } //#25877
        $1.tmp = 0; //#25881
        for (var _97 = 0, _96 = $1.loop0 - 1; _97 <= _96; _97 += 1) { //#25903
            $1.i = _97; //#25883
            for (var _9A = 0, _99 = $1.nb_pcb - 1; _9A <= _99; _9A += 1) { //#25902
                $1.j = _9A; //#25885
                var _9H = $get($1.matrixA, (~~($get($1.swap_col, $1.i * 2) / 32)) + ($1.j * $1.offset)); //#25886
                var _9L = -($f(31 - ($get($1.swap_col, $1.i * 2) % 32))); //#25887
                $1.tmp = (((-(((_9L < 0 ? _9H >>> -_9L : _9H << _9L)) & 1)) ^ $1.tmp) & 1) ^ $1.tmp; //#25888
                var _9O = $1.matrixA; //#25889
                var _9R = $get($1.swap_col, $1.i * 2); //#25889
                var _9S = $1.j; //#25889
                var _9T = $1.offset; //#25889
                var _9b = $get($1.matrixA, (~~($get($1.swap_col, ($1.i * 2) + 1) / 32)) + ($1.j * $1.offset)); //#25891
                var _9f = -($f(31 - ($get($1.swap_col, ($1.i * 2) + 1) % 32))); //#25892
                var _9q = $f(31 - ($get($1.swap_col, $1.i * 2) % 32)); //#25894
                $put(_9O, (~~(_9R / 32)) + (_9S * _9T), $get(_9O, (~~(_9R / 32)) + (_9S * _9T)) ^ (((-(((_9f < 0 ? _9b >>> -_9f : _9b << _9f)) & 1)) ^ $get($1.matrixA, (~~($get($1.swap_col, $1.i * 2) / 32)) + ($1.j * $1.offset))) & ((_9q < 0 ? 1 >>> -_9q : 1 << _9q)))); //#25895
                var _9r = $1.matrixA; //#25896
                var _9u = $get($1.swap_col, ($1.i * 2) + 1); //#25896
                var _9v = $1.j; //#25896
                var _9w = $1.offset; //#25896
                var _A9 = $f(31 - ($get($1.swap_col, ($1.i * 2) + 1) % 32)); //#25900
                $put(_9r, (~~(_9u / 32)) + (_9v * _9w), $get(_9r, (~~(_9u / 32)) + (_9v * _9w)) ^ (((-($1.tmp & 1)) ^ $get($1.matrixA, (~~($get($1.swap_col, ($1.i * 2) + 1) / 32)) + ($1.j * $1.offset))) & ((_A9 < 0 ? 1 >>> -_A9 : 1 << _A9)))); //#25901
            } //#25901
        } //#25901
    }; //#25901
    $1.createGeneratorMatrix = function() {
        $1.pn = $1.Pg_sub_block - $1.matrix_rank; //#25909
        $1.offset = ~~Math.ceil($1.pn / 32); //#25910
        $1.effwidth = $1.offset * 32; //#25911
        $1.offset_cap = ~~Math.ceil($1.Pg_sub_block / 32); //#25912
        $1.G = $a($1.offset * $1.Pg_sub_block); //#25913
        for (var _AL = 0, _AK = ($1.offset * $1.Pg_sub_block) - 1; _AL <= _AK; _AL += 1) { //#25916
            $put($1.G, _AL, 0); //#25915
        } //#25915
        for (var _AP = 0, _AO = $1.pn - 1; _AP <= _AO; _AP += 1) { //#25921
            $1.i = _AP; //#25918
            var _AQ = $1.G; //#25919
            var _AR = $1.Pg_sub_block; //#25919
            var _AS = $1.pn; //#25919
            var _AT = $1.i; //#25919
            var _AU = $1.offset; //#25919
            var _AV = $1.i; //#25919
            var _AY = 31 - ($1.i % 32); //#25920
            $put(_AQ, (((_AR - _AS) + _AT) * _AU) + (~~(_AV / 32)), $get(_AQ, (((_AR - _AS) + _AT) * _AU) + (~~(_AV / 32))) | ((_AY < 0 ? 1 >>> -_AY : 1 << _AY))); //#25920
        } //#25920
        $1.matrix_index = $1.Pg_sub_block - $1.pn; //#25922
        $1.loop0 = 0; //#25923
        for (var _Af = 0, _Ae = (($1.Pg_sub_block - $1.pn) * $1.effwidth) - 1; _Af <= _Ae; _Af += 1) { //#25940
            $1.i = _Af; //#25925
            if ($1.matrix_index >= $1.Pg_sub_block) { //#25929
                $1.loop0 = $1.loop0 + 1; //#25927
                $1.matrix_index = $1.Pg_sub_block - $1.pn; //#25928
            } //#25928
            if (($1.i % $1.effwidth) < $1.pn) { //#25939
                var _Ao = $1.G; //#25931
                var _Ap = $1.i; //#25931
                var _Av = $get($1.matrixA, (~~($1.matrix_index / 32)) + ($1.offset_cap * $1.loop0)); //#25933
                var _Ax = -(31 - ($1.matrix_index % 32)); //#25934
                var _B2 = 31 - ($1.i % 32); //#25936
                $put(_Ao, ~~(_Ap / 32), $get(_Ao, ~~(_Ap / 32)) ^ (((-(((_Ax < 0 ? _Av >>> -_Ax : _Av << _Ax)) & 1)) ^ $get($1.G, ~~($1.i / 32))) & ((_B2 < 0 ? 1 >>> -_B2 : 1 << _B2)))); //#25937
                $1.matrix_index = $1.matrix_index + 1; //#25938
            } //#25938
        } //#25938
    }; //#25938
    $1.ldpc = function() {
        $1.wr = $k[--$j]; //#25946
        $1.wc = $k[--$j]; //#25947
        $k[$j++] = Infinity; //#25948
        var _B6 = $k[--$j]; //#25948
        var _B7 = $k[--$j]; //#25948
        $k[$j++] = _B6; //#25948
        $forall(_B7, function() { //#25948
            var _B8 = $k[--$j]; //#25948
            $k[$j++] = $f(_B8 - 48); //#25948
        }); //#25948
        $1.data = $a(); //#25948
        $1.Pn = $1.data.length; //#25950
        if ($1.wr != -1) { //#25965
            $1.Pg = ~~((Math.ceil((Math.ceil(($1.Pn * $1.wr) / $f($1.wr - $1.wc))) / $1.wr)) * $1.wr); //#25952
            $1.nb_sub_blocks = (~~($1.Pg / 2700)) + 1; //#25953
            $1.Pg_sub_block = (~~((~~($1.Pg / $1.nb_sub_blocks)) / $1.wr)) * $1.wr; //#25954
            $1.Pn_sub_block = ~~(($1.Pg_sub_block * $f($1.wr - $1.wc)) / $1.wr); //#25955
            $1.nb_sub_blocks = ~~($1.Pg / $1.Pg_sub_block); //#25956
            $k[$j++] = 'encoding_iterations'; //#25957
            $k[$j++] = ~~($1.Pg / $1.Pg_sub_block); //#25957
            if (($1.Pn_sub_block * $1.nb_sub_blocks) < $1.Pn) { //#25957
                var _BY = $k[--$j]; //#25957
                $k[$j++] = $f(_BY - 1); //#25957
            } //#25957
            var _BZ = $k[--$j]; //#25957
            $1[$k[--$j]] = _BZ; //#25957
            $1.createMatrixA(); //#25958
        } else { //#25965
            $1.Pg = $1.Pn * 2; //#25960
            $1.nb_sub_blocks = 1; //#25961
            $1.Pg_sub_block = $1.Pg; //#25962
            $1.Pn_sub_block = $1.Pn; //#25963
            $1.encoding_iterations = 1; //#25964
            $1.createMetadataMatrixA(); //#25965
        } //#25965
        $1.GaussJordan(); //#25967
        $1.createGeneratorMatrix(); //#25968
        $1.ecc_encoded_data = $a($1.Pg); //#25970
        $1.offset = ~~(Math.ceil(($1.Pg_sub_block - $1.matrix_rank) / 32)); //#25972
        for (var _Bk = 0, _Bj = $1.encoding_iterations - 1; _Bk <= _Bj; _Bk += 1) { //#25988
            $1.iter = _Bk; //#25974
            for (var _Bn = 0, _Bm = $1.Pg_sub_block - 1; _Bn <= _Bm; _Bn += 1) { //#25987
                $1.i = _Bn; //#25976
                $1.temp = 0; //#25977
                $1.loop0 = 0; //#25978
                $1.offset_index = $1.offset * $1.i; //#25979
                for (var _Bv = $1.iter * $1.Pn_sub_block, _Bu = (($1.iter + 1) * $1.Pn_sub_block) - 1; _Bv <= _Bu; _Bv += 1) { //#25985
                    var _C1 = $get($1.G, $1.offset_index + (~~($1.loop0 / 32))); //#25982
                    var _C3 = -(31 - ($1.loop0 % 32)); //#25982
                    $1.temp = ($get($1.data, _Bv) & (((_C3 < 0 ? _C1 >>> -_C3 : _C1 << _C3)) & 1)) ^ $1.temp; //#25983
                    $1.loop0 = $1.loop0 + 1; //#25984
                } //#25984
                $put($1.ecc_encoded_data, $1.i + ($1.iter * $1.Pg_sub_block), $1.temp); //#25986
            } //#25986
        } //#25986
        if ($1.encoding_iterations != $1.nb_sub_blocks) { //#26012
            $1.start = $1.encoding_iterations * $1.Pn_sub_block; //#25991
            $1.last_index = $1.encoding_iterations * $1.Pg_sub_block; //#25992
            $1.Pg_sub_block = $1.Pg - ($1.encoding_iterations * $1.Pg_sub_block); //#25993
            $1.Pn_sub_block = ~~(($1.Pg_sub_block * $f($1.wr - $1.wc)) / $1.wr); //#25994
            $1.createMatrixA(); //#25995
            $1.GaussJordan(); //#25996
            $1.createGeneratorMatrix(); //#25997
            $1.offset = ~~(Math.ceil(($1.Pg_sub_block - $1.matrix_rank) / 32)); //#25998
            for (var _CS = 0, _CR = $1.Pg_sub_block - 1; _CS <= _CR; _CS += 1) { //#26011
                $1.i = _CS; //#26000
                $1.temp = 0; //#26001
                $1.loop0 = 0; //#26002
                $1.offset_index = $1.offset * $1.i; //#26003
                for (var _CY = $1.start, _CX = $1.Pn - 1; _CY <= _CX; _CY += 1) { //#26009
                    var _Ce = $get($1.G, $1.offset_index + (~~($1.loop0 / 32))); //#26006
                    var _Cg = -(31 - ($1.loop0 % 32)); //#26006
                    $1.temp = ($get($1.data, _CY) & (((_Cg < 0 ? _Ce >>> -_Cg : _Ce << _Cg)) & 1)) ^ $1.temp; //#26007
                    $1.loop0 = $1.loop0 + 1; //#26008
                } //#26008
                $put($1.ecc_encoded_data, $1.i + $1.last_index, $1.temp); //#26010
            } //#26010
        } //#26010
        $1.out = $s($1.Pg); //#26014
        for (var _Cr = 0, _Cq = $1.Pg - 1; _Cr <= _Cq; _Cr += 1) { //#26018
            $put($1.out, _Cr, $f($get($1.ecc_encoded_data, _Cr) + 48)); //#26017
        } //#26017
        $k[$j++] = $1.out; //#26019
    }; //#26019
    $k[$j++] = 'bits'; //#26024
    $k[$j++] = $1.bits; //#26024
    $k[$j++] = $1.datawc; //#26024
    $k[$j++] = $1.datawr; //#26024
    $1.ldpc(); //#26024
    var _Cz = $k[--$j]; //#26024
    $1[$k[--$j]] = _Cz; //#26024
    $1.s0 = 0; //#26027
    $1.s1 = 0; //#26027
    $1.s2 = 3; //#26027
    $1.s3 = 30151; //#26027
    for (var _D2 = $1.bits.length - 1; _D2 >= 1; _D2 -= 1) { //#26037
        $1.l = _D2; //#26029
        $1.lcg64_temper(); //#26030
        var _D3 = $k[--$j]; //#26031
        $k[$j++] = _D3; //#26031
        if (_D3 < 0) { //#26031
            var _D4 = $k[--$j]; //#26031
            $k[$j++] = $f((_D4 ^ 2147483648) + 2147483648); //#26031
        } //#26031
        $1.r = ~~(($k[--$j] / 4294967296) * ($1.l + 1)); //#26033
        $put($1.bits, $1.l, $get($1.bits, $1.r)); //#26035
        $put($1.bits, $1.r, $get($1.bits, $1.l)); //#26036
    } //#26036
    $1.tmpbits = $s($1.C); //#26040
    $puti($1.tmpbits, 0, $1.bits); //#26041
    $1.j = $1.bits.length; //#26042
    for (var _DO = 0, _DP = ~~(($f($f($1.C - $1.j) + 1)) / 2); _DO < _DP; _DO++) { //#26047
        $put($1.tmpbits, $1.j, 48); //#26044
        if (($1.j + 1) < $1.C) { //#26045
            $put($1.tmpbits, $1.j + 1, 49); //#26045
        } //#26045
        $1.j = $1.j + 2; //#26046
    } //#26046
    $1.bits = $1.tmpbits; //#26048
    if ($1.colors == 4) { //#26113
        $1.bi = 0; //#26052
        $1.gi = 1; //#26052
        $1.mi = 2; //#26052
        $1.yi = 3; //#26052
        $1.ki = 4; //#26053
        $1.wi = 5; //#26053
        $k[$j++] = Infinity; //#26056
        $k[$j++] = $1.bi; //#26056
        $k[$j++] = "0000FF"; //#26056
        $k[$j++] = $1.gi; //#26056
        $k[$j++] = "00FF00"; //#26056
        $k[$j++] = $1.mi; //#26056
        $k[$j++] = "FF00FF"; //#26056
        $k[$j++] = $1.yi; //#26056
        $k[$j++] = "FFFF00"; //#26056
        $k[$j++] = $1.ki; //#26056
        $k[$j++] = "000000"; //#26056
        $k[$j++] = $1.wi; //#26056
        $k[$j++] = "FFFFFF"; //#26056
        $1.palette = $d(); //#26057
        $1.metacolorindex = $a([$1.bi, $1.gi, $1.mi, $1.yi]); //#26058
        $1.palettelayout = $a([$1.bi, $1.gi, $1.mi, $1.yi]); //#26059
    } else { //#26113
        var _Dw = new Map([
            [8, $a([2, 2, 2])],
            [16, $a([4, 2, 2])],
            [32, $a([4, 4, 2])],
            [64, $a([4, 4, 4])],
            [128, $a([8, 4, 4])],
            [256, $a([8, 8, 4])]
        ]); //#26068
        $1.rgbres = $get(_Dw, $1.colors); //#26069
        $k[$j++] = 'rvals'; //#26071
        $k[$j++] = $get($1.rgbres, 0); //#26071
        $k[$j++] = Infinity; //#26071
        var _E1 = $k[--$j]; //#26071
        var _E3 = $f($k[--$j] - 1); //#26071
        $k[$j++] = _E1; //#26071
        $k[$j++] = _E3; //#26071
        for (var _E5 = 0, _E4 = _E3; _E5 <= _E4; _E5 += 1) { //#26071
            var _E6 = $k[--$j]; //#26071
            $k[$j++] = ~~(Math.round(_E5 * (255 / _E6))); //#26071
            $k[$j++] = _E6; //#26071
        } //#26071
        $j--; //#26071
        var _E7 = $a(); //#26071
        $1[$k[--$j]] = _E7; //#26071
        $k[$j++] = 'gvals'; //#26072
        $k[$j++] = $get($1.rgbres, 1); //#26072
        $k[$j++] = Infinity; //#26072
        var _EB = $k[--$j]; //#26072
        var _ED = $f($k[--$j] - 1); //#26072
        $k[$j++] = _EB; //#26072
        $k[$j++] = _ED; //#26072
        for (var _EF = 0, _EE = _ED; _EF <= _EE; _EF += 1) { //#26072
            var _EG = $k[--$j]; //#26072
            $k[$j++] = ~~(Math.round(_EF * (255 / _EG))); //#26072
            $k[$j++] = _EG; //#26072
        } //#26072
        $j--; //#26072
        var _EH = $a(); //#26072
        $1[$k[--$j]] = _EH; //#26072
        $k[$j++] = 'bvals'; //#26073
        $k[$j++] = $get($1.rgbres, 2); //#26073
        $k[$j++] = Infinity; //#26073
        var _EL = $k[--$j]; //#26073
        var _EN = $f($k[--$j] - 1); //#26073
        $k[$j++] = _EL; //#26073
        $k[$j++] = _EN; //#26073
        for (var _EP = 0, _EO = _EN; _EP <= _EO; _EP += 1) { //#26073
            var _EQ = $k[--$j]; //#26073
            $k[$j++] = ~~(Math.round(_EP * (255 / _EQ))); //#26073
            $k[$j++] = _EQ; //#26073
        } //#26073
        $j--; //#26073
        var _ER = $a(); //#26073
        $1[$k[--$j]] = _ER; //#26073
        var _ET = $1.colors; //#26075
        $1.palette = new Map; //#26075
        var _EU = $1.colors; //#26076
        var _EV = 64; //#26076
        if (64 > _EU) { //#26076
            var _ = _EU; //#26076
            _EU = _EV; //#26076
            _EV = _; //#26076
        } //#26076
        $1.palettelayout = $a(_EV); //#26076
        $1.i = 0; //#26077
        $1.j = 8; //#26077
        $forall($1.rvals, function() { //#26111
            $1.r = $k[--$j]; //#26079
            $forall($1.gvals, function() { //#26110
                $1.g = $k[--$j]; //#26081
                $forall($1.bvals, function() { //#26109
                    $1.b = $k[--$j]; //#26083
                    var _Eh = $strcpy($s(6), "000000"); //#26085
                    var _Ej = $cvrs($s(6), (($1.r << 16) | ($1.g << 8)) | $1.b, 16); //#26085
                    $puti(_Eh, 6 - _Ej.length, _Ej); //#26085
                    $k[$j++] = _Eh; //#26087
                    $k[$j++] = false; //#26087
                    if ($eq(_Eh, "000000")) { //#26087
                        $1.ki = $1.i; //#26087
                        $j--; //#26087
                        $k[$j++] = true; //#26087
                    } //#26087
                    var _El = $k[--$j]; //#26088
                    var _Em = $k[--$j]; //#26088
                    $k[$j++] = _Em; //#26088
                    $k[$j++] = _El; //#26088
                    if ($eq(_Em, "0000FF")) { //#26088
                        $1.bi = $1.i; //#26088
                        $j--; //#26088
                        $k[$j++] = true; //#26088
                    } //#26088
                    var _Eo = $k[--$j]; //#26089
                    var _Ep = $k[--$j]; //#26089
                    $k[$j++] = _Ep; //#26089
                    $k[$j++] = _Eo; //#26089
                    if ($eq(_Ep, "00FF00")) { //#26089
                        $1.gi = $1.i; //#26089
                        $j--; //#26089
                        $k[$j++] = true; //#26089
                    } //#26089
                    var _Er = $k[--$j]; //#26090
                    var _Es = $k[--$j]; //#26090
                    $k[$j++] = _Es; //#26090
                    $k[$j++] = _Er; //#26090
                    if ($eq(_Es, "00FFFF")) { //#26090
                        $1.ci = $1.i; //#26090
                        $j--; //#26090
                        $k[$j++] = true; //#26090
                    } //#26090
                    var _Eu = $k[--$j]; //#26091
                    var _Ev = $k[--$j]; //#26091
                    $k[$j++] = _Ev; //#26091
                    $k[$j++] = _Eu; //#26091
                    if ($eq(_Ev, "FF0000")) { //#26091
                        $1.ri = $1.i; //#26091
                        $j--; //#26091
                        $k[$j++] = true; //#26091
                    } //#26091
                    var _Ex = $k[--$j]; //#26092
                    var _Ey = $k[--$j]; //#26092
                    $k[$j++] = _Ey; //#26092
                    $k[$j++] = _Ex; //#26092
                    if ($eq(_Ey, "FF00FF")) { //#26092
                        $1.mi = $1.i; //#26092
                        $j--; //#26092
                        $k[$j++] = true; //#26092
                    } //#26092
                    var _F0 = $k[--$j]; //#26093
                    var _F1 = $k[--$j]; //#26093
                    $k[$j++] = _F1; //#26093
                    $k[$j++] = _F0; //#26093
                    if ($eq(_F1, "FFFF00")) { //#26093
                        $1.yi = $1.i; //#26093
                        $j--; //#26093
                        $k[$j++] = true; //#26093
                    } //#26093
                    var _F3 = $k[--$j]; //#26094
                    var _F4 = $k[--$j]; //#26094
                    $k[$j++] = _F4; //#26094
                    $k[$j++] = _F3; //#26094
                    if ($eq(_F4, "FFFFFF")) { //#26094
                        $1.wi = $1.i; //#26094
                        $j--; //#26094
                        $k[$j++] = true; //#26094
                    } //#26094
                    if ($nt($k[--$j])) { //#26106
                        if (($1.colors <= 64) || ((($1.colors == 128) && (((($1.r == 0) || ($1.r == 73)) || ($1.r == 182)) || ($1.r == 255))) || ((($1.colors == 256) && (((($1.r == 0) || ($1.r == 73)) || ($1.r == 182)) || ($1.r == 255))) && (((($1.g == 0) || ($1.g == 73)) || ($1.g == 182)) || ($1.g == 255))))) { //#26105
                            $put($1.palettelayout, $1.j, $1.i); //#26103
                            $1.j = $1.j + 1; //#26104
                        } //#26104
                    } //#26104
                    $put($1.palette, $1.i, $k[--$j]); //#26107
                    $1.i = $1.i + 1; //#26108
                }); //#26108
            }); //#26108
        }); //#26108
        $puti($1.palettelayout, 0, $a([$1.ki, $1.bi, $1.gi, $1.ci, $1.ri, $1.mi, $1.yi, $1.wi])); //#26112
        $1.metacolorindex = $a([$1.ki, $1.bi, $1.gi, $1.ci, $1.ri, $1.mi, $1.yi, $1.wi]); //#26113
    } //#26113
    $k[$j++] = Infinity; //#26117
    for (var _Fp = 0, _Fq = $1.rows * $1.cols; _Fp < _Fq; _Fp++) { //#26117
        $k[$j++] = -1; //#26117
    } //#26117
    $1.pixs = $a(); //#26117
    $1.jmv = function() {
        var _Ft = $k[--$j]; //#26118
        var _Fu = $k[--$j]; //#26118
        $k[$j++] = $f(_Fu + (_Ft * $1.cols)); //#26118
    }; //#26118
    if (!$1.slave) { //#26148
        $1.fpat = $a([$a([1, 1, 1, 0, 0]), $a([1, 2, 2, 0, 0]), $a([1, 2, 1, 2, 1]), $a([0, 0, 2, 2, 1]), $a([0, 0, 1, 1, 1])]); //#26128
        $1.fmap = $a([$a([-1, $1.bi, $1.yi]), $a([-1, $1.yi, $1.bi]), $a([-1, $1.gi, $1.mi]), $a([-1, $1.mi, $1.gi])]); //#26134
    } else { //#26148
        $1.fpat = $a([$a([0, 0, 0, 0, 0]), $a([0, 2, 2, 0, 0]), $a([0, 2, 1, 2, 0]), $a([0, 0, 2, 2, 0]), $a([0, 0, 0, 0, 0])]); //#26142
        $1.fmap = $a([$a([-1, $1.ki, $1.wi]), $a([-1, $1.ki, $1.wi]), $a([-1, $1.ki, $1.wi]), $a([-1, $1.ki, $1.wi])]); //#26148
    } //#26148
    for (var _GY = 0; _GY <= 4; _GY += 1) { //#26160
        $1.y = _GY; //#26151
        for (var _GZ = 0; _GZ <= 4; _GZ += 1) { //#26159
            $1.x = _GZ; //#26153
            $1.fpb = $get($get($1.fpat, $1.y), $1.x); //#26154
            $k[$j++] = $1.pixs; //#26155
            $k[$j++] = $1.x + 1; //#26155
            $k[$j++] = $1.y + 1; //#26155
            $1.jmv(); //#26155
            var _Gm = $k[--$j]; //#26155
            $put($k[--$j], _Gm, $get($get($1.fmap, 0), $1.fpb)); //#26155
            $k[$j++] = $1.pixs; //#26156
            $k[$j++] = $1.x + 1; //#26156
            $k[$j++] = $f($f($1.rows - $1.y) - 2); //#26156
            $1.jmv(); //#26156
            var _Gw = $k[--$j]; //#26156
            $put($k[--$j], _Gw, $get($get($1.fmap, 1), $1.fpb)); //#26156
            $k[$j++] = $1.pixs; //#26157
            $k[$j++] = $f($f($1.x + $1.cols) - 6); //#26157
            $k[$j++] = $1.y + 1; //#26157
            $1.jmv(); //#26157
            var _H6 = $k[--$j]; //#26157
            $put($k[--$j], _H6, $get($get($1.fmap, 2), $1.fpb)); //#26157
            $k[$j++] = $1.pixs; //#26158
            $k[$j++] = $f($f($1.x + $1.cols) - 6); //#26158
            $k[$j++] = $f($f($1.rows - $1.y) - 2); //#26158
            $1.jmv(); //#26158
            var _HH = $k[--$j]; //#26158
            $put($k[--$j], _HH, $get($get($1.fmap, 3), $1.fpb)); //#26158
        } //#26158
    } //#26158
    $1.algnpat0 = $a([$a([$1.ki, $1.ki, -1]), $a([$1.ki, $1.wi, $1.ki]), $a([-1, $1.ki, $1.ki])]); //#26167
    $1.algnpat1 = $a([$a([-1, $1.ki, $1.ki]), $a([$1.ki, $1.wi, $1.ki]), $a([$1.ki, $1.ki, -1])]); //#26172
    $1.num = (~~Math.round($1.cols / 16)) - 1; //#26173
    $1.algnrpos = $a([3, 17]); //#26174
    if ($1.num > 0) { //#26177
        $k[$j++] = Infinity; //#26176
        for (var _Hk = 0, _Hj = $1.num; _Hk <= _Hj; _Hk += 1) { //#26176
            $k[$j++] = (~~(_Hk * ($f($1.cols - 7) / $1.num))) + 3; //#26176
        } //#26176
        $1.algnrpos = $a(); //#26176
    } //#26176
    $1.num = (~~Math.round($1.rows / 16)) - 1; //#26178
    $1.algncpos = $a([3, 17]); //#26179
    if ($1.num > 0) { //#26182
        $k[$j++] = Infinity; //#26181
        for (var _Ht = 0, _Hs = $1.num; _Ht <= _Hs; _Ht += 1) { //#26181
            $k[$j++] = (~~(_Ht * ($f($1.rows - 7) / $1.num))) + 3; //#26181
        } //#26181
        $1.algncpos = $a(); //#26181
    } //#26181
    $1.putalgnpat = function() {
        $1.pp = $k[--$j]; //#26184
        $1.py = $k[--$j]; //#26185
        $1.px = $k[--$j]; //#26186
        for (var _I0 = 0; _I0 <= 2; _I0 += 1) { //#26193
            $1.pb = _I0; //#26188
            for (var _I1 = 0; _I1 <= 2; _I1 += 1) { //#26192
                $1.pa = _I1; //#26190
                $k[$j++] = $1.pixs; //#26191
                $k[$j++] = $f($1.px + $1.pa); //#26191
                $k[$j++] = $f($1.py + $1.pb); //#26191
                $1.jmv(); //#26191
                var _IC = $k[--$j]; //#26191
                $put($k[--$j], _IC, $get($get($1.pp, $1.pb), $1.pa)); //#26191
            } //#26191
        } //#26191
    }; //#26191
    for (var _IG = 0, _IF = $1.algncpos.length - 1; _IG <= _IF; _IG += 1) { //#26205
        $1.j = _IG; //#26196
        $1.y = $get($1.algncpos, $1.j); //#26197
        for (var _IM = 0, _IL = $1.algnrpos.length - 1; _IM <= _IL; _IM += 1) { //#26204
            $1.i = _IM; //#26199
            $1.x = $get($1.algnrpos, $1.i); //#26200
            $k[$j++] = $1.pixs; //#26201
            $k[$j++] = $1.x; //#26201
            $k[$j++] = $1.y; //#26201
            $1.jmv(); //#26201
            var _IT = $k[--$j]; //#26201
            if ($get($k[--$j], _IT) == -1) { //#26203
                $k[$j++] = $f($1.x - 1); //#26202
                $k[$j++] = $f($1.y - 1); //#26202
                if ((($1.i + $1.j) % 2) == 0) { //#26202
                    $k[$j++] = $1.algnpat0; //#26202
                } else { //#26202
                    $k[$j++] = $1.algnpat1; //#26202
                } //#26202
                $1.putalgnpat(); //#26202
            } //#26202
        } //#26202
    } //#26202
    if (!$1.slave) { //#26257
        var _JL = $a([$a([6, 1]), $a([6, 2]), $a([6, 3]), $a([6, 4]), $a([6, 5]), $a([6, 6]), $a([5, 6]), $a([4, 6]), $a([3, 6]), $a([2, 6]), $a([1, 6]), $a([7, 1]), $a([7, 2]), $a([7, 3]), $a([7, 4]), $a([7, 5]), $a([7, 6]), $a([7, 7]), $a([6, 7]), $a([5, 7]), $a([4, 7]), $a([3, 7]), $a([2, 7]), $a([1, 7]), $a([8, 1]), $a([8, 2]), $a([8, 3]), $a([8, 4]), $a([8, 5]), $a([8, 6]), $a([8, 7]), $a([8, 8]), $a([7, 8]), $a([6, 8]), $a([5, 8]), $a([4, 8]), $a([3, 8]), $a([2, 8]), $a([1, 8]), $a([9, 1]), $a([9, 2]), $a([9, 3]), $a([9, 4]), $a([9, 5])]); //#26216
        for (var _JM = 0, _JN = _JL.length; _JM < _JN; _JM++) { //#26220
            $aload($get(_JL, _JM)); //#26218
            $1.y = $k[--$j]; //#26218
            $1.x = $k[--$j]; //#26218
            $k[$j++] = $a([$1.x, $1.y]); //#26219
            $k[$j++] = $a([-$1.x, $1.y]); //#26219
            $k[$j++] = $a([-$1.x, -$1.y]); //#26219
            $k[$j++] = $a([$1.x, -$1.y]); //#26219
        } //#26219
        $astore($a(176)); //#26221
        $1.metadatamap = $k[--$j]; //#26221
        $1.palettemap1 = $a([$a([4, 1]), $a([4, 2]), $a([5, 1]), $a([5, 2]), $a([2, 4]), $a([2, 5]), $a([1, 4]), $a([1, 5]), $a([-2, 1]), $a([-2, 2]), $a([-1, 1]), $a([-1, 2]), $a([-4, 4]), $a([-4, 5]), $a([-5, 4]), $a([-5, 5])]); //#26226
        $1.palettemap2 = $a([$a([-4, -5]), $a([-4, -4]), $a([-5, -5]), $a([-5, -4]), $a([-2, -2]), $a([-2, -1]), $a([-1, -2]), $a([-1, -1]), $a([2, -5]), $a([2, -4]), $a([1, -5]), $a([1, -4]), $a([4, -2]), $a([4, -1]), $a([5, -2]), $a([5, -1])]); //#26231
    } else { //#26257
        $k[$j++] = Infinity; //#26244
        for (var _KD = 1; _KD <= 19; _KD += 1) { //#26241
            $1.i = _KD; //#26239
            $k[$j++] = $a([0, $1.i]); //#26240
            $k[$j++] = $a([1, $1.i]); //#26240
        } //#26240
        for (var _KI = 5; _KI <= 12; _KI += 1) { //#26245
            $1.i = _KI; //#26243
            $k[$j++] = $a([2, $1.i]); //#26244
            $k[$j++] = $a([3, $1.i]); //#26244
        } //#26244
        $1.metadatamap = $a(); //#26244
        $k[$j++] = Infinity; //#26252
        for (var _KO = 5; _KO <= 12; _KO += 1) { //#26249
            $k[$j++] = _KO; //#26249
            $k[$j++] = Infinity; //#26249
            var _KP = $k[--$j]; //#26249
            var _KQ = $k[--$j]; //#26249
            $k[$j++] = _KP; //#26249
            $k[$j++] = 4; //#26249
            $k[$j++] = _KQ; //#26249
            var _KR = $a(); //#26249
            $k[$j++] = _KR; //#26249
        } //#26249
        for (var _KS = 12; _KS >= 5; _KS -= 1) { //#26250
            $k[$j++] = _KS; //#26250
            $k[$j++] = Infinity; //#26250
            var _KT = $k[--$j]; //#26250
            var _KU = $k[--$j]; //#26250
            $k[$j++] = _KT; //#26250
            $k[$j++] = 5; //#26250
            $k[$j++] = _KU; //#26250
            var _KV = $a(); //#26250
            $k[$j++] = _KV; //#26250
        } //#26250
        for (var _KW = 5; _KW <= 12; _KW += 1) { //#26251
            $k[$j++] = _KW; //#26251
            $k[$j++] = Infinity; //#26251
            var _KX = $k[--$j]; //#26251
            var _KY = $k[--$j]; //#26251
            $k[$j++] = _KX; //#26251
            $k[$j++] = 6; //#26251
            $k[$j++] = _KY; //#26251
            var _KZ = $a(); //#26251
            $k[$j++] = _KZ; //#26251
        } //#26251
        for (var _Ka = 12; _Ka >= 5; _Ka -= 1) { //#26252
            $k[$j++] = _Ka; //#26252
            $k[$j++] = Infinity; //#26252
            var _Kb = $k[--$j]; //#26252
            var _Kc = $k[--$j]; //#26252
            $k[$j++] = _Kb; //#26252
            $k[$j++] = 7; //#26252
            $k[$j++] = _Kc; //#26252
            var _Kd = $a(); //#26252
            $k[$j++] = _Kd; //#26252
        } //#26252
        $1.palettemap1 = $a(); //#26252
        $k[$j++] = Infinity; //#26256
        var _Kf = $1.palettemap1; //#26256
        for (var _Kg = 0, _Kh = _Kf.length; _Kg < _Kh; _Kg++) { //#26256
            $k[$j++] = $get(_Kf, _Kg); //#26256
            $k[$j++] = Infinity; //#26256
            var _Kj = $k[--$j]; //#26256
            var _Kk = $k[--$j]; //#26256
            $k[$j++] = _Kj; //#26256
            $aload(_Kk); //#26256
            var _Kl = $k[--$j]; //#26256
            var _Km = $k[--$j]; //#26256
            $k[$j++] = -_Km; //#26256
            $k[$j++] = -_Kl; //#26256
            var _Kn = $a(); //#26256
            $k[$j++] = _Kn; //#26256
        } //#26256
        $1.palettemap2 = $a(); //#26256
    } //#26257
    var _Kp = $1.metadatamap; //#26262
    for (var _Kq = 0, _Kr = _Kp.length; _Kq < _Kr; _Kq++) { //#26266
        var _Ks = $get(_Kp, _Kq); //#26266
        var _Kt = $get(_Ks, 0); //#26263
        $k[$j++] = _Ks; //#26263
        $k[$j++] = _Kt; //#26263
        if (_Kt < 0) { //#26263
            var _Kv = $k[--$j]; //#26263
            var _Kw = $k[--$j]; //#26263
            $put(_Kw, 0, $f($f(_Kv + $1.cols) - 1)); //#26263
            $k[$j++] = _Kw; //#26263
        } else { //#26263
            $j--; //#26263
        } //#26263
        var _Kx = $k[--$j]; //#26264
        var _Ky = $get(_Kx, 1); //#26264
        $k[$j++] = _Kx; //#26264
        $k[$j++] = _Ky; //#26264
        if (_Ky < 0) { //#26264
            var _L0 = $k[--$j]; //#26264
            var _L1 = $k[--$j]; //#26264
            $put(_L1, 1, $f($f(_L0 + $1.rows) - 1)); //#26264
            $k[$j++] = _L1; //#26264
        } else { //#26264
            $j--; //#26264
        } //#26264
        $j--; //#26265
    } //#26265
    var _L2 = $1.palettemap1; //#26267
    for (var _L3 = 0, _L4 = _L2.length; _L3 < _L4; _L3++) { //#26271
        var _L5 = $get(_L2, _L3); //#26271
        var _L6 = $get(_L5, 0); //#26268
        $k[$j++] = _L5; //#26268
        $k[$j++] = _L6; //#26268
        if (_L6 < 0) { //#26268
            var _L8 = $k[--$j]; //#26268
            var _L9 = $k[--$j]; //#26268
            $put(_L9, 0, $f($f(_L8 + $1.cols) - 1)); //#26268
            $k[$j++] = _L9; //#26268
        } else { //#26268
            $j--; //#26268
        } //#26268
        var _LA = $k[--$j]; //#26269
        var _LB = $get(_LA, 1); //#26269
        $k[$j++] = _LA; //#26269
        $k[$j++] = _LB; //#26269
        if (_LB < 0) { //#26269
            var _LD = $k[--$j]; //#26269
            var _LE = $k[--$j]; //#26269
            $put(_LE, 1, $f($f(_LD + $1.rows) - 1)); //#26269
            $k[$j++] = _LE; //#26269
        } else { //#26269
            $j--; //#26269
        } //#26269
        $j--; //#26270
    } //#26270
    var _LF = $1.palettemap2; //#26272
    for (var _LG = 0, _LH = _LF.length; _LG < _LH; _LG++) { //#26276
        var _LI = $get(_LF, _LG); //#26276
        var _LJ = $get(_LI, 0); //#26273
        $k[$j++] = _LI; //#26273
        $k[$j++] = _LJ; //#26273
        if (_LJ < 0) { //#26273
            var _LL = $k[--$j]; //#26273
            var _LM = $k[--$j]; //#26273
            $put(_LM, 0, $f($f(_LL + $1.cols) - 1)); //#26273
            $k[$j++] = _LM; //#26273
        } else { //#26273
            $j--; //#26273
        } //#26273
        var _LN = $k[--$j]; //#26274
        var _LO = $get(_LN, 1); //#26274
        $k[$j++] = _LN; //#26274
        $k[$j++] = _LO; //#26274
        if (_LO < 0) { //#26274
            var _LQ = $k[--$j]; //#26274
            var _LR = $k[--$j]; //#26274
            $put(_LR, 1, $f($f(_LQ + $1.rows) - 1)); //#26274
            $k[$j++] = _LR; //#26274
        } else { //#26274
            $j--; //#26274
        } //#26274
        $j--; //#26275
    } //#26275
    for (var _LU = 0, _LT = $f($1.nummetamodules - 1); _LU <= _LT; _LU += 1) { //#26281
        $k[$j++] = $1.pixs; //#26280
        $aload($get($1.metadatamap, _LU)); //#26280
        $1.jmv(); //#26280
        var _LY = $k[--$j]; //#26280
        $put($k[--$j], _LY, 0); //#26280
    } //#26280
    if (!$1.slave) { //#26294
        var _Lb = $1.colors; //#26286
        var _Lc = 16; //#26286
        if (16 > _Lb) { //#26286
            var _ = _Lb; //#26286
            _Lb = _Lc; //#26286
            _Lc = _; //#26286
        } //#26286
        for (var _Le = 0, _Ld = _Lc - 1; _Le <= _Ld; _Le += 1) { //#26291
            $1.i = _Le; //#26287
            var _Lh = $get($1.palettelayout, $1.i); //#26288
            $k[$j++] = _Lh; //#26289
            $k[$j++] = $1.pixs; //#26289
            $k[$j++] = _Lh; //#26289
            $aload($get($1.palettemap1, $1.i)); //#26289
            $1.jmv(); //#26289
            var _Lm = $k[--$j]; //#26289
            var _Ln = $k[--$j]; //#26289
            $put($k[--$j], _Lm, _Ln); //#26289
            var _Lq = $k[--$j]; //#26290
            $k[$j++] = $1.pixs; //#26290
            $k[$j++] = _Lq; //#26290
            $aload($get($1.palettemap2, $1.i)); //#26290
            $1.jmv(); //#26290
            var _Lu = $k[--$j]; //#26290
            var _Lv = $k[--$j]; //#26290
            $put($k[--$j], _Lu, _Lv); //#26290
        } //#26290
        $1.i = 16; //#26292
    } else { //#26294
        $1.i = 0; //#26294
    } //#26294
    $1.j = $1.nummetamodules; //#26298
    for (var _M1 = $1.i, _M0 = $1.palettelayout.length - 1; _M1 <= _M0; _M1 += 2) { //#26308
        $1.i = _M1; //#26300
        var _M4 = $get($1.palettelayout, $1.i); //#26301
        $k[$j++] = _M4; //#26302
        $k[$j++] = $1.pixs; //#26302
        $k[$j++] = _M4; //#26302
        $aload($get($1.metadatamap, $1.j)); //#26302
        $1.jmv(); //#26302
        var _M9 = $k[--$j]; //#26302
        var _MA = $k[--$j]; //#26302
        $put($k[--$j], _M9, _MA); //#26302
        var _MD = $k[--$j]; //#26303
        $k[$j++] = $1.pixs; //#26303
        $k[$j++] = _MD; //#26303
        $aload($get($1.metadatamap, $f($1.j + 2))); //#26303
        $1.jmv(); //#26303
        var _MH = $k[--$j]; //#26303
        var _MI = $k[--$j]; //#26303
        $put($k[--$j], _MH, _MI); //#26303
        var _MM = $get($1.palettelayout, $1.i + 1); //#26304
        $k[$j++] = _MM; //#26305
        $k[$j++] = $1.pixs; //#26305
        $k[$j++] = _MM; //#26305
        $aload($get($1.metadatamap, $f($1.j + 1))); //#26305
        $1.jmv(); //#26305
        var _MR = $k[--$j]; //#26305
        var _MS = $k[--$j]; //#26305
        $put($k[--$j], _MR, _MS); //#26305
        var _MV = $k[--$j]; //#26306
        $k[$j++] = $1.pixs; //#26306
        $k[$j++] = _MV; //#26306
        $aload($get($1.metadatamap, $f($1.j + 3))); //#26306
        $1.jmv(); //#26306
        var _MZ = $k[--$j]; //#26306
        var _Ma = $k[--$j]; //#26306
        $put($k[--$j], _MZ, _Ma); //#26306
        $1.j = $f($1.j + 4); //#26307
    } //#26307
    var _N2 = $a([function() {
        var _Md = $k[--$j]; //#26312
        var _Me = $k[--$j]; //#26312
        $k[$j++] = $f(_Me + _Md) % $1.colors; //#26312
    }, function() {
        $j--; //#26313
        var _Mh = $k[--$j]; //#26313
        $k[$j++] = _Mh % $1.colors; //#26313
    }, function() {
        var _Mi = $k[--$j]; //#26314
        var _Mj = $k[--$j]; //#26314
        $k[$j++] = _Mi; //#26314
        $k[$j++] = _Mj; //#26314
        $j--; //#26314
        var _Ml = $k[--$j]; //#26314
        $k[$j++] = _Ml % $1.colors; //#26314
    }, function() {
        var _Mm = $k[--$j]; //#26315
        var _Mn = $k[--$j]; //#26315
        $k[$j++] = ((~~(_Mm / 3)) + (~~(_Mn / 2))) % $1.colors; //#26315
    }, function() {
        var _Mp = $k[--$j]; //#26316
        var _Mq = $k[--$j]; //#26316
        $k[$j++] = ((~~(_Mp / 2)) + (~~(_Mq / 3))) % $1.colors; //#26316
    }, function() {
        var _Ms = $k[--$j]; //#26317
        var _Mu = $f($k[--$j] + _Ms); //#26317
        $k[$j++] = ((~~(_Mu / 2)) + (~~(_Mu / 3))) % $1.colors; //#26317
    }, function() {
        var _Mw = $k[--$j]; //#26318
        var _Mx = $k[--$j]; //#26318
        $k[$j++] = ($f(((_Mw * (_Mx * _Mx)) % 7) + ((($f(_Mw + (_Mx * _Mx))) * 2) % 19))) % $1.colors; //#26318
    }, function() {
        var _Mz = $k[--$j]; //#26319
        var _N0 = $k[--$j]; //#26319
        $k[$j++] = ($f(((_N0 * (_Mz * _Mz)) % 5) + (($f((_Mz * _Mz) + (_N0 * 2))) % 13))) % $1.colors; //#26319
    }]); //#26319
    $1.maskfuncs = _N2; //#26320
    if ($1.mask != -1) { //#26324
        $1.maskfuncs = $a([$get($1.maskfuncs, $1.mask)]); //#26322
        $1.bestmaskval = $1.mask; //#26323
    } //#26323
    $1.masks = $a($1.maskfuncs.length); //#26325
    for (var _ND = 0, _NC = $1.masks.length - 1; _ND <= _NC; _ND += 1) { //#26338
        $1.m = _ND; //#26327
        $1.mask = $a($1.rows * $1.cols); //#26328
        for (var _NJ = 0, _NI = $f($1.rows - 1); _NJ <= _NI; _NJ += 1) { //#26336
            $1.j = _NJ; //#26330
            for (var _NM = 0, _NL = $f($1.cols - 1); _NM <= _NL; _NM += 1) { //#26335
                $1.i = _NM; //#26332
                $k[$j++] = $1.pixs; //#26333
                $k[$j++] = $1.i; //#26333
                $k[$j++] = $1.j; //#26333
                $1.jmv(); //#26333
                var _NQ = $k[--$j]; //#26333
                if ($get($k[--$j], _NQ) == -1) { //#26333
                    $k[$j++] = $1.i; //#26333
                    $k[$j++] = $1.j; //#26333
                    if ($get($1.maskfuncs, $1.m)() === true) {
                        break;
                    } //#26333
                } else { //#26333
                    $k[$j++] = 0; //#26333
                } //#26333
                $k[$j++] = $1.mask; //#26334
                $k[$j++] = $1.i; //#26334
                $k[$j++] = $1.j; //#26334
                $1.jmv(); //#26334
                var _Nb = $k[--$j]; //#26334
                var _Nc = $k[--$j]; //#26334
                $put(_Nc, _Nb, $k[--$j]); //#26334
            } //#26334
        } //#26334
        $put($1.masks, $1.m, $1.mask); //#26337
    } //#26337
    $1.posx = 0; //#26341
    $1.posy = 0; //#26341
    $1.i = 0; //#26342
    for (;;) { //#26352
        if ($1.posx == $1.cols) { //#26344
            break; //#26344
        } //#26344
        $k[$j++] = $1.pixs; //#26345
        $k[$j++] = $1.posx; //#26345
        $k[$j++] = $1.posy; //#26345
        $1.jmv(); //#26345
        var _Nm = $k[--$j]; //#26345
        if ($get($k[--$j], _Nm) == -1) { //#26349
            var _Ns = $geti($1.bits, $1.i, $1.databpm); //#26346
            $k[$j++] = 0; //#26346
            for (var _Nt = 0, _Nu = _Ns.length; _Nt < _Nu; _Nt++) { //#26346
                var _Nw = $k[--$j]; //#26346
                $k[$j++] = ($f(_Nw + $f($get(_Ns, _Nt) - 48))) * 2; //#26346
            } //#26346
            var _Nx = $k[--$j]; //#26346
            $k[$j++] = ~~(_Nx / 2); //#26347
            $k[$j++] = $1.pixs; //#26347
            $k[$j++] = $1.posx; //#26347
            $k[$j++] = $1.posy; //#26347
            $1.jmv(); //#26347
            var _O1 = $k[--$j]; //#26347
            var _O2 = $k[--$j]; //#26347
            $put(_O2, _O1, $k[--$j]); //#26347
            $1.i = $1.i + $1.databpm; //#26348
        } //#26348
        $1.posy = $1.posy + 1; //#26350
        if ($1.posy == $1.rows) { //#26351
            $1.posy = 0; //#26351
            $1.posx = $1.posx + 1; //#26351
        } //#26351
    } //#26351
    $1.evalrle = function() {
        $1.scrle = $k[--$j]; //#26356
        $1.scr1 = 0; //#26357
        $1.scr3 = 0; //#26357
        for (var _OD = 0, _OC = $1.scrle.length - 2; _OD <= _OC; _OD += 2) { //#26379
            $1.j = _OD; //#26359
            if ($get($1.scrle, $1.j + 1) != -1) { //#26378
                var _OJ = $get($1.scrle, $1.j); //#26362
                $k[$j++] = _OJ; //#26362
                if (_OJ >= 5) { //#26362
                    $1.scr1 = $f($f($k[--$j] - 2) + $1.scr1); //#26362
                } else { //#26362
                    $j--; //#26362
                } //#26362
                if (($1.j >= 4) && ($1.j <= ($1.scrle.length - 5))) { //#26377
                    var _OR = $geti($1.scrle, $1.j - 4, 10); //#26365
                    $k[$j++] = _OR; //#26366
                    for (var _OS = 0, _OT = _OR.length; _OS < _OT; _OS++) { //#26366
                        $k[$j++] = $get(_OR, _OS) == 1; //#26366
                    } //#26366
                    $j--; //#26366
                    for (var _OV = 0, _OW = 4; _OV < _OW; _OV++) { //#26366
                        var _OX = $k[--$j]; //#26366
                        var _OY = $k[--$j]; //#26366
                        $k[$j++] = _OX; //#26366
                        $k[$j++] = _OY; //#26366
                        $j--; //#26366
                        var _OZ = $k[--$j]; //#26366
                        var _Oa = $k[--$j]; //#26366
                        $k[$j++] = $an(_Oa, _OZ); //#26366
                    } //#26366
                    if ($k[--$j]) { //#26376
                        $k[$j++] = Infinity; //#26367
                        var _Oc = $k[--$j]; //#26367
                        var _Od = $k[--$j]; //#26367
                        $k[$j++] = _Oc; //#26367
                        $aload(_Od); //#26367
                        var _Oe = $k[--$j]; //#26368
                        var _Of = $k[--$j]; //#26368
                        var _Og = $k[--$j]; //#26368
                        var _Oh = $k[--$j]; //#26368
                        var _Oi = $k[--$j]; //#26368
                        var _Oj = $k[--$j]; //#26368
                        var _Ok = $k[--$j]; //#26368
                        var _Ol = $k[--$j]; //#26368
                        var _Om = $k[--$j]; //#26368
                        $k[$j++] = _Om; //#26374
                        $k[$j++] = _Ol; //#26374
                        $k[$j++] = _Ok; //#26374
                        $k[$j++] = _Oj; //#26374
                        $k[$j++] = _Oi; //#26374
                        $k[$j++] = _Oh; //#26374
                        $k[$j++] = _Og; //#26374
                        $k[$j++] = _Of; //#26374
                        $k[$j++] = _Oe; //#26374
                        if (($eq(_Om, _Oi) && $eq(_Om, _Oe)) && $eq(_Ok, _Og)) { //#26374
                            var _On = $k[--$j]; //#26370
                            var _Oo = $k[--$j]; //#26370
                            var _Op = $k[--$j]; //#26370
                            $1.c4 = _Op; //#26370
                            $1.c5 = _On; //#26370
                            $k[$j++] = _Op; //#26373
                            $k[$j++] = _Oo; //#26373
                            if ((($1.c4 == $1.bi) && ($1.c5 == $1.yi)) || ((($1.c4 == $1.yi) && ($1.c5 == $1.bi)) || ((($1.c4 == $1.gi) && ($1.c5 == $1.mi)) || (($1.c4 == $1.mi) && ($1.c5 == $1.gi))))) { //#26373
                                $1.scr3 = $1.scr3 + 100; //#26373
                            } //#26373
                        } //#26373
                        $cleartomark(); //#26375
                    } else { //#26376
                        $j--; //#26376
                    } //#26376
                } //#26376
            } //#26376
        } //#26376
        $k[$j++] = $1.scr1; //#26380
        $k[$j++] = $1.scr3; //#26380
    }; //#26380
    $1.evalmask = function() {
        $1.sym = $k[--$j]; //#26384
        $1.n1 = 0; //#26386
        $1.n2 = 0; //#26386
        $1.n3 = 0; //#26386
        var _PA = $1.rows; //#26387
        var _PB = $1.cols; //#26387
        if (_PA < _PB) { //#26387
            var _ = _PB; //#26387
            _PB = _PA; //#26387
            _PA = _; //#26387
        } //#26387
        $1.rle = $a($f((_PA * 2) + 2)); //#26387
        $1.lastpairs = $a($1.cols); //#26388
        $1.thispairs = $a($1.cols); //#26389
        for (var _PJ = 0, _PI = $f($1.cols - 1); _PJ <= _PI; _PJ += 1) { //#26401
            $1.i = _PJ; //#26393
            $k[$j++] = Infinity; //#26394
            $k[$j++] = 0; //#26397
            $k[$j++] = -1; //#26397
            for (var _PP = $1.i, _PQ = $1.cols, _PO = $f(($1.rows * $1.cols) - 1); _PQ < 0 ? _PP >= _PO : _PP <= _PO; _PP += _PQ) { //#26397
                var _PS = $get($1.sym, _PP); //#26396
                var _PT = $k[--$j]; //#26396
                $k[$j++] = _PT; //#26396
                $k[$j++] = _PS; //#26396
                if ($eq(_PT, _PS)) { //#26396
                    $j--; //#26396
                    var _PU = $k[--$j]; //#26396
                    var _PV = $k[--$j]; //#26396
                    $k[$j++] = $f(_PV + 1); //#26396
                    $k[$j++] = _PU; //#26396
                } else { //#26396
                    var _PW = $k[--$j]; //#26396
                    $k[$j++] = 1; //#26396
                    $k[$j++] = _PW; //#26396
                } //#26396
            } //#26396
            var _PY = $counttomark() + 2; //#26398
            $astore($geti($1.rle, 0, _PY - 2)); //#26398
            $1.evalrle(); //#26399
            $1.n3 = $f($k[--$j] + $1.n3); //#26399
            $1.n1 = $f($k[--$j] + $1.n1); //#26399
            $j--; //#26400
        } //#26400
        for (var _Pg = 0, _Pf = $f($1.rows - 1); _Pg <= _Pf; _Pg += 1) { //#26428
            $1.i = _Pg; //#26404
            $1.symrow = $geti($1.sym, $1.i * $1.cols, $1.cols); //#26407
            $k[$j++] = Infinity; //#26408
            var _Pm = $1.symrow; //#26409
            $k[$j++] = 0; //#26411
            $k[$j++] = -1; //#26411
            for (var _Pn = 0, _Po = _Pm.length; _Pn < _Po; _Pn++) { //#26411
                var _Pp = $get(_Pm, _Pn); //#26411
                var _Pq = $k[--$j]; //#26410
                $k[$j++] = _Pq; //#26410
                $k[$j++] = _Pp; //#26410
                if ($eq(_Pq, _Pp)) { //#26410
                    $j--; //#26410
                    var _Pr = $k[--$j]; //#26410
                    var _Ps = $k[--$j]; //#26410
                    $k[$j++] = $f(_Ps + 1); //#26410
                    $k[$j++] = _Pr; //#26410
                } else { //#26410
                    var _Pt = $k[--$j]; //#26410
                    $k[$j++] = 1; //#26410
                    $k[$j++] = _Pt; //#26410
                } //#26410
            } //#26410
            var _Pv = $counttomark() + 2; //#26412
            $astore($geti($1.rle, 0, _Pv - 2)); //#26412
            $1.evalrle(); //#26413
            $1.n3 = $f($k[--$j] + $1.n3); //#26413
            $1.n1 = $f($k[--$j] + $1.n1); //#26413
            $j--; //#26414
            var _Q1 = $1.thispairs; //#26417
            $1.thispairs = $1.lastpairs; //#26417
            $1.lastpairs = _Q1; //#26417
            var _Q3 = $1.symrow; //#26418
            $k[$j++] = -1; //#26418
            for (var _Q4 = 0, _Q5 = _Q3.length; _Q4 < _Q5; _Q4++) { //#26418
                var _Q6 = $get(_Q3, _Q4); //#26418
                var _Q7 = $k[--$j]; //#26418
                $k[$j++] = _Q6; //#26418
                $k[$j++] = _Q7; //#26418
                if ($ne(_Q6, _Q7)) { //#26418
                    $j--; //#26418
                    var _Q8 = $k[--$j]; //#26418
                    $k[$j++] = -1; //#26418
                    $k[$j++] = _Q8; //#26418
                } //#26418
            } //#26418
            $j--; //#26419
            $astore($1.thispairs); //#26420
            $j--; //#26420
            if ($1.i > 0) { //#26427
                $k[$j++] = Infinity; //#26422
                $aload($1.lastpairs); //#26423
                $aload($1.thispairs); //#26423
                $k[$j++] = $1.n2; //#26424
                for (var _QF = 0, _QG = $1.cols; _QF < _QG; _QF++) { //#26424
                    var _QH = $k[--$j]; //#26424
                    var _QI = $k[--$j]; //#26424
                    $k[$j++] = _QH; //#26424
                    $k[$j++] = _QI; //#26424
                    if (_QI != -1) { //#26424
                        var _QK = $k[$j - 1 - $f($1.cols + 1)]; //#26424
                        if ($eq($k[--$j], _QK)) { //#26424
                            var _QM = $k[--$j]; //#26424
                            $k[$j++] = $f(_QM + 3); //#26424
                        } //#26424
                    } else { //#26424
                        $j--; //#26424
                    } //#26424
                } //#26424
                $1.n2 = $k[--$j]; //#26425
                $cleartomark(); //#26426
            } //#26426
        } //#26426
        $k[$j++] = $f($f($1.n1 + $1.n2) + $1.n3); //#26430
    }; //#26430
    $1.bestscore = 999999999; //#26434
    for (var _QT = 0, _QS = $1.masks.length - 1; _QT <= _QS; _QT += 1) { //#26452
        $1.m = _QT; //#26436
        $1.masksym = $a($1.rows * $1.cols); //#26437
        for (var _Qa = 0, _QZ = $f(($1.rows * $1.cols) - 1); _Qa <= _QZ; _Qa += 1) { //#26441
            $1.i = _Qa; //#26439
            $put($1.masksym, $1.i, $xo($get($1.pixs, $1.i), $get($get($1.masks, $1.m), $1.i))); //#26440
        } //#26440
        if ($1.masks.length != 1) { //#26450
            $k[$j++] = $1.masksym; //#26443
            $1.evalmask(); //#26443
            $1.score = $k[--$j]; //#26443
            if ($1.score < $1.bestscore) { //#26448
                $1.bestsym = $1.masksym; //#26445
                $1.bestmaskval = $1.m; //#26446
                $1.bestscore = $1.score; //#26447
            } //#26447
        } else { //#26450
            $1.bestsym = $1.masksym; //#26450
        } //#26450
    } //#26450
    $1.pixs = $1.bestsym; //#26453
    $1.metamask = $1.bestmaskval; //#26454
    $1.addtometapart = function() {
        var _Qw = $k[--$j]; //#26458
        $puti($1.metapart, $1.p, _Qw); //#26458
        $1.p = _Qw.length + $1.p; //#26459
    }; //#26459
    $1.addtometabits = function() {
        var _R0 = $k[--$j]; //#26463
        $puti($1.metabits, $1.q, _R0); //#26463
        $1.q = _R0.length + $1.q; //#26464
    }; //#26464
    $1.metapart = $s(40); //#26467
    $1.metabits = $s($1.nummetabits); //#26468
    $1.p = 0; //#26469
    $1.q = 0; //#26469
    if (!$1.slave) { //#26524
        $k[$j++] = (~~(Math.round(Math.log($1.colors) / Math.log(2)))) - 1; //#26474
        $k[$j++] = 3; //#26474
        $1.tofixedbits(); //#26474
        $1.addtometapart(); //#26474
        $k[$j++] = $geti($1.metapart, 0, $1.p); //#26475
        $k[$j++] = 2; //#26475
        $k[$j++] = -1; //#26475
        $1.ldpc(); //#26475
        $1.addtometabits(); //#26475
        $1.p = 0; //#26475
        $k[$j++] = $1.metass; //#26478
        $k[$j++] = 1; //#26478
        $1.tofixedbits(); //#26478
        $1.addtometapart(); //#26478
        $k[$j++] = $1.metavf; //#26479
        $k[$j++] = 2; //#26479
        $1.tofixedbits(); //#26479
        $1.addtometapart(); //#26479
        $k[$j++] = $1.metamask; //#26480
        $k[$j++] = 3; //#26480
        $1.tofixedbits(); //#26480
        $1.addtometapart(); //#26480
        if ($1.hasslaves) { //#26481
            $k[$j++] = "1"; //#26481
        } else { //#26481
            $k[$j++] = "0"; //#26481
        } //#26481
        $1.addtometapart(); //#26481
        $k[$j++] = $geti($1.metapart, 0, $1.p); //#26482
        $k[$j++] = 2; //#26482
        $k[$j++] = -1; //#26482
        $1.ldpc(); //#26482
        $1.addtometabits(); //#26482
        $1.p = 0; //#26482
        if ($1.metass == 0) { //#26492
            $k[$j++] = $f(($f((~~($f($1.cols - 17) / 4)) - $get($a([0, 4, 8, 16]), $1.metavf))) - 1); //#26487
            $k[$j++] = $1.metavlen; //#26487
            $1.tofixedbits(); //#26487
            $1.addtometapart(); //#26487
        } else { //#26492
            $k[$j++] = (~~($f($1.cols - 17) / 4)) - 1; //#26490
            $k[$j++] = ~~($1.metavlen / 2); //#26490
            $1.tofixedbits(); //#26490
            $1.addtometapart(); //#26490
            $k[$j++] = (~~($f($1.rows - 17) / 4)) - 1; //#26492
            $k[$j++] = ~~($1.metavlen / 2); //#26492
            $1.tofixedbits(); //#26492
            $1.addtometapart(); //#26492
        } //#26492
        $k[$j++] = $1.datawc - 3; //#26494
        $k[$j++] = ~~($1.metaelen / 2); //#26494
        $1.tofixedbits(); //#26494
        $1.addtometapart(); //#26494
        $k[$j++] = $1.datawr - 4; //#26495
        $k[$j++] = ~~($1.metaelen / 2); //#26495
        $1.tofixedbits(); //#26495
        $1.addtometapart(); //#26495
        if ($1.hasslaves) { //#26498
            $k[$j++] = 0; //#26497
            $k[$j++] = 4; //#26497
            $1.tofixedbits(); //#26497
            $1.addtometapart(); //#26497
        } //#26497
        $k[$j++] = $geti($1.metapart, 0, $1.p); //#26499
        $k[$j++] = 2; //#26499
        $k[$j++] = -1; //#26499
        $1.ldpc(); //#26499
        $1.addtometabits(); //#26499
        $1.p = 0; //#26499
    } else { //#26524
        var _Rc = $1.sameshape ? 0 : 1; //#26504
        $k[$j++] = _Rc; //#26504
        $k[$j++] = 1; //#26504
        $1.tofixedbits(); //#26504
        $1.addtometapart(); //#26504
        var _Re = $1.sameecc ? 0 : 1; //#26505
        $k[$j++] = _Re; //#26505
        $k[$j++] = 1; //#26505
        $1.tofixedbits(); //#26505
        $1.addtometapart(); //#26505
        var _Rg = $1.hasslaves ? 1 : 0; //#26506
        $k[$j++] = _Rg; //#26506
        $k[$j++] = 1; //#26506
        $1.tofixedbits(); //#26506
        $1.addtometapart(); //#26506
        $k[$j++] = $geti($1.metapart, 0, $1.p); //#26507
        $k[$j++] = 2; //#26507
        $k[$j++] = -1; //#26507
        $1.ldpc(); //#26507
        $1.addtometabits(); //#26507
        $1.p = 0; //#26507
        if (!$1.sameshape) { //#26513
            $k[$j++] = (~~(($1.diffside - 17) / 4)) - 1; //#26512
            $k[$j++] = 5; //#26512
            $1.tofixedbits(); //#26512
            $1.addtometapart(); //#26512
        } //#26512
        if ($1.hasslaves) { //#26516
            $k[$j++] = 0; //#26515
            $k[$j++] = 3; //#26515
            $1.tofixedbits(); //#26515
            $1.addtometapart(); //#26515
        } //#26515
        $k[$j++] = $geti($1.metapart, 0, $1.p); //#26517
        $k[$j++] = 2; //#26517
        $k[$j++] = -1; //#26517
        $1.ldpc(); //#26517
        $1.addtometabits(); //#26517
        $1.p = 0; //#26517
        if (!$1.sameecc) { //#26523
            $k[$j++] = $1.datawc - 3; //#26521
            $k[$j++] = ~~($1.metaelen / 2); //#26521
            $1.tofixedbits(); //#26521
            $1.addtometapart(); //#26521
            $k[$j++] = $1.datawr - 4; //#26522
            $k[$j++] = ~~($1.metaelen / 2); //#26522
            $1.tofixedbits(); //#26522
            $1.addtometapart(); //#26522
        } //#26522
        $k[$j++] = $geti($1.metapart, 0, $1.p); //#26524
        $k[$j++] = 2; //#26524
        $k[$j++] = -1; //#26524
        $1.ldpc(); //#26524
        $1.addtometabits(); //#26524
        $1.p = 0; //#26524
    } //#26524
    for (var _S1 = $1.q, _S0 = $f($1.nummetabits - 1); _S1 <= _S0; _S1 += 1) { //#26529
        $put($1.metabits, _S1, 48); //#26528
    } //#26528
    $1.i = 0; //#26532
    $1.j = 0; //#26532
    if (!$1.slave) { //#26540
        var _S6 = $geti($1.metabits, $1.i, 6); //#26534
        for (var _S7 = 0, _S8 = _S6.length; _S7 < _S8; _S7++) { //#26538
            $k[$j++] = $get(_S6, _S7); //#26535
            if ($1.colors == 4) { //#26535
                $k[$j++] = $a([$1.bi, $1.yi]); //#26535
            } else { //#26535
                $k[$j++] = $a([$1.ki, $1.wi]); //#26535
            } //#26535
            var _SH = $k[--$j]; //#26535
            var _SJ = $get(_SH, $f($k[--$j] - 48)); //#26535
            $k[$j++] = _SJ; //#26536
            $k[$j++] = $1.pixs; //#26536
            $aload($get($1.metadatamap, $1.j)); //#26536
            $1.jmv(); //#26536
            var _SO = $k[--$j]; //#26536
            var _SP = $k[--$j]; //#26536
            $put(_SP, _SO, $k[--$j]); //#26536
            $1.j = $1.j + 1; //#26537
        } //#26537
        $1.i = $1.i + 6; //#26539
    } //#26539
    for (var _SW = 0, _SX = ~~($f($1.nummetabits - $1.i) / $1.metabpm); _SW < _SX; _SW++) { //#26547
        var _Sb = $geti($1.metabits, $1.i, $1.metabpm); //#26542
        $k[$j++] = 0; //#26542
        for (var _Sc = 0, _Sd = _Sb.length; _Sc < _Sd; _Sc++) { //#26542
            var _Sf = $k[--$j]; //#26542
            $k[$j++] = ($f(_Sf + $f($get(_Sb, _Sc) - 48))) * 2; //#26542
        } //#26542
        var _Si = $get($1.metacolorindex, ~~($k[--$j] / 2)); //#26543
        $k[$j++] = _Si; //#26544
        $k[$j++] = $1.pixs; //#26544
        $aload($get($1.metadatamap, $1.j)); //#26544
        $1.jmv(); //#26544
        var _Sn = $k[--$j]; //#26544
        var _So = $k[--$j]; //#26544
        $put(_So, _Sn, $k[--$j]); //#26544
        $1.i = $f($1.i + $1.metabpm); //#26545
        $1.j = $1.j + 1; //#26546
    } //#26546
    var _T0 = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", $1.cols],
        ["pixy", $1.rows],
        ["colormap", $1.palette],
        ["height", ($1.rows * 2) / 72],
        ["width", ($1.cols * 2) / 72],
        ["opt", $1.options]
    ]); //#26557
    $k[$j++] = _T0; //#26560
    if (!$1.dontdraw) { //#26560
        bwipp_renmatrix(); //#26560
    } //#26560
}

function bwipp_gs1_cc() {
    var $1 = Object.create(bwipp_gs1_cc.$ctx || (bwipp_gs1_cc.$ctx = {})); //#26595
    $1.parse = false; //#26598
    $1.dontlint = false; //#26599
    $1.lintreqs = false; //#26600
    $1.dontdraw = false; //#26601
    $1.ccversion = "a"; //#26602
    $1.cccolumns = -1; //#26603
    $1.lintype = ""; //#26604
    $1.linwidth = -1; //#26605
    $k[$j++] = $1; //#26607
    bwipp_processoptions(); //#26607
    $1.options = $k[--$j]; //#26607
    $1.barcode = $k[--$j]; //#26608
    if ($1.cccolumns == -1) { //#26629
        $k[$j++] = Infinity; //#26627
        $k[$j++] = 'ean13'; //#26620
        $k[$j++] = 4; //#26620
        $k[$j++] = 'upca'; //#26620
        $k[$j++] = 4; //#26620
        $k[$j++] = 'ean8'; //#26620
        $k[$j++] = 3; //#26620
        $k[$j++] = 'upce'; //#26620
        $k[$j++] = 2; //#26620
        $k[$j++] = 'gs1-128'; //#26620
        if ($ne($1.ccversion, "c")) { //#26620
            $k[$j++] = 4; //#26620
        } else { //#26620
            $k[$j++] = ~~(($1.linwidth - 52) / 17); //#26620
        } //#26620
        $k[$j++] = 'databaromni'; //#26627
        $k[$j++] = 4; //#26627
        $k[$j++] = 'databarstacked'; //#26627
        $k[$j++] = 2; //#26627
        $k[$j++] = 'databarstackedomni'; //#26627
        $k[$j++] = 2; //#26627
        $k[$j++] = 'databartruncated'; //#26627
        $k[$j++] = 4; //#26627
        $k[$j++] = 'databarlimited'; //#26627
        $k[$j++] = 3; //#26627
        $k[$j++] = 'databarexpanded'; //#26627
        $k[$j++] = 4; //#26627
        $k[$j++] = 'databarexpandedstacked'; //#26627
        $k[$j++] = 4; //#26627
        $1.cccolumns = $get($d(), $1.lintype); //#26628
    } //#26628
    $k[$j++] = $1.barcode; //#26631
    $k[$j++] = 'ai'; //#26631
    bwipp_gs1process(); //#26631
    $1.fncs = $k[--$j]; //#26632
    $1.vals = $k[--$j]; //#26633
    $1.ais = $k[--$j]; //#26634
    $1.isupper = function() {
        var _C = $k[--$j]; //#26637
        $k[$j++] = (_C >= 65) && (_C <= 90); //#26637
    }; //#26637
    $1.isnum0 = function() {
        var _D = $k[--$j]; //#26638
        $k[$j++] = (_D >= 48) && (_D <= 57); //#26638
    }; //#26638
    $1.isnum1 = function() {
        var _E = $k[--$j]; //#26639
        $k[$j++] = (_E >= 49) && (_E <= 57); //#26639
    }; //#26639
    for (;;) { //#26685
        if ($1.ais.length >= 1) { //#26647
            if (($eq($get($1.ais, 0), "10") || $eq($get($1.ais, 0), "11")) || $eq($get($1.ais, 0), "17")) { //#26646
                $k[$j++] = -1; //#26645
                $k[$j++] = "10"; //#26645
                break; //#26645
            } //#26645
        } //#26645
        if ($1.ais.length >= 1) { //#26680
            if ($eq($get($1.ais, 0), "90")) { //#26679
                $1.v = $get($1.vals, 0); //#26652
                if ($1.v.length >= 1) { //#26657
                    $k[$j++] = $get($1.v, 0); //#26654
                    $1.isupper(); //#26654
                    if ($k[--$j]) { //#26656
                        $k[$j++] = 0; //#26655
                        $k[$j++] = "11"; //#26655
                        break; //#26655
                    } //#26655
                } //#26655
                if ($1.v.length >= 2) { //#26663
                    $k[$j++] = $get($1.v, 0); //#26659
                    $1.isnum1(); //#26659
                    $k[$j++] = $get($1.v, 1); //#26660
                    $1.isupper(); //#26660
                    var _a = $k[--$j]; //#26660
                    var _b = $k[--$j]; //#26660
                    if ((_b && _a)) { //#26662
                        $k[$j++] = 1; //#26661
                        $k[$j++] = "11"; //#26661
                        break; //#26661
                    } //#26661
                } //#26661
                if ($1.v.length >= 3) { //#26670
                    $k[$j++] = $get($1.v, 0); //#26665
                    $1.isnum1(); //#26665
                    $k[$j++] = $get($1.v, 1); //#26666
                    $1.isnum0(); //#26666
                    var _h = $k[--$j]; //#26666
                    var _i = $k[--$j]; //#26666
                    $k[$j++] = $an(_i, _h); //#26667
                    $k[$j++] = $get($1.v, 2); //#26667
                    $1.isupper(); //#26667
                    var _l = $k[--$j]; //#26667
                    var _m = $k[--$j]; //#26667
                    if ((_m && _l)) { //#26669
                        $k[$j++] = 2; //#26668
                        $k[$j++] = "11"; //#26668
                        break; //#26668
                    } //#26668
                } //#26668
                if ($1.v.length >= 4) { //#26678
                    $k[$j++] = $get($1.v, 0); //#26672
                    $1.isnum1(); //#26672
                    $k[$j++] = $get($1.v, 1); //#26673
                    $1.isnum0(); //#26673
                    var _s = $k[--$j]; //#26673
                    var _t = $k[--$j]; //#26673
                    $k[$j++] = $an(_t, _s); //#26674
                    $k[$j++] = $get($1.v, 2); //#26674
                    $1.isnum0(); //#26674
                    var _w = $k[--$j]; //#26674
                    var _x = $k[--$j]; //#26674
                    $k[$j++] = $an(_x, _w); //#26675
                    $k[$j++] = $get($1.v, 3); //#26675
                    $1.isupper(); //#26675
                    var _10 = $k[--$j]; //#26675
                    var _11 = $k[--$j]; //#26675
                    if ((_11 && _10)) { //#26677
                        $k[$j++] = 3; //#26676
                        $k[$j++] = "11"; //#26676
                        break; //#26676
                    } //#26676
                } //#26676
            } //#26676
        } //#26676
        $k[$j++] = -1; //#26683
        $k[$j++] = "0"; //#26683
        break; //#26683
    } //#26683
    $1.method = $k[--$j]; //#26686
    $1.npre = $k[--$j]; //#26687
    $1.tobin = function() {
        var _15 = $s($k[--$j]); //#26690
        $k[$j++] = _15; //#26690
        for (var _17 = 0, _16 = _15.length - 1; _17 <= _16; _17 += 1) { //#26690
            var _18 = $k[--$j]; //#26690
            $put(_18, _17, 48); //#26690
            $k[$j++] = _18; //#26690
        } //#26690
        var _19 = $k[--$j]; //#26691
        var _1C = $cvrs($s(_19.length), $k[--$j], 2); //#26691
        $puti(_19, _19.length - _1C.length, _1C); //#26691
        $k[$j++] = _19; //#26691
    }; //#26691
    if (!bwipp_gs1_cc.$ctx._26742) { //#26742
        (function() { //#26742
            var $ctx = Object.create($1); //#26742
            $ctx.fnc1 = -1; //#26696
            $ctx.lnumeric = -2; //#26696
            $ctx.lalphanumeric = -3; //#26696
            $ctx.liso646 = -4; //#26696
            $k[$j++] = Infinity; //#26701
            for (var _1D = 65; _1D <= 90; _1D += 1) { //#26699
                $k[$j++] = _1D; //#26699
                $k[$j++] = _1D - 65; //#26699
                $k[$j++] = 5; //#26699
                $ctx.tobin(); //#26699
            } //#26699
            for (var _1E = 48; _1E <= 57; _1E += 1) { //#26700
                $k[$j++] = _1E; //#26700
                $k[$j++] = _1E + 4; //#26700
                $k[$j++] = 6; //#26700
                $ctx.tobin(); //#26700
            } //#26700
            $k[$j++] = $ctx.fnc1; //#26701
            $k[$j++] = "11111"; //#26701
            $ctx.alpha = $d(); //#26702
            $k[$j++] = Infinity; //#26714
            for (var _1H = 0; _1H <= 119; _1H += 1) { //#26713
                var _1J = $strcpy($s(2), "00"); //#26706
                var _1L = $cvrs($s(2), _1H, 11); //#26706
                $puti(_1J, 2 - _1L.length, _1L); //#26707
                $k[$j++] = _1H; //#26708
                $k[$j++] = _1J; //#26708
                if ($get(_1J, 0) == 65) { //#26708
                    var _1N = $k[--$j]; //#26708
                    $put(_1N, 0, 94); //#26708
                    $k[$j++] = _1N; //#26708
                } //#26708
                var _1O = $k[--$j]; //#26709
                $k[$j++] = _1O; //#26709
                if ($get(_1O, 1) == 65) { //#26709
                    var _1Q = $k[--$j]; //#26709
                    $put(_1Q, 1, 94); //#26709
                    $k[$j++] = _1Q; //#26709
                } //#26709
                var _1R = $k[--$j]; //#26710
                var _1U = $strcpy($s(7), "0000000"); //#26711
                var _1W = $cvrs($s(7), $f($k[--$j] + 8), 2); //#26711
                $puti(_1U, 7 - _1W.length, _1W); //#26712
                $k[$j++] = _1R; //#26712
                $k[$j++] = _1U; //#26712
            } //#26712
            $k[$j++] = $ctx.lalphanumeric; //#26714
            $k[$j++] = "0000"; //#26714
            $ctx.numeric = $d(); //#26715
            $k[$j++] = Infinity; //#26724
            for (var _1Z = 48; _1Z <= 57; _1Z += 1) { //#26718
                $k[$j++] = _1Z; //#26718
                $k[$j++] = _1Z - 43; //#26718
                $k[$j++] = 5; //#26718
                $ctx.tobin(); //#26718
            } //#26718
            $k[$j++] = $ctx.fnc1; //#26720
            $k[$j++] = "01111"; //#26720
            for (var _1b = 65; _1b <= 90; _1b += 1) { //#26720
                $k[$j++] = _1b; //#26720
                $k[$j++] = _1b - 33; //#26720
                $k[$j++] = 6; //#26720
                $ctx.tobin(); //#26720
            } //#26720
            $k[$j++] = 42; //#26722
            $k[$j++] = "111010"; //#26722
            for (var _1c = 44; _1c <= 47; _1c += 1) { //#26722
                $k[$j++] = _1c; //#26722
                $k[$j++] = _1c + 15; //#26722
                $k[$j++] = 6; //#26722
                $ctx.tobin(); //#26722
            } //#26722
            $k[$j++] = $ctx.lnumeric; //#26724
            $k[$j++] = "000"; //#26724
            $k[$j++] = $ctx.liso646; //#26724
            $k[$j++] = "00100"; //#26724
            $ctx.alphanumeric = $d(); //#26725
            $k[$j++] = Infinity; //#26739
            for (var _1g = 48; _1g <= 57; _1g += 1) { //#26728
                $k[$j++] = _1g; //#26728
                $k[$j++] = _1g - 43; //#26728
                $k[$j++] = 5; //#26728
                $ctx.tobin(); //#26728
            } //#26728
            $k[$j++] = $ctx.fnc1; //#26730
            $k[$j++] = "01111"; //#26730
            for (var _1i = 65; _1i <= 90; _1i += 1) { //#26730
                $k[$j++] = _1i; //#26730
                $k[$j++] = _1i - 1; //#26730
                $k[$j++] = 7; //#26730
                $ctx.tobin(); //#26730
            } //#26730
            for (var _1j = 97; _1j <= 122; _1j += 1) { //#26731
                $k[$j++] = _1j; //#26731
                $k[$j++] = _1j - 7; //#26731
                $k[$j++] = 7; //#26731
                $ctx.tobin(); //#26731
            } //#26731
            $k[$j++] = 33; //#26734
            $k[$j++] = "11101000"; //#26734
            $k[$j++] = 34; //#26734
            $k[$j++] = "11101001"; //#26734
            for (var _1k = 37; _1k <= 47; _1k += 1) { //#26734
                $k[$j++] = _1k; //#26734
                $k[$j++] = _1k + 197; //#26734
                $k[$j++] = 8; //#26734
                $ctx.tobin(); //#26734
            } //#26734
            for (var _1l = 58; _1l <= 63; _1l += 1) { //#26735
                $k[$j++] = _1l; //#26735
                $k[$j++] = _1l + 187; //#26735
                $k[$j++] = 8; //#26735
                $ctx.tobin(); //#26735
            } //#26735
            $k[$j++] = 95; //#26739
            $k[$j++] = "11111011"; //#26739
            $k[$j++] = 32; //#26739
            $k[$j++] = "11111100"; //#26739
            $k[$j++] = $ctx.lnumeric; //#26739
            $k[$j++] = "000"; //#26739
            $k[$j++] = $ctx.lalphanumeric; //#26739
            $k[$j++] = "00100"; //#26739
            $ctx.iso646 = $d(); //#26740
            for (var _1p in $ctx) {
                $ctx.hasOwnProperty(_1p) && (bwipp_gs1_cc.$ctx[_1p] = $ctx[_1p]);
            } //#26740
            bwipp_gs1_cc.$ctx._26742 = 1; //#26740
        })(); //#26740
    } //#26740
    if ($eq($1.method, "10")) { //#26777
        if ($eq($get($1.ais, 0), "11") || $eq($get($1.ais, 0), "17")) { //#26760
            var _1w = $get($1.vals, 0); //#26746
            var _21 = $strcpy($s(16), "0000000000000000"); //#26750
            var _23 = $cvrs($s(16), ($cvi($geti(_1w, 0, 2)) * 384) + ((($cvi($geti(_1w, 2, 2)) - 1) * 32) + $cvi($geti(_1w, 4, 2))), 2); //#26750
            $puti(_21, 16 - _23.length, _23); //#26751
            $k[$j++] = _21; //#26754
            $k[$j++] = Infinity; //#26754
            var _24 = $k[--$j]; //#26753
            var _25 = $k[--$j]; //#26753
            $k[$j++] = _24; //#26753
            $k[$j++] = 1; //#26753
            $k[$j++] = 0; //#26753
            $forall(_25, function() { //#26753
                var _26 = $k[--$j]; //#26753
                $k[$j++] = $f(_26 - 48); //#26753
            }); //#26753
            var _29 = $eq($get($1.ais, 0), "11") ? 0 : 1; //#26754
            $k[$j++] = _29; //#26754
            $1.cdf = $a(); //#26755
            $1.ais = $geti($1.ais, 1, $1.ais.length - 1); //#26756
            $1.vals = $geti($1.vals, 1, $1.vals.length - 1); //#26757
            $1.fncs = $geti($1.fncs, 1, $1.fncs.length - 1); //#26758
        } else { //#26760
            $1.cdf = $a([1, 0, 1, 1]); //#26760
        } //#26760
        if ($1.ais.length != 0) { //#26774
            if ($eq($get($1.ais, 0), "10")) { //#26770
                $k[$j++] = Infinity; //#26764
                $forall($get($1.vals, 0)); //#26764
                $1.gpf = $a(); //#26764
                if ($1.ais.length > 1) { //#26765
                    $k[$j++] = Infinity; //#26765
                    $aload($1.gpf); //#26765
                    $k[$j++] = $1.fnc1; //#26765
                    $1.gpf = $a(); //#26765
                } //#26765
                $1.ais = $geti($1.ais, 1, $1.ais.length - 1); //#26766
                $1.vals = $geti($1.vals, 1, $1.vals.length - 1); //#26767
                $1.fncs = $geti($1.fncs, 1, $1.fncs.length - 1); //#26768
            } else { //#26770
                $1.gpf = $a([$1.fnc1]); //#26770
            } //#26770
        } else { //#26774
            $k[$j++] = Infinity; //#26773
            $aload($1.cdf); //#26773
            $k[$j++] = 0; //#26773
            $k[$j++] = 0; //#26773
            $k[$j++] = 0; //#26773
            $k[$j++] = 0; //#26773
            $k[$j++] = 0; //#26773
            $k[$j++] = 1; //#26773
            $k[$j++] = 1; //#26773
            $k[$j++] = 1; //#26773
            $k[$j++] = 1; //#26773
            $1.cdf = $a(); //#26773
            $1.gpf = $a([]); //#26774
        } //#26774
        $1.mode = "numeric"; //#26776
    } //#26776
    if ($eq($1.method, "11")) { //#26871
        $1.cdf = $a([1, 1]); //#26780
        $1.ai90 = $get($1.vals, 0); //#26781
        if ($f($1.npre + 1) != $1.ai90.length) { //#26785
            $k[$j++] = $geti($1.ai90, $f($1.npre + 1), $f($f($1.ai90.length - $1.npre) - 1)); //#26783
        } else { //#26785
            $k[$j++] = ""; //#26785
        } //#26785
        $1.ai90rem = $k[--$j]; //#26787
        $k[$j++] = 'nalpha'; //#26788
        $k[$j++] = 0; //#26788
        $forall($1.ai90rem, function() { //#26788
            var _2w = $k[--$j]; //#26788
            if ((_2w >= 65) && (_2w <= 90)) { //#26788
                var _2x = $k[--$j]; //#26788
                $k[$j++] = $f(_2x + 1); //#26788
            } //#26788
        }); //#26788
        var _2y = $k[--$j]; //#26788
        $1[$k[--$j]] = _2y; //#26788
        $k[$j++] = 'nnums'; //#26789
        $k[$j++] = 0; //#26789
        $forall($1.ai90rem, function() { //#26789
            var _31 = $k[--$j]; //#26789
            if ((_31 >= 48) && (_31 <= 57)) { //#26789
                var _32 = $k[--$j]; //#26789
                $k[$j++] = $f(_32 + 1); //#26789
            } //#26789
        }); //#26789
        var _33 = $k[--$j]; //#26789
        $1[$k[--$j]] = _33; //#26789
        $k[$j++] = 'mode'; //#26790
        if ($gt($1.nalpha, $1.nnums)) { //#26790
            $k[$j++] = "alpha"; //#26790
        } else { //#26790
            if ($1.nalpha == 0) { //#26790
                $k[$j++] = "numeric"; //#26790
            } else { //#26790
                $k[$j++] = "alphanumeric"; //#26790
            } //#26790
        } //#26790
        var _38 = $k[--$j]; //#26790
        $1[$k[--$j]] = _38; //#26790
        if ($f($1.nalpha + $1.nnums) != $1.ai90rem.length) { //#26791
            $1.mode = "alphanumeric"; //#26791
        } //#26791
        $k[$j++] = Infinity; //#26796
        $aload($1.cdf); //#26793
        if ($eq($1.mode, "alphanumeric")) { //#26794
            $k[$j++] = 0; //#26794
        } //#26794
        if ($eq($1.mode, "numeric")) { //#26795
            $k[$j++] = 1; //#26795
            $k[$j++] = 0; //#26795
        } //#26795
        if ($eq($1.mode, "alpha")) { //#26796
            $k[$j++] = 1; //#26796
            $k[$j++] = 1; //#26796
        } //#26796
        $1.cdf = $a(); //#26796
        $k[$j++] = 'ais1'; //#26798
        if ($1.ais.length > 1) { //#26798
            $k[$j++] = $get($1.ais, 1); //#26798
        } else { //#26798
            $k[$j++] = -1; //#26798
        } //#26798
        var _3L = $k[--$j]; //#26798
        $1[$k[--$j]] = _3L; //#26798
        $k[$j++] = 'vals1'; //#26799
        if ($1.vals.length > 1) { //#26799
            $k[$j++] = $get($1.vals, 1); //#26799
        } else { //#26799
            $k[$j++] = -1; //#26799
        } //#26799
        var _3Q = $k[--$j]; //#26799
        $1[$k[--$j]] = _3Q; //#26799
        if ($eq($1.ais1, "21") || $eq($1.ais1, "8004")) { //#26803
            $k[$j++] = Infinity; //#26801
            $aload($1.cdf); //#26801
            if ($eq($1.ais1, "21")) { //#26801
                $k[$j++] = 1; //#26801
                $k[$j++] = 0; //#26801
            } else { //#26801
                $k[$j++] = 1; //#26801
                $k[$j++] = 1; //#26801
            } //#26801
            $1.cdf = $a(); //#26801
        } else { //#26803
            $k[$j++] = Infinity; //#26803
            $aload($1.cdf); //#26803
            $k[$j++] = 0; //#26803
            $1.cdf = $a(); //#26803
        } //#26803
        $k[$j++] = 'nval'; //#26805
        if ($1.npre != 0) { //#26805
            $k[$j++] = $cvi($geti($1.ai90, 0, $1.npre)); //#26805
        } else { //#26805
            $k[$j++] = 0; //#26805
        } //#26805
        var _3d = $k[--$j]; //#26805
        $1[$k[--$j]] = _3d; //#26805
        $search("BDHIJKLNPQRSTVXZ", $geti($1.ai90, $1.npre, 1)); //#26806
        if ($k[--$j]) { //#26810
            var _3j = $k[--$j]; //#26807
            var _3k = $k[--$j]; //#26807
            $k[$j++] = _3j.length; //#26807
            $k[$j++] = _3k; //#26807
            $j--; //#26807
            var _3l = $k[--$j]; //#26807
            var _3m = $k[--$j]; //#26807
            $k[$j++] = _3l; //#26807
            $k[$j++] = _3m; //#26807
            $j--; //#26807
            $1.aval = $k[--$j]; //#26808
        } else { //#26810
            $j--; //#26810
            $1.aval = -1; //#26810
        } //#26810
        if (($1.nval < 31) && ($1.aval != -1)) { //#26836
            var _3r = $strcpy($s(5), "00000"); //#26813
            var _3u = $cvrs($s(5), $1.nval, 2); //#26813
            $puti(_3r, 5 - _3u.length, _3u); //#26814
            $k[$j++] = _3r; //#26815
            $k[$j++] = Infinity; //#26815
            var _3v = $k[--$j]; //#26815
            var _3w = $k[--$j]; //#26815
            $k[$j++] = _3v; //#26815
            $forall(_3w, function() { //#26815
                var _3x = $k[--$j]; //#26815
                $k[$j++] = $f(_3x - 48); //#26815
            }); //#26815
            $1.nbits = $a(); //#26815
            var _40 = $strcpy($s(4), "0000"); //#26816
            var _43 = $cvrs($s(4), $1.aval, 2); //#26816
            $puti(_40, 4 - _43.length, _43); //#26817
            $k[$j++] = _40; //#26818
            $k[$j++] = Infinity; //#26818
            var _44 = $k[--$j]; //#26818
            var _45 = $k[--$j]; //#26818
            $k[$j++] = _44; //#26818
            $forall(_45, function() { //#26818
                var _46 = $k[--$j]; //#26818
                $k[$j++] = $f(_46 - 48); //#26818
            }); //#26818
            $1.abits = $a(); //#26818
            $k[$j++] = Infinity; //#26822
            $aload($1.cdf); //#26820
            $aload($1.nbits); //#26821
            $aload($1.abits); //#26822
            $1.cdf = $a(); //#26822
        } else { //#26836
            var _4D = $strcpy($s(10), "0000000000"); //#26825
            var _4G = $cvrs($s(10), $1.nval, 2); //#26825
            $puti(_4D, 10 - _4G.length, _4G); //#26826
            $k[$j++] = _4D; //#26827
            $k[$j++] = Infinity; //#26827
            var _4H = $k[--$j]; //#26827
            var _4I = $k[--$j]; //#26827
            $k[$j++] = _4H; //#26827
            $forall(_4I, function() { //#26827
                var _4J = $k[--$j]; //#26827
                $k[$j++] = $f(_4J - 48); //#26827
            }); //#26827
            $1.nbits = $a(); //#26827
            var _4M = $strcpy($s(5), "00000"); //#26828
            var _4R = $cvrs($s(5), $f($get($1.ai90, $1.npre) - 65), 2); //#26828
            $puti(_4M, 5 - _4R.length, _4R); //#26829
            $k[$j++] = _4M; //#26830
            $k[$j++] = Infinity; //#26830
            var _4S = $k[--$j]; //#26830
            var _4T = $k[--$j]; //#26830
            $k[$j++] = _4S; //#26830
            $forall(_4T, function() { //#26830
                var _4U = $k[--$j]; //#26830
                $k[$j++] = $f(_4U - 48); //#26830
            }); //#26830
            $1.abits = $a(); //#26830
            $k[$j++] = Infinity; //#26835
            $aload($1.cdf); //#26832
            $k[$j++] = 1; //#26834
            $k[$j++] = 1; //#26834
            $k[$j++] = 1; //#26834
            $k[$j++] = 1; //#26834
            $k[$j++] = 1; //#26834
            $aload($1.nbits); //#26834
            $aload($1.abits); //#26835
            $1.cdf = $a(); //#26835
        } //#26836
        if ($ne($1.mode, "alpha")) { //#26854
            $k[$j++] = Infinity; //#26839
            $forall($1.ai90rem); //#26839
            if ($1.ais.length > 1) { //#26839
                $k[$j++] = $1.fnc1; //#26839
            } //#26839
            $1.gpf = $a(); //#26839
        } else { //#26854
            $k[$j++] = Infinity; //#26841
            $forall($1.ai90rem); //#26841
            if ($1.ais.length > 1) { //#26841
                $k[$j++] = $1.fnc1; //#26841
            } //#26841
            $1.in = $a(); //#26841
            $1.out = $a($1.in.length * 6); //#26842
            $1.j = 0; //#26843
            for (var _4n = 0, _4m = $1.in.length - 1; _4n <= _4m; _4n += 1) { //#26848
                var _4r = $get($1.alpha, $get($1.in, _4n)); //#26845
                $k[$j++] = _4r; //#26846
                $k[$j++] = _4r; //#26846
                $k[$j++] = Infinity; //#26846
                var _4s = $k[--$j]; //#26846
                var _4t = $k[--$j]; //#26846
                $k[$j++] = _4s; //#26846
                $forall(_4t, function() { //#26846
                    var _4u = $k[--$j]; //#26846
                    $k[$j++] = $f(_4u - 48); //#26846
                }); //#26846
                $puti($1.out, $1.j, $a()); //#26846
                $1.j = $k[--$j].length + $1.j; //#26847
            } //#26847
            $k[$j++] = Infinity; //#26851
            $aload($1.cdf); //#26850
            $aload($geti($1.out, 0, $1.j)); //#26851
            $1.cdf = $a(); //#26851
            $1.gpf = $a([]); //#26853
            if ($1.ais.length > 1) { //#26854
                $1.mode = "numeric"; //#26854
            } //#26854
        } //#26854
        $1.ais = $geti($1.ais, 1, $1.ais.length - 1); //#26856
        $1.vals = $geti($1.vals, 1, $1.vals.length - 1); //#26857
        $1.fncs = $geti($1.fncs, 1, $1.fncs.length - 1); //#26858
        if ($1.ais.length != 0) { //#26870
            if ($eq($1.ais1, "21") || $eq($1.ais1, "8004")) { //#26869
                $k[$j++] = Infinity; //#26863
                $aload($1.gpf); //#26862
                $forall($1.vals1); //#26863
                $1.gpf = $a(); //#26863
                $1.ais = $geti($1.ais, 1, $1.ais.length - 1); //#26865
                $1.vals = $geti($1.vals, 1, $1.vals.length - 1); //#26866
                $1.fncs = $geti($1.fncs, 1, $1.fncs.length - 1); //#26867
                if ($1.ais.length != 0) { //#26868
                    $k[$j++] = Infinity; //#26868
                    $aload($1.gpf); //#26868
                    $k[$j++] = $1.fnc1; //#26868
                    $1.gpf = $a(); //#26868
                } //#26868
            } //#26868
        } //#26868
    } //#26868
    if ($eq($1.method, "0")) { //#26877
        $1.cdf = $a([0]); //#26874
        $1.gpf = $a([]); //#26875
        $1.mode = "numeric"; //#26876
    } //#26876
    for (var _5e = 0, _5d = $1.ais.length - 1; _5e <= _5d; _5e += 1) { //#26895
        $1.i = _5e; //#26881
        $1.ai = $get($1.ais, $1.i); //#26882
        $1.val = $get($1.vals, $1.i); //#26883
        var _5o = $a(($1.gpf.length + $1.ai.length) + $1.val.length); //#26884
        $puti(_5o, 0, $1.gpf); //#26885
        $k[$j++] = _5o; //#26886
        $k[$j++] = _5o; //#26886
        $k[$j++] = $1.gpf.length; //#26886
        $k[$j++] = $1.ai; //#26886
        $k[$j++] = Infinity; //#26886
        var _5s = $k[--$j]; //#26886
        var _5t = $k[--$j]; //#26886
        $k[$j++] = _5s; //#26886
        $forall(_5t); //#26886
        var _5u = $a(); //#26886
        var _5v = $k[--$j]; //#26886
        $puti($k[--$j], _5v, _5u); //#26886
        var _5x = $k[--$j]; //#26887
        $k[$j++] = _5x; //#26887
        $k[$j++] = _5x; //#26887
        $k[$j++] = $1.gpf.length + $1.ai.length; //#26887
        $k[$j++] = $1.val; //#26887
        $k[$j++] = Infinity; //#26887
        var _61 = $k[--$j]; //#26887
        var _62 = $k[--$j]; //#26887
        $k[$j++] = _61; //#26887
        $forall(_62); //#26887
        var _63 = $a(); //#26887
        var _64 = $k[--$j]; //#26887
        $puti($k[--$j], _64, _63); //#26887
        $1.gpf = $k[--$j]; //#26888
        if (($1.i != ($1.ais.length - 1)) && $get($1.fncs, $1.i)) { //#26894
            var _6D = $a($1.gpf.length + 1); //#26890
            $puti(_6D, 0, $1.gpf); //#26891
            $put(_6D, $1.gpf.length, $1.fnc1); //#26892
            $1.gpf = _6D; //#26893
        } //#26893
    } //#26893
    if (!bwipp_gs1_cc.$ctx._26911) { //#26911
        (function() { //#26911
            var $ctx = Object.create($1); //#26911
            var _6P = new Map([
                ["a", $a([$a([167, 138, 118, 108, 88, 78, 59]), $a([167, 138, 118, 98, 78]), $a([197, 167, 138, 108, 78])])],
                ["b", $a([$a([336, 296, 256, 208, 160, 104, 56]), $a([768, 648, 536, 416, 304, 208, 152, 112, 72, 32]), $a([1184, 1016, 840, 672, 496, 352, 264, 208, 152, 96, 56])])]
            ]); //#26908
            $ctx.bitcapsmaps = _6P; //#26910
            for (var _6Q in $ctx) {
                $ctx.hasOwnProperty(_6Q) && (bwipp_gs1_cc.$ctx[_6Q] = $ctx[_6Q]);
            } //#26910
            bwipp_gs1_cc.$ctx._26911 = 1; //#26910
        })(); //#26910
    } //#26910
    $1.rembits = function() {
        $1.used = $k[--$j]; //#26914
        if ($ne($1.ccversion, "c")) { //#26937
            $1.bitcaps = $get($get($1.bitcapsmaps, $1.ccversion), $f($1.cccolumns - 2)); //#26916
            $k[$j++] = -1; //#26917
            $forall($1.bitcaps, function() { //#26917
                var _6Z = $k[--$j]; //#26917
                $k[$j++] = _6Z; //#26917
                if ($ge(_6Z, $1.used)) { //#26917
                    var _6b = $k[--$j]; //#26917
                    var _6c = $k[--$j]; //#26917
                    $k[$j++] = _6b; //#26917
                    $k[$j++] = _6c; //#26917
                } //#26917
                $j--; //#26917
            }); //#26917
            var _6d = $k[--$j]; //#26918
            $k[$j++] = _6d; //#26918
            if (_6d != -1) { //#26918
                var _6f = $k[--$j]; //#26918
                $k[$j++] = $f(_6f - $1.used); //#26918
            } //#26918
        } else { //#26937
            var _6g = new Map([
                ["c", -1]
            ]); //#26920
            var _6i = $get(_6g, $1.ccversion); //#26920
            var _6k = ~~Math.ceil($1.used / 8); //#26921
            $1.m = ((~~(_6k / 6)) * 5) + (_6k % 6); //#26921
            if ($1.m <= 40) { //#26922
                $k[$j++] = 8; //#26922
            } //#26922
            if (($1.m >= 41) && ($1.m <= 160)) { //#26923
                $k[$j++] = 16; //#26923
            } //#26923
            if (($1.m >= 161) && ($1.m <= 320)) { //#26924
                $k[$j++] = 32; //#26924
            } //#26924
            if (($1.m >= 321) && ($1.m <= 833)) { //#26925
                $k[$j++] = 64; //#26925
            } //#26925
            if ($1.m >= 834) { //#26926
                $k[$j++] = 32; //#26926
            } //#26926
            $1.eccws = $k[--$j]; //#26927
            $1.m = $f($f($1.m + $1.eccws) + 3); //#26928
            if ($1.cccolumns > 30) { //#26929
                $1.cccolumns = 30; //#26929
            } //#26929
            for (;;) { //#26933
                if (((~~Math.ceil($1.m / $1.cccolumns)) <= 30) || ($1.cccolumns >= 30)) { //#26931
                    break; //#26931
                } //#26931
                $1.cccolumns = $1.cccolumns + 1; //#26932
            } //#26932
            $1.r = ~~Math.ceil($1.m / $1.cccolumns); //#26934
            if ($1.r < 3) { //#26935
                $1.r = 3; //#26935
            } //#26935
            var _77 = $f(($f(($1.cccolumns * $1.r) - $1.eccws)) - 3); //#26936
            $1.tgt = ($f(((~~(_77 / 5)) * 6) + (_77 % 5))) * 8; //#26936
            if ($1.used <= 8304) { //#26937
                $k[$j++] = $f($1.tgt - $1.used); //#26937
            } else { //#26937
                $k[$j++] = -1; //#26937
            } //#26937
        } //#26937
        var _7B = $k[--$j]; //#26939
        $k[$j++] = _7B; //#26952
        if (_7B == -1) { //#26952
            $j--; //#26940
            if ($eq($1.ccversion, "a")) { //#26948
                $1.ccversion = "b"; //#26942
            } else { //#26948
                if ($eq($1.ccversion, "b") && $eq($1.lintype, "gs1-128")) { //#26948
                    $1.ccversion = "c"; //#26945
                    $1.cccolumns = ~~(($1.linwidth - 52) / 17); //#26946
                } else { //#26948
                    $1.ccversion = -1; //#26948
                } //#26948
            } //#26948
            $k[$j++] = $1.used; //#26951
            $1.rembits(); //#26951
        } //#26951
    }; //#26951
    $1.encode = function() {
        var _7H = $k[--$j]; //#26956
        $k[$j++] = _7H; //#26956
        if ($ne(_7H, 'raw')) { //#26956
            var _7I = $k[--$j]; //#26956
            var _7K = $get(_7I, $k[--$j]); //#26956
            $k[$j++] = _7K; //#26956
        } else { //#26956
            $j--; //#26956
        } //#26956
        $k[$j++] = Infinity; //#26957
        var _7L = $k[--$j]; //#26957
        var _7M = $k[--$j]; //#26957
        $k[$j++] = _7L; //#26957
        $forall(_7M, function() { //#26957
            var _7N = $k[--$j]; //#26957
            $k[$j++] = $f(_7N - 48); //#26957
        }); //#26957
        var _7O = $a(); //#26957
        $puti($1.gpfenc, $1.j, _7O); //#26959
        $1.j = _7O.length + $1.j; //#26960
    }; //#26960
    $k[$j++] = Infinity; //#26964
    for (var _7T = 0, _7U = $1.gpf.length; _7T < _7U; _7T++) { //#26964
        $k[$j++] = 0; //#26964
    } //#26964
    $k[$j++] = 0; //#26964
    $k[$j++] = -1; //#26964
    $1.numericruns = $a(); //#26964
    $k[$j++] = Infinity; //#26965
    for (var _7X = 0, _7Y = $1.gpf.length; _7X < _7Y; _7X++) { //#26965
        $k[$j++] = 0; //#26965
    } //#26965
    $k[$j++] = 0; //#26965
    $1.alphanumericruns = $a(); //#26965
    $k[$j++] = Infinity; //#26966
    for (var _7b = 0, _7c = $1.gpf.length; _7b < _7c; _7b++) { //#26966
        $k[$j++] = 0; //#26966
    } //#26966
    $k[$j++] = 9999; //#26966
    $1.nextiso646only = $a(); //#26966
    for (var _7f = $1.gpf.length - 1; _7f >= 0; _7f -= 1) { //#26988
        $1.i = _7f; //#26968
        var _7k = $strcpy($s(2), "00"); //#26970
        var _7n = $get($1.gpf, $1.i); //#26971
        $k[$j++] = $get($1.gpf, $1.i); //#26971
        $k[$j++] = _7k; //#26971
        $k[$j++] = _7k; //#26971
        $k[$j++] = 0; //#26971
        $k[$j++] = _7n; //#26971
        if (_7n == $1.fnc1) { //#26971
            $j--; //#26971
            $k[$j++] = 94; //#26971
        } //#26971
        var _7p = $k[--$j]; //#26971
        var _7q = $k[--$j]; //#26971
        $put($k[--$j], _7q, _7p); //#26971
        if ($1.i < ($1.gpf.length - 1)) { //#26972
            var _7u = $k[--$j]; //#26972
            var _7x = $get($1.gpf, $1.i + 1); //#26972
            $k[$j++] = _7u; //#26972
            $k[$j++] = _7u; //#26972
            $k[$j++] = 1; //#26972
            $k[$j++] = _7x; //#26972
            if (_7x == $1.fnc1) { //#26972
                $j--; //#26972
                $k[$j++] = 94; //#26972
            } //#26972
            var _7z = $k[--$j]; //#26972
            var _80 = $k[--$j]; //#26972
            $put($k[--$j], _80, _7z); //#26972
        } //#26972
        var _84 = $get($1.numeric, $k[--$j]) !== undefined; //#26973
        if (_84) { //#26976
            $put($1.numericruns, $1.i, $f($get($1.numericruns, $1.i + 2) + 2)); //#26974
        } else { //#26976
            $put($1.numericruns, $1.i, 0); //#26976
        } //#26976
        var _8C = $k[--$j]; //#26978
        var _8E = $get($1.alphanumeric, _8C) !== undefined; //#26978
        $k[$j++] = _8C; //#26982
        if (_8E) { //#26981
            $put($1.alphanumericruns, $1.i, $f($get($1.alphanumericruns, $1.i + 1) + 1)); //#26979
        } else { //#26981
            $put($1.alphanumericruns, $1.i, 0); //#26981
        } //#26981
        var _8M = $k[--$j]; //#26983
        var _8O = $get($1.iso646, _8M) !== undefined; //#26983
        var _8Q = $get($1.alphanumeric, _8M) !== undefined; //#26983
        if (_8O && (!_8Q)) { //#26986
            $put($1.nextiso646only, $1.i, 0); //#26984
        } else { //#26986
            $put($1.nextiso646only, $1.i, $f($get($1.nextiso646only, $1.i + 1) + 1)); //#26986
        } //#26986
    } //#26986
    $1.gpfenc = $a(8304); //#26991
    $1.i = 0; //#26992
    $1.j = 0; //#26992
    for (;;) { //#27082
        if ($1.i == $1.gpf.length) { //#26994
            break; //#26994
        } //#26994
        for (;;) { //#27081
            if ($eq($1.mode, "numeric")) { //#27030
                if ($1.i <= ($1.gpf.length - 2)) { //#27027
                    var _8e = $s(2); //#26999
                    var _8h = $get($1.gpf, $1.i); //#27000
                    $k[$j++] = _8e; //#27000
                    $k[$j++] = _8e; //#27000
                    $k[$j++] = 0; //#27000
                    $k[$j++] = _8h; //#27000
                    if (_8h == $1.fnc1) { //#27000
                        $j--; //#27000
                        $k[$j++] = 94; //#27000
                    } //#27000
                    var _8j = $k[--$j]; //#27000
                    var _8k = $k[--$j]; //#27000
                    $put($k[--$j], _8k, _8j); //#27000
                    var _8m = $k[--$j]; //#27001
                    var _8p = $get($1.gpf, $1.i + 1); //#27001
                    $k[$j++] = _8m; //#27001
                    $k[$j++] = _8m; //#27001
                    $k[$j++] = 1; //#27001
                    $k[$j++] = _8p; //#27001
                    if (_8p == $1.fnc1) { //#27001
                        $j--; //#27001
                        $k[$j++] = 94; //#27001
                    } //#27001
                    var _8r = $k[--$j]; //#27001
                    var _8s = $k[--$j]; //#27001
                    $put($k[--$j], _8s, _8r); //#27001
                    var _8u = $k[--$j]; //#27002
                    var _8w = $get($1.numeric, _8u) !== undefined; //#27002
                    $k[$j++] = _8u; //#27006
                    if (_8w) { //#27006
                        $k[$j++] = $1.numeric; //#27003
                        $1.encode(); //#27003
                        $1.i = $1.i + 2; //#27004
                        break; //#27005
                    } //#27005
                    $j--; //#27007
                    $k[$j++] = $1.lalphanumeric; //#27008
                    $k[$j++] = $1.numeric; //#27008
                    $1.encode(); //#27008
                    $1.mode = "alphanumeric"; //#27009
                    break; //#27010
                } else { //#27027
                    var _93 = $get($1.gpf, $1.i); //#27012
                    if ((_93 < 48) || (_93 > 57)) { //#27016
                        $k[$j++] = $1.lalphanumeric; //#27013
                        $k[$j++] = $1.numeric; //#27013
                        $1.encode(); //#27013
                        $1.mode = "alphanumeric"; //#27014
                        break; //#27015
                    } //#27015
                    $k[$j++] = 'rem'; //#27017
                    $k[$j++] = $1.cdf.length + $1.j; //#27017
                    $1.rembits(); //#27017
                    var _98 = $k[--$j]; //#27017
                    $1[$k[--$j]] = _98; //#27017
                    if (($1.rem >= 4) && ($1.rem <= 6)) { //#27027
                        var _9F = $geti($strcpy($s(6), "000000"), 0, $1.rem); //#27019
                        var _9K = $cvrs($s(4), $f($get($1.gpf, $1.i) - 47), 2); //#27020
                        $puti(_9F, 4 - _9K.length, _9K); //#27021
                        $k[$j++] = _9F; //#27021
                        $k[$j++] = 'raw'; //#27021
                        $1.encode(); //#27021
                        $1.i = $1.i + 1; //#27022
                        break; //#27023
                    } else { //#27027
                        var _9M = $s(2); //#27025
                        $put(_9M, 0, $get($1.gpf, $1.i)); //#27025
                        $put(_9M, 1, 94); //#27025
                        $k[$j++] = _9M; //#27025
                        $k[$j++] = $1.numeric; //#27025
                        $1.encode(); //#27025
                        $1.i = $1.i + 1; //#27026
                        break; //#27027
                    } //#27027
                } //#27027
            } //#27027
            if ($eq($1.mode, "alphanumeric")) { //#27057
                if ($get($1.gpf, $1.i) == $1.fnc1) { //#27038
                    $k[$j++] = $1.fnc1; //#27034
                    $k[$j++] = $1.alphanumeric; //#27034
                    $1.encode(); //#27034
                    $1.mode = "numeric"; //#27035
                    $1.i = $1.i + 1; //#27036
                    break; //#27037
                } //#27037
                var _9c = $get($1.gpf, $1.i); //#27039
                var _9e = $get($1.iso646, _9c) !== undefined; //#27039
                var _9g = $get($1.alphanumeric, _9c) !== undefined; //#27039
                if (_9e && (!_9g)) { //#27043
                    $k[$j++] = $1.liso646; //#27040
                    $k[$j++] = $1.alphanumeric; //#27040
                    $1.encode(); //#27040
                    $1.mode = "iso646"; //#27041
                    break; //#27042
                } //#27042
                if ($get($1.numericruns, $1.i) >= 6) { //#27048
                    $k[$j++] = $1.lnumeric; //#27045
                    $k[$j++] = $1.alphanumeric; //#27045
                    $1.encode(); //#27045
                    $1.mode = "numeric"; //#27046
                    break; //#27047
                } //#27047
                var _9q = $get($1.numericruns, $1.i); //#27049
                if ((_9q >= 4) && ($f(_9q + $1.i) == $1.gpf.length)) { //#27053
                    $k[$j++] = $1.lnumeric; //#27050
                    $k[$j++] = $1.alphanumeric; //#27050
                    $1.encode(); //#27050
                    $1.mode = "numeric"; //#27051
                    break; //#27052
                } //#27052
                $k[$j++] = $get($1.gpf, $1.i); //#27054
                $k[$j++] = $1.alphanumeric; //#27054
                $1.encode(); //#27054
                $1.i = $1.i + 1; //#27055
                break; //#27056
            } //#27056
            if ($eq($1.mode, "iso646")) { //#27079
                if ($get($1.gpf, $1.i) == $1.fnc1) { //#27065
                    $k[$j++] = $1.fnc1; //#27061
                    $k[$j++] = $1.iso646; //#27061
                    $1.encode(); //#27061
                    $1.mode = "numeric"; //#27062
                    $1.i = $1.i + 1; //#27063
                    break; //#27064
                } //#27064
                if (($get($1.numericruns, $1.i) >= 4) && ($get($1.nextiso646only, $1.i) >= 10)) { //#27070
                    $k[$j++] = $1.lnumeric; //#27067
                    $k[$j++] = $1.iso646; //#27067
                    $1.encode(); //#27067
                    $1.mode = "numeric"; //#27068
                    break; //#27069
                } //#27069
                if (($get($1.alphanumericruns, $1.i) >= 5) && ($get($1.nextiso646only, $1.i) >= 10)) { //#27075
                    $k[$j++] = $1.lalphanumeric; //#27072
                    $k[$j++] = $1.iso646; //#27072
                    $1.encode(); //#27072
                    $1.mode = "alphanumeric"; //#27073
                    break; //#27074
                } //#27074
                $k[$j++] = $get($1.gpf, $1.i); //#27076
                $k[$j++] = $1.iso646; //#27076
                $1.encode(); //#27076
                $1.i = $1.i + 1; //#27077
                break; //#27078
            } //#27078
        } //#27078
    } //#27078
    $1.gpf = $geti($1.gpfenc, 0, $1.j); //#27083
    $k[$j++] = 'pad'; //#27086
    $k[$j++] = $1.cdf.length + $1.gpf.length; //#27086
    $1.rembits(); //#27086
    var _AZ = $a($k[--$j]); //#27086
    $1[$k[--$j]] = _AZ; //#27086
    if ($1.pad.length > 0) { //#27098
        for (var _Ae = 0, _Ad = $1.pad.length - 1; _Ae <= _Ad; _Ae += 5) { //#27091
            $1.i = _Ae; //#27089
            var _Af = $1.pad; //#27090
            var _Ag = $1.i; //#27090
            var _Ah = $a([0, 0, 1, 0, 0]); //#27090
            var _Ai = $1.pad; //#27090
            var _Aj = $1.i; //#27090
            var _Ak = 5; //#27090
            var _Al = _Ai.length - _Aj; //#27090
            if ((_Ai.length - _Aj) > 5) { //#27090
                var _ = _Ak; //#27090
                _Ak = _Al; //#27090
                _Al = _; //#27090
            } //#27090
            $puti(_Af, _Ag, $geti(_Ah, 0, _Al)); //#27090
        } //#27090
        if ($eq($1.mode, "numeric")) { //#27094
            $k[$j++] = Infinity; //#27093
            $k[$j++] = 0; //#27093
            $k[$j++] = 0; //#27093
            $k[$j++] = 0; //#27093
            $k[$j++] = 0; //#27093
            $aload($1.pad); //#27093
            $1.pad = $geti($a(), 0, $1.pad.length); //#27093
        } //#27093
        if ($eq($1.mode, "alpha")) { //#27097
            $k[$j++] = Infinity; //#27096
            $k[$j++] = 1; //#27096
            $k[$j++] = 1; //#27096
            $k[$j++] = 1; //#27096
            $k[$j++] = 1; //#27096
            $k[$j++] = 1; //#27096
            $k[$j++] = 0; //#27096
            $k[$j++] = 0; //#27096
            $k[$j++] = 0; //#27096
            $k[$j++] = 0; //#27096
            $aload($1.pad); //#27096
            $1.pad = $geti($a(), 0, $1.pad.length); //#27096
        } //#27096
    } //#27096
    $k[$j++] = Infinity; //#27104
    $aload($1.cdf); //#27102
    $aload($1.gpf); //#27103
    $aload($1.pad); //#27104
    $1.bits = $a(); //#27104
    if (!bwipp_gs1_cc.$ctx._27122) { //#27122
        (function() { //#27122
            var $ctx = Object.create($1); //#27122
            $k[$j++] = Infinity; //#27110
            $k[$j++] = $a([0, 0, 0, 0, 0, 0, 1]); //#27110
            for (var _B2 = 0, _B3 = 68; _B2 < _B3; _B2++) { //#27110
                $k[$j++] = $a(7); //#27110
            } //#27110
            $ctx.pwr928 = $a(); //#27110
            for (var _B6 = 1; _B6 <= 68; _B6 += 1) { //#27121
                $ctx.j = _B6; //#27113
                $ctx.v = 0; //#27114
                for (var _B7 = 6; _B7 >= 1; _B7 -= 1) { //#27119
                    $ctx.i = _B7; //#27116
                    $ctx.v = $f(($get($get($ctx.pwr928, $ctx.j - 1), $ctx.i) * 2) + (~~($ctx.v / 928))); //#27117
                    $put($get($ctx.pwr928, $ctx.j), $ctx.i, $ctx.v % 928); //#27118
                } //#27118
                $put($get($ctx.pwr928, $ctx.j), 0, $f(($get($get($ctx.pwr928, $ctx.j - 1), 0) * 2) + (~~($ctx.v / 928)))); //#27120
            } //#27120
            for (var _BR in $ctx) {
                $ctx.hasOwnProperty(_BR) && (bwipp_gs1_cc.$ctx[_BR] = $ctx[_BR]);
            } //#27120
            bwipp_gs1_cc.$ctx._27122 = 1; //#27120
        })(); //#27120
    } //#27120
    if ($1.ccversion == "a") { //#27164
        $k[$j++] = Infinity; //#27125
        for (var _BT = 0, _BU = 28; _BT < _BU; _BT++) { //#27125
            $k[$j++] = 0; //#27125
        } //#27125
        $1.cws = $a(); //#27125
        $1.b = 0; //#27126
        $1.c = 0; //#27126
        for (;;) { //#27150
            if ($1.b == $1.bits.length) { //#27128
                break; //#27128
            } //#27128
            var _BY = $1.bits; //#27129
            var _BZ = $1.b; //#27129
            var _Ba = $1.bits; //#27129
            var _Bb = $1.b; //#27129
            var _Bc = _Ba.length - _Bb; //#27129
            var _Bd = 69; //#27129
            if (69 > (_Ba.length - _Bb)) { //#27129
                var _ = _Bc; //#27129
                _Bc = _Bd; //#27129
                _Bd = _; //#27129
            } //#27129
            $1.bs = $geti(_BY, _BZ, _Bd); //#27129
            $1.bsl = $1.bs.length; //#27130
            $1.cs = $geti($1.cws, $1.c, (~~($1.bsl / 10)) + 1); //#27131
            $1.csl = $1.cs.length; //#27132
            for (var _Bn = 0, _Bm = $1.bsl - 1; _Bn <= _Bm; _Bn += 1) { //#27142
                $1.i = _Bn; //#27134
                for (var _Bq = 0, _Bp = $1.csl - 1; _Bq <= _Bp; _Bq += 1) { //#27141
                    $1.j = _Bq; //#27136
                    var _Br = $1.cs; //#27137
                    var _Bs = $1.j; //#27137
                    $put(_Br, _Bs, $f($get(_Br, _Bs) + ($get($get($1.pwr928, $1.i), ($1.j + 7) - $1.csl) * $get($1.bs, ($1.bsl - $1.i) - 1)))); //#27140
                } //#27140
            } //#27140
            for (var _C5 = $1.csl - 1; _C5 >= 1; _C5 -= 1) { //#27147
                $1.i = _C5; //#27144
                var _C6 = $1.cs; //#27145
                var _C7 = $1.i; //#27145
                $put(_C6, _C7 - 1, $f($get(_C6, _C7 - 1) + (~~($get($1.cs, $1.i) / 928)))); //#27145
                var _CC = $1.cs; //#27146
                var _CD = $1.i; //#27146
                $put(_CC, _CD, $get(_CC, _CD) % 928); //#27146
            } //#27146
            $1.b = $1.b + $1.bsl; //#27148
            $1.c = $1.c + $1.csl; //#27149
        } //#27149
        $1.cws = $geti($1.cws, 0, $1.c); //#27151
        $1.barcode = $s($1.cws.length * 4); //#27152
        for (var _CQ = 0, _CP = $1.cws.length - 1; _CQ <= _CP; _CQ += 1) { //#27158
            $1.i = _CQ; //#27154
            var _CS = $strcpy($s(4), "^   "); //#27155
            var _CX = $cvrs($s(4), $get($1.cws, $1.i), 10); //#27155
            $puti(_CS, 4 - _CX.length, _CX); //#27156
            $puti($1.barcode, $1.i * 4, _CS); //#27157
        } //#27157
        delete $1.options["parse"]; //#27159
        $put($1.options, "dontdraw", true); //#27160
        $put($1.options, "cca", true); //#27161
        $put($1.options, "columns", $1.cccolumns); //#27162
        $k[$j++] = 'args'; //#27163
        $k[$j++] = $1.barcode; //#27163
        $k[$j++] = $1.options; //#27163
        bwipp_micropdf417(); //#27163
        var _Ch = $k[--$j]; //#27163
        $1[$k[--$j]] = _Ch; //#27163
    } //#27163
    if ($1.ccversion == "b") { //#27178
        $1.barcode = $s(~~($1.bits.length / 8)); //#27167
        for (var _Co = 0, _Cn = $1.barcode.length - 1; _Co <= _Cn; _Co += 1) { //#27172
            $1.i = _Co; //#27169
            var _Cr = $geti($1.bits, $1.i * 8, 8); //#27170
            $k[$j++] = 0; //#27170
            for (var _Cs = 0, _Ct = _Cr.length; _Cs < _Ct; _Cs++) { //#27170
                var _Cv = $k[--$j]; //#27170
                $k[$j++] = $f(_Cv + $get(_Cr, _Cs)) * 2; //#27170
            } //#27170
            $put($1.barcode, $1.i, ~~($k[--$j] / 2)); //#27171
        } //#27171
        delete $1.options["parse"]; //#27173
        $put($1.options, "dontdraw", true); //#27174
        $put($1.options, "ccb", true); //#27175
        $put($1.options, "columns", $1.cccolumns); //#27176
        $k[$j++] = 'args'; //#27177
        $k[$j++] = $1.barcode; //#27177
        $k[$j++] = $1.options; //#27177
        bwipp_micropdf417(); //#27177
        var _D6 = $k[--$j]; //#27177
        $1[$k[--$j]] = _D6; //#27177
    } //#27177
    if ($1.ccversion == "c") { //#27193
        $1.barcode = $s(~~($1.bits.length / 8)); //#27181
        for (var _DD = 0, _DC = $1.barcode.length - 1; _DD <= _DC; _DD += 1) { //#27186
            $1.i = _DD; //#27183
            var _DG = $geti($1.bits, $1.i * 8, 8); //#27184
            $k[$j++] = 0; //#27184
            for (var _DH = 0, _DI = _DG.length; _DH < _DI; _DH++) { //#27184
                var _DK = $k[--$j]; //#27184
                $k[$j++] = $f(_DK + $get(_DG, _DH)) * 2; //#27184
            } //#27184
            $put($1.barcode, $1.i, ~~($k[--$j] / 2)); //#27185
        } //#27185
        delete $1.options["parse"]; //#27187
        $put($1.options, "dontdraw", true); //#27188
        $put($1.options, "ccc", true); //#27189
        $put($1.options, "columns", $1.cccolumns); //#27190
        $put($1.options, "eclevel", (~~(Math.log($1.eccws) / Math.log(2))) - 1); //#27191
        $k[$j++] = 'args'; //#27192
        $k[$j++] = $1.barcode; //#27192
        $k[$j++] = $1.options; //#27192
        bwipp_pdf417(); //#27192
        var _DX = $k[--$j]; //#27192
        $1[$k[--$j]] = _DX; //#27192
    } //#27192
    $k[$j++] = $1.args; //#27196
    if (!$1.dontdraw) { //#27196
        bwipp_renmatrix(); //#27196
    } //#27196
}

function bwipp_ean13composite() {
    var $1 = Object.create(bwipp_ean13composite.$ctx || (bwipp_ean13composite.$ctx = {})); //#27232
    $1.dontdraw = false; //#27235
    $1.usematrix = false; //#27236
    $1.parse = false; //#27237
    $1.dontlint = false; //#27238
    $1.lintreqs = true; //#27239
    $k[$j++] = $1; //#27241
    bwipp_processoptions(); //#27241
    $1.options = $k[--$j]; //#27241
    $1.barcode = $k[--$j]; //#27242
    if ($1.dontdraw) { //#27244
        $1.usematrix = true; //#27244
    } //#27244
    $search($1.barcode, "|"); //#27247
    if ($k[--$j]) { //#27252
        $1.linear = $k[--$j]; //#27248
        $j--; //#27249
        $1.comp = $k[--$j]; //#27250
    } else { //#27252
        $j--; //#27252
        $k[$j++] = 'bwipp.missingCompositeComponent#27252'; //#27252
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#27252
        bwipp_raiseerror(); //#27252
    } //#27252
    $put($1.options, "lintype", "ean13"); //#27255
    $put($1.options, "inkspread", "0"); //#27256
    $put($1.options, "dontdraw", true); //#27257
    $put($1.options, "dontlint", true); //#27258
    var _C = $s($1.comp.length + 18); //#27261
    $puti(_C, 0, "(01)00000000000000"); //#27262
    $puti(_C, 18, $1.comp); //#27263
    $k[$j++] = _C; //#27264
    $k[$j++] = 'ai'; //#27264
    bwipp_gs1process(); //#27264
    $j -= 3; //#27264
    $k[$j++] = $1.linear; //#27267
    $k[$j++] = $1.options; //#27267
    bwipp_ean13(); //#27267
    if (!$1.usematrix) { //#27357
        $$.save(); //#27269
        bwipp_renlinear(); //#27271
        $$.rmoveto(-1, 72); //#27274
        $k[$j++] = Infinity; //#27285
        $k[$j++] = Infinity; //#27279
        $k[$j++] = 0; //#27277
        $k[$j++] = 1; //#27277
        for (var _H = 0, _I = 93; _H < _I; _H++) { //#27277
            $k[$j++] = 0; //#27277
        } //#27277
        $k[$j++] = 1; //#27278
        $k[$j++] = 0; //#27278
        $k[$j++] = 1; //#27278
        $k[$j++] = 0; //#27278
        for (var _J = 0, _K = 93; _J < _K; _J++) { //#27278
            $k[$j++] = 0; //#27278
        } //#27278
        $k[$j++] = 0; //#27279
        $k[$j++] = 1; //#27279
        $k[$j++] = 0; //#27279
        $k[$j++] = 1; //#27279
        for (var _L = 0, _M = 93; _L < _M; _L++) { //#27279
            $k[$j++] = 0; //#27279
        } //#27279
        $k[$j++] = 1; //#27279
        $k[$j++] = 0; //#27279
        var _N = $a(); //#27279
        $k[$j++] = 'ren'; //#27285
        $k[$j++] = bwipp_renmatrix; //#27285
        $k[$j++] = 'pixs'; //#27285
        $k[$j++] = _N; //#27285
        $k[$j++] = 'pixx'; //#27285
        $k[$j++] = 97; //#27285
        $k[$j++] = 'pixy'; //#27285
        $k[$j++] = 3; //#27285
        $k[$j++] = 'height'; //#27285
        $k[$j++] = 6 / 72; //#27285
        $k[$j++] = 'width'; //#27285
        $k[$j++] = 97 / 72; //#27285
        $k[$j++] = 'opt'; //#27285
        $k[$j++] = $1.options; //#27285
        var _P = $d(); //#27285
        $k[$j++] = _P; //#27286
        bwipp_renmatrix(); //#27286
        $$.rmoveto(-2, 6); //#27289
        $k[$j++] = $1.comp; //#27289
        $k[$j++] = $1.options; //#27289
        bwipp_gs1_cc(); //#27289
        bwipp_renmatrix(); //#27289
        $$.restore(); //#27291
    } else { //#27357
        $1.linsym = $k[--$j]; //#27293
        $1.sbs = $get($1.linsym, 'sbs'); //#27294
        $1.bhs = $get($1.linsym, 'bhs'); //#27295
        $1.bbs = $get($1.linsym, 'bbs'); //#27296
        $k[$j++] = 'linwidth'; //#27297
        $k[$j++] = 0; //#27297
        $forall($1.sbs, function() { //#27297
            var _a = $k[--$j]; //#27297
            var _b = $k[--$j]; //#27297
            $k[$j++] = $f(_b + $cvi(_a)); //#27297
        }); //#27297
        var _c = $k[--$j]; //#27297
        $1[$k[--$j]] = _c; //#27297
        $k[$j++] = 'compsym'; //#27299
        $k[$j++] = $1.comp; //#27299
        $k[$j++] = $1.options; //#27299
        bwipp_gs1_cc(); //#27299
        var _g = $k[--$j]; //#27299
        $1[$k[--$j]] = _g; //#27299
        $1.ccpixs = $get($1.compsym, 'pixs'); //#27300
        $1.ccpixx = $get($1.compsym, 'pixx'); //#27301
        $k[$j++] = Infinity; //#27303
        for (var _n = 0, _o = $f($1.ccpixx - 97); _n < _o; _n++) { //#27303
            $k[$j++] = 0; //#27303
        } //#27303
        $1.linpad = $a(); //#27303
        $1.diff = $f(($f($f($1.linwidth + $1.linpad.length) + 2)) - $1.ccpixx); //#27305
        if ($1.diff > 0) { //#27311
            $k[$j++] = Infinity; //#27307
            for (var _v = 0, _w = $1.diff; _v < _w; _v++) { //#27307
                $k[$j++] = 0; //#27307
            } //#27307
            $1.ccrpad = $a(); //#27307
            $1.pixx = $f($1.ccpixx + $1.diff); //#27308
        } else { //#27311
            $1.ccrpad = $a(0); //#27310
            $1.pixx = $1.ccpixx; //#27311
        } //#27311
        $k[$j++] = Infinity; //#27339
        for (var _15 = 0, _16 = $1.ccpixx, _14 = $1.ccpixs.length - 1; _16 < 0 ? _15 >= _14 : _15 <= _14; _15 += _16) { //#27318
            $1.i = _15; //#27316
            for (var _17 = 0, _18 = 2; _17 < _18; _17++) { //#27317
                $aload($geti($1.ccpixs, $1.i, $1.ccpixx)); //#27317
                $aload($1.ccrpad); //#27317
            } //#27317
        } //#27317
        for (var _1E = 0, _1F = 2; _1E < _1F; _1E++) { //#27319
            $aload($1.linpad); //#27319
            $k[$j++] = 0; //#27319
            $k[$j++] = 1; //#27319
            for (var _1H = 0, _1I = 93; _1H < _1I; _1H++) { //#27319
                $k[$j++] = 0; //#27319
            } //#27319
            $k[$j++] = 1; //#27319
            $k[$j++] = 0; //#27319
            $aload($1.ccrpad); //#27319
        } //#27319
        for (var _1K = 0, _1L = 2; _1K < _1L; _1K++) { //#27320
            $aload($1.linpad); //#27320
            $k[$j++] = 1; //#27320
            $k[$j++] = 0; //#27320
            for (var _1N = 0, _1O = 93; _1N < _1O; _1N++) { //#27320
                $k[$j++] = 0; //#27320
            } //#27320
            $k[$j++] = 0; //#27320
            $k[$j++] = 1; //#27320
            $aload($1.ccrpad); //#27320
        } //#27320
        for (var _1Q = 0, _1R = 2; _1Q < _1R; _1Q++) { //#27321
            $aload($1.linpad); //#27321
            $k[$j++] = 0; //#27321
            $k[$j++] = 1; //#27321
            for (var _1T = 0, _1U = 93; _1T < _1U; _1T++) { //#27321
                $k[$j++] = 0; //#27321
            } //#27321
            $k[$j++] = 1; //#27321
            $k[$j++] = 0; //#27321
            $aload($1.ccrpad); //#27321
        } //#27321
        for (var _1W = 71; _1W >= 0; _1W -= 1) { //#27340
            $1.y = _1W; //#27323
            $aload($1.linpad); //#27324
            $k[$j++] = 0; //#27338
            for (var _1a = 0, _1Z = $1.sbs.length - 1; _1a <= _1Z; _1a += 1) { //#27338
                $1.i = _1a; //#27327
                if (($1.i % 2) == 0) { //#27336
                    var _1f = $get($1.bbs, ~~($1.i / 2)) * 72; //#27330
                    if ((_1f > $1.y) || (($f(_1f + ($get($1.bhs, ~~($1.i / 2)) * 72))) < $1.y)) { //#27333
                        for (var _1o = 0, _1p = $cvi($get($1.sbs, $1.i)); _1o < _1p; _1o++) { //#27331
                            $k[$j++] = 0; //#27331
                        } //#27331
                    } else { //#27333
                        for (var _1t = 0, _1u = $cvi($get($1.sbs, $1.i)); _1t < _1u; _1t++) { //#27333
                            $k[$j++] = 1; //#27333
                        } //#27333
                    } //#27333
                } else { //#27336
                    for (var _1y = 0, _1z = $cvi($get($1.sbs, $1.i)); _1y < _1z; _1y++) { //#27336
                        $k[$j++] = 0; //#27336
                    } //#27336
                } //#27336
            } //#27336
            $k[$j++] = 0; //#27339
        } //#27339
        $1.pixs = $a(); //#27339
        $1.pixy = ~~($1.pixs.length / $1.pixx); //#27343
        var _29 = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.pixs],
            ["pixx", $1.pixx],
            ["pixy", $1.pixy],
            ["height", $1.pixy / 72],
            ["width", $1.pixx / 72],
            ["opt", $1.options]
        ]); //#27351
        $k[$j++] = _29; //#27358
        if (!$1.dontdraw) { //#27358
            $$.save(); //#27355
            bwipp_renmatrix(); //#27356
            $$.restore(); //#27357
        } //#27357
    } //#27357
}

function bwipp_ean8composite() {
    var $1 = Object.create(bwipp_ean8composite.$ctx || (bwipp_ean8composite.$ctx = {})); //#27393
    $1.dontdraw = false; //#27396
    $1.usematrix = false; //#27397
    $1.parse = false; //#27398
    $1.dontlint = false; //#27399
    $1.lintreqs = true; //#27400
    $k[$j++] = $1; //#27402
    bwipp_processoptions(); //#27402
    $1.options = $k[--$j]; //#27402
    $1.barcode = $k[--$j]; //#27403
    if ($1.dontdraw) { //#27405
        $1.usematrix = true; //#27405
    } //#27405
    $search($1.barcode, "|"); //#27408
    if ($k[--$j]) { //#27413
        $1.linear = $k[--$j]; //#27409
        $j--; //#27410
        $1.comp = $k[--$j]; //#27411
    } else { //#27413
        $j--; //#27413
        $k[$j++] = 'bwipp.missingCompositeComponent#27413'; //#27413
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#27413
        bwipp_raiseerror(); //#27413
    } //#27413
    $put($1.options, "lintype", "ean8"); //#27417
    $put($1.options, "inkspread", "0"); //#27418
    $put($1.options, "dontdraw", true); //#27419
    $put($1.options, "dontlint", true); //#27420
    var _C = $s($1.comp.length + 18); //#27423
    $puti(_C, 0, "(01)00000000000000"); //#27424
    $puti(_C, 18, $1.comp); //#27425
    $k[$j++] = _C; //#27426
    $k[$j++] = 'ai'; //#27426
    bwipp_gs1process(); //#27426
    $j -= 3; //#27426
    $k[$j++] = $1.linear; //#27429
    $k[$j++] = $1.options; //#27429
    bwipp_ean8(); //#27429
    if (!$1.usematrix) { //#27521
        $$.save(); //#27431
        bwipp_renlinear(); //#27433
        $$.rmoveto(-1, 72); //#27436
        $k[$j++] = Infinity; //#27447
        $k[$j++] = Infinity; //#27441
        $k[$j++] = 0; //#27439
        $k[$j++] = 1; //#27439
        for (var _H = 0, _I = 65; _H < _I; _H++) { //#27439
            $k[$j++] = 0; //#27439
        } //#27439
        $k[$j++] = 1; //#27440
        $k[$j++] = 0; //#27440
        $k[$j++] = 1; //#27440
        $k[$j++] = 0; //#27440
        for (var _J = 0, _K = 65; _J < _K; _J++) { //#27440
            $k[$j++] = 0; //#27440
        } //#27440
        $k[$j++] = 0; //#27441
        $k[$j++] = 1; //#27441
        $k[$j++] = 0; //#27441
        $k[$j++] = 1; //#27441
        for (var _L = 0, _M = 65; _L < _M; _L++) { //#27441
            $k[$j++] = 0; //#27441
        } //#27441
        $k[$j++] = 1; //#27441
        $k[$j++] = 0; //#27441
        var _N = $a(); //#27441
        $k[$j++] = 'ren'; //#27447
        $k[$j++] = bwipp_renmatrix; //#27447
        $k[$j++] = 'pixs'; //#27447
        $k[$j++] = _N; //#27447
        $k[$j++] = 'pixx'; //#27447
        $k[$j++] = 69; //#27447
        $k[$j++] = 'pixy'; //#27447
        $k[$j++] = 3; //#27447
        $k[$j++] = 'height'; //#27447
        $k[$j++] = 6 / 72; //#27447
        $k[$j++] = 'width'; //#27447
        $k[$j++] = 69 / 72; //#27447
        $k[$j++] = 'opt'; //#27447
        $k[$j++] = $1.options; //#27447
        var _P = $d(); //#27447
        $k[$j++] = _P; //#27448
        bwipp_renmatrix(); //#27448
        $k[$j++] = $1.comp; //#27451
        $k[$j++] = $1.options; //#27451
        bwipp_gs1_cc(); //#27451
        var _S = $k[--$j]; //#27452
        $$.rmoveto($f(69 - $get(_S, "pixx")), 6); //#27452
        $k[$j++] = _S; //#27453
        bwipp_renmatrix(); //#27453
        $$.restore(); //#27455
    } else { //#27521
        $1.linsym = $k[--$j]; //#27457
        $1.sbs = $get($1.linsym, 'sbs'); //#27458
        $1.bhs = $get($1.linsym, 'bhs'); //#27459
        $1.bbs = $get($1.linsym, 'bbs'); //#27460
        $k[$j++] = 'linwidth'; //#27461
        $k[$j++] = 0; //#27461
        $forall($1.sbs, function() { //#27461
            var _c = $k[--$j]; //#27461
            var _d = $k[--$j]; //#27461
            $k[$j++] = $f(_d + $cvi(_c)); //#27461
        }); //#27461
        var _e = $k[--$j]; //#27461
        $1[$k[--$j]] = _e; //#27461
        var _g = $1.comp; //#27463
        $k[$j++] = 'compsym'; //#27463
        $k[$j++] = _g; //#27463
        $k[$j++] = $1.options; //#27463
        bwipp_gs1_cc(); //#27463
        var _i = $k[--$j]; //#27463
        $1[$k[--$j]] = _i; //#27463
        $1.ccpixs = $get($1.compsym, 'pixs'); //#27464
        $1.ccpixx = $get($1.compsym, 'pixx'); //#27465
        $k[$j++] = Infinity; //#27467
        for (var _p = 0, _q = $f($1.ccpixx - 69); _p < _q; _p++) { //#27467
            $k[$j++] = 0; //#27467
        } //#27467
        $1.linpad = $a(); //#27467
        $1.diff = $f(($f($f($1.linwidth + $1.linpad.length) + 2)) - $1.ccpixx); //#27469
        if ($1.diff > 0) { //#27475
            $k[$j++] = Infinity; //#27471
            for (var _x = 0, _y = $1.diff; _x < _y; _x++) { //#27471
                $k[$j++] = 0; //#27471
            } //#27471
            $1.ccrpad = $a(); //#27471
            $1.pixx = $f($1.ccpixx + $1.diff); //#27472
        } else { //#27475
            $1.ccrpad = $a(0); //#27474
            $1.pixx = $1.ccpixx; //#27475
        } //#27475
        $k[$j++] = Infinity; //#27503
        for (var _17 = 0, _18 = $1.ccpixx, _16 = $1.ccpixs.length - 1; _18 < 0 ? _17 >= _16 : _17 <= _16; _17 += _18) { //#27482
            $1.i = _17; //#27480
            for (var _19 = 0, _1A = 2; _19 < _1A; _19++) { //#27481
                $aload($geti($1.ccpixs, $1.i, $1.ccpixx)); //#27481
                $aload($1.ccrpad); //#27481
            } //#27481
        } //#27481
        for (var _1G = 0, _1H = 2; _1G < _1H; _1G++) { //#27483
            $aload($1.linpad); //#27483
            $k[$j++] = 0; //#27483
            $k[$j++] = 1; //#27483
            for (var _1J = 0, _1K = 65; _1J < _1K; _1J++) { //#27483
                $k[$j++] = 0; //#27483
            } //#27483
            $k[$j++] = 1; //#27483
            $k[$j++] = 0; //#27483
            $aload($1.ccrpad); //#27483
        } //#27483
        for (var _1M = 0, _1N = 2; _1M < _1N; _1M++) { //#27484
            $aload($1.linpad); //#27484
            $k[$j++] = 1; //#27484
            $k[$j++] = 0; //#27484
            for (var _1P = 0, _1Q = 65; _1P < _1Q; _1P++) { //#27484
                $k[$j++] = 0; //#27484
            } //#27484
            $k[$j++] = 0; //#27484
            $k[$j++] = 1; //#27484
            $aload($1.ccrpad); //#27484
        } //#27484
        for (var _1S = 0, _1T = 2; _1S < _1T; _1S++) { //#27485
            $aload($1.linpad); //#27485
            $k[$j++] = 0; //#27485
            $k[$j++] = 1; //#27485
            for (var _1V = 0, _1W = 65; _1V < _1W; _1V++) { //#27485
                $k[$j++] = 0; //#27485
            } //#27485
            $k[$j++] = 1; //#27485
            $k[$j++] = 0; //#27485
            $aload($1.ccrpad); //#27485
        } //#27485
        for (var _1Y = 71; _1Y >= 0; _1Y -= 1) { //#27504
            $1.y = _1Y; //#27487
            $aload($1.linpad); //#27488
            $k[$j++] = 0; //#27502
            for (var _1c = 0, _1b = $1.sbs.length - 1; _1c <= _1b; _1c += 1) { //#27502
                $1.i = _1c; //#27491
                if (($1.i % 2) == 0) { //#27500
                    var _1h = $get($1.bbs, ~~($1.i / 2)) * 72; //#27494
                    if ((_1h > $1.y) || (($f(_1h + ($get($1.bhs, ~~($1.i / 2)) * 72))) < $1.y)) { //#27497
                        for (var _1q = 0, _1r = $cvi($get($1.sbs, $1.i)); _1q < _1r; _1q++) { //#27495
                            $k[$j++] = 0; //#27495
                        } //#27495
                    } else { //#27497
                        for (var _1v = 0, _1w = $cvi($get($1.sbs, $1.i)); _1v < _1w; _1v++) { //#27497
                            $k[$j++] = 1; //#27497
                        } //#27497
                    } //#27497
                } else { //#27500
                    for (var _20 = 0, _21 = $cvi($get($1.sbs, $1.i)); _20 < _21; _20++) { //#27500
                        $k[$j++] = 0; //#27500
                    } //#27500
                } //#27500
            } //#27500
            $k[$j++] = 0; //#27503
        } //#27503
        $1.pixs = $a(); //#27503
        $1.pixy = ~~($1.pixs.length / $1.pixx); //#27507
        var _2B = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.pixs],
            ["pixx", $1.pixx],
            ["pixy", $1.pixy],
            ["height", $1.pixy / 72],
            ["width", $1.pixx / 72],
            ["opt", $1.options]
        ]); //#27515
        $k[$j++] = _2B; //#27522
        if (!$1.dontdraw) { //#27522
            $$.save(); //#27519
            bwipp_renmatrix(); //#27520
            $$.restore(); //#27521
        } //#27521
    } //#27521
}

function bwipp_upcacomposite() {
    var $1 = Object.create(bwipp_upcacomposite.$ctx || (bwipp_upcacomposite.$ctx = {})); //#27557
    $1.dontdraw = false; //#27560
    $1.usematrix = false; //#27561
    $1.parse = false; //#27562
    $1.dontlint = false; //#27563
    $1.lintreqs = true; //#27564
    $k[$j++] = $1; //#27566
    bwipp_processoptions(); //#27566
    $1.options = $k[--$j]; //#27566
    $1.barcode = $k[--$j]; //#27567
    if ($1.dontdraw) { //#27569
        $1.usematrix = true; //#27569
    } //#27569
    $search($1.barcode, "|"); //#27572
    if ($k[--$j]) { //#27577
        $1.linear = $k[--$j]; //#27573
        $j--; //#27574
        $1.comp = $k[--$j]; //#27575
    } else { //#27577
        $j--; //#27577
        $k[$j++] = 'bwipp.missingCompositeComponent#27577'; //#27577
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#27577
        bwipp_raiseerror(); //#27577
    } //#27577
    $put($1.options, "lintype", "ean13"); //#27580
    $put($1.options, "inkspread", "0"); //#27581
    $put($1.options, "dontdraw", true); //#27582
    $put($1.options, "dontlint", true); //#27583
    var _C = $s($1.comp.length + 18); //#27586
    $puti(_C, 0, "(01)00000000000000"); //#27587
    $puti(_C, 18, $1.comp); //#27588
    $k[$j++] = _C; //#27589
    $k[$j++] = 'ai'; //#27589
    bwipp_gs1process(); //#27589
    $j -= 3; //#27589
    $k[$j++] = $1.linear; //#27592
    $k[$j++] = $1.options; //#27592
    bwipp_upca(); //#27592
    if (!$1.usematrix) { //#27682
        $$.save(); //#27594
        bwipp_renlinear(); //#27596
        $$.rmoveto(-1, 72); //#27599
        $k[$j++] = Infinity; //#27610
        $k[$j++] = Infinity; //#27604
        $k[$j++] = 0; //#27602
        $k[$j++] = 1; //#27602
        for (var _H = 0, _I = 93; _H < _I; _H++) { //#27602
            $k[$j++] = 0; //#27602
        } //#27602
        $k[$j++] = 1; //#27603
        $k[$j++] = 0; //#27603
        $k[$j++] = 1; //#27603
        $k[$j++] = 0; //#27603
        for (var _J = 0, _K = 93; _J < _K; _J++) { //#27603
            $k[$j++] = 0; //#27603
        } //#27603
        $k[$j++] = 0; //#27604
        $k[$j++] = 1; //#27604
        $k[$j++] = 0; //#27604
        $k[$j++] = 1; //#27604
        for (var _L = 0, _M = 93; _L < _M; _L++) { //#27604
            $k[$j++] = 0; //#27604
        } //#27604
        $k[$j++] = 1; //#27604
        $k[$j++] = 0; //#27604
        var _N = $a(); //#27604
        $k[$j++] = 'ren'; //#27610
        $k[$j++] = bwipp_renmatrix; //#27610
        $k[$j++] = 'pixs'; //#27610
        $k[$j++] = _N; //#27610
        $k[$j++] = 'pixx'; //#27610
        $k[$j++] = 97; //#27610
        $k[$j++] = 'pixy'; //#27610
        $k[$j++] = 3; //#27610
        $k[$j++] = 'height'; //#27610
        $k[$j++] = 6 / 72; //#27610
        $k[$j++] = 'width'; //#27610
        $k[$j++] = 97 / 72; //#27610
        $k[$j++] = 'opt'; //#27610
        $k[$j++] = $1.options; //#27610
        var _P = $d(); //#27610
        $k[$j++] = _P; //#27611
        bwipp_renmatrix(); //#27611
        $$.rmoveto(-2, 6); //#27614
        $k[$j++] = $1.comp; //#27614
        $k[$j++] = $1.options; //#27614
        bwipp_gs1_cc(); //#27614
        bwipp_renmatrix(); //#27614
        $$.restore(); //#27616
    } else { //#27682
        $1.linsym = $k[--$j]; //#27618
        $1.sbs = $get($1.linsym, 'sbs'); //#27619
        $1.bhs = $get($1.linsym, 'bhs'); //#27620
        $1.bbs = $get($1.linsym, 'bbs'); //#27621
        $k[$j++] = 'linwidth'; //#27622
        $k[$j++] = 0; //#27622
        $forall($1.sbs, function() { //#27622
            var _a = $k[--$j]; //#27622
            var _b = $k[--$j]; //#27622
            $k[$j++] = $f(_b + $cvi(_a)); //#27622
        }); //#27622
        var _c = $k[--$j]; //#27622
        $1[$k[--$j]] = _c; //#27622
        $k[$j++] = 'compsym'; //#27624
        $k[$j++] = $1.comp; //#27624
        $k[$j++] = $1.options; //#27624
        bwipp_gs1_cc(); //#27624
        var _g = $k[--$j]; //#27624
        $1[$k[--$j]] = _g; //#27624
        $1.ccpixs = $get($1.compsym, 'pixs'); //#27625
        $1.ccpixx = $get($1.compsym, 'pixx'); //#27626
        $k[$j++] = Infinity; //#27628
        for (var _n = 0, _o = $f($1.ccpixx - 97); _n < _o; _n++) { //#27628
            $k[$j++] = 0; //#27628
        } //#27628
        $1.linpad = $a(); //#27628
        $1.diff = $f(($f($f($1.linwidth + $1.linpad.length) + 2)) - $1.ccpixx); //#27630
        if ($1.diff > 0) { //#27636
            $k[$j++] = Infinity; //#27632
            for (var _v = 0, _w = $1.diff; _v < _w; _v++) { //#27632
                $k[$j++] = 0; //#27632
            } //#27632
            $1.ccrpad = $a(); //#27632
            $1.pixx = $f($1.ccpixx + $1.diff); //#27633
        } else { //#27636
            $1.ccrpad = $a(0); //#27635
            $1.pixx = $1.ccpixx; //#27636
        } //#27636
        $k[$j++] = Infinity; //#27664
        for (var _15 = 0, _16 = $1.ccpixx, _14 = $1.ccpixs.length - 1; _16 < 0 ? _15 >= _14 : _15 <= _14; _15 += _16) { //#27643
            $1.i = _15; //#27641
            for (var _17 = 0, _18 = 2; _17 < _18; _17++) { //#27642
                $aload($geti($1.ccpixs, $1.i, $1.ccpixx)); //#27642
                $aload($1.ccrpad); //#27642
            } //#27642
        } //#27642
        for (var _1E = 0, _1F = 2; _1E < _1F; _1E++) { //#27644
            $aload($1.linpad); //#27644
            $k[$j++] = 0; //#27644
            $k[$j++] = 1; //#27644
            for (var _1H = 0, _1I = 93; _1H < _1I; _1H++) { //#27644
                $k[$j++] = 0; //#27644
            } //#27644
            $k[$j++] = 1; //#27644
            $k[$j++] = 0; //#27644
            $aload($1.ccrpad); //#27644
        } //#27644
        for (var _1K = 0, _1L = 2; _1K < _1L; _1K++) { //#27645
            $aload($1.linpad); //#27645
            $k[$j++] = 1; //#27645
            $k[$j++] = 0; //#27645
            for (var _1N = 0, _1O = 93; _1N < _1O; _1N++) { //#27645
                $k[$j++] = 0; //#27645
            } //#27645
            $k[$j++] = 0; //#27645
            $k[$j++] = 1; //#27645
            $aload($1.ccrpad); //#27645
        } //#27645
        for (var _1Q = 0, _1R = 2; _1Q < _1R; _1Q++) { //#27646
            $aload($1.linpad); //#27646
            $k[$j++] = 0; //#27646
            $k[$j++] = 1; //#27646
            for (var _1T = 0, _1U = 93; _1T < _1U; _1T++) { //#27646
                $k[$j++] = 0; //#27646
            } //#27646
            $k[$j++] = 1; //#27646
            $k[$j++] = 0; //#27646
            $aload($1.ccrpad); //#27646
        } //#27646
        for (var _1W = 71; _1W >= 0; _1W -= 1) { //#27665
            $1.y = _1W; //#27648
            $aload($1.linpad); //#27649
            $k[$j++] = 0; //#27663
            for (var _1a = 0, _1Z = $1.sbs.length - 1; _1a <= _1Z; _1a += 1) { //#27663
                $1.i = _1a; //#27652
                if (($1.i % 2) == 0) { //#27661
                    var _1f = $get($1.bbs, ~~($1.i / 2)) * 72; //#27655
                    if ((_1f > $1.y) || (($f(_1f + ($get($1.bhs, ~~($1.i / 2)) * 72))) < $1.y)) { //#27658
                        for (var _1o = 0, _1p = $cvi($get($1.sbs, $1.i)); _1o < _1p; _1o++) { //#27656
                            $k[$j++] = 0; //#27656
                        } //#27656
                    } else { //#27658
                        for (var _1t = 0, _1u = $cvi($get($1.sbs, $1.i)); _1t < _1u; _1t++) { //#27658
                            $k[$j++] = 1; //#27658
                        } //#27658
                    } //#27658
                } else { //#27661
                    for (var _1y = 0, _1z = $cvi($get($1.sbs, $1.i)); _1y < _1z; _1y++) { //#27661
                        $k[$j++] = 0; //#27661
                    } //#27661
                } //#27661
            } //#27661
            $k[$j++] = 0; //#27664
        } //#27664
        $1.pixs = $a(); //#27664
        $1.pixy = ~~($1.pixs.length / $1.pixx); //#27668
        var _29 = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.pixs],
            ["pixx", $1.pixx],
            ["pixy", $1.pixy],
            ["height", $1.pixy / 72],
            ["width", $1.pixx / 72],
            ["opt", $1.options]
        ]); //#27676
        $k[$j++] = _29; //#27683
        if (!$1.dontdraw) { //#27683
            $$.save(); //#27680
            bwipp_renmatrix(); //#27681
            $$.restore(); //#27682
        } //#27682
    } //#27682
}

function bwipp_upcecomposite() {
    var $1 = Object.create(bwipp_upcecomposite.$ctx || (bwipp_upcecomposite.$ctx = {})); //#27718
    $1.dontdraw = false; //#27721
    $1.usematrix = false; //#27722
    $1.parse = false; //#27723
    $1.dontlint = false; //#27724
    $1.lintreqs = true; //#27725
    $k[$j++] = $1; //#27727
    bwipp_processoptions(); //#27727
    $1.options = $k[--$j]; //#27727
    $1.barcode = $k[--$j]; //#27728
    if ($1.dontdraw) { //#27730
        $1.usematrix = true; //#27730
    } //#27730
    $search($1.barcode, "|"); //#27733
    if ($k[--$j]) { //#27738
        $1.linear = $k[--$j]; //#27734
        $j--; //#27735
        $1.comp = $k[--$j]; //#27736
    } else { //#27738
        $j--; //#27738
        $k[$j++] = 'bwipp.missingCompositeComponent#27738'; //#27738
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#27738
        bwipp_raiseerror(); //#27738
    } //#27738
    $put($1.options, "lintype", "upce"); //#27741
    $put($1.options, "inkspread", "0"); //#27742
    $put($1.options, "dontdraw", true); //#27743
    $put($1.options, "dontlint", true); //#27744
    var _C = $s($1.comp.length + 18); //#27747
    $puti(_C, 0, "(01)00000000000000"); //#27748
    $puti(_C, 18, $1.comp); //#27749
    $k[$j++] = _C; //#27750
    $k[$j++] = 'ai'; //#27750
    bwipp_gs1process(); //#27750
    $j -= 3; //#27750
    $k[$j++] = $1.linear; //#27753
    $k[$j++] = $1.options; //#27753
    bwipp_upce(); //#27753
    if (!$1.usematrix) { //#27843
        $$.save(); //#27755
        bwipp_renlinear(); //#27757
        $$.rmoveto(-1, 72); //#27760
        $k[$j++] = Infinity; //#27771
        $k[$j++] = Infinity; //#27765
        $k[$j++] = 0; //#27763
        $k[$j++] = 1; //#27763
        for (var _H = 0, _I = 49; _H < _I; _H++) { //#27763
            $k[$j++] = 0; //#27763
        } //#27763
        $k[$j++] = 1; //#27764
        $k[$j++] = 0; //#27764
        $k[$j++] = 1; //#27764
        $k[$j++] = 0; //#27764
        for (var _J = 0, _K = 49; _J < _K; _J++) { //#27764
            $k[$j++] = 0; //#27764
        } //#27764
        $k[$j++] = 0; //#27765
        $k[$j++] = 1; //#27765
        $k[$j++] = 0; //#27765
        $k[$j++] = 1; //#27765
        for (var _L = 0, _M = 49; _L < _M; _L++) { //#27765
            $k[$j++] = 0; //#27765
        } //#27765
        $k[$j++] = 1; //#27765
        $k[$j++] = 0; //#27765
        var _N = $a(); //#27765
        $k[$j++] = 'ren'; //#27771
        $k[$j++] = bwipp_renmatrix; //#27771
        $k[$j++] = 'pixs'; //#27771
        $k[$j++] = _N; //#27771
        $k[$j++] = 'pixx'; //#27771
        $k[$j++] = 53; //#27771
        $k[$j++] = 'pixy'; //#27771
        $k[$j++] = 3; //#27771
        $k[$j++] = 'height'; //#27771
        $k[$j++] = 6 / 72; //#27771
        $k[$j++] = 'width'; //#27771
        $k[$j++] = 53 / 72; //#27771
        $k[$j++] = 'opt'; //#27771
        $k[$j++] = $1.options; //#27771
        var _P = $d(); //#27771
        $k[$j++] = _P; //#27772
        bwipp_renmatrix(); //#27772
        $$.rmoveto(-2, 6); //#27775
        $k[$j++] = $1.comp; //#27775
        $k[$j++] = $1.options; //#27775
        bwipp_gs1_cc(); //#27775
        bwipp_renmatrix(); //#27775
        $$.restore(); //#27777
    } else { //#27843
        $1.linsym = $k[--$j]; //#27779
        $1.sbs = $get($1.linsym, 'sbs'); //#27780
        $1.bhs = $get($1.linsym, 'bhs'); //#27781
        $1.bbs = $get($1.linsym, 'bbs'); //#27782
        $k[$j++] = 'linwidth'; //#27783
        $k[$j++] = 0; //#27783
        $forall($1.sbs, function() { //#27783
            var _a = $k[--$j]; //#27783
            var _b = $k[--$j]; //#27783
            $k[$j++] = $f(_b + $cvi(_a)); //#27783
        }); //#27783
        var _c = $k[--$j]; //#27783
        $1[$k[--$j]] = _c; //#27783
        $k[$j++] = 'compsym'; //#27785
        $k[$j++] = $1.comp; //#27785
        $k[$j++] = $1.options; //#27785
        bwipp_gs1_cc(); //#27785
        var _g = $k[--$j]; //#27785
        $1[$k[--$j]] = _g; //#27785
        $1.ccpixs = $get($1.compsym, 'pixs'); //#27786
        $1.ccpixx = $get($1.compsym, 'pixx'); //#27787
        $k[$j++] = Infinity; //#27789
        for (var _n = 0, _o = $f($1.ccpixx - 53); _n < _o; _n++) { //#27789
            $k[$j++] = 0; //#27789
        } //#27789
        $1.linpad = $a(); //#27789
        $1.diff = $f(($f($f($1.linwidth + $1.linpad.length) + 2)) - $1.ccpixx); //#27791
        if ($1.diff > 0) { //#27797
            $k[$j++] = Infinity; //#27793
            for (var _v = 0, _w = $1.diff; _v < _w; _v++) { //#27793
                $k[$j++] = 0; //#27793
            } //#27793
            $1.ccrpad = $a(); //#27793
            $1.pixx = $f($1.ccpixx + $1.diff); //#27794
        } else { //#27797
            $1.ccrpad = $a(0); //#27796
            $1.pixx = $1.ccpixx; //#27797
        } //#27797
        $k[$j++] = Infinity; //#27825
        for (var _15 = 0, _16 = $1.ccpixx, _14 = $1.ccpixs.length - 1; _16 < 0 ? _15 >= _14 : _15 <= _14; _15 += _16) { //#27804
            $1.i = _15; //#27802
            for (var _17 = 0, _18 = 2; _17 < _18; _17++) { //#27803
                $aload($geti($1.ccpixs, $1.i, $1.ccpixx)); //#27803
                $aload($1.ccrpad); //#27803
            } //#27803
        } //#27803
        for (var _1E = 0, _1F = 2; _1E < _1F; _1E++) { //#27805
            $aload($1.linpad); //#27805
            $k[$j++] = 0; //#27805
            $k[$j++] = 1; //#27805
            for (var _1H = 0, _1I = 49; _1H < _1I; _1H++) { //#27805
                $k[$j++] = 0; //#27805
            } //#27805
            $k[$j++] = 1; //#27805
            $k[$j++] = 0; //#27805
            $aload($1.ccrpad); //#27805
        } //#27805
        for (var _1K = 0, _1L = 2; _1K < _1L; _1K++) { //#27806
            $aload($1.linpad); //#27806
            $k[$j++] = 1; //#27806
            $k[$j++] = 0; //#27806
            for (var _1N = 0, _1O = 49; _1N < _1O; _1N++) { //#27806
                $k[$j++] = 0; //#27806
            } //#27806
            $k[$j++] = 0; //#27806
            $k[$j++] = 1; //#27806
            $aload($1.ccrpad); //#27806
        } //#27806
        for (var _1Q = 0, _1R = 2; _1Q < _1R; _1Q++) { //#27807
            $aload($1.linpad); //#27807
            $k[$j++] = 0; //#27807
            $k[$j++] = 1; //#27807
            for (var _1T = 0, _1U = 49; _1T < _1U; _1T++) { //#27807
                $k[$j++] = 0; //#27807
            } //#27807
            $k[$j++] = 1; //#27807
            $k[$j++] = 0; //#27807
            $aload($1.ccrpad); //#27807
        } //#27807
        for (var _1W = 71; _1W >= 0; _1W -= 1) { //#27826
            $1.y = _1W; //#27809
            $aload($1.linpad); //#27810
            $k[$j++] = 0; //#27824
            for (var _1a = 0, _1Z = $1.sbs.length - 1; _1a <= _1Z; _1a += 1) { //#27824
                $1.i = _1a; //#27813
                if (($1.i % 2) == 0) { //#27822
                    var _1f = $get($1.bbs, ~~($1.i / 2)) * 72; //#27816
                    if ((_1f > $1.y) || (($f(_1f + ($get($1.bhs, ~~($1.i / 2)) * 72))) < $1.y)) { //#27819
                        for (var _1o = 0, _1p = $cvi($get($1.sbs, $1.i)); _1o < _1p; _1o++) { //#27817
                            $k[$j++] = 0; //#27817
                        } //#27817
                    } else { //#27819
                        for (var _1t = 0, _1u = $cvi($get($1.sbs, $1.i)); _1t < _1u; _1t++) { //#27819
                            $k[$j++] = 1; //#27819
                        } //#27819
                    } //#27819
                } else { //#27822
                    for (var _1y = 0, _1z = $cvi($get($1.sbs, $1.i)); _1y < _1z; _1y++) { //#27822
                        $k[$j++] = 0; //#27822
                    } //#27822
                } //#27822
            } //#27822
            $k[$j++] = 0; //#27825
        } //#27825
        $1.pixs = $a(); //#27825
        $1.pixy = ~~($1.pixs.length / $1.pixx); //#27829
        var _29 = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.pixs],
            ["pixx", $1.pixx],
            ["pixy", $1.pixy],
            ["height", $1.pixy / 72],
            ["width", $1.pixx / 72],
            ["opt", $1.options]
        ]); //#27837
        $k[$j++] = _29; //#27844
        if (!$1.dontdraw) { //#27844
            $$.save(); //#27841
            bwipp_renmatrix(); //#27842
            $$.restore(); //#27843
        } //#27843
    } //#27843
}

function bwipp_databaromnicomposite() {
    var $1 = Object.create(bwipp_databaromnicomposite.$ctx || (bwipp_databaromnicomposite.$ctx = {})); //#27879
    $1.dontdraw = false; //#27882
    $1.usematrix = false; //#27883
    $1.parse = false; //#27884
    $1.dontlint = false; //#27885
    $1.lintreqs = true; //#27886
    $k[$j++] = $1; //#27888
    bwipp_processoptions(); //#27888
    $1.options = $k[--$j]; //#27888
    $1.barcode = $k[--$j]; //#27889
    if ($1.dontdraw) { //#27891
        $1.usematrix = true; //#27891
    } //#27891
    $search($1.barcode, "|"); //#27894
    if ($k[--$j]) { //#27899
        $1.linear = $k[--$j]; //#27895
        $j--; //#27896
        $1.comp = $k[--$j]; //#27897
    } else { //#27899
        $j--; //#27899
        $k[$j++] = 'bwipp.missingCompositeComponent#27899'; //#27899
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#27899
        bwipp_raiseerror(); //#27899
    } //#27899
    if (!$1.usematrix) { //#27902
        $$.save(); //#27902
    } //#27902
    $put($1.options, "lintype", "databaromni"); //#27904
    $put($1.options, "linkage", true); //#27905
    $put($1.options, "inkspread", "0"); //#27906
    $put($1.options, "dontdraw", true); //#27907
    $put($1.options, "dontlint", true); //#27908
    var _F = $s($1.linear.length + $1.comp.length); //#27911
    $puti(_F, 0, $1.linear); //#27912
    $puti(_F, $1.linear.length, $1.comp); //#27913
    $k[$j++] = _F; //#27914
    $k[$j++] = 'ai'; //#27914
    bwipp_gs1process(); //#27914
    $j -= 3; //#27914
    $k[$j++] = $1.linear; //#27917
    $k[$j++] = $1.options; //#27917
    bwipp_databaromni(); //#27917
    var _L = $k[--$j]; //#27918
    $1.linsbs = $get(_L, "sbs"); //#27918
    $1.linheight = $get($get(_L, "bhs"), 0) * 72; //#27919
    $k[$j++] = _L; //#27920
    if (!$1.usematrix) { //#27920
        bwipp_renlinear(); //#27920
    } else { //#27920
        $j--; //#27920
    } //#27920
    $1.sepfinder = function() {
        $1.fp = $k[--$j]; //#27924
        for (var _U = $1.fp, _T = $f($1.fp + 12); _U <= _T; _U += 1) { //#27937
            $1.i = _U; //#27926
            if ($get($1.bot, $1.i) == 0) { //#27934
                if ($get($1.bot, $1.i - 1) == 1) { //#27931
                    $k[$j++] = 1; //#27929
                } else { //#27931
                    var _e = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; //#27931
                    $k[$j++] = _e; //#27931
                } //#27931
            } else { //#27934
                $k[$j++] = 0; //#27934
            } //#27934
            $put($1.sep, $1.i, $k[--$j]); //#27936
        } //#27936
        $1.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#27938
        $k[$j++] = true; //#27939
        for (var _j = 0; _j <= 12; _j += 1) { //#27939
            var _p = $k[--$j]; //#27939
            $k[$j++] = _p && $eq($get($1.bot, $f(_j + $1.fp)), $get($1.f3, _j)); //#27939
        } //#27939
        if ($k[--$j]) { //#27942
            $puti($1.sep, $1.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#27941
        } //#27941
    }; //#27941
    $k[$j++] = Infinity; //#27944
    $k[$j++] = 0; //#27945
    $forall($1.linsbs, function() { //#27945
        var _v = $k[--$j]; //#27945
        var _w = $k[--$j]; //#27945
        var _x = (_w == 1) ? 0 : 1; //#27945
        $k[$j++] = _w; //#27945
        for (var _y = 0, _z = _v; _y < _z; _y++) { //#27945
            $k[$j++] = _x //#27945
        } //#27945
    }); //#27945
    $astore($a($counttomark() - 1)); //#27946
    $1.bot = $k[--$j]; //#27946
    $j -= 2; //#27946
    $k[$j++] = Infinity; //#27947
    $forall($1.bot, function() { //#27947
        var _14 = $k[--$j]; //#27947
        $k[$j++] = $f(1 - _14); //#27947
    }); //#27947
    $1.sep = $a(); //#27947
    $puti($1.sep, 0, $a([0, 0, 0])); //#27948
    $puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); //#27949
    $k[$j++] = 18; //#27950
    $1.sepfinder(); //#27950
    $k[$j++] = 64; //#27950
    $1.sepfinder(); //#27950
    if (!$1.usematrix) { //#28001
        $$.rmoveto(0, $1.linheight); //#27952
        var _1H = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.sep],
            ["pixx", $1.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $1.sep.length / 72],
            ["opt", $1.options]
        ]); //#27959
        $k[$j++] = _1H; //#27960
        bwipp_renmatrix(); //#27960
        $$.rmoveto(-5, 1); //#27963
        $k[$j++] = $1.comp; //#27963
        $k[$j++] = $1.options; //#27963
        bwipp_gs1_cc(); //#27963
        bwipp_renmatrix(); //#27963
        $$.restore(); //#27965
    } else { //#28001
        $k[$j++] = 'compsym'; //#27967
        $k[$j++] = $1.comp; //#27967
        $k[$j++] = $1.options; //#27967
        bwipp_gs1_cc(); //#27967
        var _1M = $k[--$j]; //#27967
        $1[$k[--$j]] = _1M; //#27967
        $1.ccpixs = $get($1.compsym, 'pixs'); //#27968
        $1.ccpixx = $get($1.compsym, 'pixx'); //#27969
        $k[$j++] = Infinity; //#27972
        $k[$j++] = 0; //#27972
        $forall($1.linsbs, function() { //#27972
            var _1T = $k[--$j]; //#27972
            var _1U = $k[--$j]; //#27972
            var _1V = (_1U == 0) ? 1 : 0; //#27972
            $k[$j++] = _1U; //#27972
            for (var _1W = 0, _1X = $cvi(_1T); _1W < _1X; _1W++) { //#27972
                $k[$j++] = _1V //#27972
            } //#27972
        }); //#27972
        $1.linpixs = $a(); //#27972
        $k[$j++] = Infinity; //#27974
        $k[$j++] = 0; //#27974
        $aload($1.sep); //#27974
        $1.sep = $a(); //#27974
        $1.linheight = ~~$1.linheight; //#27976
        $k[$j++] = Infinity; //#27983
        for (var _1f = 0, _1g = $1.ccpixx, _1e = $1.ccpixs.length - 1; _1g < 0 ? _1f >= _1e : _1f <= _1e; _1f += _1g) { //#27982
            $1.i = _1f; //#27980
            for (var _1h = 0, _1i = 2; _1h < _1i; _1h++) { //#27981
                $aload($geti($1.ccpixs, $1.i, $1.ccpixx)); //#27981
                $k[$j++] = 0; //#27981
            } //#27981
        } //#27981
        $k[$j++] = 0; //#27983
        $k[$j++] = 0; //#27983
        $k[$j++] = 0; //#27983
        $k[$j++] = 0; //#27983
        $aload($1.sep); //#27983
        for (var _1p = 0, _1q = $1.linheight; _1p < _1q; _1p++) { //#27983
            $k[$j++] = 0; //#27983
            $k[$j++] = 0; //#27983
            $k[$j++] = 0; //#27983
            $k[$j++] = 0; //#27983
            $aload($1.linpixs); //#27983
        } //#27983
        $1.pixs = $a(); //#27983
        $1.pixx = $f($1.ccpixx + 1); //#27985
        $1.pixy = ~~($1.pixs.length / $1.pixx); //#27987
        var _22 = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.pixs],
            ["pixx", $1.pixx],
            ["pixy", $1.pixy],
            ["height", $1.pixy / 72],
            ["width", $1.pixx / 72],
            ["opt", $1.options]
        ]); //#27995
        $k[$j++] = _22; //#28002
        if (!$1.dontdraw) { //#28002
            $$.save(); //#27999
            bwipp_renmatrix(); //#28000
            $$.restore(); //#28001
        } //#28001
    } //#28001
}

function bwipp_databarstackedcomposite() {
    var $1 = Object.create(bwipp_databarstackedcomposite.$ctx || (bwipp_databarstackedcomposite.$ctx = {})); //#28036
    $1.dontdraw = false; //#28039
    $1.usematrix = false; //#28040
    $1.parse = false; //#28041
    $1.dontlint = false; //#28042
    $1.lintreqs = true; //#28043
    $k[$j++] = $1; //#28045
    bwipp_processoptions(); //#28045
    $1.options = $k[--$j]; //#28045
    $1.barcode = $k[--$j]; //#28046
    if ($1.dontdraw) { //#28048
        $1.usematrix = true; //#28048
    } //#28048
    $search($1.barcode, "|"); //#28051
    if ($k[--$j]) { //#28056
        $1.linear = $k[--$j]; //#28052
        $j--; //#28053
        $1.comp = $k[--$j]; //#28054
    } else { //#28056
        $j--; //#28056
        $k[$j++] = 'bwipp.missingCompositeComponent#28056'; //#28056
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28056
        bwipp_raiseerror(); //#28056
    } //#28056
    if (!$1.usematrix) { //#28059
        $$.save(); //#28059
    } //#28059
    $put($1.options, "lintype", "databarstacked"); //#28061
    $put($1.options, "linkage", true); //#28062
    $put($1.options, "inkspread", "0"); //#28063
    $put($1.options, "dontdraw", true); //#28064
    $put($1.options, "dontlint", true); //#28065
    var _F = $s($1.linear.length + $1.comp.length); //#28068
    $puti(_F, 0, $1.linear); //#28069
    $puti(_F, $1.linear.length, $1.comp); //#28070
    $k[$j++] = _F; //#28071
    $k[$j++] = 'ai'; //#28071
    bwipp_gs1process(); //#28071
    $j -= 3; //#28071
    $k[$j++] = $1.linear; //#28074
    $k[$j++] = $1.options; //#28074
    bwipp_databarstacked(); //#28074
    var _L = $k[--$j]; //#28075
    $1.bot = $geti($get(_L, "pixs"), 0, $get(_L, "pixx")); //#28075
    $1.linheight = $get(_L, "pixy"); //#28076
    $k[$j++] = _L; //#28077
    if (!$1.usematrix) { //#28077
        bwipp_renmatrix(); //#28077
    } else { //#28077
        $1.linpixs = $get($k[--$j], 'pixs'); //#28077
    } //#28077
    $1.sepfinder = function() {
        $1.fp = $k[--$j]; //#28081
        for (var _X = $1.fp, _W = $f($1.fp + 12); _X <= _W; _X += 1) { //#28094
            $1.i = _X; //#28083
            if ($get($1.bot, $1.i) == 0) { //#28091
                if ($get($1.bot, $1.i - 1) == 1) { //#28088
                    $k[$j++] = 1; //#28086
                } else { //#28088
                    var _h = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; //#28088
                    $k[$j++] = _h; //#28088
                } //#28088
            } else { //#28091
                $k[$j++] = 0; //#28091
            } //#28091
            $put($1.sep, $1.i, $k[--$j]); //#28093
        } //#28093
        $1.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#28095
        $k[$j++] = true; //#28096
        for (var _m = 0; _m <= 12; _m += 1) { //#28096
            var _s = $k[--$j]; //#28096
            $k[$j++] = _s && $eq($get($1.bot, $f(_m + $1.fp)), $get($1.f3, _m)); //#28096
        } //#28096
        if ($k[--$j]) { //#28099
            $puti($1.sep, $1.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#28098
        } //#28098
    }; //#28098
    $k[$j++] = Infinity; //#28101
    var _x = $1.bot; //#28101
    for (var _y = 0, _z = _x.length; _y < _z; _y++) { //#28101
        $k[$j++] = $f(1 - $get(_x, _y)); //#28101
    } //#28101
    $1.sep = $a(); //#28101
    $puti($1.sep, 0, $a([0, 0, 0, 0])); //#28102
    $puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); //#28103
    $k[$j++] = 18; //#28104
    $1.sepfinder(); //#28104
    if (!$1.usematrix) { //#28154
        $$.rmoveto(0, $1.linheight); //#28106
        var _1D = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.sep],
            ["pixx", $1.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $1.sep.length / 72],
            ["opt", $1.options]
        ]); //#28113
        $k[$j++] = _1D; //#28114
        bwipp_renmatrix(); //#28114
        $$.rmoveto(1, 1); //#28117
        $k[$j++] = $1.comp; //#28117
        $k[$j++] = $1.options; //#28117
        bwipp_gs1_cc(); //#28117
        bwipp_renmatrix(); //#28117
        $$.restore(); //#28119
    } else { //#28154
        $k[$j++] = 'compsym'; //#28121
        $k[$j++] = $1.comp; //#28121
        $k[$j++] = $1.options; //#28121
        bwipp_gs1_cc(); //#28121
        var _1I = $k[--$j]; //#28121
        $1[$k[--$j]] = _1I; //#28121
        $1.ccpixs = $get($1.compsym, 'pixs'); //#28122
        $1.ccpixx = $get($1.compsym, 'pixx'); //#28123
        $1.linwidth = $1.sep.length; //#28125
        $k[$j++] = Infinity; //#28135
        for (var _1S = 0, _1T = $1.ccpixx, _1R = $1.ccpixs.length - 1; _1T < 0 ? _1S >= _1R : _1S <= _1R; _1S += _1T) { //#28131
            $1.i = _1S; //#28129
            for (var _1U = 0, _1V = 2; _1U < _1V; _1U++) { //#28130
                $k[$j++] = 0; //#28130
                $aload($geti($1.ccpixs, $1.i, $1.ccpixx)); //#28130
            } //#28130
        } //#28130
        $aload($1.sep); //#28132
        $k[$j++] = 0; //#28136
        $k[$j++] = 0; //#28136
        $k[$j++] = 0; //#28136
        $k[$j++] = 0; //#28136
        $k[$j++] = 0; //#28136
        $k[$j++] = 0; //#28136
        for (var _1e = 0, _1f = $1.linwidth, _1d = $1.linpixs.length - 1; _1f < 0 ? _1e >= _1d : _1e <= _1d; _1e += _1f) { //#28136
            $1.i = _1e; //#28134
            $aload($geti($1.linpixs, $1.i, $1.linwidth)); //#28135
            $k[$j++] = 0; //#28135
            $k[$j++] = 0; //#28135
            $k[$j++] = 0; //#28135
            $k[$j++] = 0; //#28135
            $k[$j++] = 0; //#28135
            $k[$j++] = 0; //#28135
        } //#28135
        $1.pixs = $a(); //#28135
        $1.pixx = $f($1.ccpixx + 1); //#28138
        $1.pixy = ~~($1.pixs.length / $1.pixx); //#28140
        var _1u = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.pixs],
            ["pixx", $1.pixx],
            ["pixy", $1.pixy],
            ["height", $1.pixy / 72],
            ["width", $1.pixx / 72],
            ["opt", $1.options]
        ]); //#28148
        $k[$j++] = _1u; //#28155
        if (!$1.dontdraw) { //#28155
            $$.save(); //#28152
            bwipp_renmatrix(); //#28153
            $$.restore(); //#28154
        } //#28154
    } //#28154
}

function bwipp_databarstackedomnicomposite() {
    var $1 = Object.create(bwipp_databarstackedomnicomposite.$ctx || (bwipp_databarstackedomnicomposite.$ctx = {})); //#28189
    $1.dontdraw = false; //#28192
    $1.usematrix = false; //#28193
    $1.parse = false; //#28194
    $1.dontlint = false; //#28195
    $1.lintreqs = true; //#28196
    $k[$j++] = $1; //#28198
    bwipp_processoptions(); //#28198
    $1.options = $k[--$j]; //#28198
    $1.barcode = $k[--$j]; //#28199
    if ($1.dontdraw) { //#28201
        $1.usematrix = true; //#28201
    } //#28201
    $search($1.barcode, "|"); //#28204
    if ($k[--$j]) { //#28209
        $1.linear = $k[--$j]; //#28205
        $j--; //#28206
        $1.comp = $k[--$j]; //#28207
    } else { //#28209
        $j--; //#28209
        $k[$j++] = 'bwipp.missingCompositeComponent#28209'; //#28209
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28209
        bwipp_raiseerror(); //#28209
    } //#28209
    if (!$1.usematrix) { //#28212
        $$.save(); //#28212
    } //#28212
    $put($1.options, "lintype", "databarstackedomni"); //#28214
    $put($1.options, "linkage", true); //#28215
    $put($1.options, "inkspread", "0"); //#28216
    $put($1.options, "dontdraw", true); //#28217
    $put($1.options, "dontlint", true); //#28218
    var _F = $s($1.linear.length + $1.comp.length); //#28221
    $puti(_F, 0, $1.linear); //#28222
    $puti(_F, $1.linear.length, $1.comp); //#28223
    $k[$j++] = _F; //#28224
    $k[$j++] = 'ai'; //#28224
    bwipp_gs1process(); //#28224
    $j -= 3; //#28224
    $k[$j++] = $1.linear; //#28227
    $k[$j++] = $1.options; //#28227
    bwipp_databarstackedomni(); //#28227
    var _L = $k[--$j]; //#28228
    $1.bot = $geti($get(_L, "pixs"), 0, $get(_L, "pixx")); //#28228
    $1.linheight = $get(_L, "pixy"); //#28229
    $k[$j++] = _L; //#28230
    if (!$1.usematrix) { //#28230
        bwipp_renmatrix(); //#28230
    } else { //#28230
        $1.linpixs = $get($k[--$j], 'pixs'); //#28230
    } //#28230
    $1.sepfinder = function() {
        $1.fp = $k[--$j]; //#28234
        for (var _X = $1.fp, _W = $f($1.fp + 12); _X <= _W; _X += 1) { //#28247
            $1.i = _X; //#28236
            if ($get($1.bot, $1.i) == 0) { //#28244
                if ($get($1.bot, $1.i - 1) == 1) { //#28241
                    $k[$j++] = 1; //#28239
                } else { //#28241
                    var _h = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; //#28241
                    $k[$j++] = _h; //#28241
                } //#28241
            } else { //#28244
                $k[$j++] = 0; //#28244
            } //#28244
            $put($1.sep, $1.i, $k[--$j]); //#28246
        } //#28246
        $1.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#28248
        $k[$j++] = true; //#28249
        for (var _m = 0; _m <= 12; _m += 1) { //#28249
            var _s = $k[--$j]; //#28249
            $k[$j++] = _s && $eq($get($1.bot, $f(_m + $1.fp)), $get($1.f3, _m)); //#28249
        } //#28249
        if ($k[--$j]) { //#28252
            $puti($1.sep, $1.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#28251
        } //#28251
    }; //#28251
    $k[$j++] = Infinity; //#28254
    var _x = $1.bot; //#28254
    for (var _y = 0, _z = _x.length; _y < _z; _y++) { //#28254
        $k[$j++] = $f(1 - $get(_x, _y)); //#28254
    } //#28254
    $1.sep = $a(); //#28254
    $puti($1.sep, 0, $a([0, 0, 0, 0])); //#28255
    $puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); //#28256
    $k[$j++] = 18; //#28257
    $1.sepfinder(); //#28257
    if (!$1.usematrix) { //#28307
        $$.rmoveto(0, $1.linheight); //#28259
        var _1D = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.sep],
            ["pixx", $1.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $1.sep.length / 72],
            ["opt", $1.options]
        ]); //#28266
        $k[$j++] = _1D; //#28267
        bwipp_renmatrix(); //#28267
        $$.rmoveto(1, 1); //#28270
        $k[$j++] = $1.comp; //#28270
        $k[$j++] = $1.options; //#28270
        bwipp_gs1_cc(); //#28270
        bwipp_renmatrix(); //#28270
        $$.restore(); //#28272
    } else { //#28307
        $k[$j++] = 'compsym'; //#28274
        $k[$j++] = $1.comp; //#28274
        $k[$j++] = $1.options; //#28274
        bwipp_gs1_cc(); //#28274
        var _1I = $k[--$j]; //#28274
        $1[$k[--$j]] = _1I; //#28274
        $1.ccpixs = $get($1.compsym, 'pixs'); //#28275
        $1.ccpixx = $get($1.compsym, 'pixx'); //#28276
        $1.linwidth = $1.sep.length; //#28278
        $k[$j++] = Infinity; //#28288
        for (var _1S = 0, _1T = $1.ccpixx, _1R = $1.ccpixs.length - 1; _1T < 0 ? _1S >= _1R : _1S <= _1R; _1S += _1T) { //#28284
            $1.i = _1S; //#28282
            for (var _1U = 0, _1V = 2; _1U < _1V; _1U++) { //#28283
                $k[$j++] = 0; //#28283
                $aload($geti($1.ccpixs, $1.i, $1.ccpixx)); //#28283
            } //#28283
        } //#28283
        $aload($1.sep); //#28285
        $k[$j++] = 0; //#28289
        $k[$j++] = 0; //#28289
        $k[$j++] = 0; //#28289
        $k[$j++] = 0; //#28289
        $k[$j++] = 0; //#28289
        $k[$j++] = 0; //#28289
        for (var _1e = 0, _1f = $1.linwidth, _1d = $1.linpixs.length - 1; _1f < 0 ? _1e >= _1d : _1e <= _1d; _1e += _1f) { //#28289
            $1.i = _1e; //#28287
            $aload($geti($1.linpixs, $1.i, $1.linwidth)); //#28288
            $k[$j++] = 0; //#28288
            $k[$j++] = 0; //#28288
            $k[$j++] = 0; //#28288
            $k[$j++] = 0; //#28288
            $k[$j++] = 0; //#28288
            $k[$j++] = 0; //#28288
        } //#28288
        $1.pixs = $a(); //#28288
        $1.pixx = $f($1.ccpixx + 1); //#28291
        $1.pixy = ~~($1.pixs.length / $1.pixx); //#28293
        var _1u = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.pixs],
            ["pixx", $1.pixx],
            ["pixy", $1.pixy],
            ["height", $1.pixy / 72],
            ["width", $1.pixx / 72],
            ["opt", $1.options]
        ]); //#28301
        $k[$j++] = _1u; //#28308
        if (!$1.dontdraw) { //#28308
            $$.save(); //#28305
            bwipp_renmatrix(); //#28306
            $$.restore(); //#28307
        } //#28307
    } //#28307
}

function bwipp_databartruncatedcomposite() {
    var $1 = Object.create(bwipp_databartruncatedcomposite.$ctx || (bwipp_databartruncatedcomposite.$ctx = {})); //#28343
    $1.dontdraw = false; //#28346
    $1.usematrix = false; //#28347
    $1.parse = false; //#28348
    $1.dontlint = false; //#28349
    $1.lintreqs = true; //#28350
    $k[$j++] = $1; //#28352
    bwipp_processoptions(); //#28352
    $1.options = $k[--$j]; //#28352
    $1.barcode = $k[--$j]; //#28353
    if ($1.dontdraw) { //#28355
        $1.usematrix = true; //#28355
    } //#28355
    $search($1.barcode, "|"); //#28358
    if ($k[--$j]) { //#28363
        $1.linear = $k[--$j]; //#28359
        $j--; //#28360
        $1.comp = $k[--$j]; //#28361
    } else { //#28363
        $j--; //#28363
        $k[$j++] = 'bwipp.missingCompositeComponent#28363'; //#28363
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28363
        bwipp_raiseerror(); //#28363
    } //#28363
    if (!$1.usematrix) { //#28366
        $$.save(); //#28366
    } //#28366
    $put($1.options, "lintype", "databartruncated"); //#28368
    $put($1.options, "linkage", true); //#28369
    $put($1.options, "inkspread", "0"); //#28370
    $put($1.options, "dontdraw", true); //#28371
    $put($1.options, "dontlint", true); //#28372
    var _F = $s($1.linear.length + $1.comp.length); //#28375
    $puti(_F, 0, $1.linear); //#28376
    $puti(_F, $1.linear.length, $1.comp); //#28377
    $k[$j++] = _F; //#28378
    $k[$j++] = 'ai'; //#28378
    bwipp_gs1process(); //#28378
    $j -= 3; //#28378
    $k[$j++] = $1.linear; //#28381
    $k[$j++] = $1.options; //#28381
    bwipp_databartruncated(); //#28381
    var _L = $k[--$j]; //#28382
    $1.linsbs = $get(_L, "sbs"); //#28382
    $1.linheight = $get($get(_L, "bhs"), 0) * 72; //#28383
    $k[$j++] = _L; //#28384
    if (!$1.usematrix) { //#28384
        bwipp_renlinear(); //#28384
    } else { //#28384
        $j--; //#28384
    } //#28384
    $1.sepfinder = function() {
        $1.fp = $k[--$j]; //#28388
        for (var _U = $1.fp, _T = $f($1.fp + 12); _U <= _T; _U += 1) { //#28401
            $1.i = _U; //#28390
            if ($get($1.bot, $1.i) == 0) { //#28398
                if ($get($1.bot, $1.i - 1) == 1) { //#28395
                    $k[$j++] = 1; //#28393
                } else { //#28395
                    var _e = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; //#28395
                    $k[$j++] = _e; //#28395
                } //#28395
            } else { //#28398
                $k[$j++] = 0; //#28398
            } //#28398
            $put($1.sep, $1.i, $k[--$j]); //#28400
        } //#28400
        $1.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#28402
        $k[$j++] = true; //#28403
        for (var _j = 0; _j <= 12; _j += 1) { //#28403
            var _p = $k[--$j]; //#28403
            $k[$j++] = _p && $eq($get($1.bot, $f(_j + $1.fp)), $get($1.f3, _j)); //#28403
        } //#28403
        if ($k[--$j]) { //#28406
            $puti($1.sep, $1.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#28405
        } //#28405
    }; //#28405
    $k[$j++] = Infinity; //#28408
    $k[$j++] = 0; //#28409
    $forall($1.linsbs, function() { //#28409
        var _v = $k[--$j]; //#28409
        var _w = $k[--$j]; //#28409
        var _x = (_w == 1) ? 0 : 1; //#28409
        $k[$j++] = _w; //#28409
        for (var _y = 0, _z = _v; _y < _z; _y++) { //#28409
            $k[$j++] = _x //#28409
        } //#28409
    }); //#28409
    $astore($a($counttomark() - 1)); //#28410
    $1.bot = $k[--$j]; //#28410
    $j -= 2; //#28410
    $k[$j++] = Infinity; //#28411
    $forall($1.bot, function() { //#28411
        var _14 = $k[--$j]; //#28411
        $k[$j++] = $f(1 - _14); //#28411
    }); //#28411
    $1.sep = $a(); //#28411
    $puti($1.sep, 0, $a([0, 0, 0])); //#28412
    $puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); //#28413
    $k[$j++] = 18; //#28414
    $1.sepfinder(); //#28414
    $k[$j++] = 64; //#28414
    $1.sepfinder(); //#28414
    if (!$1.usematrix) { //#28465
        $$.rmoveto(0, $1.linheight); //#28416
        var _1H = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.sep],
            ["pixx", $1.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $1.sep.length / 72],
            ["opt", $1.options]
        ]); //#28423
        $k[$j++] = _1H; //#28424
        bwipp_renmatrix(); //#28424
        $$.rmoveto(-5, 1); //#28427
        $k[$j++] = $1.comp; //#28427
        $k[$j++] = $1.options; //#28427
        bwipp_gs1_cc(); //#28427
        bwipp_renmatrix(); //#28427
        $$.restore(); //#28429
    } else { //#28465
        $k[$j++] = 'compsym'; //#28431
        $k[$j++] = $1.comp; //#28431
        $k[$j++] = $1.options; //#28431
        bwipp_gs1_cc(); //#28431
        var _1M = $k[--$j]; //#28431
        $1[$k[--$j]] = _1M; //#28431
        $1.ccpixs = $get($1.compsym, 'pixs'); //#28432
        $1.ccpixx = $get($1.compsym, 'pixx'); //#28433
        $k[$j++] = Infinity; //#28436
        $k[$j++] = 0; //#28436
        $forall($1.linsbs, function() { //#28436
            var _1T = $k[--$j]; //#28436
            var _1U = $k[--$j]; //#28436
            var _1V = (_1U == 0) ? 1 : 0; //#28436
            $k[$j++] = _1U; //#28436
            for (var _1W = 0, _1X = $cvi(_1T); _1W < _1X; _1W++) { //#28436
                $k[$j++] = _1V //#28436
            } //#28436
        }); //#28436
        $1.linpixs = $a(); //#28436
        $k[$j++] = Infinity; //#28438
        $k[$j++] = 0; //#28438
        $aload($1.sep); //#28438
        $1.sep = $a(); //#28438
        $1.linheight = ~~$1.linheight; //#28440
        $k[$j++] = Infinity; //#28447
        for (var _1f = 0, _1g = $1.ccpixx, _1e = $1.ccpixs.length - 1; _1g < 0 ? _1f >= _1e : _1f <= _1e; _1f += _1g) { //#28446
            $1.i = _1f; //#28444
            for (var _1h = 0, _1i = 2; _1h < _1i; _1h++) { //#28445
                $aload($geti($1.ccpixs, $1.i, $1.ccpixx)); //#28445
                $k[$j++] = 0; //#28445
            } //#28445
        } //#28445
        $k[$j++] = 0; //#28447
        $k[$j++] = 0; //#28447
        $k[$j++] = 0; //#28447
        $k[$j++] = 0; //#28447
        $aload($1.sep); //#28447
        for (var _1p = 0, _1q = $1.linheight; _1p < _1q; _1p++) { //#28447
            $k[$j++] = 0; //#28447
            $k[$j++] = 0; //#28447
            $k[$j++] = 0; //#28447
            $k[$j++] = 0; //#28447
            $aload($1.linpixs); //#28447
        } //#28447
        $1.pixs = $a(); //#28447
        $1.pixx = $f($1.ccpixx + 1); //#28449
        $1.pixy = ~~($1.pixs.length / $1.pixx); //#28451
        var _22 = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.pixs],
            ["pixx", $1.pixx],
            ["pixy", $1.pixy],
            ["height", $1.pixy / 72],
            ["width", $1.pixx / 72],
            ["opt", $1.options]
        ]); //#28459
        $k[$j++] = _22; //#28466
        if (!$1.dontdraw) { //#28466
            $$.save(); //#28463
            bwipp_renmatrix(); //#28464
            $$.restore(); //#28465
        } //#28465
    } //#28465
}

function bwipp_databarlimitedcomposite() {
    var $1 = Object.create(bwipp_databarlimitedcomposite.$ctx || (bwipp_databarlimitedcomposite.$ctx = {})); //#28501
    $1.dontdraw = false; //#28504
    $1.usematrix = false; //#28505
    $1.parse = false; //#28506
    $1.dontlint = false; //#28507
    $1.lintreqs = true; //#28508
    $k[$j++] = $1; //#28510
    bwipp_processoptions(); //#28510
    $1.options = $k[--$j]; //#28510
    $1.barcode = $k[--$j]; //#28511
    if ($1.dontdraw) { //#28513
        $1.usematrix = true; //#28513
    } //#28513
    $search($1.barcode, "|"); //#28516
    if ($k[--$j]) { //#28521
        $1.linear = $k[--$j]; //#28517
        $j--; //#28518
        $1.comp = $k[--$j]; //#28519
    } else { //#28521
        $j--; //#28521
        $k[$j++] = 'bwipp.missingCompositeComponent#28521'; //#28521
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28521
        bwipp_raiseerror(); //#28521
    } //#28521
    if (!$1.usematrix) { //#28524
        $$.save(); //#28524
    } //#28524
    $put($1.options, "lintype", "databarlimited"); //#28526
    $put($1.options, "linkage", true); //#28527
    $put($1.options, "inkspread", "0"); //#28528
    $put($1.options, "dontdraw", true); //#28529
    $put($1.options, "dontlint", true); //#28530
    var _F = $s($1.linear.length + $1.comp.length); //#28533
    $puti(_F, 0, $1.linear); //#28534
    $puti(_F, $1.linear.length, $1.comp); //#28535
    $k[$j++] = _F; //#28536
    $k[$j++] = 'ai'; //#28536
    bwipp_gs1process(); //#28536
    $j -= 3; //#28536
    $k[$j++] = $1.linear; //#28539
    $k[$j++] = $1.options; //#28539
    bwipp_databarlimited(); //#28539
    var _L = $k[--$j]; //#28540
    $1.linsbs = $get(_L, "sbs"); //#28540
    $1.linheight = $get($get(_L, "bhs"), 0) * 72; //#28541
    $k[$j++] = _L; //#28542
    if (!$1.usematrix) { //#28542
        bwipp_renlinear(); //#28542
    } else { //#28542
        $j--; //#28542
    } //#28542
    $k[$j++] = Infinity; //#28545
    $k[$j++] = 1; //#28546
    $forall($1.linsbs, function() { //#28546
        var _R = $k[--$j]; //#28546
        var _S = $k[--$j]; //#28546
        var _T = (_S == 0) ? 1 : 0; //#28546
        $k[$j++] = _S; //#28546
        for (var _U = 0, _V = _R; _U < _V; _U++) { //#28546
            $k[$j++] = _T //#28546
        } //#28546
    }); //#28546
    $astore($a($counttomark() - 1)); //#28547
    $1.sep = $k[--$j]; //#28547
    $j -= 2; //#28547
    $puti($1.sep, 0, $a([0, 0, 0])); //#28548
    var _c = $1.sep; //#28549
    $puti($1.sep, _c.length - 9, $a([0, 0, 0, 0, 0, 0, 0, 0, 0])); //#28549
    if (!$1.usematrix) { //#28614
        $$.rmoveto(0, $1.linheight); //#28552
        var _g = $1.sep; //#28554
        var _k = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", _g],
            ["pixx", $1.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $1.sep.length / 72],
            ["opt", $1.options]
        ]); //#28559
        $k[$j++] = _k; //#28560
        bwipp_renmatrix(); //#28560
        $k[$j++] = $1.comp; //#28563
        $k[$j++] = $1.options; //#28563
        bwipp_gs1_cc(); //#28563
        var _n = $k[--$j]; //#28564
        $$.rmoveto($f(72 - $get(_n, "pixx")), 1); //#28564
        $k[$j++] = _n; //#28565
        bwipp_renmatrix(); //#28565
        $$.restore(); //#28567
    } else { //#28614
        $k[$j++] = 'compsym'; //#28569
        $k[$j++] = $1.comp; //#28569
        $k[$j++] = $1.options; //#28569
        bwipp_gs1_cc(); //#28569
        var _r = $k[--$j]; //#28569
        $1[$k[--$j]] = _r; //#28569
        $1.ccpixs = $get($1.compsym, 'pixs'); //#28570
        $1.ccpixx = $get($1.compsym, 'pixx'); //#28571
        $k[$j++] = Infinity; //#28574
        $k[$j++] = 0; //#28574
        $forall($1.linsbs, function() { //#28574
            var _y = $k[--$j]; //#28574
            var _z = $k[--$j]; //#28574
            var _10 = (_z == 0) ? 1 : 0; //#28574
            $k[$j++] = _z; //#28574
            for (var _11 = 0, _12 = $cvi(_y); _11 < _12; _11++) { //#28574
                $k[$j++] = _10 //#28574
            } //#28574
        }); //#28574
        $1.linpixs = $a(); //#28574
        $k[$j++] = Infinity; //#28576
        $k[$j++] = 0; //#28576
        $aload($1.sep); //#28576
        $1.sep = $a(); //#28576
        $1.linheight = ~~$1.linheight; //#28578
        if ($1.ccpixx == 72) { //#28597
            $k[$j++] = Infinity; //#28586
            for (var _1B = 0, _1C = $1.ccpixx, _1A = $1.ccpixs.length - 1; _1C < 0 ? _1B >= _1A : _1B <= _1A; _1B += _1C) { //#28585
                $1.i = _1B; //#28583
                for (var _1D = 0, _1E = 2; _1D < _1E; _1D++) { //#28584
                    $k[$j++] = 0; //#28584
                    $aload($geti($1.ccpixs, $1.i, $1.ccpixx)); //#28584
                    $k[$j++] = 0; //#28584
                    $k[$j++] = 0; //#28584
                    $k[$j++] = 0; //#28584
                    $k[$j++] = 0; //#28584
                    $k[$j++] = 0; //#28584
                    $k[$j++] = 0; //#28584
                } //#28584
            } //#28584
            $aload($1.sep); //#28586
            for (var _1L = 0, _1M = $1.linheight; _1L < _1M; _1L++) { //#28586
                $aload($1.linpixs); //#28586
            } //#28586
            $1.pixs = $a(); //#28586
            $1.pixx = $1.linpixs.length; //#28588
        } else { //#28597
            $k[$j++] = Infinity; //#28595
            for (var _1T = 0, _1U = $1.ccpixx, _1S = $1.ccpixs.length - 1; _1U < 0 ? _1T >= _1S : _1T <= _1S; _1T += _1U) { //#28594
                $1.i = _1T; //#28592
                for (var _1V = 0, _1W = 2; _1V < _1W; _1V++) { //#28593
                    $aload($geti($1.ccpixs, $1.i, $1.ccpixx)); //#28593
                    $k[$j++] = 0; //#28593
                    $k[$j++] = 0; //#28593
                    $k[$j++] = 0; //#28593
                    $k[$j++] = 0; //#28593
                    $k[$j++] = 0; //#28593
                    $k[$j++] = 0; //#28593
                } //#28593
            } //#28593
            $k[$j++] = 0; //#28595
            $k[$j++] = 0; //#28595
            $k[$j++] = 0; //#28595
            $k[$j++] = 0; //#28595
            $k[$j++] = 0; //#28595
            $k[$j++] = 0; //#28595
            $k[$j++] = 0; //#28595
            $k[$j++] = 0; //#28595
            $k[$j++] = 0; //#28595
            $aload($1.sep); //#28595
            for (var _1d = 0, _1e = $1.linheight; _1d < _1e; _1d++) { //#28595
                $k[$j++] = 0; //#28595
                $k[$j++] = 0; //#28595
                $k[$j++] = 0; //#28595
                $k[$j++] = 0; //#28595
                $k[$j++] = 0; //#28595
                $k[$j++] = 0; //#28595
                $k[$j++] = 0; //#28595
                $k[$j++] = 0; //#28595
                $k[$j++] = 0; //#28595
                $aload($1.linpixs); //#28595
            } //#28595
            $1.pixs = $a(); //#28595
            $1.pixx = $f($1.ccpixx + 6); //#28597
        } //#28597
        $1.pixy = ~~($1.pixs.length / $1.pixx); //#28600
        var _1q = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.pixs],
            ["pixx", $1.pixx],
            ["pixy", $1.pixy],
            ["height", $1.pixy / 72],
            ["width", $1.pixx / 72],
            ["opt", $1.options]
        ]); //#28608
        $k[$j++] = _1q; //#28615
        if (!$1.dontdraw) { //#28615
            $$.save(); //#28612
            bwipp_renmatrix(); //#28613
            $$.restore(); //#28614
        } //#28614
    } //#28614
}

function bwipp_databarexpandedcomposite() {
    var $1 = Object.create(bwipp_databarexpandedcomposite.$ctx || (bwipp_databarexpandedcomposite.$ctx = {})); //#28650
    $1.dontdraw = false; //#28653
    $1.usematrix = false; //#28654
    $1.parse = false; //#28655
    $1.dontlint = false; //#28656
    $1.lintreqs = true; //#28657
    $k[$j++] = $1; //#28659
    bwipp_processoptions(); //#28659
    $1.options = $k[--$j]; //#28659
    $1.barcode = $k[--$j]; //#28660
    if ($1.dontdraw) { //#28662
        $1.usematrix = true; //#28662
    } //#28662
    $search($1.barcode, "|"); //#28665
    if ($k[--$j]) { //#28670
        $1.linear = $k[--$j]; //#28666
        $j--; //#28667
        $1.comp = $k[--$j]; //#28668
    } else { //#28670
        $j--; //#28670
        $k[$j++] = 'bwipp.missingCompositeComponent#28670'; //#28670
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28670
        bwipp_raiseerror(); //#28670
    } //#28670
    if (!$1.usematrix) { //#28673
        $$.save(); //#28673
    } //#28673
    $put($1.options, "lintype", "databarexpanded"); //#28675
    $put($1.options, "linkage", true); //#28676
    $put($1.options, "inkspread", "0"); //#28677
    $put($1.options, "dontdraw", true); //#28678
    $put($1.options, "dontlint", true); //#28679
    var _F = $s($1.linear.length + $1.comp.length); //#28682
    $puti(_F, 0, $1.linear); //#28683
    $puti(_F, $1.linear.length, $1.comp); //#28684
    $k[$j++] = _F; //#28685
    $k[$j++] = 'ai'; //#28685
    bwipp_gs1process(); //#28685
    $j -= 3; //#28685
    $k[$j++] = $1.linear; //#28688
    $k[$j++] = $1.options; //#28688
    bwipp_databarexpanded(); //#28688
    var _L = $k[--$j]; //#28689
    $1.linsbs = $get(_L, "sbs"); //#28689
    $1.linheight = $get($get(_L, "bhs"), 0) * 72; //#28690
    $k[$j++] = _L; //#28691
    if (!$1.usematrix) { //#28691
        bwipp_renlinear(); //#28691
    } else { //#28691
        $j--; //#28691
    } //#28691
    $1.sepfinder = function() {
        $1.fp = $k[--$j]; //#28695
        for (var _U = $1.fp, _T = $f($1.fp + 12); _U <= _T; _U += 1) { //#28708
            $1.i = _U; //#28697
            if ($get($1.bot, $1.i) == 0) { //#28705
                if ($get($1.bot, $1.i - 1) == 1) { //#28702
                    $k[$j++] = 1; //#28700
                } else { //#28702
                    var _e = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; //#28702
                    $k[$j++] = _e; //#28702
                } //#28702
            } else { //#28705
                $k[$j++] = 0; //#28705
            } //#28705
            $put($1.sep, $1.i, $k[--$j]); //#28707
        } //#28707
    }; //#28707
    $k[$j++] = Infinity; //#28710
    $k[$j++] = 0; //#28711
    $forall($1.linsbs, function() { //#28711
        var _j = $k[--$j]; //#28711
        var _k = $k[--$j]; //#28711
        var _l = (_k == 1) ? 0 : 1; //#28711
        $k[$j++] = _k; //#28711
        for (var _m = 0, _n = _j; _m < _n; _m++) { //#28711
            $k[$j++] = _l //#28711
        } //#28711
    }); //#28711
    $astore($a($counttomark() - 1)); //#28712
    $1.bot = $k[--$j]; //#28712
    $j -= 2; //#28712
    $k[$j++] = Infinity; //#28713
    $forall($1.bot, function() { //#28713
        var _s = $k[--$j]; //#28713
        $k[$j++] = $f(1 - _s); //#28713
    }); //#28713
    $1.sep = $a(); //#28713
    $puti($1.sep, 0, $a([0, 0, 0])); //#28714
    $puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); //#28715
    $k[$j++] = Infinity; //#28718
    for (var _11 = 18, _10 = $1.bot.length - 13; _11 <= _10; _11 += 98) { //#28717
        $k[$j++] = _11; //#28717
    } //#28717
    for (var _14 = 69, _13 = $1.bot.length - 13; _14 <= _13; _14 += 98) { //#28718
        $k[$j++] = _14; //#28718
    } //#28718
    var _15 = $a(); //#28718
    for (var _16 = 0, _17 = _15.length; _16 < _17; _16++) { //#28719
        $k[$j++] = $get(_15, _16); //#28719
        $1.sepfinder(); //#28719
    } //#28719
    if (!$1.usematrix) { //#28772
        $$.rmoveto(0, $1.linheight); //#28722
        var _1F = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.sep],
            ["pixx", $1.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $1.sep.length / 72],
            ["opt", $1.options]
        ]); //#28729
        $k[$j++] = _1F; //#28730
        bwipp_renmatrix(); //#28730
        $$.rmoveto(1, 1); //#28733
        $k[$j++] = $1.comp; //#28733
        $k[$j++] = $1.options; //#28733
        bwipp_gs1_cc(); //#28733
        bwipp_renmatrix(); //#28733
        $$.restore(); //#28735
    } else { //#28772
        $k[$j++] = 'compsym'; //#28737
        $k[$j++] = $1.comp; //#28737
        $k[$j++] = $1.options; //#28737
        bwipp_gs1_cc(); //#28737
        var _1K = $k[--$j]; //#28737
        $1[$k[--$j]] = _1K; //#28737
        $1.ccpixs = $get($1.compsym, 'pixs'); //#28738
        $1.ccpixx = $get($1.compsym, 'pixx'); //#28739
        $k[$j++] = Infinity; //#28742
        $k[$j++] = 0; //#28742
        $forall($1.linsbs, function() { //#28742
            var _1R = $k[--$j]; //#28742
            var _1S = $k[--$j]; //#28742
            var _1T = (_1S == 0) ? 1 : 0; //#28742
            $k[$j++] = _1S; //#28742
            for (var _1U = 0, _1V = $cvi(_1R); _1U < _1V; _1U++) { //#28742
                $k[$j++] = _1T //#28742
            } //#28742
        }); //#28742
        $1.linpixs = $a(); //#28742
        $k[$j++] = Infinity; //#28744
        $k[$j++] = 0; //#28744
        $aload($1.sep); //#28744
        $1.sep = $a(); //#28744
        $1.linheight = ~~$1.linheight; //#28746
        $1.diff = $f($1.linpixs.length - $1.ccpixx); //#28747
        $k[$j++] = Infinity; //#28748
        for (var _1d = 0, _1e = $f($1.diff - 2); _1d < _1e; _1d++) { //#28748
            $k[$j++] = 0; //#28748
        } //#28748
        $1.ccrpad = $a(); //#28748
        $k[$j++] = Infinity; //#28754
        for (var _1j = 0, _1k = $1.ccpixx, _1i = $1.ccpixs.length - 1; _1k < 0 ? _1j >= _1i : _1j <= _1i; _1j += _1k) { //#28753
            $1.i = _1j; //#28751
            for (var _1l = 0, _1m = 2; _1l < _1m; _1l++) { //#28752
                $k[$j++] = 0; //#28752
                $k[$j++] = 0; //#28752
                $aload($geti($1.ccpixs, $1.i, $1.ccpixx)); //#28752
                $aload($1.ccrpad); //#28752
            } //#28752
        } //#28752
        $aload($1.sep); //#28754
        for (var _1u = 0, _1v = $1.linheight; _1u < _1v; _1u++) { //#28754
            $aload($1.linpixs); //#28754
        } //#28754
        $1.pixs = $a(); //#28754
        $1.pixx = $1.linpixs.length; //#28757
        $1.pixy = ~~($1.pixs.length / $1.pixx); //#28758
        var _27 = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.pixs],
            ["pixx", $1.pixx],
            ["pixy", $1.pixy],
            ["height", $1.pixy / 72],
            ["width", $1.pixx / 72],
            ["opt", $1.options]
        ]); //#28766
        $k[$j++] = _27; //#28773
        if (!$1.dontdraw) { //#28773
            $$.save(); //#28770
            bwipp_renmatrix(); //#28771
            $$.restore(); //#28772
        } //#28772
    } //#28772
}

function bwipp_databarexpandedstackedcomposite() {
    var $1 = Object.create(bwipp_databarexpandedstackedcomposite.$ctx || (bwipp_databarexpandedstackedcomposite.$ctx = {})); //#28807
    $1.dontdraw = false; //#28810
    $1.usematrix = false; //#28811
    $1.parse = false; //#28812
    $1.dontlint = false; //#28813
    $1.lintreqs = true; //#28814
    $k[$j++] = $1; //#28816
    bwipp_processoptions(); //#28816
    $1.options = $k[--$j]; //#28816
    $1.barcode = $k[--$j]; //#28817
    if ($1.dontdraw) { //#28819
        $1.usematrix = true; //#28819
    } //#28819
    $search($1.barcode, "|"); //#28822
    if ($k[--$j]) { //#28827
        $1.linear = $k[--$j]; //#28823
        $j--; //#28824
        $1.comp = $k[--$j]; //#28825
    } else { //#28827
        $j--; //#28827
        $k[$j++] = 'bwipp.missingCompositeComponent#28827'; //#28827
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28827
        bwipp_raiseerror(); //#28827
    } //#28827
    if (!$1.usematrix) { //#28830
        $$.save(); //#28830
    } //#28830
    $put($1.options, "lintype", "databarexpandedstacked"); //#28832
    $put($1.options, "linkage", true); //#28833
    $put($1.options, "inkspread", "0"); //#28834
    $put($1.options, "dontdraw", true); //#28835
    $put($1.options, "dontlint", true); //#28836
    var _F = $s($1.linear.length + $1.comp.length); //#28839
    $puti(_F, 0, $1.linear); //#28840
    $puti(_F, $1.linear.length, $1.comp); //#28841
    $k[$j++] = _F; //#28842
    $k[$j++] = 'ai'; //#28842
    bwipp_gs1process(); //#28842
    $j -= 3; //#28842
    $k[$j++] = $1.linear; //#28845
    $k[$j++] = $1.options; //#28845
    bwipp_databarexpandedstacked(); //#28845
    var _L = $k[--$j]; //#28846
    $1.bot = $geti($get(_L, "pixs"), 0, $get(_L, "pixx")); //#28846
    $1.linheight = $get(_L, "pixy"); //#28847
    $k[$j++] = _L; //#28848
    if (!$1.usematrix) { //#28848
        bwipp_renmatrix(); //#28848
    } else { //#28848
        $1.linpixs = $get($k[--$j], 'pixs'); //#28848
    } //#28848
    $1.sepfinder = function() {
        $1.fp = $k[--$j]; //#28852
        for (var _X = $1.fp, _W = $f($1.fp + 12); _X <= _W; _X += 1) { //#28865
            $1.i = _X; //#28854
            if ($get($1.bot, $1.i) == 0) { //#28862
                if ($get($1.bot, $1.i - 1) == 1) { //#28859
                    $k[$j++] = 1; //#28857
                } else { //#28859
                    var _h = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; //#28859
                    $k[$j++] = _h; //#28859
                } //#28859
            } else { //#28862
                $k[$j++] = 0; //#28862
            } //#28862
            $put($1.sep, $1.i, $k[--$j]); //#28864
        } //#28864
    }; //#28864
    $k[$j++] = Infinity; //#28867
    var _l = $1.bot; //#28867
    for (var _m = 0, _n = _l.length; _m < _n; _m++) { //#28867
        $k[$j++] = $f(1 - $get(_l, _m)); //#28867
    } //#28867
    $1.sep = $a(); //#28867
    $puti($1.sep, 0, $a([0, 0, 0, 0])); //#28868
    $puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); //#28869
    $k[$j++] = Infinity; //#28872
    for (var _x = 19, _w = $1.bot.length - 13; _x <= _w; _x += 98) { //#28871
        $k[$j++] = _x; //#28871
    } //#28871
    for (var _10 = 70, _z = $1.bot.length - 13; _10 <= _z; _10 += 98) { //#28872
        $k[$j++] = _10; //#28872
    } //#28872
    var _11 = $a(); //#28872
    for (var _12 = 0, _13 = _11.length; _12 < _13; _12++) { //#28873
        $k[$j++] = $get(_11, _12); //#28873
        $1.sepfinder(); //#28873
    } //#28873
    if (!$1.usematrix) { //#28920
        $$.rmoveto(0, $1.linheight); //#28875
        var _1B = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.sep],
            ["pixx", $1.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $1.sep.length / 72],
            ["opt", $1.options]
        ]); //#28882
        $k[$j++] = _1B; //#28883
        bwipp_renmatrix(); //#28883
        var _1E = ($get($1.bot, 0) == 0) ? 2 : 0; //#28886
        $$.rmoveto(_1E, 1); //#28886
        $k[$j++] = $1.comp; //#28887
        $k[$j++] = $1.options; //#28887
        bwipp_gs1_cc(); //#28887
        bwipp_renmatrix(); //#28887
        $$.restore(); //#28889
    } else { //#28920
        $k[$j++] = 'compsym'; //#28891
        $k[$j++] = $1.comp; //#28891
        $k[$j++] = $1.options; //#28891
        bwipp_gs1_cc(); //#28891
        var _1J = $k[--$j]; //#28891
        $1[$k[--$j]] = _1J; //#28891
        $1.ccpixs = $get($1.compsym, 'pixs'); //#28892
        $1.ccpixx = $get($1.compsym, 'pixx'); //#28893
        $1.pixx = $1.sep.length; //#28895
        $k[$j++] = Infinity; //#28896
        for (var _1S = 0, _1T = ~~(($f($f($1.pixx - $1.ccpixx) + 1)) / 2); _1S < _1T; _1S++) { //#28896
            $k[$j++] = 0; //#28896
        } //#28896
        $1.cclpad = $a(); //#28896
        $k[$j++] = Infinity; //#28897
        for (var _1X = 0, _1Y = ~~($f($1.pixx - $1.ccpixx) / 2); _1X < _1Y; _1X++) { //#28897
            $k[$j++] = 0; //#28897
        } //#28897
        $1.ccrpad = $a(); //#28897
        $k[$j++] = Infinity; //#28903
        for (var _1d = 0, _1e = $1.ccpixx, _1c = $1.ccpixs.length - 1; _1e < 0 ? _1d >= _1c : _1d <= _1c; _1d += _1e) { //#28902
            $1.i = _1d; //#28900
            for (var _1f = 0, _1g = 2; _1f < _1g; _1f++) { //#28901
                $aload($1.cclpad); //#28901
                $aload($geti($1.ccpixs, $1.i, $1.ccpixx)); //#28901
                $aload($1.ccrpad); //#28901
            } //#28901
        } //#28901
        $aload($1.sep); //#28903
        $aload($1.linpixs); //#28903
        $1.pixs = $a(); //#28903
        $1.pixy = ~~($1.pixs.length / $1.pixx); //#28906
        var _1y = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.pixs],
            ["pixx", $1.pixx],
            ["pixy", $1.pixy],
            ["height", $1.pixy / 72],
            ["width", $1.pixx / 72],
            ["opt", $1.options]
        ]); //#28914
        $k[$j++] = _1y; //#28921
        if (!$1.dontdraw) { //#28921
            $$.save(); //#28918
            bwipp_renmatrix(); //#28919
            $$.restore(); //#28920
        } //#28920
    } //#28920
}

function bwipp_gs1_128composite() {
    var $1 = Object.create(bwipp_gs1_128composite.$ctx || (bwipp_gs1_128composite.$ctx = {})); //#28956
    $1.dontdraw = false; //#28959
    $1.usematrix = false; //#28960
    $1.parse = false; //#28961
    $1.dontlint = false; //#28962
    $1.lintreqs = true; //#28963
    $k[$j++] = $1; //#28965
    bwipp_processoptions(); //#28965
    $1.options = $k[--$j]; //#28965
    $1.barcode = $k[--$j]; //#28966
    if ($1.dontdraw) { //#28968
        $1.usematrix = true; //#28968
    } //#28968
    $search($1.barcode, "|"); //#28971
    if ($k[--$j]) { //#28976
        $1.linear = $k[--$j]; //#28972
        $j--; //#28973
        $1.comp = $k[--$j]; //#28974
    } else { //#28976
        $j--; //#28976
        $k[$j++] = 'bwipp.missingCompositeComponent#28976'; //#28976
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#28976
        bwipp_raiseerror(); //#28976
    } //#28976
    if (!$1.usematrix) { //#28979
        $$.save(); //#28979
    } //#28979
    $put($1.options, "inkspread", "0"); //#28981
    $put($1.options, "dontdraw", true); //#28982
    $put($1.options, "dontlint", true); //#28983
    var _D = $s($1.linear.length + $1.comp.length); //#28986
    $puti(_D, 0, $1.linear); //#28987
    $puti(_D, $1.linear.length, $1.comp); //#28988
    $k[$j++] = _D; //#28989
    $k[$j++] = 'ai'; //#28989
    bwipp_gs1process(); //#28989
    $j -= 3; //#28989
    $put($1.options, "linkagea", true); //#28992
    $k[$j++] = $1.linear; //#28993
    $k[$j++] = Infinity; //#28993
    $forall($1.options); //#28993
    var _K = $d(); //#28993
    $k[$j++] = _K; //#28993
    bwipp_gs1_128(); //#28993
    var _M = $get($k[--$j], "sbs"); //#28994
    $k[$j++] = 0; //#28994
    $forall(_M, function() { //#28994
        var _N = $k[--$j]; //#28994
        var _O = $k[--$j]; //#28994
        $k[$j++] = $f(_O + _N); //#28994
    }); //#28994
    $1.linwidth = $k[--$j]; //#28994
    $put($1.options, "lintype", "gs1-128"); //#28997
    $put($1.options, "linwidth", $1.linwidth); //#28998
    $k[$j++] = $1.comp; //#28999
    $k[$j++] = $1.options; //#28999
    bwipp_gs1_cc(); //#28999
    $1.compsym = $k[--$j]; //#28999
    if ($get($1.compsym, "pixx") == 99) { //#29000
        $k[$j++] = "a"; //#29000
    } else { //#29000
        $k[$j++] = "c"; //#29000
    } //#29000
    $1.linktype = $k[--$j]; //#29000
    if ($eq($1.linktype, "a")) { //#29008
        $put($1.options, "linkagea", true); //#29004
        $put($1.options, "linkagec", false); //#29005
    } else { //#29008
        $put($1.options, "linkagea", false); //#29007
        $put($1.options, "linkagec", true); //#29008
    } //#29008
    $k[$j++] = $1.linear; //#29010
    $k[$j++] = Infinity; //#29010
    $forall($1.options); //#29010
    var _g = $d(); //#29010
    $k[$j++] = _g; //#29010
    bwipp_gs1_128(); //#29010
    var _h = $k[--$j]; //#29011
    $1.linsbs = $get(_h, "sbs"); //#29011
    $1.linheight = $get($get(_h, "bhs"), 0) * 72; //#29012
    $k[$j++] = _h; //#29013
    if (!$1.usematrix) { //#29013
        bwipp_renlinear(); //#29013
    } else { //#29013
        $j--; //#29013
    } //#29013
    $k[$j++] = Infinity; //#29016
    $k[$j++] = 1; //#29017
    $forall($1.linsbs, function() { //#29017
        var _n = $k[--$j]; //#29017
        var _o = $k[--$j]; //#29017
        var _p = (_o == 0) ? 1 : 0; //#29017
        $k[$j++] = _o; //#29017
        for (var _q = 0, _r = _n; _q < _r; _q++) { //#29017
            $k[$j++] = _p //#29017
        } //#29017
    }); //#29017
    $astore($a($counttomark() - 1)); //#29018
    $1.sep = $k[--$j]; //#29018
    $j -= 2; //#29018
    if (!$1.usematrix) { //#29029
        $$.rmoveto(0, $1.linheight); //#29020
        var _11 = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.sep],
            ["pixx", $1.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $1.sep.length / 72],
            ["opt", $1.options]
        ]); //#29027
        $k[$j++] = _11; //#29028
        bwipp_renmatrix(); //#29028
    } //#29028
    if ($eq($1.linktype, "a")) { //#29037
        $1.s = ~~($f($1.linwidth - 2) / 11); //#29033
        $1.p = ~~(($1.s - 9) / 2); //#29034
        $k[$j++] = 'x'; //#29035
        $k[$j++] = ((($1.s - $1.p) - 1) * 11) + 10; //#29035
        if ($1.p == 0) { //#29035
            var _18 = $k[--$j]; //#29035
            $k[$j++] = $f(_18 + 2); //#29035
        } //#29035
        var _19 = $k[--$j]; //#29035
        $1[$k[--$j]] = $f(_19 - 99); //#29035
    } else { //#29037
        $1.x = -7; //#29037
    } //#29037
    if (!$1.usematrix) { //#29095
        $$.rmoveto($1.x, 1); //#29041
        $k[$j++] = $1.compsym; //#29041
        bwipp_renmatrix(); //#29041
        $$.restore(); //#29043
    } else { //#29095
        $1.ccpixs = $get($1.compsym, 'pixs'); //#29045
        $1.ccpixx = $get($1.compsym, 'pixx'); //#29046
        $k[$j++] = Infinity; //#29049
        $forall($1.linsbs, function() { //#29049
            var _1J = $k[--$j]; //#29049
            var _1K = $k[--$j]; //#29049
            var _1L = (_1K == 1) ? 0 : 1; //#29049
            $k[$j++] = _1K; //#29049
            for (var _1M = 0, _1N = _1J; _1M < _1N; _1M++) { //#29049
                $k[$j++] = _1L //#29049
            } //#29049
        }); //#29049
        $1.linpixs = $a(); //#29049
        if ($1.x > 0) { //#29057
            $k[$j++] = Infinity; //#29053
            for (var _1R = 0, _1S = $1.x; _1R < _1S; _1R++) { //#29053
                $k[$j++] = 0; //#29053
            } //#29053
            $1.cclpad = $a(); //#29053
            $1.linlpad = $a(0); //#29054
        } else { //#29057
            $1.cclpad = $a(0); //#29056
            $k[$j++] = Infinity; //#29057
            for (var _1X = 0, _1Y = -$1.x; _1X < _1Y; _1X++) { //#29057
                $k[$j++] = 0; //#29057
            } //#29057
            $1.linlpad = $a(); //#29057
        } //#29057
        $1.diff = $f($1.linwidth - $f($1.ccpixx + $1.x)); //#29060
        if ($1.diff > 0) { //#29066
            $k[$j++] = Infinity; //#29062
            for (var _1f = 0, _1g = $1.diff; _1f < _1g; _1f++) { //#29062
                $k[$j++] = 0; //#29062
            } //#29062
            $1.ccrpad = $a(); //#29062
            $1.linrpad = $a(0); //#29063
        } else { //#29066
            $1.ccrpad = $a(0); //#29065
            $k[$j++] = Infinity; //#29066
            for (var _1l = 0, _1m = -$1.diff; _1l < _1m; _1l++) { //#29066
                $k[$j++] = 0; //#29066
            } //#29066
            $1.linrpad = $a(); //#29066
        } //#29066
        $1.linheight = ~~$1.linheight; //#29069
        var _1q = $eq($1.linktype, "a") ? 2 : 3; //#29070
        $1.ccrepeat = _1q; //#29070
        $k[$j++] = Infinity; //#29077
        for (var _1u = 0, _1v = $1.ccpixx, _1t = $1.ccpixs.length - 1; _1v < 0 ? _1u >= _1t : _1u <= _1t; _1u += _1v) { //#29075
            $1.i = _1u; //#29073
            for (var _1x = 0, _1y = $1.ccrepeat; _1x < _1y; _1x++) { //#29074
                $aload($1.cclpad); //#29074
                $aload($geti($1.ccpixs, $1.i, $1.ccpixx)); //#29074
                $aload($1.ccrpad); //#29074
            } //#29074
        } //#29074
        $aload($1.linlpad); //#29076
        $aload($1.sep); //#29076
        $aload($1.linrpad); //#29076
        for (var _29 = 0, _2A = $1.linheight; _29 < _2A; _29++) { //#29077
            $aload($1.linlpad); //#29077
            $aload($1.linpixs); //#29077
            $aload($1.linrpad); //#29077
        } //#29077
        $1.pixs = $a(); //#29077
        $1.pixx = $f($f($1.cclpad.length + $1.ccpixx) + $1.ccrpad.length); //#29080
        $1.pixy = ~~($1.pixs.length / $1.pixx); //#29081
        var _2Q = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.pixs],
            ["pixx", $1.pixx],
            ["pixy", $1.pixy],
            ["height", $1.pixy / 72],
            ["width", $1.pixx / 72],
            ["opt", $1.options]
        ]); //#29089
        $k[$j++] = _2Q; //#29096
        if (!$1.dontdraw) { //#29096
            $$.save(); //#29093
            bwipp_renmatrix(); //#29094
            $$.restore(); //#29095
        } //#29095
    } //#29095
}

function bwipp_gs1datamatrix() {
    var $1 = Object.create(bwipp_gs1datamatrix.$ctx || (bwipp_gs1datamatrix.$ctx = {})); //#29129
    $1.dontdraw = false; //#29132
    $1.parse = false; //#29133
    $1.dontlint = false; //#29134
    $1.lintreqs = true; //#29135
    $1.gssep = false; //#29136
    $k[$j++] = $1; //#29138
    bwipp_processoptions(); //#29138
    $1.options = $k[--$j]; //#29138
    $1.barcode = $k[--$j]; //#29139
    $k[$j++] = $1.barcode; //#29141
    $k[$j++] = 'ai'; //#29141
    bwipp_gs1process(); //#29141
    $1.fncs = $k[--$j]; //#29142
    $1.vals = $k[--$j]; //#29143
    $1.ais = $k[--$j]; //#29144
    $1.fnc1 = -1; //#29147
    $1.dmtx = $a([$1.fnc1]); //#29148
    for (var _A = 0, _9 = $1.ais.length - 1; _A <= _9; _A += 1) { //#29164
        $1.i = _A; //#29150
        $1.ai = $get($1.ais, $1.i); //#29151
        $1.val = $get($1.vals, $1.i); //#29152
        var _K = $a(($1.dmtx.length + $1.ai.length) + $1.val.length); //#29153
        $puti(_K, 0, $1.dmtx); //#29154
        $k[$j++] = _K; //#29155
        $k[$j++] = _K; //#29155
        $k[$j++] = $1.dmtx.length; //#29155
        $k[$j++] = $1.ai; //#29155
        $k[$j++] = Infinity; //#29155
        var _O = $k[--$j]; //#29155
        var _P = $k[--$j]; //#29155
        $k[$j++] = _O; //#29155
        $forall(_P); //#29155
        var _Q = $a(); //#29155
        var _R = $k[--$j]; //#29155
        $puti($k[--$j], _R, _Q); //#29155
        var _T = $k[--$j]; //#29156
        $k[$j++] = _T; //#29156
        $k[$j++] = _T; //#29156
        $k[$j++] = $1.dmtx.length + $1.ai.length; //#29156
        $k[$j++] = $1.val; //#29156
        $k[$j++] = Infinity; //#29156
        var _X = $k[--$j]; //#29156
        var _Y = $k[--$j]; //#29156
        $k[$j++] = _X; //#29156
        $forall(_Y); //#29156
        var _Z = $a(); //#29156
        var _a = $k[--$j]; //#29156
        $puti($k[--$j], _a, _Z); //#29156
        $1.dmtx = $k[--$j]; //#29157
        if (($1.i != ($1.ais.length - 1)) && $get($1.fncs, $1.i)) { //#29163
            var _j = $a($1.dmtx.length + 1); //#29159
            $puti(_j, 0, $1.dmtx); //#29160
            $k[$j++] = _j; //#29161
            $k[$j++] = _j; //#29161
            $k[$j++] = $1.dmtx.length; //#29161
            if ($1.gssep) { //#29161
                $k[$j++] = 29; //#29161
            } else { //#29161
                $k[$j++] = $1.fnc1; //#29161
            } //#29161
            var _o = $k[--$j]; //#29161
            var _p = $k[--$j]; //#29161
            $put($k[--$j], _p, _o); //#29161
            $1.dmtx = $k[--$j]; //#29162
        } //#29162
    } //#29162
    $1.barcode = $s(($1.dmtx.length + 1) * 5); //#29167
    $1.i = 0; //#29168
    $1.j = 0; //#29168
    for (;;) { //#29178
        if ($1.i == $1.dmtx.length) { //#29169
            break; //#29169
        } //#29169
        var _y = $get($1.dmtx, $1.i); //#29170
        $k[$j++] = _y; //#29175
        if (_y == $1.fnc1) { //#29174
            $j--; //#29171
            $puti($1.barcode, $1.j, "^FNC1"); //#29171
            $1.j = $1.j + 4; //#29172
        } else { //#29174
            $put($1.barcode, $1.j, $k[--$j]); //#29174
        } //#29174
        $1.i = $1.i + 1; //#29176
        $1.j = $1.j + 1; //#29177
    } //#29177
    $1.barcode = $geti($1.barcode, 0, $1.j); //#29179
    delete $1.options["parse"]; //#29182
    $put($1.options, "dontdraw", true); //#29183
    $put($1.options, "parsefnc", true); //#29184
    $k[$j++] = 'args'; //#29185
    $k[$j++] = $1.barcode; //#29185
    $k[$j++] = $1.options; //#29185
    bwipp_datamatrix(); //#29185
    var _1G = $k[--$j]; //#29185
    $1[$k[--$j]] = _1G; //#29185
    $put($1.args, "opt", $1.options); //#29187
    $k[$j++] = $1.args; //#29190
    if (!$1.dontdraw) { //#29190
        bwipp_renmatrix(); //#29190
    } //#29190
}

function bwipp_gs1datamatrixrectangular() {
    var $1 = Object.create(bwipp_gs1datamatrixrectangular.$ctx || (bwipp_gs1datamatrixrectangular.$ctx = {})); //#29222
    $1.parse = false; //#29225
    $1.dontlint = false; //#29226
    $1.lintreqs = true; //#29227
    $1.dontdraw = false; //#29228
    $1.gssep = false; //#29229
    $k[$j++] = $1; //#29231
    bwipp_processoptions(); //#29231
    $1.options = $k[--$j]; //#29231
    $1.barcode = $k[--$j]; //#29232
    $k[$j++] = $1.barcode; //#29234
    $k[$j++] = 'ai'; //#29234
    bwipp_gs1process(); //#29234
    $1.fncs = $k[--$j]; //#29235
    $1.vals = $k[--$j]; //#29236
    $1.ais = $k[--$j]; //#29237
    $1.fnc1 = -1; //#29240
    $1.dmtx = $a([$1.fnc1]); //#29241
    for (var _A = 0, _9 = $1.ais.length - 1; _A <= _9; _A += 1) { //#29257
        $1.i = _A; //#29243
        $1.ai = $get($1.ais, $1.i); //#29244
        $1.val = $get($1.vals, $1.i); //#29245
        var _K = $a(($1.dmtx.length + $1.ai.length) + $1.val.length); //#29246
        $puti(_K, 0, $1.dmtx); //#29247
        $k[$j++] = _K; //#29248
        $k[$j++] = _K; //#29248
        $k[$j++] = $1.dmtx.length; //#29248
        $k[$j++] = $1.ai; //#29248
        $k[$j++] = Infinity; //#29248
        var _O = $k[--$j]; //#29248
        var _P = $k[--$j]; //#29248
        $k[$j++] = _O; //#29248
        $forall(_P); //#29248
        var _Q = $a(); //#29248
        var _R = $k[--$j]; //#29248
        $puti($k[--$j], _R, _Q); //#29248
        var _T = $k[--$j]; //#29249
        $k[$j++] = _T; //#29249
        $k[$j++] = _T; //#29249
        $k[$j++] = $1.dmtx.length + $1.ai.length; //#29249
        $k[$j++] = $1.val; //#29249
        $k[$j++] = Infinity; //#29249
        var _X = $k[--$j]; //#29249
        var _Y = $k[--$j]; //#29249
        $k[$j++] = _X; //#29249
        $forall(_Y); //#29249
        var _Z = $a(); //#29249
        var _a = $k[--$j]; //#29249
        $puti($k[--$j], _a, _Z); //#29249
        $1.dmtx = $k[--$j]; //#29250
        if (($1.i != ($1.ais.length - 1)) && $get($1.fncs, $1.i)) { //#29256
            var _j = $a($1.dmtx.length + 1); //#29252
            $puti(_j, 0, $1.dmtx); //#29253
            $k[$j++] = _j; //#29254
            $k[$j++] = _j; //#29254
            $k[$j++] = $1.dmtx.length; //#29254
            if ($1.gssep) { //#29254
                $k[$j++] = 29; //#29254
            } else { //#29254
                $k[$j++] = $1.fnc1; //#29254
            } //#29254
            var _o = $k[--$j]; //#29254
            var _p = $k[--$j]; //#29254
            $put($k[--$j], _p, _o); //#29254
            $1.dmtx = $k[--$j]; //#29255
        } //#29255
    } //#29255
    $1.barcode = $s(($1.dmtx.length + 1) * 5); //#29260
    $1.i = 0; //#29261
    $1.j = 0; //#29261
    for (;;) { //#29271
        if ($1.i == $1.dmtx.length) { //#29262
            break; //#29262
        } //#29262
        var _y = $get($1.dmtx, $1.i); //#29263
        $k[$j++] = _y; //#29268
        if (_y == $1.fnc1) { //#29267
            $j--; //#29264
            $puti($1.barcode, $1.j, "^FNC1"); //#29264
            $1.j = $1.j + 4; //#29265
        } else { //#29267
            $put($1.barcode, $1.j, $k[--$j]); //#29267
        } //#29267
        $1.i = $1.i + 1; //#29269
        $1.j = $1.j + 1; //#29270
    } //#29270
    $1.barcode = $geti($1.barcode, 0, $1.j); //#29272
    delete $1.options["parse"]; //#29275
    $put($1.options, "dontdraw", true); //#29276
    $put($1.options, "parsefnc", true); //#29277
    $put($1.options, "format", "rectangle"); //#29278
    $k[$j++] = 'args'; //#29279
    $k[$j++] = $1.barcode; //#29279
    $k[$j++] = $1.options; //#29279
    bwipp_datamatrix(); //#29279
    var _1H = $k[--$j]; //#29279
    $1[$k[--$j]] = _1H; //#29279
    $put($1.args, "opt", $1.options); //#29281
    $k[$j++] = $1.args; //#29284
    if (!$1.dontdraw) { //#29284
        bwipp_renmatrix(); //#29284
    } //#29284
}

function bwipp_gs1dldatamatrix() {
    var $1 = Object.create(bwipp_gs1dldatamatrix.$ctx || (bwipp_gs1dldatamatrix.$ctx = {})); //#29316
    $1.parse = false; //#29319
    $1.dontlint = false; //#29320
    $1.lintreqs = true; //#29321
    $1.dontdraw = false; //#29322
    $k[$j++] = $1; //#29324
    bwipp_processoptions(); //#29324
    $1.options = $k[--$j]; //#29324
    $1.barcode = $k[--$j]; //#29325
    var _3 = new Map([
        ["parse", $1.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#29331
    $1.fncvals = _3; //#29332
    $k[$j++] = 'barcode'; //#29333
    $k[$j++] = $1.barcode; //#29333
    $k[$j++] = $1.fncvals; //#29333
    bwipp_parseinput(); //#29333
    var _6 = $k[--$j]; //#29333
    $1[$k[--$j]] = _6; //#29333
    $k[$j++] = $1.barcode; //#29335
    $k[$j++] = 'dl'; //#29335
    bwipp_gs1process(); //#29335
    $j -= 3; //#29335
    delete $1.options["parse"]; //#29338
    $put($1.options, "dontdraw", true); //#29339
    $k[$j++] = 'args'; //#29340
    $k[$j++] = $1.barcode; //#29340
    $k[$j++] = $1.options; //#29340
    bwipp_datamatrix(); //#29340
    var _D = $k[--$j]; //#29340
    $1[$k[--$j]] = _D; //#29340
    $put($1.args, "opt", $1.options); //#29342
    $k[$j++] = $1.args; //#29345
    if (!$1.dontdraw) { //#29345
        bwipp_renmatrix(); //#29345
    } //#29345
}

function bwipp_gs1qrcode() {
    var $1 = Object.create(bwipp_gs1qrcode.$ctx || (bwipp_gs1qrcode.$ctx = {})); //#29376
    $1.parse = false; //#29379
    $1.dontlint = false; //#29380
    $1.lintreqs = true; //#29381
    $1.dontdraw = false; //#29382
    $k[$j++] = $1; //#29384
    bwipp_processoptions(); //#29384
    $1.options = $k[--$j]; //#29384
    $1.barcode = $k[--$j]; //#29385
    $k[$j++] = $1.barcode; //#29387
    $k[$j++] = 'ai'; //#29387
    bwipp_gs1process(); //#29387
    $1.fncs = $k[--$j]; //#29388
    $1.vals = $k[--$j]; //#29389
    $1.ais = $k[--$j]; //#29390
    $1.fnc1 = -1; //#29393
    $1.qrc = $a([$1.fnc1]); //#29394
    for (var _A = 0, _9 = $1.ais.length - 1; _A <= _9; _A += 1) { //#29410
        $1.i = _A; //#29396
        $1.ai = $get($1.ais, $1.i); //#29397
        $1.val = $get($1.vals, $1.i); //#29398
        var _K = $a(($1.qrc.length + $1.ai.length) + $1.val.length); //#29399
        $puti(_K, 0, $1.qrc); //#29400
        $k[$j++] = _K; //#29401
        $k[$j++] = _K; //#29401
        $k[$j++] = $1.qrc.length; //#29401
        $k[$j++] = $1.ai; //#29401
        $k[$j++] = Infinity; //#29401
        var _O = $k[--$j]; //#29401
        var _P = $k[--$j]; //#29401
        $k[$j++] = _O; //#29401
        $forall(_P); //#29401
        var _Q = $a(); //#29401
        var _R = $k[--$j]; //#29401
        $puti($k[--$j], _R, _Q); //#29401
        var _T = $k[--$j]; //#29402
        $k[$j++] = _T; //#29402
        $k[$j++] = _T; //#29402
        $k[$j++] = $1.qrc.length + $1.ai.length; //#29402
        $k[$j++] = $1.val; //#29402
        $k[$j++] = Infinity; //#29402
        var _X = $k[--$j]; //#29402
        var _Y = $k[--$j]; //#29402
        $k[$j++] = _X; //#29402
        $forall(_Y); //#29402
        var _Z = $a(); //#29402
        var _a = $k[--$j]; //#29402
        $puti($k[--$j], _a, _Z); //#29402
        $1.qrc = $k[--$j]; //#29403
        if (($1.i != ($1.ais.length - 1)) && $get($1.fncs, $1.i)) { //#29409
            var _j = $a($1.qrc.length + 1); //#29405
            $puti(_j, 0, $1.qrc); //#29406
            $put(_j, $1.qrc.length, $1.fnc1); //#29407
            $1.qrc = _j; //#29408
        } //#29408
    } //#29408
    $1.barcode = $s(($1.qrc.length + 1) * 5); //#29413
    $1.i = 0; //#29414
    $1.j = 0; //#29414
    for (;;) { //#29424
        if ($1.i == $1.qrc.length) { //#29415
            break; //#29415
        } //#29415
        var _t = $get($1.qrc, $1.i); //#29416
        $k[$j++] = _t; //#29421
        if (_t == $1.fnc1) { //#29420
            $j--; //#29417
            $puti($1.barcode, $1.j, "^FNC1"); //#29417
            $1.j = $1.j + 4; //#29418
        } else { //#29420
            $put($1.barcode, $1.j, $k[--$j]); //#29420
        } //#29420
        $1.i = $1.i + 1; //#29422
        $1.j = $1.j + 1; //#29423
    } //#29423
    $1.barcode = $geti($1.barcode, 0, $1.j); //#29425
    delete $1.options["parse"]; //#29428
    $put($1.options, "dontdraw", true); //#29429
    $put($1.options, "parsefnc", true); //#29430
    $k[$j++] = 'args'; //#29431
    $k[$j++] = $1.barcode; //#29431
    $k[$j++] = $1.options; //#29431
    bwipp_qrcode(); //#29431
    var _1B = $k[--$j]; //#29431
    $1[$k[--$j]] = _1B; //#29431
    $put($1.args, "opt", $1.options); //#29433
    $k[$j++] = $1.args; //#29436
    if (!$1.dontdraw) { //#29436
        bwipp_renmatrix(); //#29436
    } //#29436
}

function bwipp_gs1dlqrcode() {
    var $1 = Object.create(bwipp_gs1dlqrcode.$ctx || (bwipp_gs1dlqrcode.$ctx = {})); //#29468
    $1.parse = false; //#29471
    $1.dontlint = false; //#29472
    $1.lintreqs = true; //#29473
    $1.dontdraw = false; //#29474
    $k[$j++] = $1; //#29476
    bwipp_processoptions(); //#29476
    $1.options = $k[--$j]; //#29476
    $1.barcode = $k[--$j]; //#29477
    var _3 = new Map([
        ["parse", $1.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#29483
    $1.fncvals = _3; //#29484
    $k[$j++] = 'barcode'; //#29485
    $k[$j++] = $1.barcode; //#29485
    $k[$j++] = $1.fncvals; //#29485
    bwipp_parseinput(); //#29485
    var _6 = $k[--$j]; //#29485
    $1[$k[--$j]] = _6; //#29485
    $k[$j++] = $1.barcode; //#29487
    $k[$j++] = 'dl'; //#29487
    bwipp_gs1process(); //#29487
    $j -= 3; //#29487
    delete $1.options["parse"]; //#29490
    $put($1.options, "dontdraw", true); //#29491
    $k[$j++] = 'args'; //#29492
    $k[$j++] = $1.barcode; //#29492
    $k[$j++] = $1.options; //#29492
    bwipp_qrcode(); //#29492
    var _D = $k[--$j]; //#29492
    $1[$k[--$j]] = _D; //#29492
    $put($1.args, "opt", $1.options); //#29494
    $k[$j++] = $1.args; //#29497
    if (!$1.dontdraw) { //#29497
        bwipp_renmatrix(); //#29497
    } //#29497
}

function bwipp_gs1dotcode() {
    var $1 = Object.create(bwipp_gs1dotcode.$ctx || (bwipp_gs1dotcode.$ctx = {})); //#29529
    $1.dontdraw = false; //#29532
    $1.parse = false; //#29533
    $1.dontlint = false; //#29534
    $1.lintreqs = true; //#29535
    $k[$j++] = $1; //#29537
    bwipp_processoptions(); //#29537
    $1.options = $k[--$j]; //#29537
    $1.barcode = $k[--$j]; //#29538
    $k[$j++] = $1.barcode; //#29540
    $k[$j++] = 'ai'; //#29540
    bwipp_gs1process(); //#29540
    $1.fncs = $k[--$j]; //#29541
    $1.vals = $k[--$j]; //#29542
    $1.ais = $k[--$j]; //#29543
    $1.fnc1 = -1; //#29546
    $1.dmtx = $a([$1.fnc1]); //#29547
    for (var _A = 0, _9 = $1.ais.length - 1; _A <= _9; _A += 1) { //#29563
        $1.i = _A; //#29549
        $1.ai = $get($1.ais, $1.i); //#29550
        $1.val = $get($1.vals, $1.i); //#29551
        var _K = $a(($1.dmtx.length + $1.ai.length) + $1.val.length); //#29552
        $puti(_K, 0, $1.dmtx); //#29553
        $k[$j++] = _K; //#29554
        $k[$j++] = _K; //#29554
        $k[$j++] = $1.dmtx.length; //#29554
        $k[$j++] = $1.ai; //#29554
        $k[$j++] = Infinity; //#29554
        var _O = $k[--$j]; //#29554
        var _P = $k[--$j]; //#29554
        $k[$j++] = _O; //#29554
        $forall(_P); //#29554
        var _Q = $a(); //#29554
        var _R = $k[--$j]; //#29554
        $puti($k[--$j], _R, _Q); //#29554
        var _T = $k[--$j]; //#29555
        $k[$j++] = _T; //#29555
        $k[$j++] = _T; //#29555
        $k[$j++] = $1.dmtx.length + $1.ai.length; //#29555
        $k[$j++] = $1.val; //#29555
        $k[$j++] = Infinity; //#29555
        var _X = $k[--$j]; //#29555
        var _Y = $k[--$j]; //#29555
        $k[$j++] = _X; //#29555
        $forall(_Y); //#29555
        var _Z = $a(); //#29555
        var _a = $k[--$j]; //#29555
        $puti($k[--$j], _a, _Z); //#29555
        $1.dmtx = $k[--$j]; //#29556
        if (($1.i != ($1.ais.length - 1)) && $get($1.fncs, $1.i)) { //#29562
            var _j = $a($1.dmtx.length + 1); //#29558
            $puti(_j, 0, $1.dmtx); //#29559
            $put(_j, $1.dmtx.length, $1.fnc1); //#29560
            $1.dmtx = _j; //#29561
        } //#29561
    } //#29561
    $1.barcode = $s(($1.dmtx.length + 1) * 5); //#29566
    $1.i = 0; //#29567
    $1.j = 0; //#29567
    for (;;) { //#29577
        if ($1.i == $1.dmtx.length) { //#29568
            break; //#29568
        } //#29568
        var _t = $get($1.dmtx, $1.i); //#29569
        $k[$j++] = _t; //#29574
        if (_t == $1.fnc1) { //#29573
            $j--; //#29570
            $puti($1.barcode, $1.j, "^FNC1"); //#29570
            $1.j = $1.j + 4; //#29571
        } else { //#29573
            $put($1.barcode, $1.j, $k[--$j]); //#29573
        } //#29573
        $1.i = $1.i + 1; //#29575
        $1.j = $1.j + 1; //#29576
    } //#29576
    $1.barcode = $geti($1.barcode, 0, $1.j); //#29578
    delete $1.options["parse"]; //#29581
    $put($1.options, "dontdraw", true); //#29582
    $put($1.options, "parsefnc", true); //#29583
    $k[$j++] = 'args'; //#29584
    $k[$j++] = $1.barcode; //#29584
    $k[$j++] = $1.options; //#29584
    bwipp_dotcode(); //#29584
    var _1B = $k[--$j]; //#29584
    $1[$k[--$j]] = _1B; //#29584
    $put($1.args, "opt", $1.options); //#29586
    $k[$j++] = $1.args; //#29589
    if (!$1.dontdraw) { //#29589
        bwipp_renmatrix(); //#29589
    } //#29589
}

function bwipp_hibccode39() {
    var $1 = Object.create(bwipp_hibccode39.$ctx || (bwipp_hibccode39.$ctx = {})); //#29622
    $1.dontdraw = false; //#29625
    $1.textfont = "OCR-B"; //#29626
    $1.textsize = 10; //#29627
    $1.textyoffset = -8; //#29628
    $1.textxoffset = 0; //#29629
    $1.validatecheck = false; //#29630
    $k[$j++] = $1; //#29632
    bwipp_processoptions(); //#29632
    $1.options = $k[--$j]; //#29632
    $1.barcode = $k[--$j]; //#29633
    if (!bwipp_hibccode39.$ctx._29642) { //#29642
        (function() { //#29642
            var $ctx = Object.create($1); //#29642
            $ctx.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#29639
            $ctx.charvals = new Map; //#29640
            for (var _2 = 0; _2 <= 42; _2 += 1) { //#29641
                $put($ctx.charvals, $geti($ctx.barchars, _2, 1), _2); //#29641
            } //#29641
            for (var _6 in $ctx) {
                $ctx.hasOwnProperty(_6) && (bwipp_hibccode39.$ctx[_6] = $ctx[_6]);
            } //#29641
            bwipp_hibccode39.$ctx._29642 = 1; //#29641
        })(); //#29641
    } //#29641
    for (var _9 = 0, _8 = $1.barcode.length - 1; _9 <= _8; _9 += 1) { //#29649
        var _D = $get($1.charvals, $geti($1.barcode, _9, 1)) !== undefined; //#29646
        if (!_D) { //#29648
            $k[$j++] = 'bwipp.hibccode39badCharacter#29647'; //#29647
            $k[$j++] = "HIBC Code 39 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#29647
            bwipp_raiseerror(); //#29647
        } //#29647
    } //#29647
    $k[$j++] = 'barlen'; //#29651
    $k[$j++] = $1.barcode.length; //#29651
    if ($1.validatecheck) { //#29651
        var _G = $k[--$j]; //#29651
        $k[$j++] = $f(_G - 1); //#29651
    } //#29651
    var _H = $k[--$j]; //#29651
    $1[$k[--$j]] = _H; //#29651
    $1.checksum = 41; //#29653
    for (var _L = 0, _K = $f($1.barlen - 1); _L <= _K; _L += 1) { //#29657
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _L, 1)) + $1.checksum); //#29656
    } //#29656
    $1.checksum = $1.checksum % 43; //#29658
    if ($1.validatecheck) { //#29664
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#29662
            $k[$j++] = 'bwipp.hibccode39badCheckDigit#29661'; //#29661
            $k[$j++] = "Incorrect HIBC Code 39 check digit provided"; //#29661
            bwipp_raiseerror(); //#29661
        } //#29661
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#29663
    } //#29663
    var _d = $s($f($1.barlen + 2)); //#29666
    $puti(_d, 1, $1.barcode); //#29666
    $1.barcode = _d; //#29666
    $put($1.barcode, 0, 43); //#29667
    $put($1.barcode, $f($1.barlen + 1), $get($1.barchars, $1.checksum)); //#29668
    $1.text = $s($f($1.barlen + 4)); //#29670
    $put($1.text, 0, 42); //#29671
    $puti($1.text, 1, $1.barcode); //#29672
    var _u = $get($1.barcode, $f($1.barlen + 1)); //#29673
    $k[$j++] = $1.text; //#29673
    $k[$j++] = $f($1.barlen + 2); //#29673
    $k[$j++] = _u; //#29673
    if (_u == 32) { //#29673
        $j--; //#29673
        $k[$j++] = 95; //#29673
    } //#29673
    var _v = $k[--$j]; //#29673
    var _w = $k[--$j]; //#29673
    $put($k[--$j], _w, _v); //#29673
    $put($1.text, $f($1.barlen + 3), 42); //#29674
    $put($1.options, "dontdraw", true); //#29677
    $put($1.options, "includecheck", false); //#29678
    $put($1.options, "validatecheck", false); //#29679
    $k[$j++] = 'args'; //#29680
    $k[$j++] = $1.barcode; //#29680
    $k[$j++] = $1.options; //#29680
    bwipp_code39(); //#29680
    var _15 = $k[--$j]; //#29680
    $1[$k[--$j]] = _15; //#29680
    $put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); //#29682
    $put($1.args, "textxalign", "center"); //#29683
    $put($1.args, "opt", $1.options); //#29684
    $k[$j++] = $1.args; //#29687
    if (!$1.dontdraw) { //#29687
        bwipp_renlinear(); //#29687
    } //#29687
}

function bwipp_hibccode128() {
    var $1 = Object.create(bwipp_hibccode128.$ctx || (bwipp_hibccode128.$ctx = {})); //#29722
    $1.dontdraw = false; //#29725
    $1.textfont = "OCR-B"; //#29726
    $1.textsize = 10; //#29727
    $1.textyoffset = -8; //#29728
    $1.textxoffset = 0; //#29729
    $1.validatecheck = false; //#29730
    $k[$j++] = $1; //#29732
    bwipp_processoptions(); //#29732
    $1.options = $k[--$j]; //#29732
    $1.barcode = $k[--$j]; //#29733
    if (!bwipp_hibccode128.$ctx._29742) { //#29742
        (function() { //#29742
            var $ctx = Object.create($1); //#29742
            $ctx.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#29739
            $ctx.charvals = new Map; //#29740
            for (var _2 = 0; _2 <= 42; _2 += 1) { //#29741
                $put($ctx.charvals, $geti($ctx.barchars, _2, 1), _2); //#29741
            } //#29741
            for (var _6 in $ctx) {
                $ctx.hasOwnProperty(_6) && (bwipp_hibccode128.$ctx[_6] = $ctx[_6]);
            } //#29741
            bwipp_hibccode128.$ctx._29742 = 1; //#29741
        })(); //#29741
    } //#29741
    for (var _9 = 0, _8 = $1.barcode.length - 1; _9 <= _8; _9 += 1) { //#29749
        var _D = $get($1.charvals, $geti($1.barcode, _9, 1)) !== undefined; //#29746
        if (!_D) { //#29748
            $k[$j++] = 'bwipp.hibccode128badCharacter#29747'; //#29747
            $k[$j++] = "HIBC Code 128 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#29747
            bwipp_raiseerror(); //#29747
        } //#29747
    } //#29747
    $k[$j++] = 'barlen'; //#29751
    $k[$j++] = $1.barcode.length; //#29751
    if ($1.validatecheck) { //#29751
        var _G = $k[--$j]; //#29751
        $k[$j++] = $f(_G - 1); //#29751
    } //#29751
    var _H = $k[--$j]; //#29751
    $1[$k[--$j]] = _H; //#29751
    $1.checksum = 41; //#29753
    for (var _L = 0, _K = $f($1.barlen - 1); _L <= _K; _L += 1) { //#29757
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _L, 1)) + $1.checksum); //#29756
    } //#29756
    $1.checksum = $1.checksum % 43; //#29758
    if ($1.validatecheck) { //#29764
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#29762
            $k[$j++] = 'bwipp.hibccode128badCheckDigit#29761'; //#29761
            $k[$j++] = "Incorrect HIBC Code 128 check digit provided"; //#29761
            bwipp_raiseerror(); //#29761
        } //#29761
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#29763
    } //#29763
    var _d = $s($f($1.barlen + 2)); //#29766
    $puti(_d, 1, $1.barcode); //#29766
    $1.barcode = _d; //#29766
    $put($1.barcode, 0, 43); //#29767
    $put($1.barcode, $f($1.barlen + 1), $get($1.barchars, $1.checksum)); //#29768
    $1.text = $s($f($1.barlen + 4)); //#29770
    $put($1.text, 0, 42); //#29771
    $puti($1.text, 1, $1.barcode); //#29772
    var _u = $get($1.barcode, $f($1.barlen + 1)); //#29773
    $k[$j++] = $1.text; //#29773
    $k[$j++] = $f($1.barlen + 2); //#29773
    $k[$j++] = _u; //#29773
    if (_u == 32) { //#29773
        $j--; //#29773
        $k[$j++] = 95; //#29773
    } //#29773
    var _v = $k[--$j]; //#29773
    var _w = $k[--$j]; //#29773
    $put($k[--$j], _w, _v); //#29773
    $put($1.text, $f($1.barlen + 3), 42); //#29774
    $put($1.options, "dontdraw", true); //#29777
    $put($1.options, "validatecheck", false); //#29778
    $k[$j++] = 'args'; //#29779
    $k[$j++] = $1.barcode; //#29779
    $k[$j++] = $1.options; //#29779
    bwipp_code128(); //#29779
    var _14 = $k[--$j]; //#29779
    $1[$k[--$j]] = _14; //#29779
    $put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); //#29781
    $put($1.args, "textxalign", "center"); //#29782
    $put($1.args, "opt", $1.options); //#29783
    $k[$j++] = $1.args; //#29786
    if (!$1.dontdraw) { //#29786
        bwipp_renlinear(); //#29786
    } //#29786
}

function bwipp_hibcdatamatrix() {
    var $1 = Object.create(bwipp_hibcdatamatrix.$ctx || (bwipp_hibcdatamatrix.$ctx = {})); //#29821
    $1.dontdraw = false; //#29824
    $1.validatecheck = false; //#29825
    $k[$j++] = $1; //#29827
    bwipp_processoptions(); //#29827
    $1.options = $k[--$j]; //#29827
    $1.barcode = $k[--$j]; //#29828
    if (!bwipp_hibcdatamatrix.$ctx._29837) { //#29837
        (function() { //#29837
            var $ctx = Object.create($1); //#29837
            $ctx.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#29834
            $ctx.charvals = new Map; //#29835
            for (var _2 = 0; _2 <= 42; _2 += 1) { //#29836
                $put($ctx.charvals, $geti($ctx.barchars, _2, 1), _2); //#29836
            } //#29836
            for (var _6 in $ctx) {
                $ctx.hasOwnProperty(_6) && (bwipp_hibcdatamatrix.$ctx[_6] = $ctx[_6]);
            } //#29836
            bwipp_hibcdatamatrix.$ctx._29837 = 1; //#29836
        })(); //#29836
    } //#29836
    for (var _9 = 0, _8 = $1.barcode.length - 1; _9 <= _8; _9 += 1) { //#29844
        var _D = $get($1.charvals, $geti($1.barcode, _9, 1)) !== undefined; //#29841
        if (!_D) { //#29843
            $k[$j++] = 'bwipp.hibcdatamatrixBadCharacter#29842'; //#29842
            $k[$j++] = "HIBC Data Matrix must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#29842
            bwipp_raiseerror(); //#29842
        } //#29842
    } //#29842
    $k[$j++] = 'barlen'; //#29846
    $k[$j++] = $1.barcode.length; //#29846
    if ($1.validatecheck) { //#29846
        var _G = $k[--$j]; //#29846
        $k[$j++] = $f(_G - 1); //#29846
    } //#29846
    var _H = $k[--$j]; //#29846
    $1[$k[--$j]] = _H; //#29846
    $1.checksum = 41; //#29848
    for (var _L = 0, _K = $f($1.barlen - 1); _L <= _K; _L += 1) { //#29852
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _L, 1)) + $1.checksum); //#29851
    } //#29851
    $1.checksum = $1.checksum % 43; //#29853
    if ($1.validatecheck) { //#29859
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#29857
            $k[$j++] = 'bwipp.hibcdatamatrixBadCheckDigit#29856'; //#29856
            $k[$j++] = "Incorrect HIBC Data Matrix check digit provided"; //#29856
            bwipp_raiseerror(); //#29856
        } //#29856
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#29858
    } //#29858
    var _d = $s($f($1.barlen + 2)); //#29861
    $puti(_d, 1, $1.barcode); //#29861
    $1.barcode = _d; //#29861
    $put($1.barcode, 0, 43); //#29862
    $put($1.barcode, $f($1.barlen + 1), $get($1.barchars, $1.checksum)); //#29863
    $put($1.options, "dontdraw", true); //#29866
    $put($1.options, "validatecheck", false); //#29867
    $k[$j++] = 'args'; //#29868
    $k[$j++] = $1.barcode; //#29868
    $k[$j++] = $1.options; //#29868
    bwipp_datamatrix(); //#29868
    var _p = $k[--$j]; //#29868
    $1[$k[--$j]] = _p; //#29868
    var _r = $1.args; //#29870
    $put(_r, "opt", $1.options); //#29870
    $k[$j++] = $1.args; //#29873
    if (!$1.dontdraw) { //#29873
        bwipp_renmatrix(); //#29873
    } //#29873
}

function bwipp_hibcdatamatrixrectangular() {
    var $1 = Object.create(bwipp_hibcdatamatrixrectangular.$ctx || (bwipp_hibcdatamatrixrectangular.$ctx = {})); //#29908
    $1.dontdraw = false; //#29911
    $1.validatecheck = false; //#29912
    $k[$j++] = $1; //#29914
    bwipp_processoptions(); //#29914
    $1.options = $k[--$j]; //#29914
    $1.barcode = $k[--$j]; //#29915
    if (!bwipp_hibcdatamatrixrectangular.$ctx._29924) { //#29924
        (function() { //#29924
            var $ctx = Object.create($1); //#29924
            $ctx.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#29921
            $ctx.charvals = new Map; //#29922
            for (var _2 = 0; _2 <= 42; _2 += 1) { //#29923
                $put($ctx.charvals, $geti($ctx.barchars, _2, 1), _2); //#29923
            } //#29923
            for (var _6 in $ctx) {
                $ctx.hasOwnProperty(_6) && (bwipp_hibcdatamatrixrectangular.$ctx[_6] = $ctx[_6]);
            } //#29923
            bwipp_hibcdatamatrixrectangular.$ctx._29924 = 1; //#29923
        })(); //#29923
    } //#29923
    for (var _9 = 0, _8 = $1.barcode.length - 1; _9 <= _8; _9 += 1) { //#29931
        var _D = $get($1.charvals, $geti($1.barcode, _9, 1)) !== undefined; //#29928
        if (!_D) { //#29930
            $k[$j++] = 'bwipp.hibcdatamatrixrectangularBadCharacter#29929'; //#29929
            $k[$j++] = "HIBC Data Matrix Rectangular must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#29929
            bwipp_raiseerror(); //#29929
        } //#29929
    } //#29929
    $k[$j++] = 'barlen'; //#29933
    $k[$j++] = $1.barcode.length; //#29933
    if ($1.validatecheck) { //#29933
        var _G = $k[--$j]; //#29933
        $k[$j++] = $f(_G - 1); //#29933
    } //#29933
    var _H = $k[--$j]; //#29933
    $1[$k[--$j]] = _H; //#29933
    $1.checksum = 41; //#29935
    for (var _L = 0, _K = $f($1.barlen - 1); _L <= _K; _L += 1) { //#29939
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _L, 1)) + $1.checksum); //#29938
    } //#29938
    $1.checksum = $1.checksum % 43; //#29940
    if ($1.validatecheck) { //#29946
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#29944
            $k[$j++] = 'bwipp.hibcdatamatrixrectangularBadCheckDigit#29943'; //#29943
            $k[$j++] = "Incorrect HIBC Data Matrix Rectangular check digit provided"; //#29943
            bwipp_raiseerror(); //#29943
        } //#29943
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#29945
    } //#29945
    var _d = $s($f($1.barlen + 2)); //#29948
    $puti(_d, 1, $1.barcode); //#29948
    $1.barcode = _d; //#29948
    $put($1.barcode, 0, 43); //#29949
    $put($1.barcode, $f($1.barlen + 1), $get($1.barchars, $1.checksum)); //#29950
    $put($1.options, "dontdraw", true); //#29953
    $put($1.options, "validatecheck", false); //#29954
    $put($1.options, "format", "rectangle"); //#29955
    $k[$j++] = 'args'; //#29956
    $k[$j++] = $1.barcode; //#29956
    $k[$j++] = $1.options; //#29956
    bwipp_datamatrix(); //#29956
    var _q = $k[--$j]; //#29956
    var _r = $k[--$j]; //#29956
    $1[_r] = _q; //#29956
    $put($1.args, "opt", $1.options); //#29958
    $k[$j++] = $1.args; //#29961
    if (!$1.dontdraw) { //#29961
        bwipp_renmatrix(); //#29961
    } //#29961
}

function bwipp_hibcpdf417() {
    var $1 = Object.create(bwipp_hibcpdf417.$ctx || (bwipp_hibcpdf417.$ctx = {})); //#29996
    $1.dontdraw = false; //#29999
    $1.columns = 2; //#30000
    $1.validatecheck = false; //#30001
    $k[$j++] = $1; //#30003
    bwipp_processoptions(); //#30003
    $1.options = $k[--$j]; //#30003
    $1.barcode = $k[--$j]; //#30004
    if (!bwipp_hibcpdf417.$ctx._30013) { //#30013
        (function() { //#30013
            var $ctx = Object.create($1); //#30013
            $ctx.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#30010
            $ctx.charvals = new Map; //#30011
            for (var _2 = 0; _2 <= 42; _2 += 1) { //#30012
                $put($ctx.charvals, $geti($ctx.barchars, _2, 1), _2); //#30012
            } //#30012
            for (var _6 in $ctx) {
                $ctx.hasOwnProperty(_6) && (bwipp_hibcpdf417.$ctx[_6] = $ctx[_6]);
            } //#30012
            bwipp_hibcpdf417.$ctx._30013 = 1; //#30012
        })(); //#30012
    } //#30012
    for (var _9 = 0, _8 = $1.barcode.length - 1; _9 <= _8; _9 += 1) { //#30020
        var _D = $get($1.charvals, $geti($1.barcode, _9, 1)) !== undefined; //#30017
        if (!_D) { //#30019
            $k[$j++] = 'bwipp.hibcpdf417BadCharacter#30018'; //#30018
            $k[$j++] = "HIBC PDF417 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#30018
            bwipp_raiseerror(); //#30018
        } //#30018
    } //#30018
    $k[$j++] = 'barlen'; //#30022
    $k[$j++] = $1.barcode.length; //#30022
    if ($1.validatecheck) { //#30022
        var _G = $k[--$j]; //#30022
        $k[$j++] = $f(_G - 1); //#30022
    } //#30022
    var _H = $k[--$j]; //#30022
    $1[$k[--$j]] = _H; //#30022
    $1.checksum = 41; //#30024
    for (var _L = 0, _K = $f($1.barlen - 1); _L <= _K; _L += 1) { //#30028
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _L, 1)) + $1.checksum); //#30027
    } //#30027
    $1.checksum = $1.checksum % 43; //#30029
    if ($1.validatecheck) { //#30035
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#30033
            $k[$j++] = 'bwipp.hibcpdf417BadCheckDigit#30032'; //#30032
            $k[$j++] = "Incorrect HIBC PDF417 check digit provided"; //#30032
            bwipp_raiseerror(); //#30032
        } //#30032
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#30034
    } //#30034
    var _d = $s($f($1.barlen + 2)); //#30037
    $puti(_d, 1, $1.barcode); //#30037
    $1.barcode = _d; //#30037
    $put($1.barcode, 0, 43); //#30038
    $put($1.barcode, $f($1.barlen + 1), $get($1.barchars, $1.checksum)); //#30039
    $put($1.options, "dontdraw", true); //#30042
    $put($1.options, "columns", $1.columns); //#30043
    $put($1.options, "validatecheck", false); //#30044
    var _p = $1.barcode; //#30045
    $k[$j++] = 'args'; //#30045
    $k[$j++] = _p; //#30045
    $k[$j++] = $1.options; //#30045
    bwipp_pdf417(); //#30045
    var _r = $k[--$j]; //#30045
    $1[$k[--$j]] = _r; //#30045
    $put($1.args, "opt", $1.options); //#30047
    $k[$j++] = $1.args; //#30050
    if (!$1.dontdraw) { //#30050
        bwipp_renmatrix(); //#30050
    } //#30050
}

function bwipp_hibcmicropdf417() {
    var $1 = Object.create(bwipp_hibcmicropdf417.$ctx || (bwipp_hibcmicropdf417.$ctx = {})); //#30085
    $1.dontdraw = false; //#30088
    $1.columns = 2; //#30089
    $1.validatecheck = false; //#30090
    $k[$j++] = $1; //#30092
    bwipp_processoptions(); //#30092
    $1.options = $k[--$j]; //#30092
    $1.barcode = $k[--$j]; //#30093
    if (!bwipp_hibcmicropdf417.$ctx._30102) { //#30102
        (function() { //#30102
            var $ctx = Object.create($1); //#30102
            $ctx.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#30099
            $ctx.charvals = new Map; //#30100
            for (var _2 = 0; _2 <= 42; _2 += 1) { //#30101
                $put($ctx.charvals, $geti($ctx.barchars, _2, 1), _2); //#30101
            } //#30101
            for (var _6 in $ctx) {
                $ctx.hasOwnProperty(_6) && (bwipp_hibcmicropdf417.$ctx[_6] = $ctx[_6]);
            } //#30101
            bwipp_hibcmicropdf417.$ctx._30102 = 1; //#30101
        })(); //#30101
    } //#30101
    for (var _9 = 0, _8 = $1.barcode.length - 1; _9 <= _8; _9 += 1) { //#30109
        var _D = $get($1.charvals, $geti($1.barcode, _9, 1)) !== undefined; //#30106
        if (!_D) { //#30108
            $k[$j++] = 'bwipp.hibcmicropdf417BadCharacter#30107'; //#30107
            $k[$j++] = "HIBC MicroPDF417 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#30107
            bwipp_raiseerror(); //#30107
        } //#30107
    } //#30107
    $k[$j++] = 'barlen'; //#30111
    $k[$j++] = $1.barcode.length; //#30111
    if ($1.validatecheck) { //#30111
        var _G = $k[--$j]; //#30111
        $k[$j++] = $f(_G - 1); //#30111
    } //#30111
    var _H = $k[--$j]; //#30111
    $1[$k[--$j]] = _H; //#30111
    $1.checksum = 41; //#30113
    for (var _L = 0, _K = $f($1.barlen - 1); _L <= _K; _L += 1) { //#30117
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _L, 1)) + $1.checksum); //#30116
    } //#30116
    $1.checksum = $1.checksum % 43; //#30118
    if ($1.validatecheck) { //#30124
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#30122
            $k[$j++] = 'bwipp.hibcmicropdf417BadCheckDigit#30121'; //#30121
            $k[$j++] = "Incorrect HIBC MicroPDF417 check digit provided"; //#30121
            bwipp_raiseerror(); //#30121
        } //#30121
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#30123
    } //#30123
    var _d = $s($f($1.barlen + 2)); //#30126
    $puti(_d, 1, $1.barcode); //#30126
    $1.barcode = _d; //#30126
    $put($1.barcode, 0, 43); //#30127
    $put($1.barcode, $f($1.barlen + 1), $get($1.barchars, $1.checksum)); //#30128
    $put($1.options, "dontdraw", true); //#30131
    var _m = $1.options; //#30132
    $put(_m, "columns", $1.columns); //#30132
    $put($1.options, "validatecheck", false); //#30133
    $k[$j++] = 'args'; //#30134
    $k[$j++] = $1.barcode; //#30134
    $k[$j++] = $1.options; //#30134
    bwipp_micropdf417(); //#30134
    var _r = $k[--$j]; //#30134
    $1[$k[--$j]] = _r; //#30134
    $put($1.args, "opt", $1.options); //#30136
    $k[$j++] = $1.args; //#30139
    if (!$1.dontdraw) { //#30139
        bwipp_renmatrix(); //#30139
    } //#30139
}

function bwipp_hibcqrcode() {
    var $1 = Object.create(bwipp_hibcqrcode.$ctx || (bwipp_hibcqrcode.$ctx = {})); //#30174
    $1.dontdraw = false; //#30177
    $1.validatecheck = false; //#30178
    $k[$j++] = $1; //#30180
    bwipp_processoptions(); //#30180
    $1.options = $k[--$j]; //#30180
    $1.barcode = $k[--$j]; //#30181
    if (!bwipp_hibcqrcode.$ctx._30190) { //#30190
        (function() { //#30190
            var $ctx = Object.create($1); //#30190
            $ctx.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#30187
            $ctx.charvals = new Map; //#30188
            for (var _2 = 0; _2 <= 42; _2 += 1) { //#30189
                $put($ctx.charvals, $geti($ctx.barchars, _2, 1), _2); //#30189
            } //#30189
            for (var _6 in $ctx) {
                $ctx.hasOwnProperty(_6) && (bwipp_hibcqrcode.$ctx[_6] = $ctx[_6]);
            } //#30189
            bwipp_hibcqrcode.$ctx._30190 = 1; //#30189
        })(); //#30189
    } //#30189
    for (var _9 = 0, _8 = $1.barcode.length - 1; _9 <= _8; _9 += 1) { //#30197
        var _D = $get($1.charvals, $geti($1.barcode, _9, 1)) !== undefined; //#30194
        if (!_D) { //#30196
            $k[$j++] = 'bwipp.hibcqrcodeBadCharacter#30195'; //#30195
            $k[$j++] = "HIBC QR Code must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#30195
            bwipp_raiseerror(); //#30195
        } //#30195
    } //#30195
    $k[$j++] = 'barlen'; //#30199
    $k[$j++] = $1.barcode.length; //#30199
    if ($1.validatecheck) { //#30199
        var _G = $k[--$j]; //#30199
        $k[$j++] = $f(_G - 1); //#30199
    } //#30199
    var _H = $k[--$j]; //#30199
    $1[$k[--$j]] = _H; //#30199
    $1.checksum = 41; //#30201
    for (var _L = 0, _K = $f($1.barlen - 1); _L <= _K; _L += 1) { //#30205
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _L, 1)) + $1.checksum); //#30204
    } //#30204
    $1.checksum = $1.checksum % 43; //#30206
    if ($1.validatecheck) { //#30212
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#30210
            $k[$j++] = 'bwipp.hibcqrcodeBadCheckDigit#30209'; //#30209
            $k[$j++] = "Incorrect HIBC QR Code check digit provided"; //#30209
            bwipp_raiseerror(); //#30209
        } //#30209
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#30211
    } //#30211
    var _d = $s($f($1.barlen + 2)); //#30214
    $puti(_d, 1, $1.barcode); //#30214
    $1.barcode = _d; //#30214
    $put($1.barcode, 0, 43); //#30215
    $put($1.barcode, $f($1.barlen + 1), $get($1.barchars, $1.checksum)); //#30216
    $put($1.options, "dontdraw", true); //#30219
    $put($1.options, "validatecheck", false); //#30220
    $k[$j++] = 'args'; //#30221
    $k[$j++] = $1.barcode; //#30221
    $k[$j++] = $1.options; //#30221
    bwipp_qrcode(); //#30221
    var _p = $k[--$j]; //#30221
    $1[$k[--$j]] = _p; //#30221
    var _r = $1.args; //#30223
    $put(_r, "opt", $1.options); //#30223
    $k[$j++] = $1.args; //#30226
    if (!$1.dontdraw) { //#30226
        bwipp_renmatrix(); //#30226
    } //#30226
}

function bwipp_hibccodablockf() {
    var $1 = Object.create(bwipp_hibccodablockf.$ctx || (bwipp_hibccodablockf.$ctx = {})); //#30261
    $1.dontdraw = false; //#30264
    $1.validatecheck = false; //#30265
    $k[$j++] = $1; //#30267
    bwipp_processoptions(); //#30267
    $1.options = $k[--$j]; //#30267
    $1.barcode = $k[--$j]; //#30268
    if (!bwipp_hibccodablockf.$ctx._30277) { //#30277
        (function() { //#30277
            var $ctx = Object.create($1); //#30277
            $ctx.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#30274
            $ctx.charvals = new Map; //#30275
            for (var _2 = 0; _2 <= 42; _2 += 1) { //#30276
                $put($ctx.charvals, $geti($ctx.barchars, _2, 1), _2); //#30276
            } //#30276
            for (var _6 in $ctx) {
                $ctx.hasOwnProperty(_6) && (bwipp_hibccodablockf.$ctx[_6] = $ctx[_6]);
            } //#30276
            bwipp_hibccodablockf.$ctx._30277 = 1; //#30276
        })(); //#30276
    } //#30276
    for (var _9 = 0, _8 = $1.barcode.length - 1; _9 <= _8; _9 += 1) { //#30284
        var _D = $get($1.charvals, $geti($1.barcode, _9, 1)) !== undefined; //#30281
        if (!_D) { //#30283
            $k[$j++] = 'bwipp.codablockfBadCharacter#30282'; //#30282
            $k[$j++] = "HIBC Codablock F must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#30282
            bwipp_raiseerror(); //#30282
        } //#30282
    } //#30282
    $k[$j++] = 'barlen'; //#30286
    $k[$j++] = $1.barcode.length; //#30286
    if ($1.validatecheck) { //#30286
        var _G = $k[--$j]; //#30286
        $k[$j++] = $f(_G - 1); //#30286
    } //#30286
    var _H = $k[--$j]; //#30286
    $1[$k[--$j]] = _H; //#30286
    $1.checksum = 41; //#30288
    for (var _L = 0, _K = $f($1.barlen - 1); _L <= _K; _L += 1) { //#30292
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _L, 1)) + $1.checksum); //#30291
    } //#30291
    $1.checksum = $1.checksum % 43; //#30293
    if ($1.validatecheck) { //#30299
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#30297
            $k[$j++] = 'bwipp.hibccodablockfBadCheckDigit#30296'; //#30296
            $k[$j++] = "Incorrect HIBC Codablock F check digit provided"; //#30296
            bwipp_raiseerror(); //#30296
        } //#30296
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#30298
    } //#30298
    var _c = $1.barlen; //#30301
    var _d = $s($f(_c + 2)); //#30301
    $puti(_d, 1, $1.barcode); //#30301
    $1.barcode = _d; //#30301
    $put($1.barcode, 0, 43); //#30302
    $put($1.barcode, $f($1.barlen + 1), $get($1.barchars, $1.checksum)); //#30303
    $put($1.options, "dontdraw", true); //#30306
    $put($1.options, "validatecheck", false); //#30307
    $k[$j++] = 'args'; //#30308
    $k[$j++] = $1.barcode; //#30308
    $k[$j++] = $1.options; //#30308
    bwipp_codablockf(); //#30308
    var _p = $k[--$j]; //#30308
    $1[$k[--$j]] = _p; //#30308
    var _r = $1.args; //#30310
    $put(_r, "opt", $1.options); //#30310
    $k[$j++] = $1.args; //#30313
    if (!$1.dontdraw) { //#30313
        bwipp_renmatrix(); //#30313
    } //#30313
}

function bwipp_hibcazteccode() {
    var $1 = Object.create(bwipp_hibcazteccode.$ctx || (bwipp_hibcazteccode.$ctx = {})); //#30348
    $1.dontdraw = false; //#30351
    $1.validatecheck = false; //#30352
    $k[$j++] = $1; //#30354
    bwipp_processoptions(); //#30354
    $1.options = $k[--$j]; //#30354
    $1.barcode = $k[--$j]; //#30355
    if (!bwipp_hibcazteccode.$ctx._30364) { //#30364
        (function() { //#30364
            var $ctx = Object.create($1); //#30364
            $ctx.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#30361
            $ctx.charvals = new Map; //#30362
            for (var _2 = 0; _2 <= 42; _2 += 1) { //#30363
                $put($ctx.charvals, $geti($ctx.barchars, _2, 1), _2); //#30363
            } //#30363
            for (var _6 in $ctx) {
                $ctx.hasOwnProperty(_6) && (bwipp_hibcazteccode.$ctx[_6] = $ctx[_6]);
            } //#30363
            bwipp_hibcazteccode.$ctx._30364 = 1; //#30363
        })(); //#30363
    } //#30363
    for (var _9 = 0, _8 = $1.barcode.length - 1; _9 <= _8; _9 += 1) { //#30371
        var _D = $get($1.charvals, $geti($1.barcode, _9, 1)) !== undefined; //#30368
        if (!_D) { //#30370
            $k[$j++] = 'bwipp.hibcazteccodeBadCharacter#30369'; //#30369
            $k[$j++] = "HIBC Aztec Code must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#30369
            bwipp_raiseerror(); //#30369
        } //#30369
    } //#30369
    $k[$j++] = 'barlen'; //#30373
    $k[$j++] = $1.barcode.length; //#30373
    if ($1.validatecheck) { //#30373
        var _G = $k[--$j]; //#30373
        $k[$j++] = $f(_G - 1); //#30373
    } //#30373
    var _H = $k[--$j]; //#30373
    $1[$k[--$j]] = _H; //#30373
    $1.checksum = 41; //#30375
    for (var _L = 0, _K = $f($1.barlen - 1); _L <= _K; _L += 1) { //#30379
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _L, 1)) + $1.checksum); //#30378
    } //#30378
    $1.checksum = $1.checksum % 43; //#30380
    if ($1.validatecheck) { //#30386
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#30384
            $k[$j++] = 'bwipp.hibcazteccodeBadCheckDigit#30383'; //#30383
            $k[$j++] = "Incorrect HIBC Aztec Code check digit provided"; //#30383
            bwipp_raiseerror(); //#30383
        } //#30383
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#30385
    } //#30385
    var _d = $s($f($1.barlen + 2)); //#30388
    $puti(_d, 1, $1.barcode); //#30388
    $1.barcode = _d; //#30388
    $put($1.barcode, 0, 43); //#30389
    $put($1.barcode, $f($1.barlen + 1), $get($1.barchars, $1.checksum)); //#30390
    $put($1.options, "dontdraw", true); //#30393
    $put($1.options, "validatecheck", false); //#30394
    $k[$j++] = 'args'; //#30395
    $k[$j++] = $1.barcode; //#30395
    $k[$j++] = $1.options; //#30395
    bwipp_azteccode(); //#30395
    var _p = $k[--$j]; //#30395
    $1[$k[--$j]] = _p; //#30395
    var _r = $1.args; //#30397
    $put(_r, "opt", $1.options); //#30397
    $k[$j++] = $1.args; //#30400
    if (!$1.dontdraw) { //#30400
        bwipp_renmatrix(); //#30400
    } //#30400
}

function bwipp_channelcode() {
    var $1 = Object.create(bwipp_channelcode.$ctx || (bwipp_channelcode.$ctx = {})); //#30432
    $1.options = $k[--$j]; //#30434
    $1.barcode = $k[--$j]; //#30435
    $1.dontdraw = false; //#30437
    $1.shortfinder = false; //#30438
    $1.includetext = false; //#30439
    $1.includecheck = false; //#30440
    $1.height = 1; //#30441
    $forall($1.options, function() { //#30452
        var _3 = $k[--$j]; //#30452
        $1[$k[--$j]] = _3; //#30452
    }); //#30452
    $1.height = +$1.height; //#30454
    if (($1.barcode.length < 2) || ($1.barcode.length > 7)) { //#30459
        $k[$j++] = 'bwipp.channelcodeBadLength#30458'; //#30458
        $k[$j++] = "Channel Code must be 2 to 7 digits"; //#30458
        bwipp_raiseerror(); //#30458
    } //#30458
    $forall($1.barcode, function() { //#30464
        var _9 = $k[--$j]; //#30461
        if ((_9 < 48) || (_9 > 57)) { //#30463
            $k[$j++] = 'bwipp.channelcodeBadCharacter#30462'; //#30462
            $k[$j++] = "Channel Code must contain only digits"; //#30462
            bwipp_raiseerror(); //#30462
        } //#30462
    }); //#30462
    if ($cvi($1.barcode) > $get($a([26, 292, 3493, 44072, 576688, 7742862]), $1.barcode.length - 2)) { //#30467
        $k[$j++] = 'bwipp.channelcodeTooBig#30466'; //#30466
        $k[$j++] = "The Channel Code value is too big for the number of channels"; //#30466
        bwipp_raiseerror(); //#30466
    } //#30466
    $1.nextb = function() {
        var _E = $k[--$j]; //#30470
        var _N = (($f($get($1.s, _E) + ($f($get($1.b, $f(_E - 1)) + $f($get($1.b, $f(_E - 2)) + $get($1.s, $f(_E - 1))))))) > 4) ? 1 : 2; //#30475
        $k[$j++] = _E; //#30491
        $k[$j++] = _N; //#30491
        if (_E < $f($1.chan + 2)) { //#30489
            var _P = $k[--$j]; //#30477
            var _Q = $k[--$j]; //#30477
            var _R = $k[--$j]; //#30477
            $k[$j++] = _R; //#30480
            $k[$j++] = _Q; //#30480
            $k[$j++] = _P; //#30480
            for (var _T = _P, _S = _R; _T <= _S; _T += 1) { //#30480
                var _V = $k[--$j]; //#30478
                var _W = $k[--$j]; //#30478
                $put($1.b, _W, _T); //#30478
                var _X = $k[--$j]; //#30479
                var _Y = $k[--$j]; //#30479
                $k[$j++] = _Y; //#30479
                $k[$j++] = _X; //#30479
                $k[$j++] = _W; //#30479
                $k[$j++] = _V; //#30479
                $k[$j++] = $f($f(_X - _T) + 1); //#30479
                $k[$j++] = _Y; //#30479
                $k[$j++] = $f(_W + 1); //#30479
                $1.nexts(); //#30479
            } //#30479
        } else { //#30489
            var _Z = $k[--$j]; //#30482
            var _a = $k[--$j]; //#30482
            var _b = $k[--$j]; //#30482
            $k[$j++] = _b; //#30490
            $k[$j++] = _a; //#30490
            $k[$j++] = _Z; //#30490
            if ($le(_Z, _b)) { //#30490
                var _d = $k[--$j]; //#30483
                var _e = $k[--$j]; //#30483
                var _f = $k[--$j]; //#30483
                $put($1.b, _e, _f); //#30483
                $k[$j++] = _f; //#30488
                $k[$j++] = _e; //#30488
                $k[$j++] = _d; //#30488
                if ($1.value == $1.target) { //#30488
                    $k[$j++] = Infinity; //#30486
                    for (var _i = 3; _i <= 10; _i += 1) { //#30486
                        $k[$j++] = $get($1.s, _i); //#30486
                        $k[$j++] = $get($1.b, _i); //#30486
                    } //#30486
                    $1.out = $geti($a(), 0, $1.chan * 2); //#30487
                } //#30487
                $1.value = $1.value + 1; //#30489
            } //#30489
        } //#30489
        $j -= 4; //#30492
    }; //#30493
    $1.nexts = function() {
        var _r = $k[--$j]; //#30496
        $k[$j++] = _r; //#30496
        if (_r < $f($1.chan + 2)) { //#30496
            $k[$j++] = 1; //#30496
        } else { //#30496
            var _t = $k[--$j]; //#30496
            var _u = $k[--$j]; //#30496
            $k[$j++] = _u; //#30496
            $k[$j++] = _t; //#30496
            $k[$j++] = _u; //#30496
        } //#30496
        var _v = $k[--$j]; //#30496
        var _w = $k[--$j]; //#30496
        var _x = $k[--$j]; //#30496
        $k[$j++] = _x; //#30499
        $k[$j++] = _w; //#30499
        for (var _z = _v, _y = _x; _z <= _y; _z += 1) { //#30499
            var _11 = $k[--$j]; //#30497
            $put($1.s, _11, _z); //#30497
            var _12 = $k[--$j]; //#30498
            var _13 = $k[--$j]; //#30498
            $k[$j++] = _13; //#30498
            $k[$j++] = _12; //#30498
            $k[$j++] = _11; //#30498
            $k[$j++] = $f($f(_12 - _z) + 1); //#30498
            $k[$j++] = _13; //#30498
            $k[$j++] = _11; //#30498
            $1.nextb(); //#30498
        } //#30498
        $j -= 3; //#30500
    }; //#30501
    $1.encode = function() {
        $1.chan = $k[--$j]; //#30504
        $1.target = $k[--$j]; //#30505
        $1.value = 0; //#30506
        $1.out = -1; //#30507
        $1.b = $a([1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]); //#30508
        $1.s = $a([0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]); //#30509
        var _18 = $1.chan; //#30510
        $k[$j++] = _18; //#30510
        $k[$j++] = _18; //#30510
        $k[$j++] = 3; //#30510
        $1.nexts(); //#30510
        $k[$j++] = $1.out; //#30511
    }; //#30512
    $1.barlen = $1.barcode.length; //#30514
    $k[$j++] = 'finder'; //#30517
    if ($1.shortfinder) { //#30517
        $k[$j++] = $a([1, 1, 1, 1, 1]); //#30517
    } else { //#30517
        $k[$j++] = $a([1, 1, 1, 1, 1, 1, 1, 1, 1]); //#30517
    } //#30517
    var _1E = $k[--$j]; //#30517
    $1[$k[--$j]] = _1E; //#30517
    $k[$j++] = 'data'; //#30520
    $k[$j++] = $cvi($1.barcode); //#30520
    $k[$j++] = $1.barlen + 1; //#30520
    $1.encode(); //#30520
    var _1I = $k[--$j]; //#30520
    $1[$k[--$j]] = _1I; //#30520
    $1.check = $a([]); //#30523
    if ($1.includecheck) { //#30539
        $1.mod23 = $get($a([$a([]), $a([]), $a([13, 12, 4, 9, 3, 1]), $a([13, 2, 12, 3, 18, 16, 4, 1]), $a([11, 16, 17, 8, 20, 4, 10, 2, 5, 1]), $a([1, 4, 16, 18, 3, 12, 2, 8, 9, 13, 6, 1]), $a([20, 16, 22, 13, 15, 12, 5, 4, 8, 9, 21, 3, 7, 1]), $a([2, 6, 18, 8, 1, 3, 9, 4, 12, 13, 16, 2, 6, 18, 8, 1])]), $1.barlen); //#30533
        $k[$j++] = 0; //#30537
        for (var _1Z = 0, _1Y = $1.data.length - 1; _1Z <= _1Y; _1Z += 1) { //#30537
            var _1e = $k[--$j]; //#30536
            $k[$j++] = $f(_1e + ($f($get($1.data, _1Z) - 1) * $get($1.mod23, _1Z))); //#30536
        } //#30536
        var _1f = $k[--$j]; //#30538
        $k[$j++] = _1f % 23; //#30538
        $k[$j++] = 3; //#30538
        $1.encode(); //#30538
        $1.check = $k[--$j]; //#30538
    } //#30538
    $k[$j++] = Infinity; //#30545
    $aload($1.finder); //#30543
    $aload($1.data); //#30544
    $aload($1.check); //#30545
    $1.sbs = $a(); //#30545
    $1.txt = $a($1.barlen); //#30549
    for (var _1p = 0, _1o = $1.barlen - 1; _1p <= _1o; _1p += 1) { //#30553
        $1.i = _1p; //#30551
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); //#30552
    } //#30552
    $k[$j++] = Infinity; //#30563
    var _1w = $1.sbs; //#30558
    $k[$j++] = Infinity; //#30559
    for (var _1y = 0, _1z = ~~(($1.sbs.length + 1) / 2); _1y < _1z; _1y++) { //#30559
        $k[$j++] = $1.height; //#30559
    } //#30559
    var _21 = $a(); //#30559
    $k[$j++] = Infinity; //#30560
    for (var _23 = 0, _24 = ~~(($1.sbs.length + 1) / 2); _23 < _24; _23++) { //#30560
        $k[$j++] = 0; //#30560
    } //#30560
    var _25 = $a(); //#30560
    $k[$j++] = 'ren'; //#30563
    $k[$j++] = bwipp_renlinear; //#30563
    $k[$j++] = 'sbs'; //#30563
    $k[$j++] = _1w; //#30563
    $k[$j++] = 'bhs'; //#30563
    $k[$j++] = _21; //#30563
    $k[$j++] = 'bbs'; //#30563
    $k[$j++] = _25; //#30563
    $k[$j++] = 'txt'; //#30563
    $k[$j++] = $1.txt; //#30563
    $k[$j++] = 'textxalign'; //#30563
    $k[$j++] = "center"; //#30563
    $k[$j++] = 'opt'; //#30563
    $k[$j++] = $1.options; //#30563
    var _28 = $d(); //#30563
    $k[$j++] = _28; //#30566
    if (!$1.dontdraw) { //#30566
        bwipp_renlinear(); //#30566
    } //#30566
}

function bwipp_renlinear() {
    if ($0.bwipjs_dontdraw) { //#30593
        return; //#30593
    } //#30593
    var $1 = Object.create(bwipp_renlinear.$ctx || (bwipp_renlinear.$ctx = {})); //#30594
    $1.args = $k[--$j]; //#30596
    $1.sbs = $a([]); //#30599
    $1.bhs = $a([]); //#30600
    $1.bbs = $a([]); //#30601
    $1.txt = $a([]); //#30602
    $1.barcolor = "unset"; //#30603
    $1.includetext = false; //#30604
    $1.textcolor = "unset"; //#30605
    $1.textxalign = "unset"; //#30606
    $1.textyalign = "unset"; //#30607
    $1.textfont = "OCR-B"; //#30608
    $1.textsize = 10; //#30609
    $1.textxoffset = 0; //#30610
    $1.textyoffset = 0; //#30611
    $1.textgaps = 0; //#30612
    $1.alttext = ""; //#30613
    $1.bordercolor = "unset"; //#30614
    $1.backgroundcolor = "unset"; //#30615
    $1.inkspread = 0; //#30616
    $1.width = 0; //#30617
    $1.barratio = 1; //#30618
    $1.spaceratio = 1; //#30619
    $1.showborder = false; //#30620
    $1.borderleft = 10; //#30621
    $1.borderright = 10; //#30622
    $1.bordertop = 1; //#30623
    $1.borderbottom = 1; //#30624
    $1.borderwidth = 0.5; //#30625
    $1.guardwhitespace = false; //#30626
    $1.guardleftpos = 0; //#30627
    $1.guardleftypos = 0; //#30628
    $1.guardrightpos = 0; //#30629
    $1.guardrightypos = 0; //#30630
    $1.guardwidth = 7; //#30631
    $1.guardheight = 7; //#30632
    $forall($1.args, function() { //#30635
        var _7 = $k[--$j]; //#30635
        $1[$k[--$j]] = _7; //#30635
    }); //#30635
    var _9 = $1.opt; //#30636
    for (var _E = _9.size, _D = _9.keys(), _C = 0; _C < _E; _C++) { //#30636
        var _A = _D.next().value; //#30636
        $1[_A] = _9.get(_A); //#30636
    } //#30636
    $1.barcolor = "" + $1.barcolor; //#30638
    $1.textcolor = "" + $1.textcolor; //#30639
    $1.textxalign = "" + $1.textxalign; //#30640
    $1.textyalign = "" + $1.textyalign; //#30641
    $1.textfont = "" + $1.textfont; //#30642
    $1.textsize = +$1.textsize; //#30643
    $1.textxoffset = +$1.textxoffset; //#30644
    $1.textyoffset = +$1.textyoffset; //#30645
    $1.textgaps = +$1.textgaps; //#30646
    $1.alttext = "" + $1.alttext; //#30647
    $1.bordercolor = "" + $1.bordercolor; //#30648
    $1.backgroundcolor = "" + $1.backgroundcolor; //#30649
    $1.inkspread = +$1.inkspread; //#30650
    $1.width = +$1.width; //#30651
    $1.barratio = +$1.barratio; //#30652
    $1.spaceratio = +$1.spaceratio; //#30653
    $1.borderleft = +$1.borderleft; //#30654
    $1.borderright = +$1.borderright; //#30655
    $1.bordertop = +$1.bordertop; //#30656
    $1.borderbottom = +$1.borderbottom; //#30657
    $1.borderwidth = +$1.borderwidth; //#30658
    $1.guardleftpos = +$1.guardleftpos; //#30659
    $1.guardleftypos = +$1.guardleftypos; //#30660
    $1.guardrightpos = +$1.guardrightpos; //#30661
    $1.guardrightypos = +$1.guardrightypos; //#30662
    $1.guardwidth = +$1.guardwidth; //#30663
    $1.guardheight = +$1.guardheight; //#30664
    $1.bars = $a(~~(($1.sbs.length + 1) / 2)); //#30667
    $1.x = 0; //#30668
    $1.maxh = 0; //#30668
    for (var _k = 0, _j = ((~~(($1.sbs.length + 1) / 2)) * 2) - 2; _k <= _j; _k += 1) { //#30687
        $1.i = _k; //#30670
        if (($1.i % 2) == 0) { //#30684
            $1.d = $f(($f(($get($1.sbs, $1.i) * $1.barratio) - $1.barratio)) + 1); //#30672
            if ($get($1.sbs, $1.i) != 0) { //#30681
                $1.h = $get($1.bhs, ~~($1.i / 2)) * 72; //#30674
                $1.c = $f(($1.d / 2) + $1.x); //#30675
                $1.y = $get($1.bbs, ~~($1.i / 2)) * 72; //#30676
                $1.w = $f($1.d - $1.inkspread); //#30677
                $put($1.bars, ~~($1.i / 2), $a([$1.h, $1.c, $1.y, $1.w])); //#30678
                if ($f($1.h + $1.y) > $1.maxh) { //#30679
                    $1.maxh = $f($1.h + $1.y); //#30679
                } //#30679
            } else { //#30681
                $put($1.bars, ~~($1.i / 2), -1); //#30681
            } //#30681
        } else { //#30684
            $1.d = $f(($f(($get($1.sbs, $1.i) * $1.spaceratio) - $1.spaceratio)) + 1); //#30684
        } //#30684
        $1.x = $f($1.x + $1.d); //#30686
    } //#30686
    $$.save(); //#30689
    var _1P = $$.currpos(); //#30691
    $$.translate(_1P.x, _1P.y); //#30691
    if ($1.width != 0) { //#30696
        $$.scale(($1.width * 72) / $1.x, 1); //#30695
    } //#30695
    $$.newpath(); //#30699
    $$.moveto(-$1.borderleft, -$1.borderbottom); //#30700
    $$.rlineto($f($f($1.x + $1.borderleft) + $1.borderright), 0); //#30701
    $$.rlineto(0, $f($f($1.maxh + $1.borderbottom) + $1.bordertop)); //#30702
    $$.rlineto(-($f($f($1.x + $1.borderleft) + $1.borderright)), 0); //#30703
    $$.rlineto(0, -($f($f($1.maxh + $1.borderbottom) + $1.bordertop))); //#30704
    $$.closepath(); //#30705
    if ($1.showborder) { //#30713
        $$.save(); //#30709
        if ($ne($1.bordercolor, "unset")) { //#30710
            $$.setcolor($1.bordercolor); //#30710
        } //#30710
        $$.setlinewidth($1.borderwidth); //#30711
        $$.stroke(); //#30711
        $$.restore(); //#30712
    } //#30712
    $$.save(); //#30716
    if ($ne($1.barcolor, "unset")) { //#30718
        $$.setcolor($1.barcolor); //#30718
    } //#30718
    var _1n = $1.bars; //#30719
    for (var _1o = 0, _1p = _1n.length; _1o < _1p; _1o++) { //#30725
        var _1q = $get(_1n, _1o); //#30725
        $k[$j++] = _1q; //#30724
        if (_1q != -1) { //#30723
            $aload($k[--$j]); //#30721
            $$.newpath(); //#30721
            $$.setlinewidth($k[--$j]); //#30721
            var _1t = $k[--$j]; //#30721
            $$.moveto($k[--$j], _1t); //#30721
            $$.rlineto(0, $k[--$j]); //#30721
            $$.stroke(); //#30721
        } else { //#30723
            $j--; //#30723
        } //#30723
    } //#30723
    $$.restore(); //#30726
    if ($ne($1.textcolor, "unset")) { //#30729
        $$.setcolor($1.textcolor); //#30729
    } //#30729
    if ($1.includetext) { //#30786
        if (($eq($1.textxalign, "unset") && $eq($1.textyalign, "unset")) && $eq($1.alttext, "")) { //#30784
            $1.s = 0; //#30732
            $1.fn = ""; //#30732
            var _22 = $1.txt; //#30733
            for (var _23 = 0, _24 = _22.length; _23 < _24; _23++) { //#30742
                $forall($get(_22, _23)); //#30734
                var _26 = $k[--$j]; //#30735
                var _27 = $k[--$j]; //#30735
                $k[$j++] = _27; //#30740
                $k[$j++] = _26; //#30740
                if ((_26 != $1.s) || $ne(_27, $1.fn)) { //#30739
                    var _2A = $k[--$j]; //#30736
                    var _2B = $k[--$j]; //#30736
                    $1.s = _2A; //#30736
                    $1.fn = _2B; //#30736
                    $$.selectfont(_2B, _2A); //#30737
                } else { //#30739
                    $j -= 2; //#30739
                } //#30739
                var _2C = $k[--$j]; //#30741
                $$.moveto($k[--$j], _2C); //#30741
                $$.show($k[--$j], 0, 0); //#30741
            } //#30741
        } else { //#30784
            $$.selectfont($1.textfont, $1.textsize); //#30744
            if ($eq($1.alttext, "")) { //#30750
                $k[$j++] = Infinity; //#30746
                var _2I = $1.txt; //#30746
                for (var _2J = 0, _2K = _2I.length; _2J < _2K; _2J++) { //#30746
                    $forall($get($get(_2I, _2J), 0)); //#30746
                } //#30746
                $1.txt = $a(); //#30746
                $1.tstr = $s($1.txt.length); //#30747
                for (var _2S = 0, _2R = $1.txt.length - 1; _2S <= _2R; _2S += 1) { //#30748
                    $put($1.tstr, _2S, $get($1.txt, _2S)); //#30748
                } //#30748
            } else { //#30750
                $1.tstr = $1.alttext; //#30750
            } //#30750
            if ($1.tstr.length == 0) { //#30760
                $k[$j++] = 0; //#30755
            } else { //#30760
                $$.save(); //#30757
                $$.newpath(); //#30758
                $$.moveto(0, 0); //#30758
                $$.charpath("0", false); //#30758
                var _2Y = $$.pathbbox(); //#30758
                $$.restore(); //#30760
                $k[$j++] = _2Y.ury; //#30760
            } //#30760
            $1.textascent = $k[--$j]; //#30769
            var _2b = $$.stringwidth($1.tstr); //#30770
            $1.textwidth = $f(_2b.w + (($1.tstr.length - 1) * $1.textgaps)); //#30770
            $1.textxpos = $f($1.textxoffset + ($f($1.x - $1.textwidth) / 2)); //#30772
            if ($eq($1.textxalign, "left")) { //#30773
                $1.textxpos = $1.textxoffset; //#30773
            } //#30773
            if ($eq($1.textxalign, "right")) { //#30774
                $1.textxpos = $f($f($1.x - $1.textxoffset) - $1.textwidth); //#30774
            } //#30774
            if ($eq($1.textxalign, "offleft")) { //#30775
                $1.textxpos = -$f($1.textwidth + $1.textxoffset); //#30775
            } //#30775
            if ($eq($1.textxalign, "offright")) { //#30776
                $1.textxpos = $f($1.x + $1.textxoffset); //#30776
            } //#30776
            if ($eq($1.textxalign, "justify") && ($1.textwidth < $1.x)) { //#30780
                $1.textxpos = 0; //#30778
                $1.textgaps = $f($1.x - $1.textwidth) / ($1.tstr.length - 1); //#30779
            } //#30779
            $1.textypos = -($f($f($1.textyoffset + $1.textascent) + 1)); //#30781
            if ($eq($1.textyalign, "above")) { //#30782
                $1.textypos = $f($f($1.textyoffset + $1.maxh) + 1); //#30782
            } //#30782
            if ($eq($1.textyalign, "center")) { //#30783
                $1.textypos = $f($1.textyoffset + ($f($1.maxh - $1.textascent) / 2)); //#30783
            } //#30783
            $$.moveto($1.textxpos, $1.textypos); //#30784
            $$.show($1.tstr, $1.textgaps, 0); //#30784
        } //#30784
    } //#30784
    if ($1.guardwhitespace) { //#30799
        $$.selectfont("OCR-B", $1.guardheight * 2); //#30790
        if ($1.guardleftpos != 0) { //#30794
            $$.moveto($f((-$1.guardleftpos) - 1), $f(($f($1.guardleftypos - ($1.guardheight / 2))) - 1.5)); //#30792
            $$.show("<", 0, 0); //#30793
        } //#30793
        if ($1.guardrightpos != 0) { //#30798
            $$.moveto($f(($f($f($1.guardrightpos + $1.x) - $1.guardwidth)) + 1), $f(($f($1.guardrightypos - ($1.guardheight / 2))) - 1.5)); //#30796
            $$.show(">", 0, 0); //#30797
        } //#30797
    } //#30797
    $$.restore(); //#30801
}

function bwipp_renmaximatrix() {
    if ($0.bwipjs_dontdraw) { //#30821
        return; //#30821
    } //#30821
    var $1 = Object.create(bwipp_renmaximatrix.$ctx || (bwipp_renmaximatrix.$ctx = {})); //#30823
    $1.args = $k[--$j]; //#30825
    $1.barcolor = "unset"; //#30828
    $1.backgroundcolor = "unset"; //#30829
    $forall($1.args, function() { //#30832
        var _3 = $k[--$j]; //#30832
        $1[$k[--$j]] = _3; //#30832
    }); //#30832
    var _5 = $1.opt; //#30833
    for (var _A = _5.size, _9 = _5.keys(), _8 = 0; _8 < _A; _8++) { //#30833
        var _6 = _9.next().value; //#30833
        $1[_6] = _5.get(_6); //#30833
    } //#30833
    $1.barcolor = "" + $1.barcolor; //#30835
    $1.backgroundcolor = "" + $1.backgroundcolor; //#30836
    $$.save(); //#30838
    if ($ne($1.barcolor, "unset")) { //#30840
        $$.setcolor($1.barcolor); //#30840
    } //#30840
    $$.maxicode($1.pixs); //#30841
    $$.restore(); //#30843
}
// bwip-js/barcode-ftr.js
//
// This code is injected below the cross-compiled barcode.js.

// `encoder` is one of the bwipp_ functions
function bwipp_encode(bwipjs, encoder, text, opts, dontdraw) {
    if (typeof text !== 'string') {
        throw new Error('bwipp.typeError: barcode text not a string (' +
            text + ')');
    }
    opts = opts || {};
    if (typeof opts === 'string') {
        var tmp = opts.split(' ');
        opts = {};
        for (var i = 0; i < tmp.length; i++) {
            if (!tmp[i]) {
                continue;
            }
            var eq = tmp[i].indexOf('=');
            if (eq == -1) {
                opts[tmp[i]] = true;
            } else {
                opts[tmp[i].substr(0, eq)] = tmp[i].substr(eq + 1);
            }
        }
    } else if (typeof opts !== 'object' || opts.constructor !== Object) {
        throw new Error('bwipp.typeError: options not an object');
    }

    // Convert utf-16 to utf-8 but leave binary (8-bit) strings untouched.
    if (/[\u0100-\uffff]/.test(text)) {
        text = unescape(encodeURIComponent(text));
    }

    // Don't draw? (See file runtest)
    $0.bwipjs_dontdraw = opts.dontdraw || dontdraw || false;

    // Convert opts to a Map
    var map = new Map;
    for (var id in opts) {
        if (opts.hasOwnProperty(id)) {
            map.set(id, opts[id]);
        }
    }

    // Invoke the encoder
    $$ = bwipjs;
    $k = [text, map];
    $j = 2;
    encoder();

    // Return what is left on the stack.  This branch should only be taken
    // when running with the dontdraw option.
    if ($j) {
        return $k.splice(0, $j);
    }

    return true;
}

function bwipp_lookup(symbol) {
    if (!symbol) {
        throw new Error("bwipp.undefinedEncoder: bcid is not defined");
    }
    switch (symbol.replace(/-/g, "_")) {
        case "auspost":
            return bwipp_auspost;
        case "azteccode":
            return bwipp_azteccode;
        case "azteccodecompact":
            return bwipp_azteccodecompact;
        case "aztecrune":
            return bwipp_aztecrune;
        case "bc412":
            return bwipp_bc412;
        case "channelcode":
            return bwipp_channelcode;
        case "codablockf":
            return bwipp_codablockf;
        case "code11":
            return bwipp_code11;
        case "code128":
            return bwipp_code128;
        case "code16k":
            return bwipp_code16k;
        case "code2of5":
            return bwipp_code2of5;
        case "code32":
            return bwipp_code32;
        case "code39":
            return bwipp_code39;
        case "code39ext":
            return bwipp_code39ext;
        case "code49":
            return bwipp_code49;
        case "code93":
            return bwipp_code93;
        case "code93ext":
            return bwipp_code93ext;
        case "codeone":
            return bwipp_codeone;
        case "coop2of5":
            return bwipp_coop2of5;
        case "daft":
            return bwipp_daft;
        case "databarexpanded":
            return bwipp_databarexpanded;
        case "databarexpandedcomposite":
            return bwipp_databarexpandedcomposite;
        case "databarexpandedstacked":
            return bwipp_databarexpandedstacked;
        case "databarexpandedstackedcomposite":
            return bwipp_databarexpandedstackedcomposite;
        case "databarlimited":
            return bwipp_databarlimited;
        case "databarlimitedcomposite":
            return bwipp_databarlimitedcomposite;
        case "databaromni":
            return bwipp_databaromni;
        case "databaromnicomposite":
            return bwipp_databaromnicomposite;
        case "databarstacked":
            return bwipp_databarstacked;
        case "databarstackedcomposite":
            return bwipp_databarstackedcomposite;
        case "databarstackedomni":
            return bwipp_databarstackedomni;
        case "databarstackedomnicomposite":
            return bwipp_databarstackedomnicomposite;
        case "databartruncated":
            return bwipp_databartruncated;
        case "databartruncatedcomposite":
            return bwipp_databartruncatedcomposite;
        case "datalogic2of5":
            return bwipp_datalogic2of5;
        case "datamatrix":
            return bwipp_datamatrix;
        case "datamatrixrectangular":
            return bwipp_datamatrixrectangular;
        case "datamatrixrectangularextension":
            return bwipp_datamatrixrectangularextension;
        case "dotcode":
            return bwipp_dotcode;
        case "ean13":
            return bwipp_ean13;
        case "ean13composite":
            return bwipp_ean13composite;
        case "ean14":
            return bwipp_ean14;
        case "ean2":
            return bwipp_ean2;
        case "ean5":
            return bwipp_ean5;
        case "ean8":
            return bwipp_ean8;
        case "ean8composite":
            return bwipp_ean8composite;
        case "flattermarken":
            return bwipp_flattermarken;
        case "gs1_128":
            return bwipp_gs1_128;
        case "gs1_128composite":
            return bwipp_gs1_128composite;
        case "gs1_cc":
            return bwipp_gs1_cc;
        case "gs1datamatrix":
            return bwipp_gs1datamatrix;
        case "gs1datamatrixrectangular":
            return bwipp_gs1datamatrixrectangular;
        case "gs1dldatamatrix":
            return bwipp_gs1dldatamatrix;
        case "gs1dlqrcode":
            return bwipp_gs1dlqrcode;
        case "gs1dotcode":
            return bwipp_gs1dotcode;
        case "gs1northamericancoupon":
            return bwipp_gs1northamericancoupon;
        case "gs1qrcode":
            return bwipp_gs1qrcode;
        case "hanxin":
            return bwipp_hanxin;
        case "hibcazteccode":
            return bwipp_hibcazteccode;
        case "hibccodablockf":
            return bwipp_hibccodablockf;
        case "hibccode128":
            return bwipp_hibccode128;
        case "hibccode39":
            return bwipp_hibccode39;
        case "hibcdatamatrix":
            return bwipp_hibcdatamatrix;
        case "hibcdatamatrixrectangular":
            return bwipp_hibcdatamatrixrectangular;
        case "hibcmicropdf417":
            return bwipp_hibcmicropdf417;
        case "hibcpdf417":
            return bwipp_hibcpdf417;
        case "hibcqrcode":
            return bwipp_hibcqrcode;
        case "iata2of5":
            return bwipp_iata2of5;
        case "identcode":
            return bwipp_identcode;
        case "industrial2of5":
            return bwipp_industrial2of5;
        case "interleaved2of5":
            return bwipp_interleaved2of5;
        case "isbn":
            return bwipp_isbn;
        case "ismn":
            return bwipp_ismn;
        case "issn":
            return bwipp_issn;
        case "itf14":
            return bwipp_itf14;
        case "jabcode":
            return bwipp_jabcode;
        case "japanpost":
            return bwipp_japanpost;
        case "kix":
            return bwipp_kix;
        case "leitcode":
            return bwipp_leitcode;
        case "mailmark":
            return bwipp_mailmark;
        case "mands":
            return bwipp_mands;
        case "matrix2of5":
            return bwipp_matrix2of5;
        case "maxicode":
            return bwipp_maxicode;
        case "micropdf417":
            return bwipp_micropdf417;
        case "microqrcode":
            return bwipp_microqrcode;
        case "msi":
            return bwipp_msi;
        case "onecode":
            return bwipp_onecode;
        case "pdf417":
            return bwipp_pdf417;
        case "pdf417compact":
            return bwipp_pdf417compact;
        case "pharmacode":
            return bwipp_pharmacode;
        case "pharmacode2":
            return bwipp_pharmacode2;
        case "planet":
            return bwipp_planet;
        case "plessey":
            return bwipp_plessey;
        case "posicode":
            return bwipp_posicode;
        case "postnet":
            return bwipp_postnet;
        case "pzn":
            return bwipp_pzn;
        case "qrcode":
            return bwipp_qrcode;
        case "rationalizedCodabar":
            return bwipp_rationalizedCodabar;
        case "raw":
            return bwipp_raw;
        case "rectangularmicroqrcode":
            return bwipp_rectangularmicroqrcode;
        case "royalmail":
            return bwipp_royalmail;
        case "sscc18":
            return bwipp_sscc18;
        case "swissqrcode":
            return bwipp_swissqrcode;
        case "symbol":
            return bwipp_symbol;
        case "telepen":
            return bwipp_telepen;
        case "telepennumeric":
            return bwipp_telepennumeric;
        case "ultracode":
            return bwipp_ultracode;
        case "upca":
            return bwipp_upca;
        case "upcacomposite":
            return bwipp_upcacomposite;
        case "upce":
            return bwipp_upce;
        case "upcecomposite":
            return bwipp_upcecomposite;
    }
    throw new Error("bwipp.unknownEncoder: unknown encoder name: " + symbol);
}
var BWIPP_VERSION = '2023-02-16';
// file : bwipjs.js
//
// Graphics-context interface to the BWIPP cross-compiled code

var BWIPJS = (function() {

// Math.floor(), etc. are notoriously slow.  Caching seems to help.
var floor = Math.floor;
var round = Math.round;
var ceil  = Math.ceil;
var min	  = Math.min;
var max	  = Math.max;

function BWIPJS(drawing) {
	if (this.constructor !== BWIPJS) {
		return new BWIPJS(drawing);
	}
	this.gstk	 = [];		// Graphics save/restore stack
	this.cmds	 = [];		// Graphics primitives to replay when rendering
	this.drawing = drawing;	// Drawing interface

	this.reset();

	// Drawing surface bounding box
	this.minx = this.miny = Infinity;
	this.maxx = this.maxy = -Infinity;
};

// All graphics state that must be saved/restored is given a prefix of g_
BWIPJS.prototype.reset = function() {
	// Current Transform Matrix - since we don't do rotation, we can fake
	// the matrix math
	this.g_tdx	= 0;		// CTM x-offset
	this.g_tdy	= 0;		// CTM y-offset
	this.g_tsx	= 1;		// CTM x-scale factor
	this.g_tsy	= 1;		// CTM y-scale factor

	this.g_posx	= 0;		// current x position
	this.g_posy	= 0;		// current y position
	this.g_penw	= 1;		// current line/pen width
	this.g_path	= [];		// current path
	this.g_font	= null;		// current font object
	this.g_rgb  = [0,0,0];	// current color (black)
    this.g_clip = false;    // clip region active
};
BWIPJS.prototype.save = function() {
	// clone all g_ properties
	var ctx = {};
	for (var id in this) {
		if (id.indexOf('g_') == 0) {
			ctx[id] = clone(this[id]);
		}
	}
	this.gstk.push(ctx);

	// Perform a deep clone of the graphics state properties
	function clone(v) {
		if (v instanceof Array) {
			var t = [];
			for (var i = 0; i < v.length; i++)
				t[i] = clone(v[i]);
			return t;
		}
		if (v instanceof Object) {
			var t = {};
			for (var id in v)
				t[id] = clone(v[id]);
			return t;
		}
		return v;
	}
};
BWIPJS.prototype.restore = function() {
	if (!this.gstk.length) {
		throw new Error('grestore: stack underflow');
	}
	var ctx  = this.gstk.pop();
    var self = this;
    if (this.g_clip && !ctx.g_clip) {
        this.cmds.push(function() {
                self.drawing.unclip();
            });
    }
	for (var id in ctx) {
		this[id] = ctx[id];
	}
};
// Per the postscript spec:
//	As discussed in Section 4.4.1, Current Path, points entered into a path
//	are immediately converted to device coordinates by the current
//	transformation matrix (CTM); subsequent modifications to the CTM do not
//	affect existing points.  `currentpoint` computes the user space
//	coordinates corresponding to the current point according to the current
//	value of the CTM. Thus, if a current point is set and then the CTM is
//	changed, the coordinates returned by currentpoint will be different
//	from those that were originally specified for the point. 
BWIPJS.prototype.currpos = function() {
	return { x:(this.g_posx-this.g_tdx)/this.g_tsx,
			 y:(this.g_posy-this.g_tdy)/this.g_tsy
		};
};
BWIPJS.prototype.currfont = function() {
	return this.g_font;
};
BWIPJS.prototype.translate = function(x, y) {
	this.g_tdx = this.g_tsx * x;
	this.g_tdy = this.g_tsy * y;
};
BWIPJS.prototype.scale = function(x, y) {
	this.g_tsx *= x;
	this.g_tsy *= y;
	var sxy = this.drawing.scale(this.g_tsx, this.g_tsy);
	if (sxy && sxy[0] && sxy[1]) {
		this.g_tsx = sxy[0];
		this.g_tsy = sxy[1];
	}
};
BWIPJS.prototype.setlinewidth = function(w) {
	this.g_penw = w;
};
BWIPJS.prototype.selectfont = function(f, z) {
	this.g_font = { FontName:this.jsstring(f), FontSize:+z };
};
BWIPJS.prototype.getfont = function() {
	return this.g_font.FontName;
};
// Special function for converting a Uint8Array string to string.
BWIPJS.prototype.jsstring = function(s) {
	if (s instanceof Uint8Array) {
		// Postscript (like C) treats nul-char as end of string.
		for (var i = 0, l = s.length; i < l && s[i]; i++);
		if (i < l) {
			return String.fromCharCode.apply(null,s.subarray(0, i));
		}
		return String.fromCharCode.apply(null,s)
	}
	return ''+s;
};
// Special function to replace setanycolor in BWIPP
// Takes a string of hex digits either 6 chars in length (rrggbb) or
// 8 chars (ccmmyykk).
BWIPJS.prototype.setcolor = function(s) {
	if (s instanceof Uint8Array) {
		s = this.jsstring(s);
	}
	if (s.length == 6) {
		var r = parseInt(s.substr(0,2), 16);
		var g = parseInt(s.substr(2,2), 16);
		var b = parseInt(s.substr(4,2), 16);
		this.g_rgb = [ r, g, b ];
	} else if (s.length == 8) {
		var c = parseInt(s.substr(0,2), 16) / 255;
		var m = parseInt(s.substr(2,2), 16) / 255;
		var y = parseInt(s.substr(4,2), 16) / 255;
		var k = parseInt(s.substr(6,2), 16) / 255;
		var r = round((1-c) * (1-k) * 255);
		var g = round((1-m) * (1-k) * 255);
		var b = round((1-y) * (1-k) * 255);
		this.g_rgb = [ r, g, b ];
	}
};
// Used only by swissqrcode
BWIPJS.prototype.setrgbcolor = function(r,g,b) {
    this.g_rgb = [ r, g, b ];
};
// Returns the current rgb values as a 'RRGGBB'
BWIPJS.prototype.getRGB = function() {
	var r = this.g_rgb[0].toString(16);
	var g = this.g_rgb[1].toString(16);
	var b = this.g_rgb[2].toString(16);
	return '00'.substr(r.length) + r + '00'.substr(g.length) + g + '00'.substr(b.length) + b;
};
BWIPJS.prototype.newpath = function() {
	this.g_path = [];
};
BWIPJS.prototype.closepath = function() {
	var path = this.g_path;
	var plen = path.length;
	if (!plen) return;

	var f = plen-1;
	for ( ; f >= 0 && path[f].op == 'l'; f--);
	f++;
	if (f < plen-1) {
		var poly = [];
		var xmin = Infinity;
		var ymin = Infinity;
		var xmax = -Infinity;
		var ymax = -Infinity;
		for (var i = f; i < plen; i++) {
			var a = path[i];
			poly.push([ a.x0, a.y0 ]);
			if (xmin > a.x0) xmin = a.x0;
			if (xmax < a.x0) xmax = a.x0;
			if (ymin > a.y0) ymin = a.y0;
			if (ymax < a.y0) ymax = a.y0;
		}
		var a = path[plen-1];
		var b = path[f];
		if (a.x1 != b.x0 || a.y1 != b.y0) {
			poly.push([ a.x1, a.y1 ]);
			if (xmin > a.x1) xmin = a.x1;
			if (xmax < a.x1) xmax = a.x1;
			if (ymin > a.y1) ymin = a.y1;
			if (ymax < a.y1) ymax = a.y1;
		}
		path.splice(f, plen-f,
					{ op:'p', x0:xmin, y0:ymin, x1:xmax, y1:ymax, poly:poly });
	} else {
		path.push({ op:'c' });
	}
};
BWIPJS.prototype.moveto = function(x,y) {
	this.g_posx = this.g_tdx + this.g_tsx * x;
	this.g_posy = this.g_tdy + this.g_tsy * y;
};
BWIPJS.prototype.rmoveto = function(x,y) {
	this.g_posx += this.g_tsx * x;
	this.g_posy += this.g_tsy * y;
};
BWIPJS.prototype.lineto = function(x,y) {
	var x0 = round(this.g_posx);
	var y0 = round(this.g_posy);
	this.g_posx = this.g_tdx + this.g_tsx * x;
	this.g_posy = this.g_tdy + this.g_tsy * y;
	var x1 = round(this.g_posx);
	var y1 = round(this.g_posy);

	this.g_path.push({ op:'l', x0:x0, y0:y0, x1:x1, y1:y1 });
};
BWIPJS.prototype.rlineto = function(x,y) {
	var x0 = round(this.g_posx);
	var y0 = round(this.g_posy);
	this.g_posx += this.g_tsx * x;
	this.g_posy += this.g_tsy * y;
	var x1 = round(this.g_posx);
	var y1 = round(this.g_posy);

	this.g_path.push({ op:'l', x0:x0, y0:y0, x1:x1, y1:y1 });
};
// implements both arc and arcn
BWIPJS.prototype.arc = function(x,y,r,sa,ea,ccw) {
	if (sa == ea) {
		return;
	}
	// For now, we only implement full circles...
	if (sa != 0 && sa != 360 || ea != 0 && ea != 360) {
		throw new Error('arc: not a full circle (' + sa + ',' + ea + ')');
	}

	x = this.g_tdx + this.g_tsx * x;
	y = this.g_tdy + this.g_tsy * y;

	// e == ellipse
	var rx = r * this.g_tsx;
	var ry = r * this.g_tsy;
	this.g_path.push({ op:'e', x0:x-rx, y0:y-ry, x1:x+rx, y1:y+ry,
								x:x, y:y, rx:rx, ry:ry, sa:sa, ea:ea, ccw:ccw });
};
BWIPJS.prototype.stringwidth = function(str) {
	var tsx  = this.g_tsx;
	var tsy  = this.g_tsy;
	var size = +this.g_font.FontSize || 10;

	// The string can be either a uint8-string or regular string
	str = this.jsstring(str);

	var bbox = this.drawing.measure(str, this.g_font.FontName, size*tsx, size*tsy);

	return { w:bbox.width/tsx, h:(bbox.ascent+bbox.descent)/tsy,
			 a:bbox.ascent/tsy, d:bbox.descent/tsy };
};
BWIPJS.prototype.charpath = function(str, b) {
	var sw = this.stringwidth(str);

	// Emulate the char-path by placing a rectangle around it
	this.rlineto(0, sw.a);
	this.rlineto(sw.w, 0);
	this.rlineto(0, -sw.h);
};
BWIPJS.prototype.pathbbox = function() {
	if (!this.g_path.length)	throw new Error('pathbbox: --nocurrentpoint--');
	var path = this.g_path;
	var llx = Infinity;
	var lly = Infinity;
	var urx = -Infinity;
	var ury = -Infinity;
	for (var i = 0; i < path.length; i++) {
		var a = path[i];
		if (a.op == 'c') {
			continue;
		}
		if (a.x0 < a.x1) {
			if (llx > a.x0) llx = a.x0;
			if (urx < a.x1) urx = a.x1;
		} else {
			if (llx > a.x1) llx = a.x1;
			if (urx < a.x0) urx = a.x0;
		}
		if (a.y0 < a.y1) {
			if (lly > a.y0) lly = a.y0;
			if (ury < a.y1) ury = a.y1;
		} else {
			if (lly > a.y1) lly = a.y1;
			if (ury < a.y0) ury = a.y0;
		}
	}

	// Convert to user-space coordinates
	var rv = {	llx:(llx-this.g_tdx)/this.g_tsx,
				lly:(lly-this.g_tdy)/this.g_tsy,
				urx:(urx-this.g_tdx)/this.g_tsx,
				ury:(ury-this.g_tdy)/this.g_tsy };
	return rv;
};
// Tranforms the pts array to standard (not y-inverted), unscalled values.
BWIPJS.prototype.transform = function(pts) {
	var minx = this.minx;
	var maxy = this.maxy;

	for (var i = 0; i < pts.length; i++) {
		var pt = pts[i];
		pt[0] = pt[0] - minx;
		pt[1] = maxy - pt[1];
	}
};
BWIPJS.prototype.stroke = function() {
	var tsx  = this.g_tsx;
	var tsy  = this.g_tsy;
	var path = this.g_path;
	var rgb  = this.getRGB();
	this.g_path = [];

	// This is a "super majority" round i.e. if over .66 round up.
	var penw = floor(this.g_penw * tsx + 0.66);
	var penh = floor(this.g_penw * tsy + 0.66);

	// Calculate the bounding boxes
	var nlines = 0, npolys = 0;
	for (var i = 0; i < path.length; i++) {
		var a = path[i];
		if (a.op == 'l') {
			// We only stroke vertical and horizontal lines.  Complex shapes are
			// always filled.
			if (a.x0 != a.x1 && a.y0 != a.y1) {
				throw new Error('stroke: --not-orthogonal--');
			}
			var x0 = a.x0;
			var y0 = a.y0;
			var x1 = a.x1;
			var y1 = a.y1;

			// Half widths (may be factional)
			var penw2 = penw/2;
			var penh2 = penh/2;

			if (x0 > x1) { var t = x0; x0 = x1; x1 = t; }
			if (y0 > y1) { var t = y0; y0 = y1; y1 = t; }
			if (x0 == x1) {
				this.bbox(x0-penw2, y0, x0+penw-penw2-1, y1); 	// vertical line
			} else {
				this.bbox(x0, y0-penh+penh2+1, x1, y1+penh2);	// horizontal line
			}
			nlines++;
		} else if (a.op == 'p') {
			// Closed (rectangular) poly (border around the barcode)
			var minx = Infinity;
			var miny = Infinity;
			var maxx = -Infinity;
			var maxy = -Infinity;
			var pts  = a.poly;
			if (pts.length != 4) {
				throw new Error('stroke: --not-a-rect--');
			}
			for (var i = 0, j = pts.length-1; i < pts.length; j = i++) {
				var xj = pts[j][0];
				var yj = pts[j][1];
				var xi = pts[i][0];
				var yi = pts[i][1];

				if (xi != xj && yi != yj) {
					throw new Error('stroke: --not-orthogonal--');
				}

				if (xi < minx) minx = xi;
				if (xi > maxx) maxx = xi;
				if (yi < miny) miny = yi;
				if (yi > maxy) maxy = yi;
			}

			// Half widths (integer)
			var penw2 = ceil(penw/2);
			var penh2 = ceil(penh/2);

			// We render these as two polygons plus a fill.
			// When border width is odd, allocate the bigger half to the outside.
			this.bbox(minx-penw2, miny-penh2, maxx+penw2, maxy+penh2);
			npolys++;
		} else {
			throw new Error('stroke: --not-a-line--');
		}
	}

	// Draw the lines
	var self = this;
	this.cmds.push(function() {
		// Half widths (big half and remaining half)
		var bigw2 = ceil(penw/2);
		var bigh2 = ceil(penh/2);
		var remw2 = penw - bigw2;
		var remh2 = penh - bigh2;

		for (var i = 0; i < path.length; i++) {
			var a = path[i]
			if (a.op == 'l') {
				var pts = [ [ a.x0, a.y0 ], [ a.x1, a.y1 ] ];
				self.transform(pts);
				self.drawing.line(pts[0][0], pts[0][1], pts[1][0], pts[1][1],
							a.x0 == a.x1 ? penw : penh, rgb);
				self.fill(rgb);
			} else {
				var pts = a.poly;
				self.transform(pts);
				var x0 = min(pts[0][0], pts[2][0]);
				var x1 = max(pts[0][0], pts[2][0]);
				var y0 = min(pts[0][1], pts[2][1]);
				var y1 = max(pts[0][1], pts[2][1]);

				// Top and left edges are "inside" the polygon.
				// Bottom and right edges are outside.
				self.drawing.polygon([
						[ x0-bigw2, y0-bigh2 ],
						[ x0-bigw2, y1+bigh2+1 ],
						[ x1+bigw2+1, y1+bigh2+1 ],
						[ x1+bigw2+1, y0-bigh2 ]
					]);
				self.drawing.polygon([
						[ x0+remw2, y0+remh2 ],
						[ x0+remw2, y1-remh2+1 ],
						[ x1-remw2+1, y1-remh2+1 ],
						[ x1-remw2+1, y0+remh2 ],
					]);
				self.drawing.fill(rgb);
			}
		}
	});
};
BWIPJS.prototype.fill = function() {
	var path = this.g_path;
	var rgb  = this.getRGB();
	this.g_path = [];

	// Calculate the bounding boxes
	for (var p = 0; p < path.length; p++) {
		var a = path[p];
		if (a.op == 'p') {  // polygon
			var minx = Infinity;
			var miny = Infinity;
			var maxx = -Infinity;
			var maxy = -Infinity;
			var pts  = a.poly;
			for (var i = 0; i < pts.length; i++) {
				var xi = pts[i][0];
				var yi = pts[i][1];

				if (xi < minx) minx = xi;
				if (xi > maxx) maxx = xi;
				if (yi < miny) miny = yi;
				if (yi > maxy) maxy = yi;
			}
			// With polygons, the right and bottom edges are "outside" and do not
			// contribute to the bounding box.  But we are in postscript inverted-y
			// mode.
			this.bbox(minx, miny+1, maxx-1, maxy);
		} else if (a.op == 'e') {	// ellipse
			this.bbox(a.x - a.rx, a.y - a.ry, a.x + a.rx, a.y + a.ry);
		} else {
			throw new Error('fill: --not-a-polygon--');
		}
	}

	// Render the poly
	var self = this;
	this.cmds.push(function() {
		for (var i = 0; i < path.length; i++) {
			var a = path[i];
			if (a.op == 'p') {
				var pts = a.poly
				self.transform(pts);
				self.drawing.polygon(pts);
			} else if (a.op == 'e') {
				var pts = [ [ a.x, a.y ] ];
				self.transform(pts);
				self.drawing.ellipse(pts[0][0], pts[0][1], a.rx, a.ry, a.ccw);
			}
		}
		self.drawing.fill(rgb);
	});
};
BWIPJS.prototype.clip = function() {
	var path = this.g_path;
	this.g_path = [];
    this.g_clip = true;

	var self = this;
	this.cmds.push(function() {
        var polys = [];
		for (var i = 0; i < path.length; i++) {
			var a = path[i];
			if (a.op == 'p') {
				var pts = a.poly
				self.transform(pts);
                polys.push(pts);
			} else {
                throw new Error('clip: only polygon regions supported');
			}
		}
		self.drawing.clip(polys);
	});
};

// The pix array is in standard (not y-inverted postscript) orientation.
BWIPJS.prototype.maxicode = function(pix) {
	var tsx = this.g_tsx;
	var tsy = this.g_tsy;
	var rgb = this.getRGB();

	// Module width.  Module height is an integer multiple of tsy.
	var twidth = 1.04 * tsx * 100;
	var mwidth = (twidth / 30)|0;
	if (twidth - (mwidth*30-1) > 9) {
		mwidth++;
	}

	// Dimensions needed for plotting the hexagons.  These must be integer values.
	var w, h, wgap, hgap;
	// if (opts.??? ) {
	//	// Create a one or two pixel gap
	//	wgap = (mwidth & 1) ? 1 : 2;
	//	hgap = 1;
	//	w = mwidth - gap;
	//	h = 4 * tsy;
	// } else {
		// Create a 1/8mm gap
		wgap = (tsx/2)|0;
		hgap = (tsy/2)|0;
		w = mwidth - wgap;
		if (w & 1) {
			w--;
		}
		h = ((4*tsy)|0) - hgap;
	//}

	// These must be integer values
	var w2 = w / 2 - 1;			// half width
	var qh = ((w2+1) / 2)|0;	// quarter height
	var vh = h - 2 - 2 * qh;	// side height

	// Bounding box
	this.bbox(0, 0, mwidth*30 - wgap, tsy * 3 * 32 + tsy * 4 - hgap);

	// Render the elements
	var self = this;
	this.cmds.push(function() {
		// Draw the hexagons
		for (var i = 0; i < pix.length; i++) {
			var c = pix[i];
			var x = c % 30;
			var y = (c / 30)|0;

			// Adjust x,y to the top of hexagon
			x *= mwidth;
			x += (y & 1) ? mwidth : mwidth/2;
			x = x|0;

			y = 33 - y;	// invert for postscript notation
			y *= tsy * 3;
			y += tsy * 2 - h/2;
			y = y|0;
			
			// Build bottom up so the drawing is top-down.
			var pts = [ [ x-0.5, y-- ] ]; 
			y -= qh-1;
			pts.push([x-1-w2, y--]);
			y -= vh;
			pts.push([x-1-w2, y--]);
			y -= qh-1;
			pts.push([x-0.5, y++]);
			y += qh-1;
			pts.push([x+w2, y++]);
			y += vh;
			pts.push([x+w2, y++]);

			self.transform(pts);
			self.drawing.hexagon(pts, rgb);
		}
		self.drawing.fill(rgb);


		// Draw the rings
		var x = (14 * mwidth + mwidth/2 + 0.01)|0;
		var y = ((12 * 4 + 3) * tsy - qh/2 + 0.01)|0;
		self.drawing.ellipse(x, y, (0.5774*3.5*tsx+0.01)|0, (0.5774*3.5*tsy+0.01)|0, true);
		self.drawing.ellipse(x, y, (1.3359*3.5*tsx+0.01)|0, (1.3359*3.5*tsy+0.01)|0, false);
		self.drawing.fill(rgb);
		self.drawing.ellipse(x, y, (2.1058*3.5*tsx+0.01)|0, (2.1058*3.5*tsy+0.01)|0, true);
		self.drawing.ellipse(x, y, (2.8644*3.5*tsx+0.01)|0, (2.8644*3.5*tsy+0.01)|0, false);
		self.drawing.fill(rgb);
		self.drawing.ellipse(x, y, (3.6229*3.5*tsx+0.01)|0, (3.6229*3.5*tsy+0.01)|0, true);
		self.drawing.ellipse(x, y, (4.3814*3.5*tsx+0.01)|0, (4.3814*3.5*tsy+0.01)|0, false);
		self.drawing.fill(rgb);

	});
};

// dx,dy are inter-character gaps
BWIPJS.prototype.show = function(str, dx, dy) {
	if (!str.length) {
		return;
	}

	// Capture current graphics state
	var tsx	 = this.g_tsx;
	var tsy  = this.g_tsy;
	var name = this.g_font.FontName || 'OCR-B';
	var size = (this.g_font.FontSize || 10);
	var szx  = size * tsx;
	var szy  = size * tsy;
	var posx = this.g_posx;
	var posy = this.g_posy;
	var rgb  = this.getRGB();

	// The string can be either a uint8-string or regular string
	str = this.jsstring(str);

	// Convert dx,dy to device space
	dx = tsx * dx || 0;
	dy = tsy * dy || 0;

	// Bounding box.
	var base = posy + dy;
	var bbox = this.drawing.measure(str, name, szx, szy);
	var width = bbox.width + (str.length-1) * dx;
	this.bbox(posx, base-bbox.descent+1, posx+width-1, base+bbox.ascent);
	this.g_posx += width;

	var self = this;
	self.cmds.push(function() {
		// self.transform()
		var x = posx - self.minx;
		var y = self.maxy - posy;
		self.drawing.text(x, y, str, rgb, { name:name, width:szx, height:szy, dx:dx });
	});
};
// drawing surface bounding box
BWIPJS.prototype.bbox = function(x0, y0, x1, y1) {
	if (x0 > x1) { var t = x0; x0 = x1; x1 = t; }
	if (y0 > y1) { var t = y0; y0 = y1; y1 = t; }

	x0 = floor(x0);
	y0 = floor(y0);
	x1 = ceil(x1);
	y1 = ceil(y1);

	if (this.minx > x0) this.minx = x0;
    if (this.maxx < x1)	this.maxx = x1;
    if (this.miny > y0)	this.miny = y0;
	if (this.maxy < y1)	this.maxy = y1;
};
BWIPJS.prototype.render = function() {
	if (this.minx === Infinity) {
        // Most likely, `dontdraw` was set in the options
        return new Promise(function (resolve, reject) {
            resolve(null);
        });
	}
	// Draw the image
	this.drawing.init(this.maxx - this.minx + 1, this.maxy - this.miny + 1,
					  this.g_tsx, this.g_tsy);
	for (var i = 0, l = this.cmds.length; i < l; i++) {
		this.cmds[i]();
	}
	return this.drawing.end();
};

return BWIPJS;
})();	// BWIPJS closure
// drawing-builtin.js
//
// The aliased (except the fonts) graphics used by drawing-canvas.js and
// drawing-png.js
//
// All x,y and lengths are integer values.
//
// For the methods that take a color `rgb` parameter, the value is always a
// string with format RRGGBB.
//
// opts is the same options object passed into the bwipjs methods.
function DrawingBuiltin(opts) {
	var floor = Math.floor;

	// Unrolled x,y rotate/translate matrix
	var tx0 = 0, tx1 = 0, tx2 = 0, tx3 = 0;
	var ty0 = 0, ty1 = 0, ty2 = 0, ty3 = 0;

	var gs_image, gs_rowbyte;	// rowbyte will be 1 for png's, 0 for canvas
	var gs_width, gs_height;	// image size, in pixels
	var gs_dx, gs_dy;			// x,y translate (padding)
	var gs_r, gs_g, gs_b;		// rgb
	var gs_xymap;				// edge map
    var gs_xyclip;              // clip region map (similar to xymap)

	return {
		// Ensure compliant bar codes by always using integer scaling factors.
		scale : function(sx, sy) {
            // swissqrcode requires clipping and drawing that are not scaled to the
            // the barcode module size.
            if (opts.bcid == 'swissqrcode') {
                return [ sx, sy ];
            } else {
			    return [ (sx|0)||1, (sy|0)||1 ];
            }
		},

		// Measure text.  This and scale() are the only drawing primitives that
		// are called before init().
		//
		// `font` is the font name typically OCR-A or OCR-B.
		// `fwidth` and `fheight` are the requested font cell size.  They will
		// usually be the same, except when the scaling is not symetric.
		measure : function(str, font, fwidth, fheight) {
			fwidth = fwidth|0;
			fheight = fheight|0;

			var fontid = FontLib.lookup(font);
			var width = 0;
			var ascent = 0;
			var descent = 0;
			for (var i = 0, l = str.length; i < l; i++) {
				var ch = str.charCodeAt(i);
				var glyph = FontLib.getglyph(fontid, ch, fwidth, fheight);

				ascent  = Math.max(ascent, glyph.top);
				descent = Math.max(descent, glyph.height - glyph.top);

				if (i == l-1) {
					width += glyph.left + glyph.width;
				} else {
					width += glyph.advance;
				}
			}
			return { width:width, ascent:ascent, descent:descent };
		},

		// width and height represent the maximum bounding box the graphics will occupy.
		// The dimensions are for an unrotated rendering.  Adjust as necessary.
		init : function(width, height) {
			// Add in the effects of padding.  These are always set before the
			// drawing constructor is called.
			var padl = opts.paddingleft;
			var padr = opts.paddingright;
			var padt = opts.paddingtop;
			var padb = opts.paddingbottom;
			var rot  = opts.rotate || 'N';

			width  += padl + padr;
			height += padt + padb;

			if (+opts.sizelimit && +opts.sizelimit < width * height) {
				throw new Error('Image size over limit');
			}

			// Transform indexes are: x, y, w, h
			switch (rot) {
			// tx = w-y, ty = x
			case 'R': tx1 = -1; tx2 = 1; ty0 = 1; break;
			// tx = w-x, ty = h-y
			case 'I': tx0 = -1; tx2 = 1; ty1 = -1; ty3 = 1; break;
			// tx = y, ty = h-x
			case 'L': tx1 = 1; ty0 = -1; ty3 = 1; break;
			// tx = x, ty = y
			default:  tx0 = ty1 = 1; break;
			}

			// Setup the graphics state
			var swap = rot == 'L' || rot == 'R';
			gs_width  = swap ? height : width;
			gs_height = swap ? width : height;
			gs_dx = padl;
			gs_dy = padt;
			gs_xymap = [];
			gs_xymap.min = Infinity;
            gs_xyclip = null;
			gs_r = gs_g = gs_b = 0;

			// Get the rgba image from the constructor
			var res = this.image(gs_width, gs_height);
			gs_image   = res.buffer;
			gs_rowbyte = res.ispng ? 1 : 0;
		},
		// Unconnected stroked lines are used to draw the bars in linear barcodes;
		// and the border around a linear barcode (e.g. ITF-14)
		// No line cap should be applied.  These lines are always orthogonal.
		line : function(x0, y0, x1, y1, lw, rgb) {
			x0 = x0|0;
			y0 = y0|0;
			x1 = x1|0;
			y1 = y1|0;

			// Most linear barcodes, the line width will be integral.  The exceptions
			// are variable width barcodes (e.g. code39) and the postal 4-state codes.
			lw = Math.round(lw) || 1;

			if (y1 < y0) { var t = y0; y0 = y1; y1 = t; }
			if (x1 < x0) { var t = x0; x0 = x1; x1 = t; }

			gs_r = parseInt(rgb.substr(0,2), 16);
			gs_g = parseInt(rgb.substr(2,2), 16);
			gs_b = parseInt(rgb.substr(4,2), 16);

			// Horizontal or vertical line?
			var w2 = (lw/2)|0;
			if (x0 == x1) {
				// Vertical line
				x0 = x0 - lw + w2;  // big half
				x1 = x1 + w2 - 1;   // small half
			} else {
				// Horizontal line (inverted halves)
				y0 = y0 - w2;
				y1 = y1 + lw - w2 - 1;
			}
			for (var y = y0; y <= y1; y++) {
				for (var x = x0; x <= x1; x++) {
					set(x, y, 255);
				}
			}
		},

		// Polygons are used to draw the connected regions in a 2d barcode.
		// These will always be unstroked, filled, orthogonal shapes.
        // 
		// You will see a series of polygon() calls, followed by a fill().
		polygon : function(pts) {
			var npts = pts.length;
			for (var j = npts-1, i = 0; i < npts; j = i++) {
				if (pts[j][0] == pts[i][0]) {
					// Vertical lines do not get their end points. End points
					// are added by the horizontal line logic.
					var xj = pts[j][0]|0;	// i or j, doesn't matter
					var yj = pts[j][1]|0;
					var yi = pts[i][1]|0;
					if (yj > yi) {
						for (var y = yi+1; y < yj; y++) {
							addPoint(xj, y);
						}
					} else {
						for (var y = yj+1; y < yi; y++) {
							addPoint(xj, y);
						}
					}
				} else {
					var xj = pts[j][0]|0;
					var xi = pts[i][0]|0;
					var yj = pts[j][1]|0;	// i or j, doesn't matter

					// Horizontal lines are tricky.  As a rule, top lines get filled,
					// bottom lines do not (similar to how left edges get filled and
					// right edges do not).
					//
					// Where it gets complex is deciding whether the line actually
					// adds edges.  There are cases where a horizontal line does
					// not add anything to the scanline plotting.  And it doesn't
					// actually matter whether the line is a top or bottom edge,
					// the logic is the same.
					//
					// A left edge is added if the edge to its left is below.
					// A right edge is added if the edge to its right is below.
					if (xj < xi) {
						var yl = pts[j == 0 ? npts-1 : j-1][1];	// left edge
						var yr = pts[i == npts-1 ? 0 : i+1][1];	// right edge
						if (yl > yj) {
							addPoint(xj, yj);
						}
						if (yr > yj) {
							addPoint(xi, yj);
						}
					} else {
						var yl = pts[i == npts-1 ? 0 : i+1][1];	// left edge
						var yr = pts[j == 0 ? npts-1 : j-1][1];	// right edge
						if (yl > yj) {
							addPoint(xi, yj);
						}
						if (yr > yj) {
							addPoint(xj, yj);
						}
					}
				}
			}
		},
		// An unstroked, filled hexagon used by maxicode.  You can choose to fill
		// each individually, or wait for the final fill().
		//
		// The hexagon is drawn from the top, counter-clockwise.
		//
		// The X-coordinate for the top and bottom points on the hexagon is always
		// .5 pixels.  We draw our hexagons with a 2 pixel flat top.
		//
		// All other points of the polygon/hexagon are guaranteed to be integer values.
		hexagon : function(pts, rgb) {
			var x = pts[0][0]|0;
			var y = pts[0][1]|0;
			var qh = (pts[1][1] - pts[0][1])|0;		// height of triangle (quarter height)
			var vh = (pts[2][1] - pts[1][1] - 1)|0;	// height of vertical side
			var xl = (pts[2][0])|0;					// left side
			var xr = (pts[4][0])|0;					// right side

			gs_r = parseInt(rgb.substr(0,2), 16);
			gs_g = parseInt(rgb.substr(2,2), 16);
			gs_b = parseInt(rgb.substr(4,2), 16);

			fillSegment(x, x+1, y++);
			for (var k = 1; k < qh; k++) {
				fillSegment(x-2*k, x+1+2*k, y++);
			}
			for (var k = 0; k <= vh; k++) {
				fillSegment(xl, xr, y++);
			}
			for (var k = qh-1; k >= 1; k--) {
				fillSegment(x-2*k, x+1+2*k, y++);
			}
			fillSegment(x, x+1, y);
		},
		// An unstroked, filled ellipse.  Used by dotcode and maxicode at present.
		// maxicode issues pairs of ellipse calls (one cw, one ccw) followed by a fill()
		// to create the bullseye rings.  dotcode issues all of its ellipses then a
		// fill().
		ellipse : function(x, y, rx, ry, ccw) {
			drawEllipse((x-rx)|0, (y-ry)|0, (x+rx)|0, (y+ry)|0, ccw);
		},
		// PostScript's default fill rule is non-zero but since there are never
        // intersecting regions, we use the easier to implement even-odd.
		fill : function(rgb) {
			gs_r = parseInt(rgb.substr(0,2), 16);
			gs_g = parseInt(rgb.substr(2,2), 16);
			gs_b = parseInt(rgb.substr(4,2), 16);

			evenodd();
			gs_xymap = [];
			gs_xymap.min = Infinity;
		},
        // Currently only used by swissqrcode.  The `polys` area is an array of
        // arrays of points.  Each array of points is identical to the `pts`
        // parameter passed to polygon().  The postscript default clipping rule,
        // like the fill rule, is even-odd winding.
        clip : function(polys) {
            if (!gs_xyclip) {
                gs_xyclip = [];
                gs_xyclip.min = Infinity;
            }
            // Swap out the xymap for the clip map so addPoint() works on it.
            var xymap = gs_xymap;
            gs_xymap = gs_xyclip;

            // Now just use the polygon() logic to fill in the clipping regions.
            for (var i = 0, l = polys.length; i < l; i++) {
                this.polygon(polys[i]);
            }

            // Restore
            gs_xymap = xymap;
        },
        unclip : function() {
            gs_xyclip = null;
        },
		// Draw text with optional inter-character spacing.  `y` is the baseline.
		// font is an object with properties { name, width, height, dx }
		// width and height are the font cell size.
		// dx is extra space requested between characters (usually zero).
		text : function(x, y, str, rgb, font) {
			x = x|0;
			y = y|0;

			gs_r = parseInt(rgb.substr(0,2), 16);
			gs_g = parseInt(rgb.substr(2,2), 16);
			gs_b = parseInt(rgb.substr(4,2), 16);

			var fontid  = FontLib.lookup(font.name);
			var fwidth  = font.width|0;
			var fheight = font.height|0;
			var dx      = font.dx|0;
			for (var k = 0; k < str.length; k++) {
				var ch = str.charCodeAt(k);
				var glyph = FontLib.getglyph(fontid, ch, fwidth, fheight);

				var gt = y - glyph.top;
				var gl = glyph.left;
				var gw = glyph.width;
				var gh = glyph.height;
				var gb = glyph.bytes;
				var go = glyph.offset;		// offset into bytes

				for (var i = 0; i < gw; i++) {
					for (var j = 0; j < gh; j++) {
						var a = gb[go + j * gw + i];
						if (a) {
							set(x+gl+i, gt+j, a);
						}
					}
				}
				x += glyph.advance + dx;
			}
		},
		// Called after all drawing is complete.
		end : function() {
		},
	};

	// This code is specialized to deal with two types of RGBA buffers:
	// - canvas style, which is true RGBA
	// - PNG style, which has a one-byte "filter code" prefixing each row.
	function set(x, y, a) {
        if (gs_xyclip && clipped(x, y)) {
            return;
        }
		// translate/rotate
		x += gs_dx;
		y += gs_dy;
		var tx = tx0 * x + tx1 * y + tx2 * (gs_width-1) + tx3 * (gs_height-1);
		var ty = ty0 * x + ty1 * y + ty2 * (gs_width-1) + ty3 * (gs_height-1);

		// https://en.wikipedia.org/wiki/Alpha_compositing
		var offs = (ty * gs_width + tx) * 4 + (ty+1) * gs_rowbyte;
		var dsta = gs_image[offs+3] / 255;
		var srca = a / 255;
		var inva = (1 - srca) * dsta;
		var outa = srca + inva;

		gs_image[offs+0] = ((gs_r * srca + gs_image[offs+0] * inva) / outa)|0;
		gs_image[offs+1] = ((gs_g * srca + gs_image[offs+1] * inva) / outa)|0;
		gs_image[offs+2] = ((gs_b * srca + gs_image[offs+2] * inva) / outa)|0;
		gs_image[offs+3] = (255 * outa)|0;
	}

	// Add a point on an edge to the scanline map.
	function addPoint(x, y) {
		if (gs_xymap.min > y) gs_xymap.min = y;
		if (!gs_xymap[y]) {
			gs_xymap[y] = [ x ];
		} else {
			gs_xymap[y].push(x);
		}
	}

	function fillSegment(x0, x1, y) {
		while (x0 <= x1) {
			set(x0++, y, 255);
		}
	}

	// even-odd fill
	//
	// This implementation is optimized for BWIPP's simple usage.
	// It is not a general purpose scanline fill.  It relies heavily on
	// polygon() creating the correct intersections.
	function evenodd() {
		var ymin = gs_xymap.min;
		var ymax = gs_xymap.length-1;

		for (var y = ymin; y <= ymax; y++) {
			var pts = gs_xymap[y];
			if (!pts) {
				continue
			}
			pts.sort(function(a, b) { return a - b; });

			var wn = false;
			var xl = 0;
			for (var n = 0, npts = pts.length; n < npts; n++) {
				var x = pts[n];
				if (wn) {
					fillSegment(xl, x-1, y);
				} else {
					xl = x;
				}
				wn = !wn;
			}
		}
	}

	function drawEllipse(x0, y0, x1, y1, dir) {
		x0 = x0|0;
		y0 = y0|0;
		x1 = x1|0;
		y1 = y1|0;

		var a = Math.abs(x1-x0);
		var b = Math.abs(y1-y0);
		var b1 = b & 1;
		var dx = 4*(1-a)*b*b;
		var dy = 4*(b1+1)*a*a;
		var err = dx + dy + b1*a*a;
		var e2;

		// Left and right edges
		var left = [], right = [];
		left.min = right.min = Infinity;

		if (x0 > x1) { x0 = x1; x1 += a; }
		if (y0 > y1) y0 = y1;
		y0 += ((b+1)/2)|0;
		y1 = y0 - b1;
		a *= 8*a; b1 = 8*b*b;

		do {
			maxedge(right, x1, y0);	// 1st quadrant
			minedge(left, x0, y0);	// 2nd quadrant
			minedge(left, x0, y1);	// 3rd quadrant
			maxedge(right, x1, y1);	// 4th quadrant
			e2 = 2*err;
			if (e2 >= dx) { x0++; x1--; dx += b1; err += dx; }
			if (e2 <= dy) { y0++; y1--; dy += a;  err += dy; }
		} while (x0 <= x1);

		while (y0-y1 < b) {	// too early stop of flat ellipse
			maxedge(right, x1+1, y0);
			minedge(left, x0-1, y0++);
			minedge(left, x0-1, y1);
			maxedge(right, x1+1, y1--);
		}

		for (var y = left.min, max = left.length-1; y <= max; y++) {
			addPoint(left[y], y);
		}
		// The points we calculated are "inside".  The fill algorithm excludes 
		// right edges, so +1 on each x.
		for (var y = right.min, max = right.length-1; y <= max; y++) {
			addPoint(right[y]+1, y);
		}

		function minedge(e, x, y) {
			if (e.min > y) e.min = y;
			var ey = e[y];
			if (ey == null || ey > x) {
				e[y] = x;
			}
		}

		function maxedge(e, x, y) {
			if (e.min > y) e.min = y;
			var ey = e[y];
			if (ey == null || ey < x) {
				e[y] = x;
			}
		}
	}

    // Returns true if outside the clipping region.
	function clipped(x, y) {
        var pts = gs_xyclip[y];
        if (!pts) {
            return true;
        }
        if (!pts.sorted) {
			pts.sort(function(a, b) { return a - b; });
            pts.sorted = true;
        }

        var wn = false;
        for (var n = 0, npts = pts.length; n < npts; n++) {
            var xn = pts[n];
            if (xn > x) {
                return !wn; 
            } else if (xn == x) {
                return wn;
            }
            wn = !wn;
		}
        return true;
	}

	// Returns 1 if clockwise, -1 if ccw.
	function polydir(pts) {
		var xp = 0;
		for (var i = 0, l = pts.length, j = l-1; i < l; j = i++) {
			xp += pts[j][0] * pts[i][1] - pts[i][0] * pts[j][1];
		}
		return xp > 0 ? 1 : -1;
	}
}
// drawing-canvas.js
//

// opts is the same options object passed into the bwipjs methods.
function DrawingCanvas(opts, canvas) {
	if (typeof window == null) {
		throw new Error('DrawingCanvas: not a browser');
	}

	var img;
	var ctx = canvas.getContext('2d', { willReadFrequently:true });
	var drawing = DrawingBuiltin(opts);

	// Provide our specializations for the builtin drawing
	drawing.image = image;
	drawing.end = end;

	return drawing;


	// Called by DrawingBuiltin.init() to get the ARGB bitmap for rendering.
	function image(width, height) {
		canvas.width  = width;
		canvas.height = height;

		// Set background 
		ctx.setTransform(1, 0, 0, 1, 0, 0);
		if (/^[0-9a-fA-F]{6}$/.test(''+opts.backgroundcolor)) {
			ctx.fillStyle = '#' + opts.backgroundcolor;
			ctx.fillRect(0, 0, width, height);
		} else {
			ctx.clearRect(0, 0, width, height);
		}

		// Prepare the bitmap 
		img = ctx.getImageData(0, 0, width, height);

		// The return value is designed for both canvas pure-RGBA and PNG RGBA
		return { buffer:img.data, ispng:false };
	}

	function end() {
		ctx.putImageData(img, 0, 0);
	}
}
// fontlib.js
var FontLib = (function() {
    var fonts = [];
    var names = {};
    var glyphcache = {};
    var glyphmru = {};
    var glyphcount = 0;

    // Sentinel to simplify moving entries around in the list.
    glyphmru.next = glyphmru;
    glyphmru.prev = glyphmru;

    return {
        lookup:lookup,
        monochrome:monochrome,
        getglyph:getglyph,
        getpaths:getpaths,
        loadFont:loadFont,
    };

    // loadFont(name, data)
    // loadFont(name, mult, data)
    // loadFont(name, multy, multx, data)   // note order: y,x
    // data must be the font data, either a binary or base64 encoded string.
    function loadFont(name /*...args*/) {
        var multx = 100;
        var multy = 100;
        var data = null;

        if (arguments.length == 2) {
            data = arguments[1];
        } else if (arguments.length == 3) {
            multx = multy = +arguments[1] || 100;
            data = arguments[2];
        } else if (arguments.length == 4) {
            multy = +arguments[1] || 100;
            multx = +arguments[2] || 100;
            data = arguments[3];
        } else {
            throw new Error("loadFont(): invalid number of arguments");
        }

        var font = STBTT.InitFont(toUint8Array(data));
        font.bwipjs_name = name;
        font.bwipjs_multx = multx;
        font.bwipjs_multy = multy;

        var fontid = fonts.push(font)-1;
        names[name.toUpperCase()] = fontid;
        return fontid;
    }

    // Always returns a valid font-id (default OCR-B)
    function lookup(name) {
        var fontid = names[name.toUpperCase()];
        return fontid === undefined ? 1 : fontid;       // OCR B default
    }

    // Not supported by stbtt
    function monochrome(mono) {
        if (mono) {
            throw new Error('fontlib: monochrome not implemented');
        }
    }

    function getglyph(fontid, charcode, width, height) {
        fontid   = fontid|0;
        charcode = charcode|0;
        width    = +width;
        height   = +height;
        if (!width || width < 8) {
            width = 8;
        }
        if (!height || height < 8) {
            height = width;
        }
        if (fontid < 0 || fontid >= fonts.length) {
            fontid = 1;     // OCR B default
        }
        if (!charcode || charcode < 32) {
            charcode = 32;
        }

        // In the cache?
        var cachekey = '' + fontid + 'c' + charcode + 'w' + width + 'h' + height; 
        var glyph = glyphcache[cachekey];
        if (glyph) {
            // Unthread from the MRU
            glyph.prev.next = glyph.next;
            glyph.next.prev = glyph.prev;

            // Thread back onto the top
            var sntl = glyphmru;
            sntl.next.prev = glyph;
            glyph.next = sntl.next;
            glyph.prev = sntl;
            sntl.next = glyph;
            
            return glyph;
        }

        var font = fonts[fontid];
        var glyph = STBTT.GetGlyph(font, charcode, width * font.bwipjs_multx / 100,
                                                   height * font.bwipjs_multy / 100);
        
        glyph.bytes = glyph.pixels;
        glyph.cachekey = cachekey;
        glyph.offset = 0;

        //glyph = {
        //      top:font.GlyphTop(),
        //      left:font.GlyphLeft(),
        //      width:font.GlyphWidth(),
        //      height:font.GlyphHeight(),
        //      advance:font.GlyphAdvance(),
        //      bitmap:font.GlyphBitmap(),
        //      offset:0,
        //      cachekey:cachekey,
        //  };

        // Purge old
        if (glyphcount > 250) {
            var sntl = glyphmru;
            var temp = sntl.prev;
            temp.prev.next = sntl;
            sntl.prev = temp.prev;
            temp.next = temp.prev = null;
            delete glyphcache[temp.cachekey];
        } else {
            glyphcount++;
        }

        // Add to cache and to the top of the MRU
        glyphcache[cachekey] = glyph;

        var sntl = glyphmru;
        sntl.next.prev = glyph;
        glyph.next = sntl.next;
        glyph.prev = sntl;
        sntl.next = glyph;

        return glyph;
    }

    function getpaths(fontid, charcode, width, height) {
        fontid   = fontid|0;
        charcode = charcode|0;
        width    = +width;
        height   = +height;
        if (!width || width < 8) {
            width = 8;
        }
        if (!height || height < 8) {
            height = width;
        }
        if (fontid < 0 || fontid >= fonts.length) {
            fontid = 1;     // OCR B default
        }
        if (!charcode || charcode < 32) {
            charcode = 32;
        }

        var font = fonts[fontid];
        return STBTT.GetPaths(font, charcode, width * font.bwipjs_multx / 100,
                                              height * font.bwipjs_multy / 100);
    }
})();

// bwip-js/stb_trutype.js
//
// JavaScript implementation of stb_truetype.h @ https://github.com/nothings/stb.
//
// This file is part of the bwip-js project available at:
//
// 		http://metafloor.github.io/bwip-js
//
// Copyright (c) 2019 Mark Warren : MIT LICENSE

// Copyright notice from stb_truetype.h:
//
// MIT License
//
// Copyright (c) 2017 Sean Barrett
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

var STBTT = (function () {

var	STBTT_vmove	 = 1,
	STBTT_vline	 = 2,
	STBTT_vcurve = 3,
	STBTT_vcubic = 4,

	STBTT_PLATFORM_ID_UNICODE	= 0,
	STBTT_PLATFORM_ID_MAC		= 1,
	STBTT_PLATFORM_ID_ISO		= 2,
	STBTT_PLATFORM_ID_MICROSOFT = 3,

	STBTT_UNICODE_EID_UNICODE_1_0		= 0,
	STBTT_UNICODE_EID_UNICODE_1_1		= 1,
	STBTT_UNICODE_EID_ISO_10646			= 2,
	STBTT_UNICODE_EID_UNICODE_2_0_BMP	= 3,
	STBTT_UNICODE_EID_UNICODE_2_0_FULL	= 4,

	STBTT_MS_EID_SYMBOL			= 0,
	STBTT_MS_EID_UNICODE_BMP	= 1,
	STBTT_MS_EID_SHIFTJIS		= 2,
	STBTT_MS_EID_UNICODE_FULL	= 10;

var floor = Math.floor;
var ceil  = Math.ceil;
var sqrt  = Math.sqrt;
var abs   = Math.abs;

// Allocate an array of objects - replaces malloc(sizeof struct * n)
function oalloc(n) {
	var o = [];
	for (var i = 0; i < n; i++) {
		o.push({});
	}
	return o;
}

//static unsigned char stbtt__buf_get8(stbtt__buf * b)
function stbtt__buf_get8(b) {
    return b[b.cursor++]||0;
}

//static unsigned char stbtt__buf_peek8(stbtt__buf * b)
function stbtt__buf_peek8(b) {
    return b[b.cursor];
}

//static void stbtt__buf_seek(stbtt__buf * b, int o)
function stbtt__buf_seek(b, o) {
    b.cursor = (o > b.length || o < 0) ? b.length : o;
}

//static void stbtt__buf_skip(stbtt__buf * b, int o)
function stbtt__buf_skip(b, o) {
    stbtt__buf_seek(b, b.cursor + o);
}

//static unsigned int stbtt__buf_get(stbtt__buf * b, int n)
function stbtt__buf_get(b, n) {
    var v = 0;
    for (var i = 0; i < n; i++) {
        v = (v << 8) | stbtt__buf_get8(b);
    }
    return v;
}

// This function is only called once with a real 'p', all other uses are
// for a NULL buffer.  The for real usage, the code is inlined.
//static stbtt__buf stbtt__new_buf(const void *p, int size)
function stbtt__null_buf() {
	return { length:0 };
}

//static stbtt__buf stbtt__buf_range(const stbtt__buf * b, int o, int s)
function stbtt__buf_range(b, o, s) {
    if (o < 0 || s < 0 || o > b.length || s > b.length - o) {
        return stbtt__null_buf();
    }
	var r = b.subarray(o, o + s);
	r.cursor = 0;
	return r;
}

//static stbtt__buf stbtt__cff_get_index(stbtt__buf * b)
function stbtt__cff_get_index(b) {
    var start = b.cursor;
    var count = stbtt__buf_get(b, 2);
    if (count) {
        var offsize = stbtt__buf_get8(b);
        stbtt__buf_skip(b, offsize * count);
        stbtt__buf_skip(b, stbtt__buf_get(b, offsize) - 1);
    }
    return stbtt__buf_range(b, start, b.cursor - start);
}

//static unsigned int stbtt__cff_int(stbtt__buf * b)
function stbtt__cff_int(b) {
    var b0 = stbtt__buf_get8(b);
    if (b0 >= 32 && b0 <= 246) {
        return b0 - 139;
    } else if (b0 >= 247 && b0 <= 250) {
        return (b0 - 247) * 256 + stbtt__buf_get8(b) + 108;
    } else if (b0 >= 251 && b0 <= 254) {
        return -(b0 - 251) * 256 - stbtt__buf_get8(b) - 108;
    } else if (b0 == 28) {
        return stbtt__buf_get(b, 2);
    } else if (b0 == 29) {
        return stbtt__buf_get(b, 4);
    }
    return 0;
}

//static void stbtt__cff_skip_operand(stbtt__buf * b)
function stbtt__cff_skip_operand(b) {
    var b0 = stbtt__buf_peek8(b);
    if (b0 == 30) {
        stbtt__buf_skip(b, 1);
        while (b.cursor < b.length) {
            var v = stbtt__buf_get8(b);
            if ((v & 0xF) == 0xF || (v >> 4) == 0xF) {
                break;
            }
        }
    } else {
        stbtt__cff_int(b);
    }
}

//static stbtt__buf stbtt__dict_get(stbtt__buf * b, int key)
function stbtt__dict_get(b, key) {
    stbtt__buf_seek(b, 0);
    while (b.cursor < b.length) {
        var start = b.cursor, end, op;
        while (stbtt__buf_peek8(b) >= 28) {
            stbtt__cff_skip_operand(b);
        }
        end = b.cursor;
        op = stbtt__buf_get8(b);
        if (op == 12) {
            op = stbtt__buf_get8(b) | 0x100;
        }
        if (op == key) {
            return stbtt__buf_range(b, start, end - start);
        }
    }
    return stbtt__buf_range(b, 0, 0);
}

//static void stbtt__dict_get_ints(stbtt__buf * b, int key, int outcount, unsigned int *out)
function stbtt__dict_get_ints(b, key, outcount, out) {
    var operands = stbtt__dict_get(b, key);
    for (var i = 0; i < outcount && operands.cursor < operands.length; i++) {
        out[i] = stbtt__cff_int(operands);
    }
}
// single-integer format of above since javascript doesn't have address-of
function stbtt__dict_get_int(b, key, out) {
    var operands = stbtt__dict_get(b, key);
    if (operands.cursor < operands.length) {
        out = stbtt__cff_int(operands);
    }
	return out;
}

//static int stbtt__cff_index_count(stbtt__buf * b)
function stbtt__cff_index_count(b) {
    stbtt__buf_seek(b, 0);
    return stbtt__buf_get(b, 2);
}

//static stbtt__buf stbtt__cff_index_get(stbtt__buf b, int i)
function stbtt__cff_index_get(b, i) {
    var count, offsize, start, end;
    stbtt__buf_seek(b, 0);
    count = stbtt__buf_get(b, 2);
    offsize = stbtt__buf_get8(b);
    stbtt__buf_skip(b, i * offsize);
    start = stbtt__buf_get(b, offsize);
    end = stbtt__buf_get(b, offsize);
    return stbtt__buf_range(b, 2 + (count + 1) * offsize + start, end - start);
}

// Convert sign-extend a 16-bit integer to JS number
function INT16(n) {
	return n & 0x8000 ? (0xffff0000|n)>>0 : n;
}

//static unsigned short ttUSHORT(unsigned char *p)
function ttUSHORT(b, o) {
    return b[o] * 256 + b[o+1];
}

//static short ttSHORT(unsigned char *p)
function ttSHORT(b, o) {
    var n = b[o] * 256 + b[o+1];
	return n & 0x8000 ? (0xffff0000|n)>>0 : n;
}

//static unsigned int ttULONG(unsigned char *p)
function ttULONG(b, o) {
    return (b[o] << 24) + (b[o+1] << 16) + (b[o+2] << 8) + b[o+3];
}

//static unsigned int stbtt__find_table(unsigned char *data, unsigned int fontstart, const char *tag)
function stbtt__find_table(data, fontstart, tag) {
    var num_tables = ttUSHORT(data, fontstart + 4);
    var tabledir = fontstart + 12;
    for (var i = 0; i < num_tables; ++i) {
        var loc = tabledir + 16 * i;
        if (data[loc] == tag[0] && data[loc+1] == tag[1] && data[loc+2] == tag[2] && data[loc+3] == tag[3]) {
            return ttULONG(data, loc + 8);
        }
    }
    return 0;
}

//static stbtt__buf stbtt__get_subrs(stbtt__buf cff, stbtt__buf fontdict)
function stbtt__get_subrs(cff, fontdict) {
    var private_loc = [ 0, 0 ];
    stbtt__dict_get_ints(fontdict, 18, 2, private_loc);
    if (!private_loc[1] || !private_loc[0]) {
        return stbtt__null_buf();
    }
    var pdict = stbtt__buf_range(cff, private_loc[1], private_loc[0]);
    var subrsoff = stbtt__dict_get_int(pdict, 19, 0);
    if (!subrsoff) {
        return stbtt__null_buf();
    }
    stbtt__buf_seek(cff, private_loc[1] + subrsoff);
    return stbtt__cff_get_index(cff);
}

//static int stbtt_InitFont_internal(stbtt_fontinfo * info, unsigned char *data, int fontstart)
function stbtt_InitFont_internal(info, data, fontstart) {
    var cmap, t, i, numTables;

    info.data = data;
    info.fontstart = fontstart;
    info.cff = stbtt__null_buf();

    cmap = stbtt__find_table(data, fontstart, [ 99, 109, 97, 112 ]);		//"cmap"
    info.loca = stbtt__find_table(data, fontstart, [ 108, 111, 99, 97 ]);	//"loca"
    info.head = stbtt__find_table(data, fontstart, [ 104, 101, 97, 100 ]);	//"head"
    info.glyf = stbtt__find_table(data, fontstart, [ 103, 108, 121, 102 ]);	//"glyf"
    info.hhea = stbtt__find_table(data, fontstart, [ 104, 104, 101, 97 ]);	//"hhea"
    info.hmtx = stbtt__find_table(data, fontstart, [ 104, 109, 116, 120 ]);	//"hmtx"
    info.kern = stbtt__find_table(data, fontstart, [ 107, 101, 114, 110 ]);	//"kern"

    if (!cmap || !info.head || !info.hhea || !info.hmtx) {
        return 0;
    }
    if (info.glyf) {
        if (!info.loca) {
            return 0;
        }
    } else {
        var b, topdict, topdictidx, cff,
			cstype = 2, charstrings = 0, fdarrayoff = 0, fdselectoff = 0;

        cff = stbtt__find_table(data, fontstart, [ 67, 70, 70, 32 ]);	//"CFF "
        if (!cff) {
            return 0;
        }

        info.fontdicts = stbtt__null_buf();
        info.fdselect = stbtt__null_buf();

        info.cff = data.subarray(cff); //stbtt__new_buf(data + cff, 512 * 1024 * 1024);
		info.cff.cursor = 0;
        b = info.cff;

        stbtt__buf_skip(b, 2);
        stbtt__buf_seek(b, stbtt__buf_get8(b));

        stbtt__cff_get_index(b);
        topdictidx = stbtt__cff_get_index(b);
        topdict = stbtt__cff_index_get(topdictidx, 0);
        stbtt__cff_get_index(b);
        info.gsubrs = stbtt__cff_get_index(b);

        charstrings = stbtt__dict_get_int(topdict, 17, charstrings);
        cstype = stbtt__dict_get_int(topdict, 0x100 | 6, cstype);
        fdarrayoff = stbtt__dict_get_int(topdict, 0x100 | 36, fdarrayoff);
        fdselectoff = stbtt__dict_get_int(topdict, 0x100 | 37, fdselectoff);
        info.subrs = stbtt__get_subrs(b, topdict);

        if (cstype != 2) {
            return 0;
        }
        if (charstrings == 0) {
            return 0;
        }

        if (fdarrayoff) {
            if (!fdselectoff) {
                return 0;
            }
            stbtt__buf_seek(b, fdarrayoff);
            info.fontdicts = stbtt__cff_get_index(b);
            info.fdselect = stbtt__buf_range(b, fdselectoff, b.length - fdselectoff);
        }

        stbtt__buf_seek(b, charstrings);
        info.charstrings = stbtt__cff_get_index(b);
    }

    t = stbtt__find_table(data, fontstart, [ 109, 97, 120, 112 ]);	//"maxp"
    if (t) {
        info.numGlyphs = ttUSHORT(data, t + 4);
    }
    else {
        info.numGlyphs = 0xffff;
    }

    numTables = ttUSHORT(data, cmap + 2);
    info.index_map = 0;
    for (i = 0; i < numTables; ++i) {
        var encoding_record = cmap + 4 + 8 * i;

        switch (ttUSHORT(data, encoding_record)) {
        case STBTT_PLATFORM_ID_MICROSOFT:
            switch (ttUSHORT(data, encoding_record + 2)) {
            case STBTT_MS_EID_UNICODE_BMP:
            case STBTT_MS_EID_UNICODE_FULL:
                info.index_map = cmap + ttULONG(data, encoding_record + 4);
                break;
            }
            break;
        case STBTT_PLATFORM_ID_UNICODE:
            info.index_map = cmap + ttULONG(data, encoding_record + 4);
            break;
        }
    }
    if (info.index_map == 0) {
        return 0;
    }

    info.indexToLocFormat = ttUSHORT(data, info.head + 50);
    return 1;
}

//extern int stbtt_FindGlyphIndex(const stbtt_fontinfo * info, int unicode_codepoint)
function stbtt_FindGlyphIndex(info, unicode_codepoint) {
    var data = info.data, index_map = info.index_map;

    var format = ttUSHORT(data, index_map + 0);
    if (format == 0) {
        var bytes = ttUSHORT(data, index_map + 2);
        if (unicode_codepoint < bytes - 6) {
            return data[index_map + 6 + unicode_codepoint];
		}
        return 0;
    } else if (format == 6) {
        var first = ttUSHORT(data, index_map + 6),
            count = ttUSHORT(data, index_map + 8);
        if (unicode_codepoint >= first && unicode_codepoint < first + count) {
            return ttUSHORT(data, index_map + 10 + (unicode_codepoint - first) * 2);
		}
        return 0;
    } else if (format == 2) {
        return 0;
    } else if (format == 4) {
        var segcount = ttUSHORT(data, index_map + 6) >> 1,
            searchRange = ttUSHORT(data, index_map + 8) >> 1,
            entrySelector = ttUSHORT(data, index_map + 10),
            rangeShift = ttUSHORT(data, index_map + 12) >> 1,
			endCount = index_map + 14,
            search = endCount;

        if (unicode_codepoint > 0xffff) {
            return 0;
        }

        if (unicode_codepoint >= ttUSHORT(data, search + rangeShift * 2)) {
            search += rangeShift * 2;
        }

        search -= 2;
        while (entrySelector) {
            searchRange >>= 1;
            var end = ttUSHORT(data, search + searchRange * 2);
            if (unicode_codepoint > end) {
                search += searchRange * 2;
            }
            --entrySelector;
        }
        search += 2;

		var offset, start, item = (search - endCount) >>> 1;

		start = ttUSHORT(data, index_map + 14 + segcount * 2 + 2 + 2 * item);
		if (unicode_codepoint < start) {
			return 0;
		}

		offset = ttUSHORT(data, index_map + 14 + segcount * 6 + 2 + 2 * item);
		if (offset == 0) {
			return unicode_codepoint + ttSHORT(data, index_map + 14 + segcount * 4 + 2 + 2 * item);
		}
		return ttUSHORT(data, offset + (unicode_codepoint - start) * 2 +
								index_map + 14 + segcount * 6 + 2 +	2 * item);
    } else if (format == 12 || format == 13) {
        var ngroups = ttULONG(data, index_map + 12),
			low = 0, high = ngroups;
         while (low < high) {
            var mid = low + ((high - low) >> 1);
            var start_char = ttULONG(data, index_map + 16 + mid * 12);
            var end_char = ttULONG(data, index_map + 16 + mid * 12 + 4);
            if (unicode_codepoint < start_char) {
                high = mid;
            } else if (unicode_codepoint > end_char) {
                low = mid + 1;
            } else {
                var start_glyph = ttULONG(data, index_map + 16 + mid * 12 + 8);
                if (format == 12) {
                    return start_glyph + unicode_codepoint - start_char;
				} else {
                    return start_glyph;
                }
            }
        }
        return 0;
    }
    return 0;
}

//static void stbtt_setvertex(stbtt_vertex * v, unsigned char type, int x, int y, int cx, int cy)
function stbtt_setvertex(v, type, x, y, cx, cy) {
    v.type = type;
    v.x = x;
    v.y = y;
    v.cx = cx;
    v.cy = cy;
}

//static int stbtt__GetGlyfOffset(const stbtt_fontinfo * info, int glyph_index)
function stbtt__GetGlyfOffset(info, glyph_index) {
    var  g1, g2;
    if (glyph_index >= info.numGlyphs) {
        return -1;
    }
    if (info.indexToLocFormat >= 2) {
        return -1;
    }

    if (info.indexToLocFormat == 0) {
        g1 = info.glyf + ttUSHORT(info.data, info.loca + glyph_index * 2) * 2;
        g2 = info.glyf + ttUSHORT(info.data, info.loca + glyph_index * 2 + 2) * 2;
    } else {
        g1 = info.glyf + ttULONG(info.data, info.loca + glyph_index * 4);
        g2 = info.glyf + ttULONG(info.data, info.loca + glyph_index * 4 + 4);
    }

    return g1 == g2 ? -1 : g1;
}

//extern int stbtt_GetGlyphBox(const stbtt_fontinfo * info, int glyph_index, int *x0, int *y0, int *x1, int *y1)
function stbtt_GetGlyphBox(info, glyph_index, out) {
    if (info.cff.length) {
        stbtt__GetGlyphInfoT2(info, glyph_index, out);
    } else {
        var g = stbtt__GetGlyfOffset(info, glyph_index);
        if (g < 0) {
            return 0;
        }
	    out.x0 = ttSHORT(info.data, g + 2);
		out.y0 = ttSHORT(info.data, g + 4);
		out.x1 = ttSHORT(info.data, g + 6);
		out.y1 = ttSHORT(info.data, g + 8);
    }
    return 1;
}

//static int stbtt__close_shape(stbtt_vertex * vertices, int num_vertices, int was_off,
//                   int start_off, int sx, int sy, int scx, int scy, int cx, int cy)
function stbtt__close_shape(vertices, num_vertices, was_off, start_off, sx, sy, scx, scy, cx, cy) {
    if (start_off) {
        if (was_off) {
            stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve,
                            (cx + scx) >> 1, (cy + scy) >> 1, cx, cy);
		}
        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, sx, sy, scx, scy);
    } else {
        if (was_off) {
            stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, sx, sy, cx, cy);
		} else {
            stbtt_setvertex(vertices[num_vertices++], STBTT_vline, sx, sy, 0, 0);
		}
    }
    return num_vertices;
}

//static int stbtt__GetGlyphShapeTT(const stbtt_fontinfo * info, int glyph_index, stbtt_vertex ** pvertices)
function stbtt__GetGlyphShapeTT(info, glyph_index) {
    var data = info.data,
		g = stbtt__GetGlyfOffset(info, glyph_index);

	if (g < 0) {
        return null;
    }

	var vertices = [];
    var numberOfContours = ttSHORT(data, g);
    if (numberOfContours > 0) {
        var flags = 0, flagcount,
			i, j = 0, m, n, next_move, was_off = 0, off, start_off = 0,
			x, y, cx, cy, sx, sy, scx, scy;
        var endPtsOfContours = g + 10;
        var ins = ttUSHORT(data, g + 10 + numberOfContours * 2);
        var points = data.subarray(g + 10 + numberOfContours * 2 + 2 + ins);
		var ptsoff = 0;

        n = 1 + ttUSHORT(data, endPtsOfContours + numberOfContours * 2 - 2);
        m = n + 2 * numberOfContours;

        vertices = oalloc(m);
        next_move = 0;
        flagcount = 0;
        off = m - n;

        for (i = 0; i < n; ++i) {
            if (flagcount == 0) {
                flags = points[ptsoff++];
                if (flags & 8) {
                    flagcount = points[ptsoff++];
                }
            } else {
                --flagcount;
            }
            vertices[off + i].type = flags;
        }

        x = 0;
        for (i = 0; i < n; ++i) {
            flags = vertices[off + i].type;
            if (flags & 2) {
                var dx = points[ptsoff++];
                x += (flags & 16) ? dx : -dx;
            } else {
                if (!(flags & 16)) {
                    x = x + INT16(points[ptsoff] * 256 + points[ptsoff+1]);
                    ptsoff += 2;
                }
            }
            vertices[off + i].x = x;
        }

        y = 0;
        for (i = 0; i < n; ++i) {
            flags = vertices[off + i].type;
            if (flags & 4) {
                var dy = points[ptsoff++];
                y += (flags & 32) ? dy : -dy;
            } else {
                if (!(flags & 32)) {
                    y = y + INT16(points[ptsoff] * 256 + points[ptsoff+1]);
                    ptsoff += 2;
                }
            }
            vertices[off + i].y = y;
        }

        var num_vertices = 0;
        sx = sy = cx = cy = scx = scy = 0;
        for (i = 0; i < n; ++i) {
            flags = vertices[off + i].type;
            x = vertices[off + i].x;
            y = vertices[off + i].y;

            if (next_move == i) {
                if (i != 0) {
                    num_vertices = stbtt__close_shape(vertices, num_vertices, was_off, start_off,
											sx, sy, scx, scy, cx, cy);
				}
                start_off = !(flags & 1);
                if (start_off) {
                    scx = x;
                    scy = y;
                    if (!(vertices[off + i + 1].type & 1)) {
                        sx = (x + vertices[off + i + 1].x) >> 1;
                        sy = (y + vertices[off + i + 1].y) >> 1;
                    } else {
                        sx = vertices[off + i + 1].x;
                        sy = vertices[off + i + 1].y;
                        ++i;
                    }
                } else {
                    sx = x;
                    sy = y;
                }
                stbtt_setvertex(vertices[num_vertices++], STBTT_vmove, sx, sy, 0, 0);
                was_off = 0;
                next_move = 1 + ttUSHORT(data, endPtsOfContours + j * 2);
                ++j;
            } else {
                if (!(flags & 1)) {
                    if (was_off) {
                        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve,
                                        (cx + x) >> 1, (cy + y) >> 1, cx, cy);
					}
                    cx = x;
                    cy = y;
                    was_off = 1;
                } else {
                    if (was_off) {
                        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, x, y, cx, cy);
                    } else {
                        stbtt_setvertex(vertices[num_vertices++], STBTT_vline, x, y, 0, 0);
					}
                    was_off = 0;
                }
            }
        }
        vertices.length = stbtt__close_shape(vertices, num_vertices, was_off, start_off,
												sx, sy, scx, scy, cx, cy);
    } else if (numberOfContours == -1) {
        var more = 1;
        var comp = g + 10;
         while (more) {
            var flags, gidx, mtx = [ 1, 0, 0, 1, 0, 0 ];

            flags = ttSHORT(data, comp);
            comp += 2;
            gidx = ttSHORT(data, comp);
            comp += 2;

            if (flags & 2) {
                if (flags & 1) {
                    mtx[4] = ttSHORT(data, comp);
                    comp += 2;
                    mtx[5] = ttSHORT(data, comp);
                    comp += 2;
                } else {
                    mtx[4] = stbtt__buf_get8(data, comp);
                    comp += 1;
                    mtx[5] = stbtt__buf_get8(data, comp);
                    comp += 1;
                }
            }
            if (flags & (1 << 3)) {
                mtx[0] = mtx[3] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[1] = mtx[2] = 0;
            } else if (flags & (1 << 6)) {
                mtx[0] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[1] = mtx[2] = 0;
                mtx[3] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
            } else if (flags & (1 << 7)) {
                mtx[0] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[1] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[2] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[3] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
            }

            var m = sqrt(mtx[0] * mtx[0] + mtx[1] * mtx[1]);
            var n = sqrt(mtx[2] * mtx[2] + mtx[3] * mtx[3]);
            var comp_verts = stbtt_GetGlyphShape(info, gidx);
            if (comp_verts.length > 0) {
                for (var i = 0, l = comp_verts.length; i < l; ++i) {
                    var v = comp_verts[i], x, y;
					x = v.x;
					y = v.y;
                    v.x = floor(m * (mtx[0] * x + mtx[2] * y + mtx[4]));
                    v.y = floor(n * (mtx[1] * x + mtx[3] * y + mtx[5]));
                    x = v.cx;
                    y = v.cy;
                    v.cx = floor(m * (mtx[0] * x + mtx[2] * y + mtx[4]));
                    v.cy = floor(n * (mtx[1] * x + mtx[3] * y + mtx[5]));
                }

				vertices = vertices.concat(comp_verts);
            }
            more = flags & (1 << 5);
        }
    }
	//console.log('vertices(' + vertices.length + ')');
	//for (var i = 0; i < vertices.length; i++) {
	//	var pt = vertices[i];
	//	console.log(`${i}: ${pt.x},${pt.y} / ${pt.cx},${pt.cy} / ${pt.type}`);
	//}

    return vertices;
}

//static void stbtt__track_vertex(stbtt__csctx * c, int x, int y)
function stbtt__track_vertex(c, x, y) {
    if (x > c.max_x || !c.started) {
        c.max_x = x;
    }
    if (y > c.max_y || !c.started) {
        c.max_y = y;
    }
    if (x < c.min_x || !c.started) {
        c.min_x = x;
    }
    if (y < c.min_y || !c.started) {
        c.min_y = y;
    }
    c.started = 1;
}

//static void stbtt__csctx_v(stbtt__csctx * c, unsigned char type, int x, int y, int cx, int cy, int cx1, int cy1)
function stbtt__csctx_v(c, type, x, y, cx, cy, cx1, cy1) {
	stbtt__track_vertex(c, x, y);
	if (type == STBTT_vcubic) {
		stbtt__track_vertex(c, cx, cy);
		stbtt__track_vertex(c, cx1, cy1);
	}
	var v = {};
	stbtt_setvertex(v, type, x, y, cx, cy);
	v.cx1 = cx1;
	v.cy1 = cy1;
	c.vertices.push(v);
 }

//static void stbtt__csctx_close_shape(stbtt__csctx * ctx)
function stbtt__csctx_close_shape(ctx) {
    if (ctx.first_x != ctx.x || ctx.first_y != ctx.y) {
        stbtt__csctx_v(ctx, STBTT_vline, ctx.first_x, ctx.first_y, 0, 0, 0, 0);
	}
}

//static void stbtt__csctx_rmove_to(stbtt__csctx * ctx, float dx, float dy)
function stbtt__csctx_rmove_to(ctx, dx, dy) {
    stbtt__csctx_close_shape(ctx);
    ctx.first_x = ctx.x = ctx.x + dx;
    ctx.first_y = ctx.y = ctx.y + dy;
    stbtt__csctx_v(ctx, STBTT_vmove, ctx.x, ctx.y, 0, 0, 0, 0);
}

//static void stbtt__csctx_rline_to(stbtt__csctx * ctx, float dx, float dy)
function stbtt__csctx_rline_to(ctx, dx, dy) {
    ctx.x += dx;
    ctx.y += dy;
    stbtt__csctx_v(ctx, STBTT_vline, ctx.x, ctx.y, 0, 0, 0, 0);
}

//static void stbtt__csctx_rccurve_to(stbtt__csctx * ctx, float dx1, float dy1, float dx2,
//									float dy2, float dx3, float dy3)
function stbtt__csctx_rccurve_to(ctx, dx1, dy1, dx2, dy2, dx3, dy3) {
    var cx1 = ctx.x + dx1,
		cy1 = ctx.y + dy1,
		cx2 = cx1 + dx2,
		cy2 = cy1 + dy2;
    ctx.x = cx2 + dx3;
    ctx.y = cy2 + dy3;
    stbtt__csctx_v(ctx, STBTT_vcubic, ctx.x, ctx.y, cx1, cy1, cx2, cy2);
}

//static stbtt__buf stbtt__get_subr(stbtt__buf idx, int n)
function stbtt__get_subr(b, n) {
    var count = stbtt__cff_index_count(b);
    var bias = 107;
    if (count >= 33900) {
        bias = 32768;
    } else if (count >= 1240) {
        bias = 1131;
    }
    n += bias;
    if (n < 0 || n >= count) {
        return stbtt__null_buf();
    }
    return stbtt__cff_index_get(b, n);
}

//static stbtt__buf stbtt__cid_get_glyph_subrs(const stbtt_fontinfo * info, int glyph_index)
function stbtt__cid_get_glyph_subrs(info, glyph_index) {
    var fdselect = info.fdselect;
    var nranges, start, end, v, fmt, fdselector = -1, i;

    stbtt__buf_seek(fdselect, 0);
    fmt = stbtt__buf_get8(fdselect);
    if (fmt == 0) {
        stbtt__buf_skip(fdselect, glyph_index);
        fdselector = stbtt__buf_get8(fdselect);
    } else if (fmt == 3) {
        nranges = stbtt__buf_get(fdselect, 2);
        start = stbtt__buf_get(fdselect, 2);
        for (i = 0; i < nranges; i++) {
            v = stbtt__buf_get8(fdselect);
            end = stbtt__buf_get(fdselect, 2);
            if (glyph_index >= start && glyph_index < end) {
                fdselector = v;
                break;
            }
            start = end;
        }
    }
    if (fdselector == -1) {
        stbtt__null_buf();
    }
    return stbtt__get_subrs(info.cff, stbtt__cff_index_get(info.fontdicts, fdselector));
}

//static int stbtt__run_charstring(const stbtt_fontinfo * info, int glyph_index,
//								   stbtt__csctx * c)
function stbtt__run_charstring(info, glyph_index, c) {
    var in_header = 1, maskbits = 0, subr_stack_height = 0, sp = 0, v, i, b0,
		has_subrs = 0, clear_stack,
		s = [], subr_stack = [], subrs = info.subrs, b, f;

    b = stbtt__cff_index_get(info.charstrings, glyph_index);
    while (b.cursor < b.length) {
        i = 0;
        clear_stack = 1;
        b0 = stbtt__buf_get8(b);
        switch (b0) {
        case 0x13:
        case 0x14:
            if (in_header) {
                maskbits += (sp / 2)|0;
            }
            in_header = 0;
            stbtt__buf_skip(b, ((maskbits + 7) / 8)|0);
            break;

        case 0x01:
        case 0x03:
        case 0x12:
        case 0x17:
            maskbits += (sp / 2)|0;
            break;

        case 0x15:
            in_header = 0;
            if (sp < 2) {
                return 0;
            }
            stbtt__csctx_rmove_to(c, s[sp - 2], s[sp - 1]);
            break;
        case 0x04:
            in_header = 0;
            if (sp < 1) {
                return 0;
            }
            stbtt__csctx_rmove_to(c, 0, s[sp - 1]);
            break;
        case 0x16:
            in_header = 0;
            if (sp < 1) {
                return 0;
            }
            stbtt__csctx_rmove_to(c, s[sp - 1], 0);
            break;

        case 0x05:
            if (sp < 2) {
                return 0;
            }
            for (; i + 1 < sp; i += 2) {
                stbtt__csctx_rline_to(c, s[i], s[i + 1]);
            }
            break;

        case 0x07:
            if (sp < 1) {
                return 0;
            }
			for (;;) {
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, 0, s[i]);
                i++;
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, s[i], 0);
                i++;
			}
			break;
        case 0x06:
            if (sp < 1) {
                return 0;
            }
            for (;;) {
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, s[i], 0);
                i++;
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, 0, s[i]);
                i++;
            }
            break;

        case 0x1F:
            if (sp < 4) {
                return 0;
            }
			for (;;) {
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, s[i], 0, s[i + 1], s[i + 2],
                                        (sp - i == 5) ? s[i + 4] : 0.0,
                                        s[i + 3]);
                i += 4;
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, 0, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        (sp - i == 5) ? s[i + 4] : 0.0);
                i += 4;
			}
			break;
        case 0x1E:
            if (sp < 4) {
                return 0;
            }
            for (;;) {
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, 0, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        (sp - i == 5) ? s[i + 4] : 0.0);
                i += 4;
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, s[i], 0, s[i + 1], s[i + 2],
                                        (sp - i == 5) ? s[i + 4] : 0.0,
                                        s[i + 3]);
                i += 4;
            }
            break;

        case 0x08:
            if (sp < 6) {
                return 0;
            }
            for (; i + 5 < sp; i += 6) {
                stbtt__csctx_rccurve_to(c, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        s[i + 4], s[i + 5]);
			}
            break;

        case 0x18:
            if (sp < 8) {
                return 0;
            }
            for (; i + 5 < sp - 2; i += 6) {
                stbtt__csctx_rccurve_to(c, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        s[i + 4], s[i + 5]);
			}
            if (i + 1 >= sp) {
                return 0;
            }
            stbtt__csctx_rline_to(c, s[i], s[i + 1]);
            break;

        case 0x19:
            if (sp < 8) {
                return 0;
            }
            for (; i + 1 < sp - 6; i += 2) {
                stbtt__csctx_rline_to(c, s[i], s[i + 1]);
            }
            if (i + 5 >= sp) {
                return 0;
            }
            stbtt__csctx_rccurve_to(c, s[i], s[i + 1], s[i + 2],
                                    s[i + 3], s[i + 4], s[i + 5]);
            break;

        case 0x1A:
        case 0x1B:
            if (sp < 4) {
                return 0;
            }
            f = 0.0;
            if (sp & 1) {
                f = s[i];
                i++;
            }
            for (; i + 3 < sp; i += 4) {
                if (b0 == 0x1B) {
                    stbtt__csctx_rccurve_to(c, s[i], f,
                                            s[i + 1],
                                            s[i + 2],
                                            s[i + 3], 0.0);
                } else {
                    stbtt__csctx_rccurve_to(c, f, s[i],
                                            s[i + 1],
                                            s[i + 2], 0.0,
                                            s[i + 3]);
				}
                f = 0.0;
            }
            break;

        case 0x0A:
            if (!has_subrs) {
                if (info.fdselect.length) {
                    subrs = stbtt__cid_get_glyph_subrs(info, glyph_index);
				}
                has_subrs = 1;
            }

        case 0x1D:
            if (sp < 1) {
                return 0;
            }
            v = s[--sp]|0;
            if (subr_stack_height >= 10) {
                return 0;
            }
            subr_stack[subr_stack_height++] = b;
            b = stbtt__get_subr(b0 == 0x0A ? subrs : info.gsubrs, v);
            if (b.length == 0) {
                return 0;
            }
            b.cursor = 0;
            clear_stack = 0;
            break;

        case 0x0B:
            if (subr_stack_height <= 0) {
                return 0;
            }
            b = subr_stack[--subr_stack_height];
            clear_stack = 0;
            break;

        case 0x0E:
            stbtt__csctx_close_shape(c);
            return 1;

        case 0x0C:
            var dx1, dx2, dx3, dx4, dx5, dx6, dy1, dy2, dy3, dy4, dy5, dy6,
				dx, dy, b1 = stbtt__buf_get8(b);
            switch (b1) {
            case 0x22:
                if (sp < 7) {
                    return 0;
                }
                dx1 = s[0];
                dx2 = s[1];
                dy2 = s[2];
                dx3 = s[3];
                dx4 = s[4];
                dx5 = s[5];
                dx6 = s[6];
                stbtt__csctx_rccurve_to(c, dx1, 0, dx2, dy2, dx3, 0);
                stbtt__csctx_rccurve_to(c, dx4, 0, dx5, -dy2, dx6, 0);
                break;

            case 0x23:
                if (sp < 13) {
                    return 0;
                }
                dx1 = s[0];
                dy1 = s[1];
                dx2 = s[2];
                dy2 = s[3];
                dx3 = s[4];
                dy3 = s[5];
                dx4 = s[6];
                dy4 = s[7];
                dx5 = s[8];
                dy5 = s[9];
                dx6 = s[10];
                dy6 = s[11];

                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, dy3);
                stbtt__csctx_rccurve_to(c, dx4, dy4, dx5, dy5, dx6, dy6);
                break;

            case 0x24:
                if (sp < 9) {
                    return 0;
                }
                dx1 = s[0];
                dy1 = s[1];
                dx2 = s[2];
                dy2 = s[3];
                dx3 = s[4];
                dx4 = s[5];
                dx5 = s[6];
                dy5 = s[7];
                dx6 = s[8];
                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, 0);
                stbtt__csctx_rccurve_to(c, dx4, 0, dx5, dy5, dx6, -(dy1 + dy2 + dy5));
                break;

            case 0x25:
                if (sp < 11) {
                    return 0;
                }
                dx1 = s[0];
                dy1 = s[1];
                dx2 = s[2];
                dy2 = s[3];
                dx3 = s[4];
                dy3 = s[5];
                dx4 = s[6];
                dy4 = s[7];
                dx5 = s[8];
                dy5 = s[9];
                dx6 = dy6 = s[10];
                dx = dx1 + dx2 + dx3 + dx4 + dx5;
                dy = dy1 + dy2 + dy3 + dy4 + dy5;
                if (abs(dx) > abs(dy)) {
                    dy6 = -dy;
                } else {
                    dx6 = -dx;
                }
                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, dy3);
                stbtt__csctx_rccurve_to(c, dx4, dy4, dx5, dy5, dx6, dy6);
                break;

            default:
                return 0;
            }
        	break;

        default:
            if (b0 != 255 && b0 != 28 && (b0 < 32 || b0 > 254)) {
                return 0;
            }
            if (b0 == 255) {
                // f = (float)(stbtt_int32)stbtt__buf_get32(&b) / 0x10000;
                f = (stbtt__buf_get(b, 4)|0) / 0x10000;
            } else {
                stbtt__buf_skip(b, -1);
                // f = (float)(stbtt_int16)stbtt__cff_int(&b);
                f = ((stbtt__cff_int(b)<<16)|0)>>16;
            }
            if (sp >= 48) {
                return 0;
            }
            s[sp++] = f;
            clear_stack = 0;
            break;
        }
        if (clear_stack) {
            sp = 0;
        }
    }
    return 0;
}

function stbtt__csctx_init() {
	return { started:0, first_x:0, first_y:0, x:0, y:0,
			min_x:0, max_x:0, min_y:0, max_y:0,
			vertices:[]
		};
}

//static int stbtt__GetGlyphShapeT2(const stbtt_fontinfo * info, int glyph_index,
//									stbtt_vertex ** pvertices)
function stbtt__GetGlyphShapeT2(info, glyph_index) {
    var output_ctx = stbtt__csctx_init();
    if (stbtt__run_charstring(info, glyph_index, output_ctx)) {
		return output_ctx.vertices;
    }
    return null;
}

//static int stbtt__GetGlyphInfoT2(const stbtt_fontinfo * info, int glyph_index, int *x0,
//                      int *y0, int *x1, int *y1)
function stbtt__GetGlyphInfoT2(info, glyph_index, out) {
    var c = stbtt__csctx_init();
    var r = stbtt__run_charstring(info, glyph_index, c);
	out.x0 = r ? c.min_x : 0;
	out.y0 = r ? c.min_y : 0;
	out.x1 = r ? c.max_x : 0;
	out.y1 = r ? c.max_y : 0;
    return r && c.vertices ? c.vertices.length : 0;
}

//extern int stbtt_GetGlyphShape(const stbtt_fontinfo * info, int glyph_index,
//								 stbtt_vertex ** pvertices)
function stbtt_GetGlyphShape(info, glyph_index) {
    if (!info.cff.length) {
        return stbtt__GetGlyphShapeTT(info, glyph_index);
    } else {
        return stbtt__GetGlyphShapeT2(info, glyph_index);
    }
}

//extern void stbtt_GetGlyphHMetrics(const stbtt_fontinfo * info, int glyph_index,
//                       int *advanceWidth, int *leftSideBearing)
function stbtt_GetGlyphHMetrics(info, glyph_index) {
    var numOfLongHorMetrics = ttUSHORT(info.data, info.hhea + 34);
    if (glyph_index < numOfLongHorMetrics) {
		return {
				advanceWidth:   ttSHORT(info.data, info.hmtx + 4 * glyph_index),
				leftSideBearing:ttSHORT(info.data, info.hmtx + 4 * glyph_index + 2)
			};
    } else {
		return {
				advanceWidth:   ttSHORT(info.data, info.hmtx + 4 * (numOfLongHorMetrics - 1)),
				leftSideBearing:ttSHORT(info.data, info.hmtx + 4 * numOfLongHorMetrics +
											2 * (glyph_index - numOfLongHorMetrics))
			};
    }
}

//extern void stbtt_GetCodepointHMetrics(const stbtt_fontinfo * info, int codepoint,
//                           int *advanceWidth, int *leftSideBearing)
function stbtt_GetCodepointHMetrics(info, codepoint) {
     return stbtt_GetGlyphHMetrics(info, stbtt_FindGlyphIndex(info, codepoint));
}

//extern void stbtt_GetFontVMetrics(const stbtt_fontinfo * info, int *ascent, int *descent, int *lineGap)
function stbtt_GetFontVMetrics(info) {
	return {
        ascent:	ttSHORT(info.data, info.hhea + 4),
        descent:ttSHORT(info.data, info.hhea + 6),
        linegap:ttSHORT(info.data, info.hhea + 8),
	};
}

//extern void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo * font, int glyph,
//                              float scale_x, float scale_y, float shift_x, float shift_y,
//								int *ix0, int *iy0, int *ix1, int *iy1)
function stbtt_GetGlyphBitmapBoxSubpixel(font, glyph, scale_x, scale_y, shift_x, shift_y) {
    var tmp = {};
    if (!stbtt_GetGlyphBox(font, glyph, tmp)) {
		return { x0:0, y0:0, x1:0, y1:0 };
    }
	return {
			x0:floor(tmp.x0 * scale_x + shift_x),
			y0:floor(-tmp.y1 * scale_y + shift_y),
			x1:ceil(tmp.x1 * scale_x + shift_x),
			y1:ceil(-tmp.y0 * scale_y + shift_y),
		};
}

//extern void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo * font,
//                                    int codepoint, float scale_x, float scale_y, float shift_x,
//                                    float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)
function stbtt_GetCodepointBitmapBoxSubpixel(font, codepoint, scale_x, scale_y, shift_x, shift_y) {
    return stbtt_GetGlyphBitmapBoxSubpixel(font, stbtt_FindGlyphIndex(font, codepoint),
											scale_x, scale_y, shift_x, shift_y);
}

//extern void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo * font, int codepoint,	float scale_x, float scale_y,
//										int *ix0, int *iy0, int *ix1, int *iy1)
function stbtt_GetCodepointBitmapBox(font, codepoint, scale_x, scale_y) {
    return stbtt_GetCodepointBitmapBoxSubpixel(font, codepoint, scale_x, scale_y, 0, 0);
}

//static stbtt__active_edge *stbtt__new_active(stbtt__hheap * hh, stbtt__edge * e, int off_x, float start_point, void *userdata)
function stbtt__new_active(e, off_x, start_point) {
    var dxdy = (e.x1 - e.x0) / (e.y1 - e.y0);
	return {
		fdx:dxdy,
		fdy:dxdy != 0.0 ? (1.0 / dxdy) : 0.0,
		fx:(e.x0 + dxdy * (start_point - e.y0)) - (off_x|0),
		direction:e.invert ? 1.0 : -1.0,
		sy:e.y0,
		ey:e.y1,
		next:0,
    };
}

//static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge * e,
//                           float x0, float y0, float x1, float y1)
function stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1) {
	x = x|0;
    if (y0 == y1) {
        return;
    }
    if (y0 > e.ey) {
        return;
    }
    if (y1 < e.sy) {
        return;
    }
    if (y0 < e.sy) {
        x0 += (x1 - x0) * (e.sy - y0) / (y1 - y0);
        y0 = e.sy;
    }
    if (y1 > e.ey) {
        x1 += (x1 - x0) * (e.ey - y1) / (y1 - y0);
        y1 = e.ey;
    }

    if (x0 <= x && x1 <= x) {
        scanline[x] += e.direction * (y1 - y0);
    } else if (x0 >= x + 1 && x1 >= x + 1) {

    } else {
        scanline[x] += e.direction * (y1 - y0) * (1 - ((x0 - x) + (x1 - x)) / 2);
    }
}

//static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len,
//                             stbtt__active_edge * e, float y_top)
// The C implementation passed scanline_fill as a +1 pointer on the call, and then -1 in
// places in this function.  That doesn't work with array-views, so we reverse the handling.
function stbtt__fill_active_edges_new(scanline, scanline_fill, len, e, y_top) {
    var y_bottom = y_top + 1;
    while (e) {
        if (e.fdx == 0) {
            var x0 = e.fx;
            if (x0 < len) {
                if (x0 >= 0) {
                    stbtt__handle_clipped_edge(scanline, x0, e, x0, y_top, x0, y_bottom);
                    stbtt__handle_clipped_edge(scanline_fill, x0+1, e, x0, y_top, x0, y_bottom);
                } else {
                    stbtt__handle_clipped_edge(scanline_fill, 0, e, x0, y_top, x0, y_bottom);
                }
            }
        } else {
            var x0 = e.fx,
				dx = e.fdx,
				xb = x0 + dx,
				x_top, x_bottom,
				sy0, sy1,
				dy = e.fdy;

            if (e.sy > y_top) {
                x_top = x0 + dx * (e.sy - y_top);
                sy0 = e.sy;
            } else {
                x_top = x0;
                sy0 = y_top;
            }
            if (e.ey < y_bottom) {
                x_bottom = x0 + dx * (e.ey - y_top);
                sy1 = e.ey;
            } else {
                x_bottom = xb;
                sy1 = y_bottom;
            }

            if (x_top >= 0 && x_bottom >= 0 && x_top < len && x_bottom < len) {
                if ((x_top|0) == (x_bottom|0)) {
                    var height = sy1 - sy0,
						x = x_top|0;
                    scanline[x] += e.direction * (1 - ((x_top - x) + (x_bottom - x)) / 2) * height;
                    scanline_fill[x+1] += e.direction * height;
                } else {
                    var t, x, x1, x2, y_crossing, step, sign, area;
                    if (x_top > x_bottom) {
                        sy0 = y_bottom - (sy0 - y_top);
                        sy1 = y_bottom - (sy1 - y_top);
                        t = sy0, sy0 = sy1, sy1 = t;
                        t = x_bottom, x_bottom = x_top, x_top = t;
                        dx = -dx;
                        dy = -dy;
                        t = x0, x0 = xb, xb = t;
                    }

                    x1 = x_top|0;
                    x2 = x_bottom|0;
                    y_crossing = (x1 + 1 - x0) * dy + y_top;
                    sign = e.direction;
                    area = sign * (y_crossing - sy0);

                    scanline[x1] += area * (1 - ((x_top - x1) + (x1 + 1 - x1)) / 2);

                    step = sign * dy;
                    for (x = x1 + 1; x < x2; ++x) {
                        scanline[x] += area + step / 2;
                        area += step;
                    }
                    y_crossing += dy * (x2 - (x1 + 1));

                    scanline[x2] += area + sign * (1 - ((x2 - x2) + (x_bottom - x2)) / 2) *
												(sy1 - y_crossing);
                    scanline_fill[x2+1] += sign * (sy1 - sy0);
                }
            } else {
                for (var x = 0; x < len; ++x) {
                    var y0 = y_top,
						x1 = x,
						x2 = x + 1,
						x3 = xb,
						y3 = y_bottom,
						y1 = (x - x0) / dx + y_top,
						y2 = (x + 1 - x0) / dx + y_top;

                    if (x0 < x1 && x3 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);
                    } else if (x3 < x1 && x0 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);
                    } else if (x0 < x1 && x3 > x1) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);
                    } else if (x3 < x1 && x0 > x1) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);
                    } else if (x0 < x2 && x3 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);
                    } else if (x3 < x2 && x0 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);
                    } else {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x3, y3);
                    }
                }
            }
        }
        e = e.next;
    }
}

//static void stbtt__rasterize_sorted_edges(stbtt__bitmap * result, stbtt__edge * e, int n,
//                              int vsubsample, int off_x, int off_y, void *userdata)
function stbtt__rasterize_sorted_edges(result, edges, nedges, vsubsample, off_x, off_y) {
	vsubsample |= 0, off_x |= 0, off_y |= 0;
    var active = null, z;
    var y = off_y, j = 0, i;
    var scanline = new Float32Array(result.w * 2 + 1);
    var scanline2 = scanline.subarray(result.w);
	var eoff = 0;

    edges[nedges].y0 = off_y + result.h + 1;
    while (j < result.h) {
        var scan_y_top = y + 0.0,
			scan_y_bottom = y + 1.0,
			step = active;

		// F'ing IE
		if (scanline.fill) { scanline.fill(0); }
		else { for (var $i = 0, $l = scanline.length; $i < $l; $i++) scanline[$i] = 0; }

        while (step) {
            z = step;
			step = z.next;
            if (z.ey <= scan_y_top) {
                z.direction = 0;
            } else {
			}
        }

        while (edges[eoff].y0 <= scan_y_bottom) {
            if (edges[eoff].y0 != edges[eoff].y1) {
                z = stbtt__new_active(edges[eoff], off_x, scan_y_top);
				z.next = active;
				active = z;
            }
            ++eoff;
        }

        if (active) {
			// C implementation passed scanline2+1.  See function for details.
            stbtt__fill_active_edges_new(scanline, scanline2, result.w, active, scan_y_top);
		}
		for (var i = 0, sum = 0; i < result.w; ++i) {
			var k, m;
			sum += scanline2[i];
			k = scanline[i] + sum;
			k = abs(k) * 255 + 0.5;
			m = k>>>0;
			if (m > 255) {
				m = 255;
			}
			result.pixels[j * result.stride + i] = m;
        }

        step = active;
        while (step) {
            z = step;
            z.fx += z.fdx;
            step = z.next;
        }
        ++y;
        ++j;
    }
}

//static void stbtt__sort_edges_ins_sort(stbtt__edge * p, int n)
function stbtt__sort_edges_ins_sort(p, n) {
    for (var i = 1; i < n; ++i) {
        var t = p[i], j = i;
        while (j > 0 && t.y0 < p[j-1].y0) {
             p[j] = p[j - 1];
            --j;
        }
        if (i != j) {
            p[j] = t;
        }
    }
}

//static void stbtt__sort_edges_quicksort(stbtt__edge * p, int n)
// The C implementation messed with the p pointer.  JS uses an offset instead.
function stbtt__sort_edges_quicksort(p, o, n) {
    while (n > 12) {
        var t, c, i, j, z,
			m = n >> 1,
			c01 = p[o].y0 < p[o+m].y0,
			c12 = p[o+m].y0 < p[o+n-1].y0;

        if (c01 != c12) {
            c = p[o].y0 < p[o+n-11].y0;
            z = (c == c12) ? 0 : n - 1;
            t = p[o+z];
            p[o+z] = p[o+m];
            p[o+m] = t;
        }

        t = p[o];
        p[o] = p[o+m];
        p[o+m] = t;

        i = 1;
        j = n - 1;
        for (;;) {
            for ( ; p[o+i].y0 < p[o].y0; ++i) {
            }
            for ( ; p[o].y0 < p[o+j].y0; --j) {
            }
            if (i >= j) {
                break;
            }
            t = p[o+i];
            p[o+i] = p[o+j];
            p[o+j] = t;

            ++i;
            --j;
        }

        if (j < n - i) {
            stbtt__sort_edges_quicksort(p, o, j);
            o += i;
            n -= i;
        } else {
            stbtt__sort_edges_quicksort(p, o + i, n - i);
            n = j;
        }
    }
}

//static void stbtt__sort_edges(stbtt__edge * p, int n)
function stbtt__sort_edges(p, n) {
    stbtt__sort_edges_quicksort(p, 0, n);
    stbtt__sort_edges_ins_sort(p, n);
}

//static void stbtt__rasterize(stbtt__bitmap * result, stbtt__point * pts, int *wcount,
//                 int windings, float scale_x, float scale_y, float shift_x,
//                 float shift_y, int off_x, int off_y, int invert,
//                 void *userdata)
function stbtt__rasterize(result, pts, wcount, scale_x, scale_y, shift_x, shift_y, off_x, off_y, invert) {
    var y_scale_inv = invert ? -scale_y : scale_y,
		e, n, i, j, k, m,
		vsubsample = 1;

    n = 0;
    for (i = 0; i < wcount.length; ++i) {
        n += wcount[i];
    }

    e = oalloc(n + 1);
    n = 0;
    m = 0;
    for (i = 0; i < wcount.length; ++i) {
        var p = m;
        m += wcount[i];
        j = wcount[i] - 1;
        for (k = 0; k < wcount[i]; j = k++) {
            var a = k, b = j;
            if (pts[p+j].y == pts[p+k].y) {
                continue;
            }

            e[n].invert = 0;
            if (invert ? pts[p+j].y > pts[p+k].y : pts[p+j].y < pts[p+k].y) {
                e[n].invert = 1;
                a = j, b = k;
            }
            e[n].x0 = pts[p+a].x * scale_x + shift_x;
            e[n].y0 = (pts[p+a].y * y_scale_inv + shift_y) * vsubsample;
            e[n].x1 = pts[p+b].x * scale_x + shift_x;
            e[n].y1 = (pts[p+b].y * y_scale_inv + shift_y) * vsubsample;
            ++n;
        }
    }

    stbtt__sort_edges(e, n);
    stbtt__rasterize_sorted_edges(result, e, n, vsubsample, off_x, off_y);
 }

//static int stbtt__tesselate_curve(stbtt__point * points, int *num_points, float x0,
//                       float y0, float x1, float y1, float x2, float y2,
//                       float objspace_flatness_squared, int n)
function stbtt__tesselate_curve(points, x0, y0, x1, y1, x2, y2, objspace_flatness_squared, n) {
    var mx = (x0 + 2 * x1 + x2) / 4,
		my = (y0 + 2 * y1 + y2) / 4,
		dx = (x0 + x2) / 2 - mx,
		dy = (y0 + y2) / 2 - my;
    if (n > 16) {
        return 1;
    }
    if (dx * dx + dy * dy > objspace_flatness_squared) {
        stbtt__tesselate_curve(points, x0, y0, (x0 + x1) / 2.0, (y0 + y1) / 2.0, mx, my,
                               objspace_flatness_squared, n + 1);
        stbtt__tesselate_curve(points, mx, my, (x1 + x2) / 2.0, (y1 + y2) / 2.0, x2, y2,
                               objspace_flatness_squared, n + 1);
    } else {
		points.push({ x:x2, y:y2 });
    }
    return 1;
}

//static void stbtt__tesselate_cubic(stbtt__point * points, int *num_points, float x0,
//                       float y0, float x1, float y1, float x2, float y2,
//                       float x3, float y3, float objspace_flatness_squared, int n)
function stbtt__tesselate_cubic(points, x0, y0, x1, y1, x2, y2, x3, y3, objspace_flatness_squared, n) {
    var dx0 = x1 - x0,
		dy0 = y1 - y0,
		dx1 = x2 - x1,
		dy1 = y2 - y1,
		dx2 = x3 - x2,
		dy2 = y3 - y2,
		dx = x3 - x0,
		dy = y3 - y0,
		longlen = sqrt(dx0 * dx0 + dy0 * dy0) +
				  sqrt(dx1 * dx1 + dy1 * dy1) +
                  sqrt(dx2 * dx2 + dy2 * dy2),
		shortlen = sqrt(dx * dx + dy * dy),
		flatness_squared = longlen * longlen - shortlen * shortlen;
    if (n > 16) {
        return;
    }

    if (flatness_squared > objspace_flatness_squared) {
        var x01 = (x0 + x1) / 2,
			y01 = (y0 + y1) / 2,
			x12 = (x1 + x2) / 2,
			y12 = (y1 + y2) / 2,
			x23 = (x2 + x3) / 2,
			y23 = (y2 + y3) / 2,
			xa = (x01 + x12) / 2,
			ya = (y01 + y12) / 2,
			xb = (x12 + x23) / 2,
			yb = (y12 + y23) / 2,
			mx = (xa + xb) / 2,
			my = (ya + yb) / 2;

        stbtt__tesselate_cubic(points, x0, y0, x01, y01, xa, ya, mx, my,
								objspace_flatness_squared, n + 1);
        stbtt__tesselate_cubic(points, mx, my, xb, yb, x23, y23, x3, y3,
								objspace_flatness_squared, n + 1);
    } else {
		points.push({ x:x3, y:y3 });
    }
}

//static stbtt__point *stbtt_FlattenCurves(stbtt_vertex * vertices, int num_verts,
//        float objspace_flatness, int **contour_lengths, int *num_contours, void *userdata)
function stbtt_FlattenCurves(vertices, objspace_flatness, contour_lengths) {
    var points = [],
		objspace_flatness_squared = objspace_flatness * objspace_flatness,
		n = -1, start = 0,
		x = 0, y = 0;
	for (var i = 0, nverts = vertices.length; i < nverts; ++i) {
		switch (vertices[i].type) {
		case STBTT_vmove:
			if (n >= 0) {
				contour_lengths[n] = points.length - start;
			}
			++n;
			start = points.length;
			x = vertices[i].x, y = vertices[i].y;
			points.push({ x:x, y:y });
			break;
		case STBTT_vline:
			x = vertices[i].x, y = vertices[i].y;
			points.push({ x:x, y:y });
			break;
		case STBTT_vcurve:
			stbtt__tesselate_curve(points, x, y, vertices[i].cx, vertices[i].cy,
								   vertices[i].x, vertices[i].y, objspace_flatness_squared, 0);
			x = vertices[i].x, y = vertices[i].y;
			break;
		case STBTT_vcubic:
			stbtt__tesselate_cubic(points, x, y, vertices[i].cx, vertices[i].cy,
								   vertices[i].cx1, vertices[i].cy1, vertices[i].x, vertices[i].y,
								   objspace_flatness_squared, 0);
			x = vertices[i].x, y = vertices[i].y;
			break;
		}
	}
	contour_lengths[n] = points.length - start;

	//console.log("--cl(" + (n+1) + '):');
	//for (var i = 0; i <= n; i++) {
	//	console.log(" %d", contour_lengths[i]);
	//}
	//console.log("\n--pts(" + points.length + '):');
	//for (var i = 0; i < points.length; i++) {
	//	var pt = points[i];
	//	console.log(i + ': ' + pt.x  + ',' + pt.y);
	//}

    return points;
}

//extern void stbtt_Rasterize(stbtt__bitmap * result, float flatness_in_pixels,
//                stbtt_vertex * vertices, int num_verts, float scale_x,
//                float scale_y, float shift_x, float shift_y, int x_off,
//                int y_off, int invert, void *userdata)
function stbtt_Rasterize(result, flatness_in_pixels, vertices, scale_x, scale_y, shift_x, shift_y,
						 x_off, y_off, invert) {
	x_off |= 0, y_off |= 0;
    var scale = scale_x > scale_y ? scale_y : scale_x,
		wcount = [],
		windings = stbtt_FlattenCurves(vertices, flatness_in_pixels / scale, wcount);
    if (windings) {
        stbtt__rasterize(result, windings, wcount, scale_x, scale_y,
						 shift_x, shift_y, x_off, y_off, invert);
    }
}

//extern void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo * info,
//                              unsigned char *output, int out_w, int out_h,
//                              int out_stride, float scale_x, float scale_y,
//                              float shift_x, float shift_y, int glyph)
function stbtt_MakeGlyphBitmapSubpixel(info, buffer, out_w, out_h, out_stride,
									scale_x, scale_y, shift_x, shift_y, glyph) {
    var vertices = stbtt_GetGlyphShape(info, glyph);
    var gbm = {};
    var rect = stbtt_GetGlyphBitmapBoxSubpixel(info, glyph, scale_x, scale_y, shift_x, shift_y);
    gbm.pixels = buffer;
    gbm.w = out_w|0;
    gbm.h = out_h|0;
    gbm.stride = out_stride|0;

    if (gbm.w && gbm.h) {
        stbtt_Rasterize(gbm, 0.35, vertices, scale_x, scale_y, shift_x, shift_y, rect.x0, rect.y0, 1);
	}
}

//extern void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo * info,
//                                  unsigned char *output, int out_w,
//                                  int out_h, int out_stride, float scale_x,
//                                  float scale_y, float shift_x,
//                                  float shift_y, int codepoint)
function stbtt_MakeCodepointBitmapSubpixel(info, buffer, out_w, out_h, out_stride,
									scale_x, scale_y, shift_x, shift_y, codepoint) {
    stbtt_MakeGlyphBitmapSubpixel(info, buffer, out_w, out_h, out_stride,
                                  scale_x, scale_y, shift_x, shift_y,
                                  stbtt_FindGlyphIndex(info, codepoint));
}

//extern int stbtt_InitFont(stbtt_fontinfo * info, const unsigned char *data, int offset)
function stbtt_InitFont(font, data, offset) {
    return stbtt_InitFont_internal(font, data, offset);
}


function InitFont(data) {
	var font = {};
    if (!stbtt_InitFont_internal(font, data, 0)) {
		return null;
	}

	var vm = stbtt_GetFontVMetrics(font);

	font.ascent = vm.ascent;
	font.descent = vm.descent;
	font.linegap = vm.linegap;

	return font;
}

function GetGlyph(font, codepoint, size_x, size_y) {
	size_y = size_y || size_x;
	var scale_x = size_x / font.ascent;
	var scale_y = size_y / font.ascent;

	var glyph = stbtt_FindGlyphIndex(font, codepoint);
	if (!glyph && codepoint) {
		return null;
	}

    var vertices = stbtt_GetGlyphShape(font, glyph);
	var rect = stbtt_GetGlyphBitmapBoxSubpixel(font, glyph, scale_x, scale_y, 0, 0);
	var width = rect.x1 - rect.x0;
	var height = rect.y1 - rect.y0;
	var pixels = null;

	if (width && height) {
		var gbm = {
			pixels : (pixels = new Uint8Array(width * height)),
			w : width,
			h : height,
			stride : width,
		}
		stbtt_Rasterize(gbm, 0.35, vertices, scale_x, scale_y, 0, 0, rect.x0, rect.y0, 1);
	}

	var hmetrics = stbtt_GetGlyphHMetrics(font, glyph);
	return {
		glyph:glyph, pixels:pixels, width:width, height:height, top:-rect.y0, left:rect.x0,
		advance:floor(hmetrics.advanceWidth * scale_x),
	}
}
function GetPaths(font, codepoint, size_x, size_y) {
	size_y = size_y || size_x;
	var scale_x = size_x / font.ascent;
	var scale_y = size_y / font.ascent;

	var glyph = stbtt_FindGlyphIndex(font, codepoint);
	if (!glyph && codepoint) {
		return null;
	}
    var vertices = stbtt_GetGlyphShape(font, glyph);
	var hmetrics = stbtt_GetGlyphHMetrics(font, glyph);

	// The hmetrics just give us advance.  We need ascent and descent as well.
	var ascent = 0;
	var descent = 0;

	// Convert to SVG notation
	var paths = [];
	if (vertices) {
		for (var i = 0, l = vertices.length; i < l; i++) {
			var v = vertices[i];
			var path;
			if (v.type == STBTT_vmove) {
				path = { type:'M', x:v.x * scale_x, y:v.y * scale_y };
			} else if (v.type == STBTT_vline) {
				path = { type:'L', x:v.x * scale_x, y:v.y * scale_y };
			} else if (v.type == STBTT_vcurve) {
				path = { type:'Q', x:v.x * scale_x, y:v.y * scale_y,
								  cx:v.cx * scale_x, cy:v.cy * scale_y };
			} else if (v.type == STBTT_vcubic) {
				path = { type:'C', x:v.x * scale_x, y:v.y * scale_y,
								 cx1:v.cx * scale_x, cy1:v.cy * scale_y,
								 cx2:v.cx1 * scale_x, cy2:v.cy1 * scale_y };
			} else {
				continue;
			}
			if (path.y > ascent)  ascent  = path.y;
			if (path.y < descent) descent = path.y;
			paths.push(path);
		}
	}

	// Add the glyph metrics to the returned array.
	paths.advance = hmetrics.advanceWidth * scale_x;
	paths.ascent  = ascent;
	paths.descent = descent;
	return paths;
}


// exports
return {
	InitFont:	InitFont,
	GetGlyph:	GetGlyph,
	GetPaths:	GetPaths,
}

})();
function toUint8Array(data) {
    if (typeof data == "string") {
        var binary = /[^A-Za-z0-9+\/=\s]/.test(data);
        var bstr = binary ? data : atob(data),
            len = bstr.length,
            bytes = new Uint8Array(len);
        for (var i = 0; i < len; i++) {
            bytes[i] = bstr.charCodeAt(i);
        }
        return bytes;
    } else if (data instanceof Uint8Array) {
        return data;
    } else if (data instanceof ArrayBuffer) {
        return new Uint8Array(data);
    }
    throw new ReferenceError("data must be a binary or base64 encoded string or Uint8Array");
}

FontLib.loadFont("OCR-A", 100, 100, "");
FontLib.loadFont("OCR-B", 96, 100, "");
    return {
        // The public interface
        toCanvas:ToCanvas, render:Render, raw:ToRaw,
        fixupOptions:FixupOptions,
        loadFont:FontLib.loadFont,
        BWIPJS_VERSION:'3.3.0 (2023-02-16)',
        BWIPP_VERSION:BWIPP_VERSION,
        // Internals
        BWIPJS:BWIPJS, STBTT:STBTT, FontLib:FontLib,
        DrawingBuiltin:DrawingBuiltin, DrawingCanvas:DrawingCanvas,
    };
}));
